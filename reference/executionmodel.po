# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Dmytro Kazanzhy, 2023
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-11-19 01:00+0000\n"
"PO-Revision-Date: 2021-06-28 01:19+0000\n"
"Last-Translator: Dmytro Kazanzhy, 2023\n"
"Language-Team: Ukrainian (https://app.transifex.com/python-doc/teams/5390/uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != 11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % 100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || (n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

#: ../../reference/executionmodel.rst:6
msgid "Execution model"
msgstr "Модель виконання"

#: ../../reference/executionmodel.rst:15
msgid "Structure of a program"
msgstr "Структура програми"

#: ../../reference/executionmodel.rst:19
msgid ""
"A Python program is constructed from code blocks. A :dfn:`block` is a piece "
"of Python program text that is executed as a unit. The following are blocks:"
" a module, a function body, and a class definition. Each command typed "
"interactively is a block.  A script file (a file given as standard input to "
"the interpreter or specified as a command line argument to the interpreter) "
"is a code block.  A script command (a command specified on the interpreter "
"command line with the :option:`-c` option) is a code block. A module run as "
"a top level script (as module ``__main__``) from the command line using a "
":option:`-m` argument is also a code block. The string argument passed to "
"the built-in functions :func:`eval` and :func:`exec` is a code block."
msgstr ""
"Програма Python складається з блоків коду. :dfn:`block` — це частина тексту "
"програми Python, яка виконується як одиниця. Це блоки: модуль, тіло функції "
"та визначення класу. Кожна команда, введена в інтерактивному режимі, є "
"блоком. Файл сценарію (файл, наданий інтерпретатору як стандартний ввід або "
"вказаний як аргумент командного рядка для інтерпретатора) є блоком коду. "
"Команда сценарію (команда, указана в командному рядку інтерпретатора з "
"опцією :option:`-c`) — це блок коду. Модуль, запущений як сценарій верхнього"
" рівня (як модуль ``__main__``) з командного рядка за допомогою аргументу "
":option:`-m`, також є блоком коду. Рядковий аргумент, який передається до "
"вбудованих функцій :func:`eval` і :func:`exec`, є блоком коду."

#: ../../reference/executionmodel.rst:33
msgid ""
"A code block is executed in an :dfn:`execution frame`.  A frame contains "
"some administrative information (used for debugging) and determines where "
"and how execution continues after the code block's execution has completed."
msgstr ""
"Блок коду виконується у :dfn:`execution frame`. Кадр містить деяку "
"адміністративну інформацію (використовується для налагодження) і визначає, "
"де і як виконання продовжується після завершення виконання блоку коду."

#: ../../reference/executionmodel.rst:40
msgid "Naming and binding"
msgstr "Називання та зв'язування"

#: ../../reference/executionmodel.rst:49
msgid "Binding of names"
msgstr "Прив'язка імен"

#: ../../reference/executionmodel.rst:55
msgid ""
":dfn:`Names` refer to objects.  Names are introduced by name binding "
"operations."
msgstr ""
":dfn:`Names` стосуються об'єктів. Імена вводяться за допомогою операцій "
"зв’язування імен."

#: ../../reference/executionmodel.rst:59
msgid "The following constructs bind names:"
msgstr "Наступні конструкції зв'язують імена:"

#: ../../reference/executionmodel.rst:61
msgid "formal parameters to functions,"
msgstr "формальні параметри функцій,"

#: ../../reference/executionmodel.rst:62
msgid "class definitions,"
msgstr "визначення класів,"

#: ../../reference/executionmodel.rst:63
msgid "function definitions,"
msgstr "визначення функцій,"

#: ../../reference/executionmodel.rst:64
msgid "assignment expressions,"
msgstr "вирази присвоєння,"

#: ../../reference/executionmodel.rst:65
msgid ""
":ref:`targets <assignment>` that are identifiers if occurring in an "
"assignment:"
msgstr ""
":ref:`targets <assignment>`, які є ідентифікаторами, якщо зустрічаються у "
"призначенні:"

#: ../../reference/executionmodel.rst:68
msgid ":keyword:`for` loop header,"
msgstr ":keyword:`for` заголовок циклу,"

#: ../../reference/executionmodel.rst:69
msgid ""
"after :keyword:`!as` in a :keyword:`with` statement, :keyword:`except` "
"clause, :keyword:`except* <except_star>` clause, or in the as-pattern in "
"structural pattern matching,"
msgstr ""

#: ../../reference/executionmodel.rst:71
msgid "in a capture pattern in structural pattern matching"
msgstr "у шаблоні захоплення в зіставленні структурного шаблону"

#: ../../reference/executionmodel.rst:73
msgid ":keyword:`import` statements."
msgstr ":keyword:`import` оператори."

#: ../../reference/executionmodel.rst:74
msgid ":keyword:`type` statements."
msgstr ""

#: ../../reference/executionmodel.rst:75
msgid ":ref:`type parameter lists <type-params>`."
msgstr ""

#: ../../reference/executionmodel.rst:77
msgid ""
"The :keyword:`!import` statement of the form ``from ... import *`` binds all"
" names defined in the imported module, except those beginning with an "
"underscore. This form may only be used at the module level."
msgstr ""
"Оператор :keyword:`!import` у формі ``from ... import *`` прив’язує всі "
"імена, визначені в імпортованому модулі, за винятком тих, що починаються з "
"підкреслення. Цю форму можна використовувати лише на рівні модуля."

#: ../../reference/executionmodel.rst:81
msgid ""
"A target occurring in a :keyword:`del` statement is also considered bound "
"for this purpose (though the actual semantics are to unbind the name)."
msgstr ""
"Ціль, що зустрічається в операторі :keyword:`del`, також вважається "
"зв’язаною для цієї мети (хоча фактична семантика полягає в тому, щоб "
"роз’єднати ім’я)."

#: ../../reference/executionmodel.rst:84
msgid ""
"Each assignment or import statement occurs within a block defined by a class"
" or function definition or at the module level (the top-level code block)."
msgstr ""
"Кожен оператор призначення або імпорту відбувається в блоці, визначеному "
"визначенням класу чи функції, або на рівні модуля (блок коду верхнього "
"рівня)."

#: ../../reference/executionmodel.rst:89
msgid ""
"If a name is bound in a block, it is a local variable of that block, unless "
"declared as :keyword:`nonlocal` or :keyword:`global`.  If a name is bound at"
" the module level, it is a global variable.  (The variables of the module "
"code block are local and global.)  If a variable is used in a code block but"
" not defined there, it is a :term:`free variable`."
msgstr ""

#: ../../reference/executionmodel.rst:95
msgid ""
"Each occurrence of a name in the program text refers to the :dfn:`binding` "
"of that name established by the following name resolution rules."
msgstr ""
"Кожне входження імені в текст програми посилається на :dfn:`binding` цього "
"імені, встановлене наступними правилами розпізнавання імен."

#: ../../reference/executionmodel.rst:101
msgid "Resolution of names"
msgstr "Розділення імен"

#: ../../reference/executionmodel.rst:105
msgid ""
"A :dfn:`scope` defines the visibility of a name within a block.  If a local "
"variable is defined in a block, its scope includes that block.  If the "
"definition occurs in a function block, the scope extends to any blocks "
"contained within the defining one, unless a contained block introduces a "
"different binding for the name."
msgstr ""
":dfn:`scope` визначає видимість імені в блоці. Якщо локальна змінна "
"визначена в блоці, її область включає цей блок. Якщо визначення міститься у "
"функціональному блоці, область поширюється на будь-які блоки, що містяться в"
" визначальному, якщо тільки блок не вводить іншу прив’язку для імені."

#: ../../reference/executionmodel.rst:113
msgid ""
"When a name is used in a code block, it is resolved using the nearest "
"enclosing scope.  The set of all such scopes visible to a code block is "
"called the block's :dfn:`environment`."
msgstr ""
"Коли ім’я використовується в блоці коду, воно розпізнається за допомогою "
"найближчої охоплюючої області. Набір усіх таких областей, видимих для блоку "
"коду, називається :dfn:`environment` блоку."

#: ../../reference/executionmodel.rst:121
msgid ""
"When a name is not found at all, a :exc:`NameError` exception is raised. If "
"the current scope is a function scope, and the name refers to a local "
"variable that has not yet been bound to a value at the point where the name "
"is used, an :exc:`UnboundLocalError` exception is raised. "
":exc:`UnboundLocalError` is a subclass of :exc:`NameError`."
msgstr ""
"Якщо ім’я взагалі не знайдено, виникає виняток :exc:`NameError`. Якщо "
"поточна область є областю функції, а ім’я посилається на локальну змінну, "
"яка ще не прив’язана до значення в точці, де використовується ім’я, виникає "
"виняток :exc:`UnboundLocalError`. :exc:`UnboundLocalError` є підкласом "
":exc:`NameError`."

#: ../../reference/executionmodel.rst:127
msgid ""
"If a name binding operation occurs anywhere within a code block, all uses of"
" the name within the block are treated as references to the current block.  "
"This can lead to errors when a name is used within a block before it is "
"bound.  This rule is subtle.  Python lacks declarations and allows name "
"binding operations to occur anywhere within a code block.  The local "
"variables of a code block can be determined by scanning the entire text of "
"the block for name binding operations. See :ref:`the FAQ entry on "
"UnboundLocalError <faq-unboundlocalerror>` for examples."
msgstr ""

#: ../../reference/executionmodel.rst:136
msgid ""
"If the :keyword:`global` statement occurs within a block, all uses of the "
"names specified in the statement refer to the bindings of those names in the"
" top-level namespace.  Names are resolved in the top-level namespace by "
"searching the global namespace, i.e. the namespace of the module containing "
"the code block, and the builtins namespace, the namespace of the module "
":mod:`builtins`.  The global namespace is searched first.  If the names are "
"not found there, the builtins namespace is searched next. If the names are "
"also not found in the builtins namespace, new variables are created in the "
"global namespace. The global statement must precede all uses of the listed "
"names."
msgstr ""

#: ../../reference/executionmodel.rst:146
msgid ""
"The :keyword:`global` statement has the same scope as a name binding "
"operation in the same block.  If the nearest enclosing scope for a free "
"variable contains a global statement, the free variable is treated as a "
"global."
msgstr ""
"Оператор :keyword:`global` має ту саму область дії, що й операція прив’язки "
"імені в тому самому блоці. Якщо найближча охоплююча область для вільної "
"змінної містить глобальний оператор, вільна змінна розглядається як "
"глобальна."

#: ../../reference/executionmodel.rst:152
msgid ""
"The :keyword:`nonlocal` statement causes corresponding names to refer to "
"previously bound variables in the nearest enclosing function scope. "
":exc:`SyntaxError` is raised at compile time if the given name does not "
"exist in any enclosing function scope. :ref:`Type parameters <type-params>` "
"cannot be rebound with the :keyword:`!nonlocal` statement."
msgstr ""

#: ../../reference/executionmodel.rst:160
msgid ""
"The namespace for a module is automatically created the first time a module "
"is imported.  The main module for a script is always called :mod:`__main__`."
msgstr ""
"Простір імен для модуля створюється автоматично під час першого імпорту "
"модуля. Основний модуль для сценарію завжди називається :mod:`__main__`."

#: ../../reference/executionmodel.rst:163
msgid ""
"Class definition blocks and arguments to :func:`exec` and :func:`eval` are "
"special in the context of name resolution. A class definition is an "
"executable statement that may use and define names. These references follow "
"the normal rules for name resolution with an exception that unbound local "
"variables are looked up in the global namespace. The namespace of the class "
"definition becomes the attribute dictionary of the class. The scope of names"
" defined in a class block is limited to the class block; it does not extend "
"to the code blocks of methods. This includes comprehensions and generator "
"expressions, but it does not include :ref:`annotation scopes <annotation-"
"scopes>`, which have access to their enclosing class scopes. This means that"
" the following will fail::"
msgstr ""

#: ../../reference/executionmodel.rst:176
msgid ""
"class A:\n"
"    a = 42\n"
"    b = list(a + i for i in range(10))"
msgstr ""

#: ../../reference/executionmodel.rst:180
msgid "However, the following will succeed::"
msgstr ""

#: ../../reference/executionmodel.rst:182
msgid ""
"class A:\n"
"    type Alias = Nested\n"
"    class Nested: pass\n"
"\n"
"print(A.Alias.__value__)  # <type 'A.Nested'>"
msgstr ""

#: ../../reference/executionmodel.rst:191
msgid "Annotation scopes"
msgstr ""

#: ../../reference/executionmodel.rst:193
msgid ""
":ref:`Type parameter lists <type-params>` and :keyword:`type` statements "
"introduce *annotation scopes*, which behave mostly like function scopes, but"
" with some exceptions discussed below. :term:`Annotations <annotation>` "
"currently do not use annotation scopes, but they are expected to use "
"annotation scopes in Python 3.13 when :pep:`649` is implemented."
msgstr ""

#: ../../reference/executionmodel.rst:199
msgid "Annotation scopes are used in the following contexts:"
msgstr ""

#: ../../reference/executionmodel.rst:201
msgid ""
"Type parameter lists for :ref:`generic type aliases <generic-type-aliases>`."
msgstr ""

#: ../../reference/executionmodel.rst:202
msgid ""
"Type parameter lists for :ref:`generic functions <generic-functions>`. A "
"generic function's annotations are executed within the annotation scope, but"
" its defaults and decorators are not."
msgstr ""

#: ../../reference/executionmodel.rst:205
msgid ""
"Type parameter lists for :ref:`generic classes <generic-classes>`. A generic"
" class's base classes and keyword arguments are executed within the "
"annotation scope, but its decorators are not."
msgstr ""

#: ../../reference/executionmodel.rst:208
msgid ""
"The bounds, constraints, and default values for type parameters "
"(:ref:`lazily evaluated <lazy-evaluation>`)."
msgstr ""

#: ../../reference/executionmodel.rst:210
msgid "The value of type aliases (:ref:`lazily evaluated <lazy-evaluation>`)."
msgstr ""

#: ../../reference/executionmodel.rst:212
msgid "Annotation scopes differ from function scopes in the following ways:"
msgstr ""

#: ../../reference/executionmodel.rst:214
msgid ""
"Annotation scopes have access to their enclosing class namespace. If an "
"annotation scope is immediately within a class scope, or within another "
"annotation scope that is immediately within a class scope, the code in the "
"annotation scope can use names defined in the class scope as if it were "
"executed directly within the class body. This contrasts with regular "
"functions defined within classes, which cannot access names defined in the "
"class scope."
msgstr ""

#: ../../reference/executionmodel.rst:220
msgid ""
"Expressions in annotation scopes cannot contain :keyword:`yield`, ``yield "
"from``, :keyword:`await`, or :token:`:= <python-"
"grammar:assignment_expression>` expressions. (These expressions are allowed "
"in other scopes contained within the annotation scope.)"
msgstr ""

#: ../../reference/executionmodel.rst:224
msgid ""
"Names defined in annotation scopes cannot be rebound with "
":keyword:`nonlocal` statements in inner scopes. This includes only type "
"parameters, as no other syntactic elements that can appear within annotation"
" scopes can introduce new names."
msgstr ""

#: ../../reference/executionmodel.rst:227
msgid ""
"While annotation scopes have an internal name, that name is not reflected in"
" the :term:`qualified name` of objects defined within the scope. Instead, "
"the :attr:`~definition.__qualname__` of such objects is as if the object "
"were defined in the enclosing scope."
msgstr ""

#: ../../reference/executionmodel.rst:232
msgid ""
"Annotation scopes were introduced in Python 3.12 as part of :pep:`695`."
msgstr ""

#: ../../reference/executionmodel.rst:235
msgid ""
"Annotation scopes are also used for type parameter defaults, as introduced "
"by :pep:`696`."
msgstr ""

#: ../../reference/executionmodel.rst:242
msgid "Lazy evaluation"
msgstr ""

#: ../../reference/executionmodel.rst:244
msgid ""
"The values of type aliases created through the :keyword:`type` statement are"
" *lazily evaluated*. The same applies to the bounds, constraints, and "
"default values of type variables created through the :ref:`type parameter "
"syntax <type-params>`. This means that they are not evaluated when the type "
"alias or type variable is created. Instead, they are only evaluated when "
"doing so is necessary to resolve an attribute access."
msgstr ""

#: ../../reference/executionmodel.rst:251
msgid "Example:"
msgstr "приклад:"

#: ../../reference/executionmodel.rst:253
msgid ""
">>> type Alias = 1/0\n"
">>> Alias.__value__\n"
"Traceback (most recent call last):\n"
"  ...\n"
"ZeroDivisionError: division by zero\n"
">>> def func[T: 1/0](): pass\n"
">>> T = func.__type_params__[0]\n"
">>> T.__bound__\n"
"Traceback (most recent call last):\n"
"  ...\n"
"ZeroDivisionError: division by zero"
msgstr ""

#: ../../reference/executionmodel.rst:267
msgid ""
"Here the exception is raised only when the ``__value__`` attribute of the "
"type alias or the ``__bound__`` attribute of the type variable is accessed."
msgstr ""

#: ../../reference/executionmodel.rst:271
msgid ""
"This behavior is primarily useful for references to types that have not yet "
"been defined when the type alias or type variable is created. For example, "
"lazy evaluation enables creation of mutually recursive type aliases::"
msgstr ""

#: ../../reference/executionmodel.rst:275
msgid ""
"from typing import Literal\n"
"\n"
"type SimpleExpr = int | Parenthesized\n"
"type Parenthesized = tuple[Literal[\"(\"], Expr, Literal[\")\"]]\n"
"type Expr = SimpleExpr | tuple[SimpleExpr, Literal[\"+\", \"-\"], Expr]"
msgstr ""

#: ../../reference/executionmodel.rst:281
msgid ""
"Lazily evaluated values are evaluated in :ref:`annotation scope <annotation-"
"scopes>`, which means that names that appear inside the lazily evaluated "
"value are looked up as if they were used in the immediately enclosing scope."
msgstr ""

#: ../../reference/executionmodel.rst:290
msgid "Builtins and restricted execution"
msgstr "Вбудоване та обмежене виконання"

#: ../../reference/executionmodel.rst:296
msgid ""
"Users should not touch ``__builtins__``; it is strictly an implementation "
"detail.  Users wanting to override values in the builtins namespace should "
":keyword:`import` the :mod:`builtins` module and modify its attributes "
"appropriately."
msgstr ""
"Користувачі не повинні торкатися ``__builtins__``; це суто деталь "
"реалізації. Користувачі, які хочуть змінити значення у просторі імен "
"вбудованих модулів, повинні :keyword:`import` модуль :mod:`builtins` і "
"відповідним чином змінити його атрибути."

#: ../../reference/executionmodel.rst:301
msgid ""
"The builtins namespace associated with the execution of a code block is "
"actually found by looking up the name ``__builtins__`` in its global "
"namespace; this should be a dictionary or a module (in the latter case the "
"module's dictionary is used).  By default, when in the :mod:`__main__` "
"module, ``__builtins__`` is the built-in module :mod:`builtins`; when in any"
" other module, ``__builtins__`` is an alias for the dictionary of the "
":mod:`builtins` module itself."
msgstr ""
"Простір вбудованих імен, пов’язаний із виконанням блоку коду, фактично можна"
" знайти шляхом пошуку назви ``__builtins__`` у його глобальному просторі "
"імен; це має бути словник або модуль (в останньому випадку використовується "
"словник модуля). За замовчуванням у модулі :mod:`__main__` ``__builtins__`` "
"є вбудованим модулем :mod:`builtins`; у будь-якому іншому модулі "
"``__builtins__`` є псевдонімом для словника самого модуля :mod:`builtins`."

#: ../../reference/executionmodel.rst:313
msgid "Interaction with dynamic features"
msgstr "Взаємодія з динамічними функціями"

#: ../../reference/executionmodel.rst:315
msgid ""
"Name resolution of free variables occurs at runtime, not at compile time. "
"This means that the following code will print 42::"
msgstr ""
"Розділення імен вільних змінних відбувається під час виконання, а не під час"
" компіляції. Це означає, що наступний код виведе 42::"

#: ../../reference/executionmodel.rst:318
msgid ""
"i = 10\n"
"def f():\n"
"    print(i)\n"
"i = 42\n"
"f()"
msgstr ""

#: ../../reference/executionmodel.rst:326
msgid ""
"The :func:`eval` and :func:`exec` functions do not have access to the full "
"environment for resolving names.  Names may be resolved in the local and "
"global namespaces of the caller.  Free variables are not resolved in the "
"nearest enclosing namespace, but in the global namespace.  [#]_ The "
":func:`exec` and :func:`eval` functions have optional arguments to override "
"the global and local namespace.  If only one namespace is specified, it is "
"used for both."
msgstr ""
"Функції :func:`eval` і :func:`exec` не мають доступу до повного середовища "
"для розпізнавання імен. Імена можуть бути дозволені в локальному та "
"глобальному просторах імен абонента. Вільні змінні вирішуються не в "
"найближчому охоплюючому просторі імен, а в глобальному просторі імен. [#]_ "
"Функції :func:`exec` і :func:`eval` мають додаткові аргументи для заміни "
"глобального та локального простору імен. Якщо вказано лише один простір "
"імен, він використовується для обох."

#: ../../reference/executionmodel.rst:340
msgid "Exceptions"
msgstr "Винятки"

#: ../../reference/executionmodel.rst:351
msgid ""
"Exceptions are a means of breaking out of the normal flow of control of a "
"code block in order to handle errors or other exceptional conditions.  An "
"exception is *raised* at the point where the error is detected; it may be "
"*handled* by the surrounding code block or by any code block that directly "
"or indirectly invoked the code block where the error occurred."
msgstr ""
"Винятки — це засіб виходу зі звичайного потоку керування блоком коду для "
"обробки помилок або інших виняткових умов. Виняток *викликається* в точці, "
"де виявлено помилку; вона може *оброблятися* навколишнім блоком коду або "
"будь-яким блоком коду, який прямо чи опосередковано викликав блок коду, де "
"сталася помилка."

#: ../../reference/executionmodel.rst:357
msgid ""
"The Python interpreter raises an exception when it detects a run-time error "
"(such as division by zero).  A Python program can also explicitly raise an "
"exception with the :keyword:`raise` statement. Exception handlers are "
"specified with the :keyword:`try` ... :keyword:`except` statement.  The "
":keyword:`finally` clause of such a statement can be used to specify cleanup"
" code which does not handle the exception, but is executed whether an "
"exception occurred or not in the preceding code."
msgstr ""
"Інтерпретатор Python викликає виняток, коли виявляє помилку під час "
"виконання (наприклад, ділення на нуль). Програма на Python також може явно "
"викликати виняток за допомогою оператора :keyword:`raise`. Обробники "
"винятків визначаються оператором :keyword:`try` ... :keyword:`except`. "
"Речення :keyword:`finally` такого оператора можна використовувати для "
"визначення коду очищення, який не обробляє виняток, але виконується "
"незалежно від того, чи виникла виняток у попередньому коді."

#: ../../reference/executionmodel.rst:367
msgid ""
"Python uses the \"termination\" model of error handling: an exception "
"handler can find out what happened and continue execution at an outer level,"
" but it cannot repair the cause of the error and retry the failing operation"
" (except by re-entering the offending piece of code from the top)."
msgstr ""
"Python використовує модель \"припинення\" обробки помилок: обробник винятків"
" може дізнатися, що сталося, і продовжити виконання на зовнішньому рівні, "
"але він не може виправити причину помилки та повторити невдалу операцію (за "
"винятком повторного введення несправної частини коду зверху)."

#: ../../reference/executionmodel.rst:374
msgid ""
"When an exception is not handled at all, the interpreter terminates "
"execution of the program, or returns to its interactive main loop.  In "
"either case, it prints a stack traceback, except when the exception is "
":exc:`SystemExit`."
msgstr ""
"Якщо виняток взагалі не обробляється, інтерпретатор припиняє виконання "
"програми або повертається до основного інтерактивного циклу. У будь-якому "
"випадку він друкує зворотне трасування стека, за винятком випадків, коли "
"винятком є :exc:`SystemExit`."

#: ../../reference/executionmodel.rst:378
msgid ""
"Exceptions are identified by class instances.  The :keyword:`except` clause "
"is selected depending on the class of the instance: it must reference the "
"class of the instance or a :term:`non-virtual base class <abstract base "
"class>` thereof. The instance can be received by the handler and can carry "
"additional information about the exceptional condition."
msgstr ""
"Винятки визначаються екземплярами класу. Речення :keyword:`except` "
"вибирається залежно від класу примірника: воно має посилатися на клас "
"примірника або його :term:`невіртуальний базовий клас <abstract base "
"class>`. Примірник може бути отриманий обробником і може містити додаткову "
"інформацію про винятковий стан."

#: ../../reference/executionmodel.rst:386
msgid ""
"Exception messages are not part of the Python API.  Their contents may "
"change from one version of Python to the next without warning and should not"
" be relied on by code which will run under multiple versions of the "
"interpreter."
msgstr ""
"Повідомлення про винятки не є частиною API Python. Їх вміст може змінюватися"
" від однієї версії Python до іншої без попередження, і на нього не слід "
"покладатися кодом, який працюватиме під кількома версіями інтерпретатора."

#: ../../reference/executionmodel.rst:390
msgid ""
"See also the description of the :keyword:`try` statement in section "
":ref:`try` and :keyword:`raise` statement in section :ref:`raise`."
msgstr ""
"Дивіться також опис оператора :keyword:`try` у розділі :ref:`try` та "
"оператора :keyword:`raise` у розділі :ref:`raise`."

#: ../../reference/executionmodel.rst:395
msgid "Footnotes"
msgstr "Виноски"

#: ../../reference/executionmodel.rst:396
msgid ""
"This limitation occurs because the code that is executed by these operations"
" is not available at the time the module is compiled."
msgstr ""
"Це обмеження виникає через те, що код, який виконується цими операціями, "
"недоступний під час компіляції модуля."

#: ../../reference/executionmodel.rst:8
msgid "execution model"
msgstr ""

#: ../../reference/executionmodel.rst:8
msgid "code"
msgstr "код"

#: ../../reference/executionmodel.rst:8 ../../reference/executionmodel.rst:17
msgid "block"
msgstr ""

#: ../../reference/executionmodel.rst:31
#: ../../reference/executionmodel.rst:292
msgid "execution"
msgstr ""

#: ../../reference/executionmodel.rst:31
msgid "frame"
msgstr "frame"

#: ../../reference/executionmodel.rst:42
msgid "namespace"
msgstr "простір імен"

#: ../../reference/executionmodel.rst:42
#: ../../reference/executionmodel.rst:103
msgid "scope"
msgstr ""

#: ../../reference/executionmodel.rst:51
msgid "name"
msgstr "name"

#: ../../reference/executionmodel.rst:51
msgid "binding"
msgstr ""

#: ../../reference/executionmodel.rst:57
msgid "from"
msgstr "від"

#: ../../reference/executionmodel.rst:57
msgid "import statement"
msgstr ""

#: ../../reference/executionmodel.rst:87
msgid "free"
msgstr ""

#: ../../reference/executionmodel.rst:87
msgid "variable"
msgstr "змінна"

#: ../../reference/executionmodel.rst:111
msgid "environment"
msgstr ""

#: ../../reference/executionmodel.rst:117
msgid "NameError (built-in exception)"
msgstr ""

#: ../../reference/executionmodel.rst:117
msgid "UnboundLocalError"
msgstr ""

#: ../../reference/executionmodel.rst:158
msgid "module"
msgstr "модуль"

#: ../../reference/executionmodel.rst:158
msgid "__main__"
msgstr ""

#: ../../reference/executionmodel.rst:292
msgid "restricted"
msgstr ""

#: ../../reference/executionmodel.rst:342
msgid "exception"
msgstr ""

#: ../../reference/executionmodel.rst:344
msgid "raise an exception"
msgstr ""

#: ../../reference/executionmodel.rst:344
msgid "handle an exception"
msgstr ""

#: ../../reference/executionmodel.rst:344
msgid "exception handler"
msgstr ""

#: ../../reference/executionmodel.rst:344
msgid "errors"
msgstr ""

#: ../../reference/executionmodel.rst:344
msgid "error handling"
msgstr ""

#: ../../reference/executionmodel.rst:365
msgid "termination model"
msgstr ""

#: ../../reference/executionmodel.rst:372
msgid "SystemExit (built-in exception)"
msgstr ""
