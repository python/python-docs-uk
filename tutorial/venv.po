# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Dmytro Kazanzhy, 2022
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-11-19 01:00+0000\n"
"PO-Revision-Date: 2021-06-28 01:50+0000\n"
"Last-Translator: Dmytro Kazanzhy, 2022\n"
"Language-Team: Ukrainian (https://app.transifex.com/python-doc/teams/5390/uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != 11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % 100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || (n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

#: ../../tutorial/venv.rst:6
msgid "Virtual Environments and Packages"
msgstr "Віртуальні середовища та пакети"

#: ../../tutorial/venv.rst:9
msgid "Introduction"
msgstr "вступ"

#: ../../tutorial/venv.rst:11
msgid ""
"Python applications will often use packages and modules that don't come as "
"part of the standard library.  Applications will sometimes need a specific "
"version of a library, because the application may require that a particular "
"bug has been fixed or the application may be written using an obsolete "
"version of the library's interface."
msgstr ""
"Програми Python часто використовують пакети та модулі, які не є частиною "
"стандартної бібліотеки. Програмам іноді потрібна конкретна версія "
"бібліотеки, тому що програма може вимагати виправлення певної помилки або "
"програма може бути написана з використанням застарілої версії інтерфейсу "
"бібліотеки."

#: ../../tutorial/venv.rst:17
msgid ""
"This means it may not be possible for one Python installation to meet the "
"requirements of every application.  If application A needs version 1.0 of a "
"particular module but application B needs version 2.0, then the requirements"
" are in conflict and installing either version 1.0 or 2.0 will leave one "
"application unable to run."
msgstr ""
"Це означає, що одна установка Python може не відповідати вимогам кожної "
"програми. Якщо програмі A потрібна версія 1.0 певного модуля, а програмі B "
"потрібна версія 2.0, тоді вимоги суперечать, і встановлення версії 1.0 або "
"2.0 призведе до того, що одна програма не зможе працювати."

#: ../../tutorial/venv.rst:23
msgid ""
"The solution for this problem is to create a :term:`virtual environment`, a "
"self-contained directory tree that contains a Python installation for a "
"particular version of Python, plus a number of additional packages."
msgstr ""
"Рішенням цієї проблеми є створення :term:`virtual environment`, самостійного"
" дерева каталогів, яке містить інсталяцію Python для певної версії Python, а"
" також низку додаткових пакетів."

#: ../../tutorial/venv.rst:27
msgid ""
"Different applications can then use different virtual environments. To "
"resolve the earlier example of conflicting requirements, application A can "
"have its own virtual environment with version 1.0 installed while "
"application B has another virtual environment with version 2.0. If "
"application B requires a library be upgraded to version 3.0, this will not "
"affect application A's environment."
msgstr ""
"Тоді різні програми можуть використовувати різні віртуальні середовища. Щоб "
"вирішити попередній приклад суперечливих вимог, програма A може мати власне "
"віртуальне середовище з версією 1.0, а програма B має інше віртуальне "
"середовище з версією 2.0. Якщо програма B потребує оновлення бібліотеки до "
"версії 3.0, це не вплине на середовище програми A."

#: ../../tutorial/venv.rst:36
msgid "Creating Virtual Environments"
msgstr "Створення віртуальних середовищ"

#: ../../tutorial/venv.rst:38
msgid ""
"The module used to create and manage virtual environments is called "
":mod:`venv`.  :mod:`venv` will install the Python version from which the "
"command was run (as reported by the :option:`--version` option). For "
"instance, executing the command with ``python3.12`` will install version "
"3.12."
msgstr ""

#: ../../tutorial/venv.rst:44
msgid ""
"To create a virtual environment, decide upon a directory where you want to "
"place it, and run the :mod:`venv` module as a script with the directory "
"path::"
msgstr ""
"Щоб створити віртуальне середовище, виберіть каталог, куди ви хочете його "
"розмістити, і запустіть модуль :mod:`venv` як сценарій із шляхом до "
"каталогу::"

#: ../../tutorial/venv.rst:47
msgid "python -m venv tutorial-env"
msgstr ""

#: ../../tutorial/venv.rst:49
msgid ""
"This will create the ``tutorial-env`` directory if it doesn't exist, and "
"also create directories inside it containing a copy of the Python "
"interpreter and various supporting files."
msgstr ""
"Це створить каталог ``tutorial-env``, якщо він не існує, а також створить "
"каталоги всередині нього, що містять копію інтерпретатора Python і різні "
"допоміжні файли."

#: ../../tutorial/venv.rst:53
msgid ""
"A common directory location for a virtual environment is ``.venv``. This "
"name keeps the directory typically hidden in your shell and thus out of the "
"way while giving it a name that explains why the directory exists. It also "
"prevents clashing with ``.env`` environment variable definition files that "
"some tooling supports."
msgstr ""
"Загальним розташуванням каталогу для віртуального середовища є ``.venv``. Ця"
" назва зберігає каталог, як правило, прихованим у вашій оболонці і, таким "
"чином, не заважаючи, водночас надаючи йому назву, яка пояснює, чому каталог "
"існує. Це також запобігає зіткненню з файлами визначення змінних середовища "
"``.env``, які підтримують деякі інструменти."

#: ../../tutorial/venv.rst:59
msgid "Once you've created a virtual environment, you may activate it."
msgstr "Створивши віртуальне середовище, ви можете його активувати."

#: ../../tutorial/venv.rst:61
msgid "On Windows, run::"
msgstr "У Windows запустіть::"

#: ../../tutorial/venv.rst:63
msgid "tutorial-env\\Scripts\\activate"
msgstr ""

#: ../../tutorial/venv.rst:65
msgid "On Unix or MacOS, run::"
msgstr "В Unix або MacOS запустіть:"

#: ../../tutorial/venv.rst:67
msgid "source tutorial-env/bin/activate"
msgstr ""

#: ../../tutorial/venv.rst:69
msgid ""
"(This script is written for the bash shell.  If you use the :program:`csh` "
"or :program:`fish` shells, there are alternate ``activate.csh`` and "
"``activate.fish`` scripts you should use instead.)"
msgstr ""
"(Цей сценарій написаний для оболонки bash. Якщо ви використовуєте оболонки "
":program:`csh` або :program:`fish`, існують альтернативні сценарії "
"``activate.csh`` і ``activate.fish``, які вам слід використовувати замість "
"цього.)"

#: ../../tutorial/venv.rst:74
msgid ""
"Activating the virtual environment will change your shell's prompt to show "
"what virtual environment you're using, and modify the environment so that "
"running ``python`` will get you that particular version and installation of "
"Python. For example:"
msgstr ""
"Активація віртуального середовища змінить підказку вашої оболонки, щоб "
"показати, яке віртуальне середовище ви використовуєте, і змінить середовище "
"таким чином, що запуск ``python`` дасть вам цю конкретну версію та "
"інсталяцію Python. Наприклад:"

#: ../../tutorial/venv.rst:79
msgid ""
"$ source ~/envs/tutorial-env/bin/activate\n"
"(tutorial-env) $ python\n"
"Python 3.5.1 (default, May  6 2016, 10:59:36)\n"
"  ...\n"
">>> import sys\n"
">>> sys.path\n"
"['', '/usr/local/lib/python35.zip', ...,\n"
"'~/envs/tutorial-env/lib/python3.5/site-packages']\n"
">>>"
msgstr ""

#: ../../tutorial/venv.rst:91
msgid "To deactivate a virtual environment, type::"
msgstr ""

#: ../../tutorial/venv.rst:93
msgid "deactivate"
msgstr ""

#: ../../tutorial/venv.rst:95
msgid "into the terminal."
msgstr ""

#: ../../tutorial/venv.rst:98
msgid "Managing Packages with pip"
msgstr "Керування пакетами за допомогою pip"

#: ../../tutorial/venv.rst:100
msgid ""
"You can install, upgrade, and remove packages using a program called "
":program:`pip`.  By default ``pip`` will install packages from the `Python "
"Package Index <https://pypi.org>`_.  You can browse the Python Package Index"
" by going to it in your web browser."
msgstr ""

#: ../../tutorial/venv.rst:105
msgid ""
"``pip`` has a number of subcommands: \"install\", \"uninstall\", \"freeze\","
" etc.  (Consult the :ref:`installing-index` guide for complete documentation"
" for ``pip``.)"
msgstr ""
"``pip`` має низку підкоманд: \"встановити\", \"видалити\", \"заморозити\" "
"тощо. (Зверніться до посібника :ref:`installing-index`, щоб отримати повну "
"документацію для ``pip``.)"

#: ../../tutorial/venv.rst:109
msgid ""
"You can install the latest version of a package by specifying a package's "
"name:"
msgstr "Ви можете встановити останню версію пакета, вказавши назву пакета:"

#: ../../tutorial/venv.rst:111
msgid ""
"(tutorial-env) $ python -m pip install novas\n"
"Collecting novas\n"
"  Downloading novas-3.1.1.3.tar.gz (136kB)\n"
"Installing collected packages: novas\n"
"  Running setup.py install for novas\n"
"Successfully installed novas-3.1.1.3"
msgstr ""

#: ../../tutorial/venv.rst:120
msgid ""
"You can also install a specific version of a package by giving the package "
"name  followed by ``==`` and the version number:"
msgstr ""
"Ви також можете встановити певну версію пакета, вказавши ім’я пакета, а "
"потім ``==`` і номер версії:"

#: ../../tutorial/venv.rst:123
msgid ""
"(tutorial-env) $ python -m pip install requests==2.6.0\n"
"Collecting requests==2.6.0\n"
"  Using cached requests-2.6.0-py2.py3-none-any.whl\n"
"Installing collected packages: requests\n"
"Successfully installed requests-2.6.0"
msgstr ""

#: ../../tutorial/venv.rst:131
msgid ""
"If you re-run this command, ``pip`` will notice that the requested version "
"is already installed and do nothing.  You can supply a different version "
"number to get that version, or you can run ``python -m pip install "
"--upgrade`` to upgrade the package to the latest version:"
msgstr ""

#: ../../tutorial/venv.rst:136
msgid ""
"(tutorial-env) $ python -m pip install --upgrade requests\n"
"Collecting requests\n"
"Installing collected packages: requests\n"
"  Found existing installation: requests 2.6.0\n"
"    Uninstalling requests-2.6.0:\n"
"      Successfully uninstalled requests-2.6.0\n"
"Successfully installed requests-2.7.0"
msgstr ""

#: ../../tutorial/venv.rst:146
msgid ""
"``python -m pip uninstall`` followed by one or more package names will "
"remove the packages from the virtual environment."
msgstr ""

#: ../../tutorial/venv.rst:149
msgid ""
"``python -m pip show`` will display information about a particular package:"
msgstr ""

#: ../../tutorial/venv.rst:151
msgid ""
"(tutorial-env) $ python -m pip show requests\n"
"---\n"
"Metadata-Version: 2.0\n"
"Name: requests\n"
"Version: 2.7.0\n"
"Summary: Python HTTP for Humans.\n"
"Home-page: http://python-requests.org\n"
"Author: Kenneth Reitz\n"
"Author-email: me@kennethreitz.com\n"
"License: Apache 2.0\n"
"Location: /Users/akuchling/envs/tutorial-env/lib/python3.4/site-packages\n"
"Requires:"
msgstr ""

#: ../../tutorial/venv.rst:166
msgid ""
"``python -m pip list`` will display all of the packages installed in the "
"virtual environment:"
msgstr ""

#: ../../tutorial/venv.rst:169
msgid ""
"(tutorial-env) $ python -m pip list\n"
"novas (3.1.1.3)\n"
"numpy (1.9.2)\n"
"pip (7.0.3)\n"
"requests (2.7.0)\n"
"setuptools (16.0)"
msgstr ""

#: ../../tutorial/venv.rst:178
msgid ""
"``python -m pip freeze`` will produce a similar list of the installed "
"packages, but the output uses the format that ``python -m pip install`` "
"expects. A common convention is to put this list in a ``requirements.txt`` "
"file:"
msgstr ""

#: ../../tutorial/venv.rst:182
msgid ""
"(tutorial-env) $ python -m pip freeze > requirements.txt\n"
"(tutorial-env) $ cat requirements.txt\n"
"novas==3.1.1.3\n"
"numpy==1.9.2\n"
"requests==2.7.0"
msgstr ""

#: ../../tutorial/venv.rst:190
msgid ""
"The ``requirements.txt`` can then be committed to version control and "
"shipped as part of an application.  Users can then install all the necessary"
" packages with ``install -r``:"
msgstr ""
"Після цього ``requirements.txt`` можна закріпити для контролю версій і "
"відправити як частину програми. Потім користувачі можуть інсталювати всі "
"необхідні пакети за допомогою ``install -r``:"

#: ../../tutorial/venv.rst:194
msgid ""
"(tutorial-env) $ python -m pip install -r requirements.txt\n"
"Collecting novas==3.1.1.3 (from -r requirements.txt (line 1))\n"
"  ...\n"
"Collecting numpy==1.9.2 (from -r requirements.txt (line 2))\n"
"  ...\n"
"Collecting requests==2.7.0 (from -r requirements.txt (line 3))\n"
"  ...\n"
"Installing collected packages: novas, numpy, requests\n"
"  Running setup.py install for novas\n"
"Successfully installed novas-3.1.1.3 numpy-1.9.2 requests-2.7.0"
msgstr ""

#: ../../tutorial/venv.rst:207
msgid ""
"``pip`` has many more options.  Consult the :ref:`installing-index` guide "
"for complete documentation for ``pip``.  When you've written a package and "
"want to make it available on the Python Package Index, consult the `Python "
"packaging user guide`_."
msgstr ""
