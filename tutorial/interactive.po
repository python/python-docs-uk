# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Dmytro Kazanzhy, 2022
# Yuliia Shevchenko, 2024
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-11-22 14:17+0000\n"
"PO-Revision-Date: 2021-06-28 01:50+0000\n"
"Last-Translator: Yuliia Shevchenko, 2024\n"
"Language-Team: Ukrainian (https://app.transifex.com/python-doc/teams/5390/uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != 11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % 100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || (n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

#: ../../tutorial/interactive.rst:5
msgid "Interactive Input Editing and History Substitution"
msgstr "Інтерактивне редагування введення та заміна історії"

#: ../../tutorial/interactive.rst:7
msgid ""
"Some versions of the Python interpreter support editing of the current input"
" line and history substitution, similar to facilities found in the Korn "
"shell and the GNU Bash shell.  This is implemented using the `GNU Readline`_"
" library, which supports various styles of editing.  This library has its "
"own documentation which we won't duplicate here."
msgstr ""
"Деякі версії інтерпретатора Python підтримують редагування поточного рядка "
"введення та заміну історії, подібно до можливостей оболонки Korn і оболонки "
"GNU Bash. Це реалізовано за допомогою бібліотеки `GNU Readline`_, яка "
"підтримує різні стилі редагування. Ця бібліотека має власну документацію, "
"яку ми не будемо тут дублювати."

#: ../../tutorial/interactive.rst:17
msgid "Tab Completion and History Editing"
msgstr "Доповнення вкладок і редагування історії"

#: ../../tutorial/interactive.rst:19
msgid ""
"Completion of variable and module names is :ref:`automatically enabled "
"<rlcompleter-config>` at interpreter startup so that the :kbd:`Tab` key "
"invokes the completion function; it looks at Python statement names, the "
"current local variables, and the available module names.  For dotted "
"expressions such as ``string.a``, it will evaluate the expression up to the "
"final ``'.'`` and then suggest completions from the attributes of the "
"resulting object.  Note that this may execute application-defined code if an"
" object with a :meth:`~object.__getattr__` method is part of the expression."
"  The default configuration also saves your history into a file named "
":file:`.python_history` in your user directory. The history will be "
"available again during the next interactive interpreter session."
msgstr ""
"Завершення імен змінних та модулів :ref:автоматично вмикається<rlcompleter-"
"config>` під час запуску інтерпретатора, так що клавіша :kbd:`Tab` викликає "
"функцію завершення; вона перевіряє імена операторів Python, поточні локальні"
" змінні та доступні імена модулів. Для крапкових виразів, таких як "
"``string.a``, вона обчислить вираз до останньої ``'.'`` та потім запропонує "
"завершення з атрибутів отриманого об'єкта. Зверніть увагу, що це може "
"виконати код, визначений у програмі, якщо об'єкт з методом "
":meth:`~object.__getattr__` є частиною виразу. За замовчуванням конфігурація"
" також зберігає вашу історію у файл з ім'ям :file:`.python_history` у вашому"
" користувацькому каталозі. Історія буде доступна знову під час наступної "
"сесії інтерактивного інтерпретатора."

#: ../../tutorial/interactive.rst:36
msgid "Alternatives to the Interactive Interpreter"
msgstr "Альтернативи інтерактивному інтерпретатору"

#: ../../tutorial/interactive.rst:38
msgid ""
"This facility is an enormous step forward compared to earlier versions of "
"the interpreter; however, some wishes are left: It would be nice if the "
"proper indentation were suggested on continuation lines (the parser knows if"
" an indent token is required next).  The completion mechanism might use the "
"interpreter's symbol table.  A command to check (or even suggest) matching "
"parentheses, quotes, etc., would also be useful."
msgstr ""
"Ця можливість є величезним кроком вперед порівняно з попередніми версіями "
"інтерпретатора; проте залишилися деякі побажання: було б чудово, якби "
"належний відступ був запропонований у рядках продовження (аналізатор знає, "
"чи потрібен маркер відступу далі). Механізм завершення може використовувати "
"таблицю символів інтерпретатора. Команда для перевірки (або навіть "
"пропозиції) відповідності дужок, лапок тощо також буде корисною."

#: ../../tutorial/interactive.rst:45
msgid ""
"One alternative enhanced interactive interpreter that has been around for "
"quite some time is IPython_, which features tab completion, object "
"exploration and advanced history management.  It can also be thoroughly "
"customized and embedded into other applications.  Another similar enhanced "
"interactive environment is bpython_."
msgstr ""
"Одним з альтернативних розширених інтерактивних інтерпретаторів, який існує "
"вже досить давно, є IPython_, який включає завершення вкладок, дослідження "
"об’єктів і розширене керування історією. Його також можна ретельно "
"налаштувати та вбудувати в інші програми. Ще одне подібне розширене "
"інтерактивне середовище — bpython_."
