# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Dmytro Kazanzhy, 2022
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-11-19 01:00+0000\n"
"PO-Revision-Date: 2021-06-28 00:52+0000\n"
"Last-Translator: Dmytro Kazanzhy, 2022\n"
"Language-Team: Ukrainian (https://app.transifex.com/python-doc/teams/5390/uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != 11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % 100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || (n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

#: ../../faq/windows.rst:9
msgid "Python on Windows FAQ"
msgstr "Поширені запитання про Python у Windows"

#: ../../faq/windows.rst:12
msgid "Contents"
msgstr "Зміст"

#: ../../faq/windows.rst:22
msgid "How do I run a Python program under Windows?"
msgstr "Як запустити програму Python під Windows?"

#: ../../faq/windows.rst:24
msgid ""
"This is not necessarily a straightforward question. If you are already "
"familiar with running programs from the Windows command line then everything"
" will seem obvious; otherwise, you might need a little more guidance."
msgstr ""
"Це не обов’язково однозначне запитання. Якщо ви вже знайомі із запуском "
"програм із командного рядка Windows, то все буде здаватися очевидним; інакше"
" вам може знадобитися трохи більше вказівок."

#: ../../faq/windows.rst:28
msgid ""
"Unless you use some sort of integrated development environment, you will end"
" up *typing* Windows commands into what is referred to as a \"Command prompt"
" window\".  Usually you can create such a window from your search bar by "
"searching for ``cmd``.  You should be able to recognize when you have "
"started such a window because you will see a Windows \"command prompt\", "
"which usually looks like this:"
msgstr ""
"Якщо ви не використовуєте якесь інтегроване середовище розробки, вам "
"доведеться *вводити* команди Windows у так зване \"вікно командного рядка\"."
" Зазвичай ви можете створити таке вікно з панелі пошуку, виконавши пошук за "
"``cmd``. Ви повинні мати змогу розпізнати, коли ви запустили таке вікно, "
"оскільки ви побачите \"командний рядок\" Windows, який зазвичай виглядає "
"так:"

#: ../../faq/windows.rst:35
msgid "C:\\>"
msgstr ""

#: ../../faq/windows.rst:39
msgid ""
"The letter may be different, and there might be other things after it, so "
"you might just as easily see something like:"
msgstr ""
"Літера може бути іншою, і після неї можуть бути інші речі, тому ви можете "
"так само легко побачити щось на зразок:"

#: ../../faq/windows.rst:42
msgid "D:\\YourName\\Projects\\Python>"
msgstr ""

#: ../../faq/windows.rst:46
msgid ""
"depending on how your computer has been set up and what else you have "
"recently done with it.  Once you have started such a window, you are well on"
" the way to running Python programs."
msgstr ""
"залежно від того, як налаштовано ваш комп’ютер і що ще ви нещодавно з ним "
"робили. Як тільки ви запустили таке вікно, ви вже на шляху до запуску "
"програм Python."

#: ../../faq/windows.rst:50
msgid ""
"You need to realize that your Python scripts have to be processed by another"
" program called the Python *interpreter*.  The interpreter reads your "
"script, compiles it into bytecodes, and then executes the bytecodes to run "
"your program. So, how do you arrange for the interpreter to handle your "
"Python?"
msgstr ""
"Ви повинні усвідомити, що ваші сценарії Python мають оброблятися іншою "
"програмою під назвою *інтерпретатор* Python. Інтерпретатор читає ваш "
"сценарій, компілює його в байт-коди, а потім виконує байт-коди для запуску "
"вашої програми. Отже, як організувати роботу інтерпретатора з вашим Python?"

#: ../../faq/windows.rst:55
msgid ""
"First, you need to make sure that your command window recognises the word "
"\"py\" as an instruction to start the interpreter.  If you have opened a "
"command window, you should try entering the command ``py`` and hitting "
"return:"
msgstr ""
"По-перше, вам потрібно переконатися, що ваше командне вікно розпізнає слово "
"\"py\" як інструкцію для запуску інтерпретатора. Якщо ви відкрили командне "
"вікно, спробуйте ввести команду ``py`` і натиснути клавішу return:"

#: ../../faq/windows.rst:60
msgid "C:\\Users\\YourName> py"
msgstr ""

#: ../../faq/windows.rst:64
msgid "You should then see something like:"
msgstr "Тоді ви повинні побачити щось на зразок:"

#: ../../faq/windows.rst:66
msgid ""
"Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC v.1900 32 bit (Intel)] on win32\n"
"Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n"
">>>"
msgstr ""

#: ../../faq/windows.rst:72
msgid ""
"You have started the interpreter in \"interactive mode\". That means you can"
" enter Python statements or expressions interactively and have them executed"
" or evaluated while you wait.  This is one of Python's strongest features.  "
"Check it by entering a few expressions of your choice and seeing the "
"results:"
msgstr ""
"Ви запустили перекладач в \"інтерактивному режимі\". Це означає, що ви "
"можете інтерактивно вводити оператори або вирази Python і виконувати їх чи "
"оцінювати, поки ви чекаєте. Це одна з найсильніших можливостей Python. "
"Перевірте це, ввівши кілька виразів на ваш вибір і переглянувши результати:"

#: ../../faq/windows.rst:77
msgid ""
">>> print(\"Hello\")\n"
"Hello\n"
">>> \"Hello\" * 3\n"
"'HelloHelloHello'"
msgstr ""

#: ../../faq/windows.rst:84
msgid ""
"Many people use the interactive mode as a convenient yet highly programmable"
" calculator.  When you want to end your interactive Python session, call the"
" :func:`exit` function or hold the :kbd:`Ctrl` key down while you enter a "
":kbd:`Z`, then hit the \":kbd:`Enter`\" key to get back to your Windows "
"command prompt."
msgstr ""
"Багато людей використовують інтерактивний режим як зручний, але добре "
"програмований калькулятор. Якщо ви хочете завершити свій інтерактивний сеанс"
" Python, викличте функцію :func:`exit` або утримуйте клавішу :kbd:`Ctrl`, "
"вводячи :kbd:`Z`, а потім натисніть \":kbd:`Enter`\", щоб повернутися до "
"командного рядка Windows."

#: ../../faq/windows.rst:90
msgid ""
"You may also find that you have a Start-menu entry such as "
":menuselection:`Start --> Programs --> Python 3.x --> Python (command line)`"
" that results in you seeing the ``>>>`` prompt in a new window.  If so, the "
"window will disappear after you call the :func:`exit` function or enter the "
":kbd:`Ctrl-Z` character; Windows is running a single \"python\" command in "
"the window, and closes it when you terminate the interpreter."
msgstr ""
"Ви також можете виявити, що у вас є пункт меню \"Пуск\", наприклад "
":menuselection:`Пуск --> Програми --> Python 3.x --> Python (командний "
"рядок)`, який призводить до того, що ви бачите ``>>>`` у новому вікні. Якщо "
"так, вікно зникне після виклику функції :func:`exit` або введення символу "
":kbd:`Ctrl-Z`; Windows виконує одну команду \"python\" у вікні та закриває "
"її, коли ви завершуєте роботу інтерпретатора."

#: ../../faq/windows.rst:97
msgid ""
"Now that we know the ``py`` command is recognized, you can give your Python "
"script to it. You'll have to give either an absolute or a relative path to "
"the Python script. Let's say your Python script is located in your desktop "
"and is named ``hello.py``, and your command prompt is nicely opened in your "
"home directory so you're seeing something similar to::"
msgstr ""
"Тепер, коли ми знаємо, що команда ``py`` розпізнається, ви можете надати їй "
"свій сценарій Python. Вам потрібно буде вказати або абсолютний, або "
"відносний шлях до сценарію Python. Припустімо, що ваш сценарій Python "
"розташований на робочому столі та має назву ``hello.py``, а ваш командний "
"рядок добре відкрито у вашому домашньому каталозі, тому ви бачите щось "
"подібне до:"

#: ../../faq/windows.rst:104
msgid "C:\\Users\\YourName>"
msgstr ""

#: ../../faq/windows.rst:106
msgid ""
"So now you'll ask the ``py`` command to give your script to Python by typing"
" ``py`` followed by your script path::"
msgstr ""
"Отже, тепер ви попросите команду ``py`` передати ваш сценарій Python, ввівши"
" ``py``, а потім шлях до вашого сценарію::"

#: ../../faq/windows.rst:110
msgid ""
"C:\\Users\\YourName> py Desktop\\hello.py\n"
"hello"
msgstr ""

#: ../../faq/windows.rst:114
msgid "How do I make Python scripts executable?"
msgstr "Як зробити сценарії Python виконуваними?"

#: ../../faq/windows.rst:116
msgid ""
"On Windows, the standard Python installer already associates the .py "
"extension with a file type (Python.File) and gives that file type an open "
"command that runs the interpreter (``D:\\Program Files\\Python\\python.exe "
"\"%1\" %*``).  This is enough to make scripts executable from the command "
"prompt as 'foo.py'.  If you'd rather be able to execute the script by simple"
" typing 'foo' with no extension you need to add .py to the PATHEXT "
"environment variable."
msgstr ""
"У Windows стандартний інсталятор Python уже пов’язує розширення .py з типом "
"файлу (Python.File) і дає цьому типу файлу команду відкриття, яка запускає "
"інтерпретатор (``D:\\Program Files\\Python\\python.exe \"% 1\" %*``). Цього "
"достатньо, щоб зробити скрипти виконуваними з командного рядка як "
"\"foo.py\". Якщо ви бажаєте виконати сценарій, просто ввівши 'foo' без "
"розширення, вам потрібно додати .py до змінної середовища PATHEXT."

#: ../../faq/windows.rst:124
msgid "Why does Python sometimes take so long to start?"
msgstr "Чому іноді Python запускається так довго?"

#: ../../faq/windows.rst:126
msgid ""
"Usually Python starts very quickly on Windows, but occasionally there are "
"bug reports that Python suddenly begins to take a long time to start up.  "
"This is made even more puzzling because Python will work fine on other "
"Windows systems which appear to be configured identically."
msgstr ""
"Зазвичай Python запускається дуже швидко в Windows, але іноді з’являються "
"повідомлення про помилки, коли Python раптово починає займати багато часу "
"для запуску. Це стає ще більш загадковим, оскільки Python добре працюватиме "
"на інших системах Windows, які, здається, налаштовані однаково."

#: ../../faq/windows.rst:131
msgid ""
"The problem may be caused by a misconfiguration of virus checking software "
"on the problem machine.  Some virus scanners have been known to introduce "
"startup overhead of two orders of magnitude when the scanner is configured "
"to monitor all reads from the filesystem.  Try checking the configuration of"
" virus scanning software on your systems to ensure that they are indeed "
"configured identically. McAfee, when configured to scan all file system read"
" activity, is a particular offender."
msgstr ""
"Проблема може бути викликана неправильною конфігурацією програмного "
"забезпечення перевірки вірусів на проблемній машині. Відомо, що деякі "
"сканери вірусів створюють накладні витрати на запуск у два порядки величини,"
" коли сканер налаштовано на моніторинг усіх зчитувань із файлової системи. "
"Спробуйте перевірити конфігурацію програмного забезпечення для сканування "
"вірусів у своїх системах, щоб переконатися, що вони справді налаштовані "
"однаково. McAfee, налаштований на сканування всіх операцій читання файлової "
"системи, є особливим порушником."

#: ../../faq/windows.rst:141
msgid "How do I make an executable from a Python script?"
msgstr "Як створити виконуваний файл із сценарію Python?"

#: ../../faq/windows.rst:143
msgid ""
"See :ref:`faq-create-standalone-binary` for a list of tools that can be used"
" to make executables."
msgstr ""
"Перегляньте :ref:`faq-create-standalone-binary` список інструментів, які "
"можна використовувати для створення виконуваних файлів."

#: ../../faq/windows.rst:148
msgid "Is a ``*.pyd`` file the same as a DLL?"
msgstr "Чи файл ``*.pyd`` те саме, що DLL?"

#: ../../faq/windows.rst:150
msgid ""
"Yes, .pyd files are dll's, but there are a few differences.  If you have a "
"DLL named ``foo.pyd``, then it must have a function ``PyInit_foo()``.  You "
"can then write Python \"import foo\", and Python will search for foo.pyd (as"
" well as foo.py, foo.pyc) and if it finds it, will attempt to call "
"``PyInit_foo()`` to initialize it.  You do not link your .exe with foo.lib, "
"as that would cause Windows to require the DLL to be present."
msgstr ""
"Так, файли .pyd є dll, але є кілька відмінностей. Якщо у вас є DLL з назвою "
"``foo.pyd``, тоді вона повинна мати функцію ``PyInit_foo()``. Потім ви "
"можете написати Python \"import foo\", і Python шукатиме foo.pyd (а також "
"foo.py, foo.pyc) і, якщо знайде його, спробує викликати ``PyInit_foo()``, "
"щоб ініціалізувати його . Ви не пов’язуєте свій .exe з foo.lib, оскільки це "
"змусить Windows вимагати наявності DLL."

#: ../../faq/windows.rst:157
msgid ""
"Note that the search path for foo.pyd is PYTHONPATH, not the same as the "
"path that Windows uses to search for foo.dll.  Also, foo.pyd need not be "
"present to run your program, whereas if you linked your program with a dll, "
"the dll is required.  Of course, foo.pyd is required if you want to say "
"``import foo``.  In a DLL, linkage is declared in the source code with "
"``__declspec(dllexport)``. In a .pyd, linkage is defined in a list of "
"available functions."
msgstr ""
"Зауважте, що шлях пошуку для foo.pyd — це PYTHONPATH, а не шлях, який "
"Windows використовує для пошуку foo.dll. Крім того, foo.pyd не обов’язково "
"присутній для запуску вашої програми, тоді як якщо ви пов’язали свою "
"програму з dll, dll потрібна. Звичайно, foo.pyd потрібен, якщо ви хочете "
"сказати ``import foo``. У DLL зв’язок оголошується у вихідному коді за "
"допомогою ``__declspec(dllexport)``. У .pyd зв’язок визначається у списку "
"доступних функцій."

#: ../../faq/windows.rst:166
msgid "How can I embed Python into a Windows application?"
msgstr "Як я можу вставити Python у програму Windows?"

#: ../../faq/windows.rst:168
msgid ""
"Embedding the Python interpreter in a Windows app can be summarized as "
"follows:"
msgstr ""
"Вбудовування інтерпретатора Python у програму Windows можна підсумувати "
"таким чином:"

#: ../../faq/windows.rst:170
msgid ""
"Do **not** build Python into your .exe file directly.  On Windows, Python "
"must be a DLL to handle importing modules that are themselves DLL's.  (This "
"is the first key undocumented fact.)  Instead, link to "
":file:`python{NN}.dll`; it is typically installed in "
"``C:\\Windows\\System``.  *NN* is the Python version, a number such as "
"\"33\" for Python 3.3."
msgstr ""

#: ../../faq/windows.rst:176
msgid ""
"You can link to Python in two different ways.  Load-time linking means "
"linking against :file:`python{NN}.lib`, while run-time linking means linking"
" against :file:`python{NN}.dll`.  (General note: :file:`python{NN}.lib` is "
"the so-called \"import lib\" corresponding to :file:`python{NN}.dll`.  It "
"merely defines symbols for the linker.)"
msgstr ""
"Ви можете зв’язатися з Python двома різними способами. Зв’язування під час "
"завантаження означає зв’язування з :file:`python{NN}.lib`, тоді як "
"зв’язування під час виконання означає зв’язування з :file:`python{NN}.dll`. "
"(Загальна примітка: :file:`python{NN}.lib` — це так звана \"імпортована "
"бібліотека\", яка відповідає :file:`python{NN}.dll`. Вона лише визначає "
"символи для компонувальника.)"

#: ../../faq/windows.rst:182
msgid ""
"Run-time linking greatly simplifies link options; everything happens at run "
"time.  Your code must load :file:`python{NN}.dll` using the Windows "
"``LoadLibraryEx()`` routine.  The code must also use access routines and "
"data in :file:`python{NN}.dll` (that is, Python's C API's) using pointers "
"obtained by the Windows ``GetProcAddress()`` routine.  Macros can make using"
" these pointers transparent to any C code that calls routines in Python's C "
"API."
msgstr ""
"Зв’язування під час виконання значно спрощує параметри зв’язування; все "
"відбувається під час виконання. Ваш код має завантажити "
":file:`python{NN}.dll` за допомогою процедури Windows ``LoadLibraryEx()``. "
"Код також має використовувати підпрограми доступу та дані в "
":file:`python{NN}.dll` (тобто C API Python), використовуючи покажчики, "
"отримані підпрограмою ``GetProcAddress()`` Windows. Макроси можуть зробити "
"використання цих покажчиків прозорим для будь-якого коду C, який викликає "
"підпрограми в C API Python."

#: ../../faq/windows.rst:191
msgid ""
"If you use SWIG, it is easy to create a Python \"extension module\" that "
"will make the app's data and methods available to Python.  SWIG will handle "
"just about all the grungy details for you.  The result is C code that you "
"link *into* your .exe file (!)  You do **not** have to create a DLL file, "
"and this also simplifies linking."
msgstr ""

#: ../../faq/windows.rst:197
msgid ""
"SWIG will create an init function (a C function) whose name depends on the "
"name of the extension module.  For example, if the name of the module is "
"leo, the init function will be called initleo().  If you use SWIG shadow "
"classes, as you should, the init function will be called initleoc().  This "
"initializes a mostly hidden helper class used by the shadow class."
msgstr ""
"SWIG створить функцію ініціалізації (функцію C), назва якої залежить від "
"назви модуля розширення. Наприклад, якщо назва модуля leo, функція init буде"
" називатися initleo(). Якщо ви використовуєте тіньові класи SWIG, як і має "
"бути, функція init називатиметься initleoc(). Це ініціалізує здебільшого "
"прихований допоміжний клас, який використовується тіньовим класом."

#: ../../faq/windows.rst:203
msgid ""
"The reason you can link the C code in step 2 into your .exe file is that "
"calling the initialization function is equivalent to importing the module "
"into Python! (This is the second key undocumented fact.)"
msgstr ""
"Причина, по якій ви можете пов’язати код C на кроці 2 у свій файл .exe, "
"полягає в тому, що виклик функції ініціалізації еквівалентний імпорту модуля"
" в Python! (Це другий ключовий незадокументований факт.)"

#: ../../faq/windows.rst:207
msgid ""
"In short, you can use the following code to initialize the Python "
"interpreter with your extension module."
msgstr ""
"Коротше кажучи, ви можете використовувати наступний код для ініціалізації "
"інтерпретатора Python за допомогою вашого модуля розширення."

#: ../../faq/windows.rst:210
msgid ""
"#include <Python.h>\n"
"...\n"
"Py_Initialize();  // Initialize Python.\n"
"initmyAppc();  // Initialize (import) the helper class.\n"
"PyRun_SimpleString(\"import myApp\");  // Import the shadow class."
msgstr ""

#: ../../faq/windows.rst:218
msgid ""
"There are two problems with Python's C API which will become apparent if you"
" use a compiler other than MSVC, the compiler used to build pythonNN.dll."
msgstr ""
"Є дві проблеми з C API Python, які стануть очевидними, якщо ви "
"використовуєте компілятор, відмінний від MSVC, компілятора, який "
"використовується для створення pythonNN.dll."

#: ../../faq/windows.rst:221
msgid ""
"Problem 1: The so-called \"Very High Level\" functions that take ``FILE *`` "
"arguments will not work in a multi-compiler environment because each "
"compiler's notion of a ``struct FILE`` will be different.  From an "
"implementation standpoint these are very low level functions."
msgstr ""

#: ../../faq/windows.rst:226
msgid ""
"Problem 2: SWIG generates the following code when generating wrappers to "
"void functions:"
msgstr ""
"Проблема 2: SWIG генерує такий код під час генерації обгорток для функцій "
"void:"

#: ../../faq/windows.rst:229
msgid ""
"Py_INCREF(Py_None);\n"
"_resultobj = Py_None;\n"
"return _resultobj;"
msgstr ""

#: ../../faq/windows.rst:235
msgid ""
"Alas, Py_None is a macro that expands to a reference to a complex data "
"structure called _Py_NoneStruct inside pythonNN.dll.  Again, this code will "
"fail in a mult-compiler environment.  Replace such code by:"
msgstr ""
"На жаль, Py_None — це макрос, який розширюється до посилання на складну "
"структуру даних під назвою _Py_NoneStruct усередині pythonNN.dll. Знову ж "
"таки, цей код не працюватиме в середовищі з декількома компіляторами. "
"Замініть такий код на:"

#: ../../faq/windows.rst:239
msgid "return Py_BuildValue(\"\");"
msgstr ""

#: ../../faq/windows.rst:243
msgid ""
"It may be possible to use SWIG's ``%typemap`` command to make the change "
"automatically, though I have not been able to get this to work (I'm a "
"complete SWIG newbie)."
msgstr ""
"Можливо, можна використати команду ``%typemap`` SWIG, щоб внести зміни "
"автоматично, хоча мені не вдалося змусити це працювати (я абсолютно новачок "
"у SWIG)."

#: ../../faq/windows.rst:247
msgid ""
"Using a Python shell script to put up a Python interpreter window from "
"inside your Windows app is not a good idea; the resulting window will be "
"independent of your app's windowing system.  Rather, you (or the "
"wxPythonWindow class) should create a \"native\" interpreter window.  It is "
"easy to connect that window to the Python interpreter.  You can redirect "
"Python's i/o to _any_ object that supports read and write, so all you need "
"is a Python object (defined in your extension module) that contains read() "
"and write() methods."
msgstr ""
"Використання сценарію оболонки Python для розміщення вікна інтерпретатора "
"Python із програми Windows не є гарною ідеєю; отримане вікно не залежатиме "
"від віконної системи вашої програми. Швидше, ви (або клас wxPythonWindow) "
"повинні створити \"власне\" вікно інтерпретатора. Це вікно легко підключити "
"до інтерпретатора Python. Ви можете перенаправити введення/виведення Python "
"до будь-якого об'єкта, який підтримує читання та запис, тому все, що вам "
"потрібно, це об’єкт Python (визначений у вашому модулі розширення), який "
"містить методи read() і write()."

#: ../../faq/windows.rst:256
msgid "How do I keep editors from inserting tabs into my Python source?"
msgstr "Як заборонити редакторам вставляти вкладки в мій джерело Python?"

#: ../../faq/windows.rst:258
msgid ""
"The FAQ does not recommend using tabs, and the Python style guide, :pep:`8`,"
" recommends 4 spaces for distributed Python code; this is also the Emacs "
"python-mode default."
msgstr ""
"FAQ не рекомендує використовувати вкладки, а посібник зі стилю Python, "
":pep:`8`, рекомендує 4 пробіли для розподіленого коду Python; це також "
"стандартний режим Emacs python."

#: ../../faq/windows.rst:262
msgid ""
"Under any editor, mixing tabs and spaces is a bad idea.  MSVC is no "
"different in this respect, and is easily configured to use spaces: Take "
":menuselection:`Tools --> Options --> Tabs`, and for file type \"Default\" "
"set \"Tab size\" and \"Indent size\" to 4, and select the \"Insert spaces\" "
"radio button."
msgstr ""
"У будь-якому редакторі змішувати табуляції та пробіли – погана ідея. MSVC "
"нічим не відрізняється в цьому відношенні, і його легко налаштувати для "
"використання пробілів: візьміть :menuselection:`Інструменти --> Параметри "
"--> Вкладки`, а для типу файлу \"За замовчуванням\" встановіть \"Розмір "
"вкладки\" та \"Розмір відступу\" на 4 і виберіть перемикач \"Вставити "
"пробіли\"."

#: ../../faq/windows.rst:267
msgid ""
"Python raises :exc:`IndentationError` or :exc:`TabError` if mixed tabs and "
"spaces are causing problems in leading whitespace. You may also run the "
":mod:`tabnanny` module to check a directory tree in batch mode."
msgstr ""
"Python викликає :exc:`IndentationError` або :exc:`TabError`, якщо змішані "
"символи табуляції та пробіли спричиняють проблеми на початку пробілу. Ви "
"також можете запустити модуль :mod:`tabnanny`, щоб перевірити дерево "
"каталогів у пакетному режимі."

#: ../../faq/windows.rst:274
msgid "How do I check for a keypress without blocking?"
msgstr "Як перевірити натискання клавіш без блокування?"

#: ../../faq/windows.rst:276
msgid ""
"Use the :mod:`msvcrt` module.  This is a standard Windows-specific extension"
" module. It defines a function ``kbhit()`` which checks whether a keyboard "
"hit is present, and ``getch()`` which gets one character without echoing it."
msgstr ""
"Використовуйте модуль :mod:`msvcrt`. Це стандартний модуль розширення для "
"Windows. Він визначає функцію ``kbhit()``, яка перевіряє наявність "
"натискання клавіатури, і ``getch()``, яка отримує один символ, не повторюючи"
" його."

#: ../../faq/windows.rst:281
msgid "How do I solve the missing api-ms-win-crt-runtime-l1-1-0.dll error?"
msgstr ""

#: ../../faq/windows.rst:283
msgid ""
"This can occur on Python 3.5 and later when using Windows 8.1 or earlier "
"without all updates having been installed. First ensure your operating "
"system is supported and is up to date, and if that does not resolve the "
"issue, visit the `Microsoft support page <https://support.microsoft.com/en-"
"us/help/3118401/>`_ for guidance on manually installing the C Runtime "
"update."
msgstr ""
