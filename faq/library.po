# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Dmytro Kazanzhy, 2022
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-11-19 01:00+0000\n"
"PO-Revision-Date: 2021-06-28 00:52+0000\n"
"Last-Translator: Dmytro Kazanzhy, 2022\n"
"Language-Team: Ukrainian (https://app.transifex.com/python-doc/teams/5390/uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != 11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % 100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || (n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

#: ../../faq/library.rst:5
msgid "Library and Extension FAQ"
msgstr "Поширені запитання про бібліотеку та розширення"

#: ../../faq/library.rst:8
msgid "Contents"
msgstr "Зміст"

#: ../../faq/library.rst:12
msgid "General Library Questions"
msgstr "Загальні бібліотечні питання"

#: ../../faq/library.rst:15
msgid "How do I find a module or application to perform task X?"
msgstr "Як знайти модуль або програму для виконання завдання X?"

#: ../../faq/library.rst:17
msgid ""
"Check :ref:`the Library Reference <library-index>` to see if there's a "
"relevant standard library module.  (Eventually you'll learn what's in the "
"standard library and will be able to skip this step.)"
msgstr ""
"Перевірте :ref:`довідник бібліотеки <library-index>`, щоб побачити, чи є "
"відповідний модуль стандартної бібліотеки. (Згодом ви дізнаєтеся, що "
"міститься в стандартній бібліотеці, і зможете пропустити цей крок.)"

#: ../../faq/library.rst:21
msgid ""
"For third-party packages, search the `Python Package Index "
"<https://pypi.org>`_ or try `Google <https://www.google.com>`_ or another "
"web search engine.  Searching for \"Python\" plus a keyword or two for your "
"topic of interest will usually find something helpful."
msgstr ""
"Пакунки сторонніх розробників шукайте в `Python Package Index "
"<https://pypi.org>`_ або спробуйте `Google <https://www.google.com>`_ або "
"іншу веб-пошукову систему. Якщо шукати \"Python\" і кілька ключових слів для"
" теми, яка вас цікавить, зазвичай знайдете щось корисне."

#: ../../faq/library.rst:28
msgid "Where is the math.py (socket.py, regex.py, etc.) source file?"
msgstr "Де знаходиться вихідний файл math.py (socket.py, regex.py тощо)?"

#: ../../faq/library.rst:30
msgid ""
"If you can't find a source file for a module it may be a built-in or "
"dynamically loaded module implemented in C, C++ or other compiled language. "
"In this case you may not have the source file or it may be something like "
":file:`mathmodule.c`, somewhere in a C source directory (not on the Python "
"Path)."
msgstr ""
"Якщо ви не можете знайти вихідний файл для модуля, це може бути вбудований "
"або динамічно завантажуваний модуль, реалізований на C, C++ або іншій "
"скомпільованій мові. У цьому випадку ви можете не мати вихідного файлу або "
"це може бути щось на кшталт :file:`mathmodule.c`, десь у каталозі вихідного "
"коду C (не на шляху Python)."

#: ../../faq/library.rst:35
msgid "There are (at least) three kinds of modules in Python:"
msgstr "У Python є (принаймні) три типи модулів:"

#: ../../faq/library.rst:37
msgid "modules written in Python (.py);"
msgstr "модулі, написані мовою Python (.py);"

#: ../../faq/library.rst:38
msgid ""
"modules written in C and dynamically loaded (.dll, .pyd, .so, .sl, etc);"
msgstr ""
"модулі, написані на C і динамічно завантажуються (.dll, .pyd, .so, .sl "
"тощо);"

#: ../../faq/library.rst:39
msgid ""
"modules written in C and linked with the interpreter; to get a list of "
"these, type::"
msgstr ""
"модулі, написані на C і пов'язані з інтерпретатором; щоб отримати їх список,"
" введіть::"

#: ../../faq/library.rst:42
msgid ""
"import sys\n"
"print(sys.builtin_module_names)"
msgstr ""

#: ../../faq/library.rst:47
msgid "How do I make a Python script executable on Unix?"
msgstr "Як зробити сценарій Python виконуваним у Unix?"

#: ../../faq/library.rst:49
msgid ""
"You need to do two things: the script file's mode must be executable and the"
" first line must begin with ``#!`` followed by the path of the Python "
"interpreter."
msgstr ""
"Вам потрібно зробити дві речі: режим файлу сценарію має бути виконуваним, а "
"перший рядок має починатися з ``#!``, за яким слідує шлях інтерпретатора "
"Python."

#: ../../faq/library.rst:53
msgid ""
"The first is done by executing ``chmod +x scriptfile`` or perhaps ``chmod "
"755 scriptfile``."
msgstr ""
"Перший виконується шляхом виконання ``chmod +x scriptfile`` або, можливо, "
"``chmod 755 scriptfile``."

#: ../../faq/library.rst:56
msgid ""
"The second can be done in a number of ways.  The most straightforward way is"
" to write ::"
msgstr ""
"Друге можна зробити кількома способами. Найпростіший спосіб - написати ::"

#: ../../faq/library.rst:59
msgid "#!/usr/local/bin/python"
msgstr ""

#: ../../faq/library.rst:61
msgid ""
"as the very first line of your file, using the pathname for where the Python"
" interpreter is installed on your platform."
msgstr ""
"як перший рядок вашого файлу, використовуючи ім’я шляху для того, де на "
"вашій платформі встановлено інтерпретатор Python."

#: ../../faq/library.rst:64
msgid ""
"If you would like the script to be independent of where the Python "
"interpreter lives, you can use the :program:`env` program.  Almost all Unix "
"variants support the following, assuming the Python interpreter is in a "
"directory on the user's :envvar:`PATH`::"
msgstr ""
"Якщо ви бажаєте, щоб сценарій не залежав від місця розташування "
"інтерпретатора Python, ви можете скористатися програмою :program:`env`. "
"Майже всі варіанти Unix підтримують наступне, припускаючи, що інтерпретатор "
"Python знаходиться в каталозі користувача :envvar:`PATH`::"

#: ../../faq/library.rst:69
msgid "#!/usr/bin/env python"
msgstr ""

#: ../../faq/library.rst:71
msgid ""
"*Don't* do this for CGI scripts.  The :envvar:`PATH` variable for CGI "
"scripts is often very minimal, so you need to use the actual absolute "
"pathname of the interpreter."
msgstr ""
"*Не* робіть цього для сценаріїв CGI. Змінна :envvar:`PATH` для сценаріїв CGI"
" часто дуже мінімальна, тому вам потрібно використовувати фактичний "
"абсолютний шлях інтерпретатора."

#: ../../faq/library.rst:75
msgid ""
"Occasionally, a user's environment is so full that the "
":program:`/usr/bin/env` program fails; or there's no env program at all.  In"
" that case, you can try the following hack (due to Alex Rezinsky):"
msgstr ""
"Іноді середовище користувача настільки переповнене, що програма "
":program:`/usr/bin/env` дає збій; або взагалі немає програми env. У такому "
"випадку ви можете спробувати наступний хак (завдяки Alex Rezinsky):"

#: ../../faq/library.rst:79
msgid ""
"#! /bin/sh\n"
"\"\"\":\"\n"
"exec python $0 ${1+\"$@\"}\n"
"\"\"\""
msgstr ""

#: ../../faq/library.rst:86
msgid ""
"The minor disadvantage is that this defines the script's __doc__ string. "
"However, you can fix that by adding ::"
msgstr ""
"Незначним недоліком є те, що це визначає рядок __doc__ сценарію. Однак ви "
"можете виправити це, додавши ::"

#: ../../faq/library.rst:89
msgid "__doc__ = \"\"\"...Whatever...\"\"\""
msgstr ""

#: ../../faq/library.rst:94
msgid "Is there a curses/termcap package for Python?"
msgstr "Чи є пакет curses/termcap для Python?"

#: ../../faq/library.rst:98
msgid ""
"For Unix variants: The standard Python source distribution comes with a "
"curses module in the :source:`Modules` subdirectory, though it's not "
"compiled by default. (Note that this is not available in the Windows "
"distribution -- there is no curses module for Windows.)"
msgstr ""
"Для варіантів Unix: Стандартний дистрибутив вихідного коду Python "
"постачається з модулем curses у підкаталозі :source:`Modules`, хоча він не "
"скомпільований за замовчуванням. (Зауважте, що це недоступно в дистрибутиві "
"Windows — для Windows немає модуля curses.)"

#: ../../faq/library.rst:103
msgid ""
"The :mod:`curses` module supports basic curses features as well as many "
"additional functions from ncurses and SYSV curses such as colour, "
"alternative character set support, pads, and mouse support. This means the "
"module isn't compatible with operating systems that only have BSD curses, "
"but there don't seem to be any currently maintained OSes that fall into this"
" category."
msgstr ""
"Модуль :mod:`curses` підтримує базові функції curses, а також багато "
"додаткових функцій від ncurses і curses SYSV, таких як підтримка кольору, "
"альтернативного набору символів, панелей і підтримки миші. Це означає, що "
"модуль не сумісний з операційними системами, які мають лише прокляття BSD, "
"але, здається, на даний момент не існує операційних систем, які підпадають "
"під цю категорію."

#: ../../faq/library.rst:111
msgid "Is there an equivalent to C's onexit() in Python?"
msgstr "Чи є еквівалент onexit() C у Python?"

#: ../../faq/library.rst:113
msgid ""
"The :mod:`atexit` module provides a register function that is similar to C's"
" :c:func:`!onexit`."
msgstr ""

#: ../../faq/library.rst:118
msgid "Why don't my signal handlers work?"
msgstr "Чому мої обробники сигналів не працюють?"

#: ../../faq/library.rst:120
msgid ""
"The most common problem is that the signal handler is declared with the "
"wrong argument list.  It is called as ::"
msgstr ""
"Найбільш поширеною проблемою є те, що обробник сигналу оголошено з "
"неправильним списком аргументів. Називається як ::"

#: ../../faq/library.rst:123
msgid "handler(signum, frame)"
msgstr ""

#: ../../faq/library.rst:125
msgid "so it should be declared with two parameters::"
msgstr "тому його слід оголосити з двома параметрами::"

#: ../../faq/library.rst:127
msgid ""
"def handler(signum, frame):\n"
"    ..."
msgstr ""

#: ../../faq/library.rst:132
msgid "Common tasks"
msgstr "Загальні завдання"

#: ../../faq/library.rst:135
msgid "How do I test a Python program or component?"
msgstr "Як перевірити програму або компонент Python?"

#: ../../faq/library.rst:137
msgid ""
"Python comes with two testing frameworks.  The :mod:`doctest` module finds "
"examples in the docstrings for a module and runs them, comparing the output "
"with the expected output given in the docstring."
msgstr ""
"Python постачається з двома платформами тестування. Модуль :mod:`doctest` "
"знаходить приклади в рядках документів для модуля та запускає їх, порівнюючи"
" вихідні дані з очікуваними результатами, указаними в рядках документів."

#: ../../faq/library.rst:141
msgid ""
"The :mod:`unittest` module is a fancier testing framework modelled on Java "
"and Smalltalk testing frameworks."
msgstr ""
"Модуль :mod:`unittest` — це модніша платформа для тестування, змодельована "
"на платформах тестування Java і Smalltalk."

#: ../../faq/library.rst:144
msgid ""
"To make testing easier, you should use good modular design in your program. "
"Your program should have almost all functionality encapsulated in either "
"functions or class methods -- and this sometimes has the surprising and "
"delightful effect of making the program run faster (because local variable "
"accesses are faster than global accesses).  Furthermore the program should "
"avoid depending on mutating global variables, since this makes testing much "
"more difficult to do."
msgstr ""
"Щоб спростити тестування, вам слід використовувати хороший модульний дизайн "
"у вашій програмі. Ваша програма повинна мати майже всю функціональність, "
"інкапсульовану або у функції, або в методи класу - і це іноді має дивовижний"
" і чудовий ефект, прискорюючи роботу програми (оскільки доступ до локальних "
"змінних є швидшим, ніж доступ до глобальних). Крім того, програмі слід "
"уникати залежності від мутації глобальних змінних, оскільки це значно "
"ускладнює виконання тестування."

#: ../../faq/library.rst:152
msgid "The \"global main logic\" of your program may be as simple as ::"
msgstr ""
"\"Глобальна основна логіка\" вашої програми може бути такою ж простою, як:"

#: ../../faq/library.rst:154
msgid ""
"if __name__ == \"__main__\":\n"
"    main_logic()"
msgstr ""

#: ../../faq/library.rst:157
msgid "at the bottom of the main module of your program."
msgstr "у нижній частині головного модуля вашої програми."

#: ../../faq/library.rst:159
msgid ""
"Once your program is organized as a tractable collection of function and "
"class behaviours, you should write test functions that exercise the "
"behaviours.  A test suite that automates a sequence of tests can be "
"associated with each module. This sounds like a lot of work, but since "
"Python is so terse and flexible it's surprisingly easy.  You can make coding"
" much more pleasant and fun by writing your test functions in parallel with "
"the \"production code\", since this makes it easy to find bugs and even "
"design flaws earlier."
msgstr ""
"Після того, як ваша програма організована як придатна для читання колекція "
"поведінки функцій і класів, ви повинні написати тестові функції, які "
"реалізують поведінку. З кожним модулем можна пов’язати набір тестів, який "
"автоматизує послідовність тестів. Це звучить як велика робота, але оскільки "
"Python такий стислий і гнучкий, це напрочуд легко. Ви можете зробити "
"кодування набагато приємнішим і веселішим, написавши тестові функції "
"паралельно з \"виробничим кодом\", оскільки це полегшить пошук помилок і "
"навіть недоліків дизайну раніше."

#: ../../faq/library.rst:167
msgid ""
"\"Support modules\" that are not intended to be the main module of a program"
" may include a self-test of the module. ::"
msgstr ""
"\"Модулі підтримки\", які не призначені бути основними модулями програми, "
"можуть включати самотестування модуля. ::"

#: ../../faq/library.rst:170
msgid ""
"if __name__ == \"__main__\":\n"
"    self_test()"
msgstr ""

#: ../../faq/library.rst:173
msgid ""
"Even programs that interact with complex external interfaces may be tested "
"when the external interfaces are unavailable by using \"fake\" interfaces "
"implemented in Python."
msgstr ""
"Навіть програми, які взаємодіють зі складними зовнішніми інтерфейсами, можна"
" перевіряти, коли зовнішні інтерфейси недоступні, використовуючи "
"\"фальшиві\" інтерфейси, реалізовані на Python."

#: ../../faq/library.rst:179
msgid "How do I create documentation from doc strings?"
msgstr "Як створити документацію з рядків документа?"

#: ../../faq/library.rst:181
msgid ""
"The :mod:`pydoc` module can create HTML from the doc strings in your Python "
"source code.  An alternative for creating API documentation purely from "
"docstrings is `epydoc <https://epydoc.sourceforge.net/>`_.  `Sphinx "
"<https://www.sphinx-doc.org>`_ can also include docstring content."
msgstr ""

#: ../../faq/library.rst:188
msgid "How do I get a single keypress at a time?"
msgstr "Як отримати одне натискання клавіші за раз?"

#: ../../faq/library.rst:190
msgid ""
"For Unix variants there are several solutions.  It's straightforward to do "
"this using curses, but curses is a fairly large module to learn."
msgstr ""
"Для варіантів Unix є кілька рішень. Це легко зробити за допомогою curses, "
"але curses — це досить великий модуль для вивчення."

#: ../../faq/library.rst:234
msgid "Threads"
msgstr "Нитки"

#: ../../faq/library.rst:237
msgid "How do I program using threads?"
msgstr "Як програмувати за допомогою потоків?"

#: ../../faq/library.rst:239
msgid ""
"Be sure to use the :mod:`threading` module and not the :mod:`_thread` "
"module. The :mod:`threading` module builds convenient abstractions on top of"
" the low-level primitives provided by the :mod:`_thread` module."
msgstr ""
"Обов’язково використовуйте модуль :mod:`threading`, а не модуль "
":mod:`_thread`. Модуль :mod:`threading` створює зручні абстракції на основі "
"низькорівневих примітивів, які надає модуль :mod:`_thread`."

#: ../../faq/library.rst:245
msgid "None of my threads seem to run: why?"
msgstr "Здається, жодна з моїх тем не працює: чому?"

#: ../../faq/library.rst:247
msgid ""
"As soon as the main thread exits, all threads are killed.  Your main thread "
"is running too quickly, giving the threads no time to do any work."
msgstr ""
"Як тільки головний потік виходить, усі потоки припиняються. Ваш основний "
"потік працює надто швидко, не даючи потокам часу виконувати будь-яку роботу."

#: ../../faq/library.rst:250
msgid ""
"A simple fix is to add a sleep to the end of the program that's long enough "
"for all the threads to finish::"
msgstr ""
"Простим виправленням є додавання сну до кінця програми, який буде достатнім "
"для завершення всіх потоків:"

#: ../../faq/library.rst:253
msgid ""
"import threading, time\n"
"\n"
"def thread_task(name, n):\n"
"    for i in range(n):\n"
"        print(name, i)\n"
"\n"
"for i in range(10):\n"
"    T = threading.Thread(target=thread_task, args=(str(i), i))\n"
"    T.start()\n"
"\n"
"time.sleep(10)  # <---------------------------!"
msgstr ""

#: ../../faq/library.rst:265
msgid ""
"But now (on many platforms) the threads don't run in parallel, but appear to"
" run sequentially, one at a time!  The reason is that the OS thread "
"scheduler doesn't start a new thread until the previous thread is blocked."
msgstr ""
"Але тепер (на багатьох платформах) потоки не працюють паралельно, а, "
"здається, виконуються послідовно, один за одним! Причина полягає в тому, що "
"планувальник потоків ОС не запускає новий потік, доки попередній потік не "
"буде заблоковано."

#: ../../faq/library.rst:269
msgid "A simple fix is to add a tiny sleep to the start of the run function::"
msgstr ""
"Просте виправлення полягає в тому, щоб додати крихітний сон до початку "
"функції запуску:"

#: ../../faq/library.rst:271
msgid ""
"def thread_task(name, n):\n"
"    time.sleep(0.001)  # <--------------------!\n"
"    for i in range(n):\n"
"        print(name, i)\n"
"\n"
"for i in range(10):\n"
"    T = threading.Thread(target=thread_task, args=(str(i), i))\n"
"    T.start()\n"
"\n"
"time.sleep(10)"
msgstr ""

#: ../../faq/library.rst:282
msgid ""
"Instead of trying to guess a good delay value for :func:`time.sleep`, it's "
"better to use some kind of semaphore mechanism.  One idea is to use the "
":mod:`queue` module to create a queue object, let each thread append a token"
" to the queue when it finishes, and let the main thread read as many tokens "
"from the queue as there are threads."
msgstr ""
"Замість того, щоб намагатися вгадати хороше значення затримки для "
":func:`time.sleep`, краще використати якийсь семафорний механізм. Одна з "
"ідей полягає в тому, щоб використовувати модуль :mod:`queue` для створення "
"об’єкта черги, дозволити кожному потоку додавати маркер до черги, коли він "
"закінчиться, і дозволити основному потоку читати стільки маркерів із черги, "
"скільки є потоків."

#: ../../faq/library.rst:290
msgid "How do I parcel out work among a bunch of worker threads?"
msgstr "Як розділити роботу серед групи робочих потоків?"

#: ../../faq/library.rst:292
msgid ""
"The easiest way is to use the :mod:`concurrent.futures` module, especially "
"the :mod:`~concurrent.futures.ThreadPoolExecutor` class."
msgstr ""
"Найпростішим способом є використання модуля :mod:`concurrent.futures`, "
"особливо класу :mod:`~concurrent.futures.ThreadPoolExecutor`."

#: ../../faq/library.rst:295
msgid ""
"Or, if you want fine control over the dispatching algorithm, you can write "
"your own logic manually.  Use the :mod:`queue` module to create a queue "
"containing a list of jobs.  The :class:`~queue.Queue` class maintains a list"
" of objects and has a ``.put(obj)`` method that adds items to the queue and "
"a ``.get()`` method to return them.  The class will take care of the locking"
" necessary to ensure that each job is handed out exactly once."
msgstr ""
"Або, якщо вам потрібен точний контроль над алгоритмом диспетчеризації, ви "
"можете написати власну логіку вручну. Використовуйте модуль :mod:`queue`, "
"щоб створити чергу зі списком завдань. Клас :class:`~queue.Queue` підтримує "
"список об’єктів і має метод ``.put(obj)``, який додає елементи до черги, і "
"метод ``.get()`` для їх повернення. Клас подбає про блокування, необхідне "
"для того, щоб кожне завдання було роздано рівно один раз."

#: ../../faq/library.rst:302
msgid "Here's a trivial example::"
msgstr "Ось тривіальний приклад::"

#: ../../faq/library.rst:304
msgid ""
"import threading, queue, time\n"
"\n"
"# The worker thread gets jobs off the queue.  When the queue is empty, it\n"
"# assumes there will be no more work and exits.\n"
"# (Realistically workers will run until terminated.)\n"
"def worker():\n"
"    print('Running worker')\n"
"    time.sleep(0.1)\n"
"    while True:\n"
"        try:\n"
"            arg = q.get(block=False)\n"
"        except queue.Empty:\n"
"            print('Worker', threading.current_thread(), end=' ')\n"
"            print('queue empty')\n"
"            break\n"
"        else:\n"
"            print('Worker', threading.current_thread(), end=' ')\n"
"            print('running with argument', arg)\n"
"            time.sleep(0.5)\n"
"\n"
"# Create queue\n"
"q = queue.Queue()\n"
"\n"
"# Start a pool of 5 workers\n"
"for i in range(5):\n"
"    t = threading.Thread(target=worker, name='worker %i' % (i+1))\n"
"    t.start()\n"
"\n"
"# Begin adding work to the queue\n"
"for i in range(50):\n"
"    q.put(i)\n"
"\n"
"# Give threads time to run\n"
"print('Main thread sleeping')\n"
"time.sleep(5)"
msgstr ""

#: ../../faq/library.rst:340
msgid "When run, this will produce the following output:"
msgstr "Під час запуску це створить такий результат:"

#: ../../faq/library.rst:342
msgid ""
"Running worker\n"
"Running worker\n"
"Running worker\n"
"Running worker\n"
"Running worker\n"
"Main thread sleeping\n"
"Worker <Thread(worker 1, started 130283832797456)> running with argument 0\n"
"Worker <Thread(worker 2, started 130283824404752)> running with argument 1\n"
"Worker <Thread(worker 3, started 130283816012048)> running with argument 2\n"
"Worker <Thread(worker 4, started 130283807619344)> running with argument 3\n"
"Worker <Thread(worker 5, started 130283799226640)> running with argument 4\n"
"Worker <Thread(worker 1, started 130283832797456)> running with argument 5\n"
"..."
msgstr ""

#: ../../faq/library.rst:358
msgid ""
"Consult the module's documentation for more details; the "
":class:`~queue.Queue` class provides a featureful interface."
msgstr ""
"Щоб дізнатися більше, зверніться до документації модуля; клас "
":class:`~queue.Queue` забезпечує зручний інтерфейс."

#: ../../faq/library.rst:363
msgid "What kinds of global value mutation are thread-safe?"
msgstr "Які види глобальної мутації значення є потокобезпечними?"

#: ../../faq/library.rst:365
msgid ""
"A :term:`global interpreter lock` (GIL) is used internally to ensure that "
"only one thread runs in the Python VM at a time.  In general, Python offers "
"to switch among threads only between bytecode instructions; how frequently "
"it switches can be set via :func:`sys.setswitchinterval`.  Each bytecode "
"instruction and therefore all the C implementation code reached from each "
"instruction is therefore atomic from the point of view of a Python program."
msgstr ""
":term:`global interpreter lock` (GIL) використовується внутрішньо, щоб "
"забезпечити виконання лише одного потоку у віртуальній машині Python "
"одночасно. Загалом, Python пропонує перемикатися між потоками лише між "
"інструкціями байт-коду; як часто він перемикається, можна встановити через "
":func:`sys.setswitchinterval`. Кожна інструкція байт-коду і, отже, весь код "
"реалізації C, отриманий від кожної інструкції, є атомарними з точки зору "
"програми Python."

#: ../../faq/library.rst:372
msgid ""
"In theory, this means an exact accounting requires an exact understanding of"
" the PVM bytecode implementation.  In practice, it means that operations on "
"shared variables of built-in data types (ints, lists, dicts, etc) that "
"\"look atomic\" really are."
msgstr ""
"Теоретично це означає, що точний облік вимагає точного розуміння реалізації "
"байт-коду PVM. На практиці це означає, що операції зі спільними змінними "
"вбудованих типів даних (int, списки, dicts тощо), які \"виглядають "
"атомарними\", дійсно є такими."

#: ../../faq/library.rst:377
msgid ""
"For example, the following operations are all atomic (L, L1, L2 are lists, "
"D, D1, D2 are dicts, x, y are objects, i, j are ints)::"
msgstr ""
"Наприклад, усі наступні операції є атомарними (L, L1, L2 — списки, D, D1, D2"
" — dicts, x, y — об’єкти, i, j — цілі):"

#: ../../faq/library.rst:380
msgid ""
"L.append(x)\n"
"L1.extend(L2)\n"
"x = L[i]\n"
"x = L.pop()\n"
"L1[i:j] = L2\n"
"L.sort()\n"
"x = y\n"
"x.field = y\n"
"D[x] = y\n"
"D1.update(D2)\n"
"D.keys()"
msgstr ""

#: ../../faq/library.rst:392
msgid "These aren't::"
msgstr "Це не::"

#: ../../faq/library.rst:394
msgid ""
"i = i+1\n"
"L.append(L[-1])\n"
"L[i] = L[j]\n"
"D[x] = D[x] + 1"
msgstr ""

#: ../../faq/library.rst:399
msgid ""
"Operations that replace other objects may invoke those other objects' "
":meth:`~object.__del__` method when their reference count reaches zero, and "
"that can affect things.  This is especially true for the mass updates to "
"dictionaries and lists.  When in doubt, use a mutex!"
msgstr ""

#: ../../faq/library.rst:406
msgid "Can't we get rid of the Global Interpreter Lock?"
msgstr "Чи не можемо ми позбутися глобального блокування інтерпретатора?"

#: ../../faq/library.rst:408
msgid ""
"The :term:`global interpreter lock` (GIL) is often seen as a hindrance to "
"Python's deployment on high-end multiprocessor server machines, because a "
"multi-threaded Python program effectively only uses one CPU, due to the "
"insistence that (almost) all Python code can only run while the GIL is held."
msgstr ""
":term:`global interpreter lock` (GIL) часто розглядається як перешкода для "
"розгортання Python на високоякісних багатопроцесорних серверах, оскільки "
"багатопотокова програма Python фактично використовує лише один ЦП, через те,"
" що (майже) весь код Python може виконуватися лише під час утримання GIL."

#: ../../faq/library.rst:413
msgid ""
"With the approval of :pep:`703` work is now underway to remove the GIL from "
"the CPython implementation of Python.  Initially it will be implemented as "
"an optional compiler flag when building the interpreter, and so separate "
"builds will be available with and without the GIL.  Long-term, the hope is "
"to settle on a single build, once the performance implications of removing "
"the GIL are fully understood.  Python 3.13 is likely to be the first release"
" containing this work, although it may not be completely functional in this "
"release."
msgstr ""

#: ../../faq/library.rst:422
msgid ""
"The current work to remove the GIL is based on a `fork of Python 3.9 with "
"the GIL removed <https://github.com/colesbury/nogil>`_ by Sam Gross. Prior "
"to that, in the days of Python 1.5, Greg Stein actually implemented a "
"comprehensive patch set (the \"free threading\" patches) that removed the "
"GIL and replaced it with fine-grained locking.  Adam Olsen did a similar "
"experiment in his `python-safethread "
"<https://code.google.com/archive/p/python-safethread>`_ project.  "
"Unfortunately, both of these earlier experiments exhibited a sharp drop in "
"single-thread performance (at least 30% slower), due to the amount of fine-"
"grained locking necessary to compensate for the removal of the GIL.  The "
"Python 3.9 fork is the first attempt at removing the GIL with an acceptable "
"performance impact."
msgstr ""

#: ../../faq/library.rst:437
msgid ""
"The presence of the GIL in current Python releases doesn't mean that you "
"can't make good use of Python on multi-CPU machines! You just have to be "
"creative with dividing the work up between multiple *processes* rather than "
"multiple *threads*.  The :class:`~concurrent.futures.ProcessPoolExecutor` "
"class in the new :mod:`concurrent.futures` module provides an easy way of "
"doing so; the :mod:`multiprocessing` module provides a lower-level API in "
"case you want more control over dispatching of tasks."
msgstr ""

#: ../../faq/library.rst:446
msgid ""
"Judicious use of C extensions will also help; if you use a C extension to "
"perform a time-consuming task, the extension can release the GIL while the "
"thread of execution is in the C code and allow other threads to get some "
"work done.  Some standard library modules such as :mod:`zlib` and "
":mod:`hashlib` already do this."
msgstr ""
"Розумне використання розширень C також допоможе; якщо ви використовуєте "
"розширення C для виконання трудомісткого завдання, розширення може звільнити"
" GIL, поки потік виконання знаходиться в коді C, і дозволить іншим потокам "
"виконати певну роботу. Деякі стандартні бібліотечні модулі, такі як "
":mod:`zlib` і :mod:`hashlib`, вже це роблять."

#: ../../faq/library.rst:452
msgid ""
"An alternative approach to reducing the impact of the GIL is to make the GIL"
" a per-interpreter-state lock rather than truly global. This was :ref:`first"
" implemented in Python 3.12 <whatsnew312-pep684>` and is available in the C "
"API. A Python interface to it is expected in Python 3.13. The main "
"limitation to it at the moment is likely to be 3rd party extension modules, "
"since these must be written with multiple interpreters in mind in order to "
"be usable, so many older extension modules will not be usable."
msgstr ""

#: ../../faq/library.rst:462
msgid "Input and Output"
msgstr "Вхід і вихід"

#: ../../faq/library.rst:465
msgid "How do I delete a file? (And other file questions...)"
msgstr "Як видалити файл? (І інші запитання щодо файлів...)"

#: ../../faq/library.rst:467
msgid ""
"Use ``os.remove(filename)`` or ``os.unlink(filename)``; for documentation, "
"see the :mod:`os` module.  The two functions are identical; "
":func:`~os.unlink` is simply the name of the Unix system call for this "
"function."
msgstr ""
"Використовуйте ``os.remove(ім’я файлу)`` або ``os.unlink(ім’я файлу)``; для "
"документації дивіться модуль :mod:`os`. Дві функції ідентичні; "
":func:`~os.unlink` — це просто назва системного виклику Unix для цієї "
"функції."

#: ../../faq/library.rst:471
msgid ""
"To remove a directory, use :func:`os.rmdir`; use :func:`os.mkdir` to create "
"one. ``os.makedirs(path)`` will create any intermediate directories in "
"``path`` that don't exist. ``os.removedirs(path)`` will remove intermediate "
"directories as long as they're empty; if you want to delete an entire "
"directory tree and its contents, use :func:`shutil.rmtree`."
msgstr ""
"Щоб видалити каталог, використовуйте :func:`os.rmdir`; використовуйте "
":func:`os.mkdir`, щоб створити його. ``os.makedirs(path)`` створить будь-які"
" проміжні каталоги в ``path``, яких не існує. ``os.removedirs(path)`` "
"видалить проміжні каталоги, якщо вони порожні; якщо ви хочете видалити ціле "
"дерево каталогів і його вміст, використовуйте :func:`shutil.rmtree`."

#: ../../faq/library.rst:477
msgid "To rename a file, use ``os.rename(old_path, new_path)``."
msgstr ""
"Щоб перейменувати файл, використовуйте ``os.rename(old_path, new_path)``."

#: ../../faq/library.rst:479
msgid ""
"To truncate a file, open it using ``f = open(filename, \"rb+\")``, and use "
"``f.truncate(offset)``; offset defaults to the current seek position.  "
"There's also ``os.ftruncate(fd, offset)`` for files opened with "
":func:`os.open`, where *fd* is the file descriptor (a small integer)."
msgstr ""
"Щоб скоротити файл, відкрийте його за допомогою ``f = open(filename, "
"\"rb+\")`` і використовуйте ``f.truncate(offset)``; offset за замовчуванням "
"до поточної позиції пошуку. Існує також ``os.ftruncate(fd, offset)`` для "
"файлів, відкритих за допомогою :func:`os.open`, де *fd* є дескриптором файлу"
" (мале ціле число)."

#: ../../faq/library.rst:484
msgid ""
"The :mod:`shutil` module also contains a number of functions to work on "
"files including :func:`~shutil.copyfile`, :func:`~shutil.copytree`, and "
":func:`~shutil.rmtree`."
msgstr ""
"Модуль :mod:`shutil` також містить ряд функцій для роботи з файлами, "
"включаючи :func:`~shutil.copyfile`, :func:`~shutil.copytree` і "
":func:`~shutil.rmtree`."

#: ../../faq/library.rst:490
msgid "How do I copy a file?"
msgstr "Як скопіювати файл?"

#: ../../faq/library.rst:492
msgid ""
"The :mod:`shutil` module contains a :func:`~shutil.copyfile` function. Note "
"that on Windows NTFS volumes, it does not copy `alternate data streams "
"<https://en.wikipedia.org/wiki/NTFS#Alternate_data_stream_(ADS)>`_ nor "
"`resource forks <https://en.wikipedia.org/wiki/Resource_fork>`__ on macOS "
"HFS+ volumes, though both are now rarely used. It also doesn't copy file "
"permissions and metadata, though using :func:`shutil.copy2` instead will "
"preserve most (though not all) of it."
msgstr ""
"Модуль :mod:`shutil` містить функцію :func:`~shutil.copyfile`. Зауважте, що "
"на томах Windows NTFS він не копіює `альтернативні потоки даних "
"<https://en.wikipedia.org/wiki/NTFS#Alternate_data_stream_(ADS)>`_ і "
"`розгалуження ресурсів <https://en.wikipedia.org/wiki/Resource_fork>`__ на "
"томах macOS HFS+, хоча обидва зараз використовуються рідко. Він також не "
"копіює дозволи на файли та метадані, хоча використання натомість "
":func:`shutil.copy2` збереже більшість (хоча не всі) з них."

#: ../../faq/library.rst:503
msgid "How do I read (or write) binary data?"
msgstr "Як читати (або записувати) двійкові дані?"

#: ../../faq/library.rst:505
msgid ""
"To read or write complex binary data formats, it's best to use the "
":mod:`struct` module.  It allows you to take a string containing binary data"
" (usually numbers) and convert it to Python objects; and vice versa."
msgstr ""
"Для читання або запису складних двійкових форматів даних найкраще "
"використовувати модуль :mod:`struct`. Це дозволяє вам взяти рядок, що "
"містить двійкові дані (зазвичай числа), і перетворити його на об’єкти "
"Python; і навпаки."

#: ../../faq/library.rst:509
msgid ""
"For example, the following code reads two 2-byte integers and one 4-byte "
"integer in big-endian format from a file::"
msgstr ""
"Наприклад, наступний код читає два 2-байтових цілих числа та одне 4-байтове "
"ціле число у форматі big-endian з файлу::"

#: ../../faq/library.rst:512
msgid ""
"import struct\n"
"\n"
"with open(filename, \"rb\") as f:\n"
"    s = f.read(8)\n"
"    x, y, z = struct.unpack(\">hhl\", s)"
msgstr ""

#: ../../faq/library.rst:518
msgid ""
"The '>' in the format string forces big-endian data; the letter 'h' reads "
"one \"short integer\" (2 bytes), and 'l' reads one \"long integer\" (4 "
"bytes) from the string."
msgstr ""
"Знак \">\" у рядку формату примусово вводить дані в бік старшого; літера 'h'"
" читає одне \"коротке ціле число\" (2 байти), а 'l' читає одне \"довге ціле "
"число\" (4 байти) з рядка."

#: ../../faq/library.rst:522
msgid ""
"For data that is more regular (e.g. a homogeneous list of ints or floats), "
"you can also use the :mod:`array` module."
msgstr ""
"Для даних, які є більш регулярними (наприклад, однорідний список int або "
"float), ви також можете використовувати модуль :mod:`array`."

#: ../../faq/library.rst:527
msgid ""
"To read and write binary data, it is mandatory to open the file in binary "
"mode (here, passing ``\"rb\"`` to :func:`open`).  If you use ``\"r\"`` "
"instead (the default), the file will be open in text mode and ``f.read()`` "
"will return :class:`str` objects rather than :class:`bytes` objects."
msgstr ""
"Щоб читати та записувати двійкові дані, необхідно відкрити файл у двійковому"
" режимі (тут передаючи ``\"rb\"`` до :func:`open`). Якщо замість цього "
"використовувати ``\"r\"`` (за замовчуванням), файл буде відкритий у "
"текстовому режимі, а ``f.read()`` повертатиме об’єкти :class:`str`, а не "
":class:`bytes` об'єктів."

#: ../../faq/library.rst:535
msgid "I can't seem to use os.read() on a pipe created with os.popen(); why?"
msgstr ""
"Здається, я не можу використовувати os.read() у каналі, створеному за "
"допомогою os.popen(); чому?"

#: ../../faq/library.rst:537
msgid ""
":func:`os.read` is a low-level function which takes a file descriptor, a "
"small integer representing the opened file.  :func:`os.popen` creates a "
"high-level file object, the same type returned by the built-in :func:`open` "
"function. Thus, to read *n* bytes from a pipe *p* created with "
":func:`os.popen`, you need to use ``p.read(n)``."
msgstr ""
":func:`os.read` — це функція низького рівня, яка приймає дескриптор файлу, "
"маленьке ціле число, що представляє відкритий файл. :func:`os.popen` створює"
" об’єкт файлу високого рівня, того самого типу, який повертає вбудована "
"функція :func:`open`. Таким чином, щоб прочитати *n* байт з каналу *p*, "
"створеного за допомогою :func:`os.popen`, вам потрібно використовувати "
"``p.read(n)``."

#: ../../faq/library.rst:623
msgid "How do I access the serial (RS232) port?"
msgstr "Як отримати доступ до послідовного (RS232) порту?"

#: ../../faq/library.rst:625
msgid "For Win32, OSX, Linux, BSD, Jython, IronPython:"
msgstr "Для Win32, OSX, Linux, BSD, Jython, IronPython:"

#: ../../faq/library.rst:627
msgid ":pypi:`pyserial`"
msgstr ""

#: ../../faq/library.rst:629
msgid "For Unix, see a Usenet post by Mitch Chapman:"
msgstr "Щодо Unix, перегляньте публікацію Usenet від Мітча Чепмена:"

#: ../../faq/library.rst:631
msgid "https://groups.google.com/groups?selm=34A04430.CF9@ohioee.com"
msgstr "https://groups.google.com/groups?selm=34A04430.CF9@ohioee.com"

#: ../../faq/library.rst:635
msgid "Why doesn't closing sys.stdout (stdin, stderr) really close it?"
msgstr "Чому закриття sys.stdout (stdin, stderr) насправді не закриває його?"

#: ../../faq/library.rst:637
msgid ""
"Python :term:`file objects <file object>` are a high-level layer of "
"abstraction on low-level C file descriptors."
msgstr ""
"Python :term:`файлові об’єкти <file object>` є високорівневим рівнем "
"абстракції на низькорівневих файлових дескрипторах C."

#: ../../faq/library.rst:640
msgid ""
"For most file objects you create in Python via the built-in :func:`open` "
"function, ``f.close()`` marks the Python file object as being closed from "
"Python's point of view, and also arranges to close the underlying C file "
"descriptor.  This also happens automatically in ``f``'s destructor, when "
"``f`` becomes garbage."
msgstr ""
"Для більшості файлових об’єктів, які ви створюєте в Python за допомогою "
"вбудованої функції :func:`open`, ``f.close()`` позначає файловий об’єкт "
"Python як закритий з точки зору Python, а також організовує закриття базовий"
" дескриптор файлу C. Це також відбувається автоматично в деструкторі ``f``, "
"коли ``f`` стає сміттям."

#: ../../faq/library.rst:646
msgid ""
"But stdin, stdout and stderr are treated specially by Python, because of the"
" special status also given to them by C.  Running ``sys.stdout.close()`` "
"marks the Python-level file object as being closed, but does *not* close the"
" associated C file descriptor."
msgstr ""
"Але stdin, stdout і stderr спеціально обробляються Python через особливий "
"статус, наданий їм також C. Запуск ``sys.stdout.close()`` позначає файловий "
"об’єкт на рівні Python як закритий, але *не* закривати пов’язаний дескриптор"
" файлу C."

#: ../../faq/library.rst:651
msgid ""
"To close the underlying C file descriptor for one of these three, you should"
" first be sure that's what you really want to do (e.g., you may confuse "
"extension modules trying to do I/O).  If it is, use :func:`os.close`::"
msgstr ""
"Щоб закрити базовий дескриптор файлу C для одного з цих трьох, ви повинні "
"спочатку переконатися, що це те, що ви дійсно хочете зробити (наприклад, ви "
"можете сплутати модулі розширення, які намагаються виконати введення-"
"виведення). Якщо так, використовуйте :func:`os.close`::"

#: ../../faq/library.rst:655
msgid ""
"os.close(stdin.fileno())\n"
"os.close(stdout.fileno())\n"
"os.close(stderr.fileno())"
msgstr ""

#: ../../faq/library.rst:659
msgid "Or you can use the numeric constants 0, 1 and 2, respectively."
msgstr "Або ви можете використовувати числові константи 0, 1 і 2 відповідно."

#: ../../faq/library.rst:663
msgid "Network/Internet Programming"
msgstr "Програмування мережі/Інтернету"

#: ../../faq/library.rst:666
msgid "What WWW tools are there for Python?"
msgstr "Які інструменти WWW існують для Python?"

#: ../../faq/library.rst:668
msgid ""
"See the chapters titled :ref:`internet` and :ref:`netdata` in the Library "
"Reference Manual.  Python has many modules that will help you build server-"
"side and client-side web systems."
msgstr ""
"Див. розділи під назвою :ref:`internet` і :ref:`netdata` у Довідковому "
"посібнику з бібліотеки. Python має багато модулів, які допоможуть вам "
"створювати серверні та клієнтські веб-системи."

#: ../../faq/library.rst:674
msgid ""
"A summary of available frameworks is maintained by Paul Boddie at "
"https://wiki.python.org/moin/WebProgramming\\ ."
msgstr ""
"Резюме доступних фреймворків підтримує Пол Бодді на "
"https://wiki.python.org/moin/WebProgramming\\ ."

#: ../../faq/library.rst:679
msgid "What module should I use to help with generating HTML?"
msgstr "Який модуль мені слід використовувати для створення HTML?"

#: ../../faq/library.rst:683
msgid ""
"You can find a collection of useful links on the `Web Programming wiki page "
"<https://wiki.python.org/moin/WebProgramming>`_."
msgstr ""
"Ви можете знайти колекцію корисних посилань на `Вікі-сторінці веб-"
"програмування <https://wiki.python.org/moin/WebProgramming>`_."

#: ../../faq/library.rst:688
msgid "How do I send mail from a Python script?"
msgstr "Як надіслати пошту за допомогою сценарію Python?"

#: ../../faq/library.rst:690
msgid "Use the standard library module :mod:`smtplib`."
msgstr "Використовуйте стандартний бібліотечний модуль :mod:`smtplib`."

#: ../../faq/library.rst:692
msgid ""
"Here's a very simple interactive mail sender that uses it.  This method will"
" work on any host that supports an SMTP listener. ::"
msgstr ""
"Ось дуже простий інтерактивний відправник пошти, який його використовує. Цей"
" метод працюватиме на будь-якому хості, який підтримує прослуховувач SMTP. "
"::"

#: ../../faq/library.rst:695
msgid ""
"import sys, smtplib\n"
"\n"
"fromaddr = input(\"From: \")\n"
"toaddrs  = input(\"To: \").split(',')\n"
"print(\"Enter message, end with ^D:\")\n"
"msg = ''\n"
"while True:\n"
"    line = sys.stdin.readline()\n"
"    if not line:\n"
"        break\n"
"    msg += line\n"
"\n"
"# The actual mail send\n"
"server = smtplib.SMTP('localhost')\n"
"server.sendmail(fromaddr, toaddrs, msg)\n"
"server.quit()"
msgstr ""

#: ../../faq/library.rst:712
msgid ""
"A Unix-only alternative uses sendmail.  The location of the sendmail program"
" varies between systems; sometimes it is ``/usr/lib/sendmail``, sometimes "
"``/usr/sbin/sendmail``.  The sendmail manual page will help you out.  Here's"
" some sample code::"
msgstr ""
"Альтернатива лише для Unix використовує sendmail. Розташування програми "
"sendmail залежить від системи; іноді це ``/usr/lib/sendmail``, іноді "
"``/usr/sbin/sendmail``. Довідкова сторінка sendmail допоможе вам. Ось "
"приклад коду::"

#: ../../faq/library.rst:717
msgid ""
"import os\n"
"\n"
"SENDMAIL = \"/usr/sbin/sendmail\"  # sendmail location\n"
"p = os.popen(\"%s -t -i\" % SENDMAIL, \"w\")\n"
"p.write(\"To: receiver@example.com\\n\")\n"
"p.write(\"Subject: test\\n\")\n"
"p.write(\"\\n\")  # blank line separating headers from body\n"
"p.write(\"Some text\\n\")\n"
"p.write(\"some more text\\n\")\n"
"sts = p.close()\n"
"if sts != 0:\n"
"    print(\"Sendmail exit status\", sts)"
msgstr ""

#: ../../faq/library.rst:732
msgid "How do I avoid blocking in the connect() method of a socket?"
msgstr "Як уникнути блокування в методі connect() сокета?"

#: ../../faq/library.rst:734
msgid ""
"The :mod:`select` module is commonly used to help with asynchronous I/O on "
"sockets."
msgstr ""
"Модуль :mod:`select` зазвичай використовується для допомоги з асинхронним "
"введенням/виведенням на сокетах."

#: ../../faq/library.rst:737
msgid ""
"To prevent the TCP connect from blocking, you can set the socket to non-"
"blocking mode.  Then when you do the :meth:`~socket.socket.connect`, you "
"will either connect immediately (unlikely) or get an exception that contains"
" the error number as ``.errno``. ``errno.EINPROGRESS`` indicates that the "
"connection is in progress, but hasn't finished yet.  Different OSes will "
"return different values, so you're going to have to check what's returned on"
" your system."
msgstr ""

#: ../../faq/library.rst:745
msgid ""
"You can use the :meth:`~socket.socket.connect_ex` method to avoid creating "
"an exception. It will just return the errno value. To poll, you can call "
":meth:`~socket.socket.connect_ex` again later -- ``0`` or ``errno.EISCONN`` "
"indicate that you're connected -- or you can pass this socket to "
":meth:`select.select` to check if it's writable."
msgstr ""

#: ../../faq/library.rst:753
msgid ""
"The :mod:`asyncio` module provides a general purpose single-threaded and "
"concurrent asynchronous library, which can be used for writing non-blocking "
"network code. The third-party `Twisted <https://twisted.org/>`_ library is a"
" popular and feature-rich alternative."
msgstr ""

#: ../../faq/library.rst:761
msgid "Databases"
msgstr "Бази даних"

#: ../../faq/library.rst:764
msgid "Are there any interfaces to database packages in Python?"
msgstr "Чи існують інтерфейси для пакетів баз даних у Python?"

#: ../../faq/library.rst:766
msgid "Yes."
msgstr "Так."

#: ../../faq/library.rst:768
msgid ""
"Interfaces to disk-based hashes such as :mod:`DBM <dbm.ndbm>` and :mod:`GDBM"
" <dbm.gnu>` are also included with standard Python.  There is also the "
":mod:`sqlite3` module, which provides a lightweight disk-based relational "
"database."
msgstr ""
"Інтерфейси для дискових хешів, таких як :mod:`DBM <dbm.ndbm>` і :mod:`GDBM "
"<dbm.gnu>`, також включені в стандартний Python. Існує також модуль "
":mod:`sqlite3`, який забезпечує полегшену дискову реляційну базу даних."

#: ../../faq/library.rst:773
msgid ""
"Support for most relational databases is available.  See the "
"`DatabaseProgramming wiki page "
"<https://wiki.python.org/moin/DatabaseProgramming>`_ for details."
msgstr ""
"Доступна підтримка більшості реляційних баз даних. Перегляньте "
"`DatabaseProgramming вікі-сторінку "
"<https://wiki.python.org/moin/DatabaseProgramming>`_ для отримання "
"додаткової інформації."

#: ../../faq/library.rst:779
msgid "How do you implement persistent objects in Python?"
msgstr "Як реалізувати постійні об’єкти в Python?"

#: ../../faq/library.rst:781
msgid ""
"The :mod:`pickle` library module solves this in a very general way (though "
"you still can't store things like open files, sockets or windows), and the "
":mod:`shelve` library module uses pickle and (g)dbm to create persistent "
"mappings containing arbitrary Python objects."
msgstr ""
"Модуль бібліотеки :mod:`pickle` вирішує це у дуже загальний спосіб (хоча ви "
"все одно не можете зберігати такі речі, як відкриті файли, сокети чи вікна),"
" а модуль бібліотеки :mod:`shelve` використовує pickle і (g) dbm для "
"створення постійних відображень, що містять довільні об’єкти Python."

#: ../../faq/library.rst:788
msgid "Mathematics and Numerics"
msgstr "Математика та цифри"

#: ../../faq/library.rst:791
msgid "How do I generate random numbers in Python?"
msgstr "Як генерувати випадкові числа в Python?"

#: ../../faq/library.rst:793
msgid ""
"The standard module :mod:`random` implements a random number generator.  "
"Usage is simple::"
msgstr ""
"Стандартний модуль :mod:`random` реалізує генератор випадкових чисел. "
"Використання просте::"

#: ../../faq/library.rst:796
msgid ""
"import random\n"
"random.random()"
msgstr ""

#: ../../faq/library.rst:799
msgid "This returns a random floating-point number in the range [0, 1)."
msgstr ""

#: ../../faq/library.rst:801
msgid ""
"There are also many other specialized generators in this module, such as:"
msgstr ""
"У цьому модулі також є багато інших спеціалізованих генераторів, таких як:"

#: ../../faq/library.rst:803
msgid "``randrange(a, b)`` chooses an integer in the range [a, b)."
msgstr "``randrange(a, b)`` вибирає ціле число в діапазоні [a, b)."

#: ../../faq/library.rst:804
msgid "``uniform(a, b)`` chooses a floating-point number in the range [a, b)."
msgstr ""

#: ../../faq/library.rst:805
msgid ""
"``normalvariate(mean, sdev)`` samples the normal (Gaussian) distribution."
msgstr ""
"``normalvariate(mean, sdev)`` вибірка нормального (гауссового) розподілу."

#: ../../faq/library.rst:807
msgid "Some higher-level functions operate on sequences directly, such as:"
msgstr ""
"Деякі функції вищого рівня працюють безпосередньо з послідовностями, "
"наприклад:"

#: ../../faq/library.rst:809
msgid "``choice(S)`` chooses a random element from a given sequence."
msgstr "``choice(S)`` вибирає випадковий елемент із заданої послідовності."

#: ../../faq/library.rst:810
msgid "``shuffle(L)`` shuffles a list in-place, i.e. permutes it randomly."
msgstr ""
"``shuffle(L)`` перемішує список на місці, тобто переставляє його випадковим "
"чином."

#: ../../faq/library.rst:812
msgid ""
"There's also a ``Random`` class you can instantiate to create independent "
"multiple random number generators."
msgstr ""
"Існує також клас ``Random``, який можна створити для створення незалежних "
"кількох генераторів випадкових чисел."
