# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Dmytro Kazanzhy, 2023
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-11-19 01:00+0000\n"
"PO-Revision-Date: 2021-06-28 00:48+0000\n"
"Last-Translator: Dmytro Kazanzhy, 2023\n"
"Language-Team: Ukrainian (https://app.transifex.com/python-doc/teams/5390/uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != 11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % 100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || (n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

#: ../../c-api/complex.rst:6
msgid "Complex Number Objects"
msgstr "Об’єкти комплексних чисел"

#: ../../c-api/complex.rst:10
msgid ""
"Python's complex number objects are implemented as two distinct types when "
"viewed from the C API:  one is the Python object exposed to Python programs,"
" and the other is a C structure which represents the actual complex number "
"value. The API provides functions for working with both."
msgstr ""
"Об’єкти комплексних чисел Python реалізуються як два різних типи, якщо "
"дивитися через C API: один є об’єктом Python, відкритим для програм Python, "
"а інший є структурою C, яка представляє фактичне значення комплексного "
"числа. API надає функції для роботи з обома."

#: ../../c-api/complex.rst:17
msgid "Complex Numbers as C Structures"
msgstr "Комплексні числа як C структури"

#: ../../c-api/complex.rst:19
msgid ""
"Note that the functions which accept these structures as parameters and "
"return them as results do so *by value* rather than dereferencing them "
"through pointers.  This is consistent throughout the API."
msgstr ""
"Зауважте, що функції, які приймають ці структури як параметри та повертають "
"їх як результати, роблять це *за значенням*, а не розіменовують їх через "
"покажчики. Це узгоджено в усьому API."

#: ../../c-api/complex.rst:26
msgid ""
"The C structure which corresponds to the value portion of a Python complex "
"number object.  Most of the functions for dealing with complex number "
"objects use structures of this type as input or output values, as "
"appropriate."
msgstr ""

#: ../../c-api/complex.rst:33
msgid "The structure is defined as::"
msgstr ""

#: ../../c-api/complex.rst:35
msgid ""
"typedef struct {\n"
"    double real;\n"
"    double imag;\n"
"} Py_complex;"
msgstr ""

#: ../../c-api/complex.rst:43
msgid ""
"Return the sum of two complex numbers, using the C :c:type:`Py_complex` "
"representation."
msgstr ""
"Повертає суму двох комплексних чисел, використовуючи представлення C "
":c:type:`Py_complex`."

#: ../../c-api/complex.rst:49
msgid ""
"Return the difference between two complex numbers, using the C "
":c:type:`Py_complex` representation."
msgstr ""
"Повертає різницю між двома комплексними числами, використовуючи "
"представлення C :c:type:`Py_complex`."

#: ../../c-api/complex.rst:55
msgid ""
"Return the negation of the complex number *num*, using the C "
":c:type:`Py_complex` representation."
msgstr ""
"Повертає заперечення комплексного числа *num*, використовуючи представлення "
"C :c:type:`Py_complex`."

#: ../../c-api/complex.rst:61
msgid ""
"Return the product of two complex numbers, using the C :c:type:`Py_complex` "
"representation."
msgstr ""
"Повертає добуток двох комплексних чисел, використовуючи представлення C "
":c:type:`Py_complex`."

#: ../../c-api/complex.rst:67
msgid ""
"Return the quotient of two complex numbers, using the C :c:type:`Py_complex`"
" representation."
msgstr ""
"Повертає частку двох комплексних чисел, використовуючи представлення C "
":c:type:`Py_complex`."

#: ../../c-api/complex.rst:70
msgid ""
"If *divisor* is null, this method returns zero and sets :c:data:`errno` to "
":c:macro:`!EDOM`."
msgstr ""

#: ../../c-api/complex.rst:76
msgid ""
"Return the exponentiation of *num* by *exp*, using the C "
":c:type:`Py_complex` representation."
msgstr ""
"Повертає піднесення *num* до степеня *exp*, використовуючи представлення C "
":c:type:`Py_complex`."

#: ../../c-api/complex.rst:79
msgid ""
"If *num* is null and *exp* is not a positive real number, this method "
"returns zero and sets :c:data:`errno` to :c:macro:`!EDOM`."
msgstr ""

#: ../../c-api/complex.rst:84
msgid "Complex Numbers as Python Objects"
msgstr "Комплексні числа як об’єкти Python"

#: ../../c-api/complex.rst:89
msgid ""
"This subtype of :c:type:`PyObject` represents a Python complex number "
"object."
msgstr ""
"Цей підтип :c:type:`PyObject` представляє об’єкт комплексного числа Python."

#: ../../c-api/complex.rst:94
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python complex number"
" type. It is the same object as :class:`complex` in the Python layer."
msgstr ""
"Цей екземпляр :c:type:`PyTypeObject` представляє тип комплексного числа "
"Python. Це той самий об’єкт, що й :class:`complex` на рівні Python."

#: ../../c-api/complex.rst:100
msgid ""
"Return true if its argument is a :c:type:`PyComplexObject` or a subtype of "
":c:type:`PyComplexObject`.  This function always succeeds."
msgstr ""
"Повертає true, якщо його аргумент є :c:type:`PyComplexObject` або підтипом "
":c:type:`PyComplexObject`. Ця функція завжди успішна."

#: ../../c-api/complex.rst:106
msgid ""
"Return true if its argument is a :c:type:`PyComplexObject`, but not a "
"subtype of :c:type:`PyComplexObject`.  This function always succeeds."
msgstr ""
"Повертає true, якщо його аргумент є :c:type:`PyComplexObject`, але не "
"підтипом :c:type:`PyComplexObject`. Ця функція завжди успішна."

#: ../../c-api/complex.rst:112
msgid ""
"Create a new Python complex number object from a C :c:type:`Py_complex` "
"value. Return ``NULL`` with an exception set on error."
msgstr ""

#: ../../c-api/complex.rst:118
msgid ""
"Return a new :c:type:`PyComplexObject` object from *real* and *imag*. Return"
" ``NULL`` with an exception set on error."
msgstr ""

#: ../../c-api/complex.rst:124
msgid "Return the real part of *op* as a C :c:expr:`double`."
msgstr ""

#: ../../c-api/complex.rst:126
msgid ""
"If *op* is not a Python complex number object but has a "
":meth:`~object.__complex__` method, this method will first be called to "
"convert *op* to a Python complex number object.  If :meth:`!__complex__` is "
"not defined then it falls back to call :c:func:`PyFloat_AsDouble` and "
"returns its result."
msgstr ""

#: ../../c-api/complex.rst:132 ../../c-api/complex.rst:148
msgid ""
"Upon failure, this method returns ``-1.0`` with an exception set, so one "
"should call :c:func:`PyErr_Occurred` to check for errors."
msgstr ""

#: ../../c-api/complex.rst:135 ../../c-api/complex.rst:151
msgid "Use :meth:`~object.__complex__` if available."
msgstr ""

#: ../../c-api/complex.rst:140
msgid "Return the imaginary part of *op* as a C :c:expr:`double`."
msgstr ""

#: ../../c-api/complex.rst:142
msgid ""
"If *op* is not a Python complex number object but has a "
":meth:`~object.__complex__` method, this method will first be called to "
"convert *op* to a Python complex number object.  If :meth:`!__complex__` is "
"not defined then it falls back to call :c:func:`PyFloat_AsDouble` and "
"returns ``0.0`` on success."
msgstr ""

#: ../../c-api/complex.rst:156
msgid "Return the :c:type:`Py_complex` value of the complex number *op*."
msgstr "Повертає значення :c:type:`Py_complex` комплексного числа *op*."

#: ../../c-api/complex.rst:158
msgid ""
"If *op* is not a Python complex number object but has a "
":meth:`~object.__complex__` method, this method will first be called to "
"convert *op* to a Python complex number object.  If :meth:`!__complex__` is "
"not defined then it falls back to :meth:`~object.__float__`.  If "
":meth:`!__float__` is not defined then it falls back to "
":meth:`~object.__index__`."
msgstr ""

#: ../../c-api/complex.rst:164
msgid ""
"Upon failure, this method returns :c:type:`Py_complex` with "
":c:member:`~Py_complex.real` set to ``-1.0`` and with an exception set, so "
"one should call :c:func:`PyErr_Occurred` to check for errors."
msgstr ""

#: ../../c-api/complex.rst:168
msgid "Use :meth:`~object.__index__` if available."
msgstr ""

#: ../../c-api/complex.rst:8
msgid "object"
msgstr "об'єкт"

#: ../../c-api/complex.rst:8
msgid "complex number"
msgstr "комплексне число"
