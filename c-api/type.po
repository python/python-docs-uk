# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Taras Kuzyo <kuzyo.taras@gmail.com>, 2023
# Dmytro Kazanzhy, 2023
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-11-22 14:17+0000\n"
"PO-Revision-Date: 2021-06-28 00:50+0000\n"
"Last-Translator: Dmytro Kazanzhy, 2023\n"
"Language-Team: Ukrainian (https://app.transifex.com/python-doc/teams/5390/uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != 11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % 100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || (n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

#: ../../c-api/type.rst:6
msgid "Type Objects"
msgstr "Об'єкти типу"

#: ../../c-api/type.rst:13
msgid "The C structure of the objects used to describe built-in types."
msgstr "Структура C об’єктів, що використовуються для опису вбудованих типів."

#: ../../c-api/type.rst:18
msgid ""
"This is the type object for type objects; it is the same object as "
":class:`type` in the Python layer."
msgstr ""
"Це об’єкт типу для об’єктів типу; це той самий об’єкт, що й :class:`type` на"
" рівні Python."

#: ../../c-api/type.rst:24
msgid ""
"Return non-zero if the object *o* is a type object, including instances of "
"types derived from the standard type object.  Return 0 in all other cases. "
"This function always succeeds."
msgstr ""
"Повертає ненульове значення, якщо об’єкт *o* є об’єктом типу, включаючи "
"екземпляри типів, похідних від об’єкта стандартного типу. Повертає 0 у всіх "
"інших випадках. Ця функція завжди успішна."

#: ../../c-api/type.rst:31
msgid ""
"Return non-zero if the object *o* is a type object, but not a subtype of the"
" standard type object.  Return 0 in all other cases.  This function always "
"succeeds."
msgstr ""
"Повертає відмінне від нуля значення, якщо об’єкт *o* є об’єктом типу, але не"
" підтипом об’єкта стандартного типу. Повертає 0 у всіх інших випадках. Ця "
"функція завжди успішна."

#: ../../c-api/type.rst:38
msgid "Clear the internal lookup cache. Return the current version tag."
msgstr "Очистіть внутрішній кеш пошуку. Повернути тег поточної версії."

#: ../../c-api/type.rst:42
msgid ""
"Return the :c:member:`~PyTypeObject.tp_flags` member of *type*. This "
"function is primarily meant for use with ``Py_LIMITED_API``; the individual "
"flag bits are guaranteed to be stable across Python releases, but access to "
":c:member:`~PyTypeObject.tp_flags` itself is not part of the :ref:`limited "
"API <limited-c-api>`."
msgstr ""

#: ../../c-api/type.rst:49
msgid "The return type is now ``unsigned long`` rather than ``long``."
msgstr "Тип повернення тепер ``unsigned long``, а не ``long``."

#: ../../c-api/type.rst:55
msgid ""
"Return the type object's internal namespace, which is otherwise only exposed"
" via a read-only proxy (:attr:`cls.__dict__ <type.__dict__>`). This is a "
"replacement for accessing :c:member:`~PyTypeObject.tp_dict` directly. The "
"returned dictionary must be treated as read-only."
msgstr ""

#: ../../c-api/type.rst:61
msgid ""
"This function is meant for specific embedding and language-binding cases, "
"where direct access to the dict is necessary and indirect access (e.g. via "
"the proxy or :c:func:`PyObject_GetAttr`) isn't adequate."
msgstr ""

#: ../../c-api/type.rst:65
msgid ""
"Extension modules should continue to use ``tp_dict``, directly or "
"indirectly, when setting up their own types."
msgstr ""

#: ../../c-api/type.rst:73
msgid ""
"Invalidate the internal lookup cache for the type and all of its subtypes.  "
"This function must be called after any manual modification of the attributes"
" or base classes of the type."
msgstr ""
"Визнати недійсним внутрішній кеш пошуку для типу та всіх його підтипів. Цю "
"функцію необхідно викликати після будь-якої ручної зміни атрибутів або "
"базових класів типу."

#: ../../c-api/type.rst:80
msgid ""
"Register *callback* as a type watcher. Return a non-negative integer ID "
"which must be passed to future calls to :c:func:`PyType_Watch`. In case of "
"error (e.g. no more watcher IDs available), return ``-1`` and set an "
"exception."
msgstr ""

#: ../../c-api/type.rst:90
msgid ""
"Clear watcher identified by *watcher_id* (previously returned from "
":c:func:`PyType_AddWatcher`). Return ``0`` on success, ``-1`` on error (e.g."
" if *watcher_id* was never registered.)"
msgstr ""

#: ../../c-api/type.rst:94
msgid ""
"An extension should never call ``PyType_ClearWatcher`` with a *watcher_id* "
"that was not returned to it by a previous call to "
":c:func:`PyType_AddWatcher`."
msgstr ""

#: ../../c-api/type.rst:103
msgid ""
"Mark *type* as watched. The callback granted *watcher_id* by "
":c:func:`PyType_AddWatcher` will be called whenever "
":c:func:`PyType_Modified` reports a change to *type*. (The callback may be "
"called only once for a series of consecutive modifications to *type*, if "
":c:func:`!_PyType_Lookup` is not called on *type* between the modifications;"
" this is an implementation detail and subject to change.)"
msgstr ""

#: ../../c-api/type.rst:110
msgid ""
"An extension should never call ``PyType_Watch`` with a *watcher_id* that was"
" not returned to it by a previous call to :c:func:`PyType_AddWatcher`."
msgstr ""

#: ../../c-api/type.rst:118
msgid "Type of a type-watcher callback function."
msgstr ""

#: ../../c-api/type.rst:120
msgid ""
"The callback must not modify *type* or cause :c:func:`PyType_Modified` to be"
" called on *type* or any type in its MRO; violating this rule could cause "
"infinite recursion."
msgstr ""

#: ../../c-api/type.rst:129
msgid ""
"Return non-zero if the type object *o* sets the feature *feature*. Type "
"features are denoted by single bit flags."
msgstr ""
"Повертає ненульове значення, якщо об’єкт типу *o* встановлює функцію "
"*feature*. Функції типу позначаються однобітовими прапорцями."

#: ../../c-api/type.rst:135
msgid ""
"Return true if the type object includes support for the cycle detector; this"
" tests the type flag :c:macro:`Py_TPFLAGS_HAVE_GC`."
msgstr ""

#: ../../c-api/type.rst:141
msgid "Return true if *a* is a subtype of *b*."
msgstr "Повертає true, якщо *a* є підтипом *b*."

#: ../../c-api/type.rst:143
msgid ""
"This function only checks for actual subtypes, which means that "
":meth:`~type.__subclasscheck__` is not called on *b*.  Call "
":c:func:`PyObject_IsSubclass` to do the same check that :func:`issubclass` "
"would do."
msgstr ""

#: ../../c-api/type.rst:151
msgid ""
"Generic handler for the :c:member:`~PyTypeObject.tp_alloc` slot of a type "
"object.  Use Python's default memory allocation mechanism to allocate a new "
"instance and initialize all its contents to ``NULL``."
msgstr ""
"Загальний обробник для слота :c:member:`~PyTypeObject.tp_alloc` об’єкта "
"типу. Використовуйте стандартний механізм виділення пам’яті Python, щоб "
"виділити новий екземпляр та ініціалізувати весь його вміст як ``NULL``."

#: ../../c-api/type.rst:157
msgid ""
"Generic handler for the :c:member:`~PyTypeObject.tp_new` slot of a type "
"object.  Create a new instance using the type's "
":c:member:`~PyTypeObject.tp_alloc` slot."
msgstr ""
"Загальний обробник для слота :c:member:`~PyTypeObject.tp_new` об’єкта типу. "
"Створіть новий екземпляр, використовуючи слот типу "
":c:member:`~PyTypeObject.tp_alloc`."

#: ../../c-api/type.rst:162
msgid ""
"Finalize a type object.  This should be called on all type objects to finish"
" their initialization.  This function is responsible for adding inherited "
"slots from a type's base class.  Return ``0`` on success, or return ``-1`` "
"and sets an exception on error."
msgstr ""
"Завершення об’єкта типу. Це слід викликати для всіх об’єктів типу, щоб "
"завершити їх ініціалізацію. Ця функція відповідає за додавання успадкованих "
"слотів від базового класу типу. Повертає ``0`` у разі успіху або ``-1`` і "
"встановлює виняток у випадку помилки."

#: ../../c-api/type.rst:168
msgid ""
"If some of the base classes implements the GC protocol and the provided type"
" does not include the :c:macro:`Py_TPFLAGS_HAVE_GC` in its flags, then the "
"GC protocol will be automatically implemented from its parents. On the "
"contrary, if the type being created does include "
":c:macro:`Py_TPFLAGS_HAVE_GC` in its flags then it **must** implement the GC"
" protocol itself by at least implementing the "
":c:member:`~PyTypeObject.tp_traverse` handle."
msgstr ""

#: ../../c-api/type.rst:178
msgid ""
"Return the type's name. Equivalent to getting the type's "
":attr:`~type.__name__` attribute."
msgstr ""

#: ../../c-api/type.rst:185
msgid ""
"Return the type's qualified name. Equivalent to getting the type's "
":attr:`~type.__qualname__` attribute."
msgstr ""

#: ../../c-api/type.rst:192
msgid ""
"Return the type's fully qualified name. Equivalent to "
"``f\"{type.__module__}.{type.__qualname__}\"``, or :attr:`type.__qualname__`"
" if :attr:`type.__module__` is not a string or is equal to ``\"builtins\"``."
msgstr ""

#: ../../c-api/type.rst:200
msgid ""
"Return the type's module name. Equivalent to getting the "
":attr:`type.__module__` attribute."
msgstr ""

#: ../../c-api/type.rst:207
msgid ""
"Return the function pointer stored in the given slot. If the result is "
"``NULL``, this indicates that either the slot is ``NULL``, or that the "
"function was called with invalid parameters. Callers will typically cast the"
" result pointer into the appropriate function type."
msgstr ""
"Повертає вказівник функції, що зберігається у вказаному слоті. Якщо "
"результат ``NULL``, це означає, що або слот має ``NULL``, або що функцію "
"було викликано з недійсними параметрами. Викликачі зазвичай перетворюють "
"покажчик результату на відповідний тип функції."

#: ../../c-api/type.rst:213
msgid ""
"See :c:member:`PyType_Slot.slot` for possible values of the *slot* argument."
msgstr ""
"Перегляньте :c:member:`PyType_Slot.slot`, щоб дізнатися про можливі значення"
" аргументу *slot*."

#: ../../c-api/type.rst:217
msgid ""
":c:func:`PyType_GetSlot` can now accept all types. Previously, it was "
"limited to :ref:`heap types <heap-types>`."
msgstr ""
":c:func:`PyType_GetSlot` тепер може приймати всі типи. Раніше це було "
"обмежено :ref:`типами купи <heap-types>`."

#: ../../c-api/type.rst:223
msgid ""
"Return the module object associated with the given type when the type was "
"created using :c:func:`PyType_FromModuleAndSpec`."
msgstr ""
"Повертає об’єкт модуля, пов’язаний із заданим типом, коли тип було створено "
"за допомогою :c:func:`PyType_FromModuleAndSpec`."

#: ../../c-api/type.rst:226 ../../c-api/type.rst:246
msgid ""
"If no module is associated with the given type, sets :py:class:`TypeError` "
"and returns ``NULL``."
msgstr ""
"Якщо жоден модуль не пов’язаний із заданим типом, встановлюється "
":py:class:`TypeError` і повертається ``NULL``."

#: ../../c-api/type.rst:229
msgid ""
"This function is usually used to get the module in which a method is "
"defined. Note that in such a method, ``PyType_GetModule(Py_TYPE(self))`` may"
" not return the intended result. ``Py_TYPE(self)`` may be a *subclass* of "
"the intended class, and subclasses are not necessarily defined in the same "
"module as their superclass. See :c:type:`PyCMethod` to get the class that "
"defines the method. See :c:func:`PyType_GetModuleByDef` for cases when "
":c:type:`!PyCMethod` cannot be used."
msgstr ""

#: ../../c-api/type.rst:242
msgid ""
"Return the state of the module object associated with the given type. This "
"is a shortcut for calling :c:func:`PyModule_GetState()` on the result of "
":c:func:`PyType_GetModule`."
msgstr ""
"Повертає стан об’єкта модуля, пов’язаного з заданим типом. Це ярлик для "
"виклику :c:func:`PyModule_GetState()` за результатом "
":c:func:`PyType_GetModule`."

#: ../../c-api/type.rst:249
msgid ""
"If the *type* has an associated module but its state is ``NULL``, returns "
"``NULL`` without setting an exception."
msgstr ""
"Якщо *тип* має пов’язаний модуль, але його стан ``NULL``, повертає ``NULL`` "
"без встановлення винятку."

#: ../../c-api/type.rst:256
msgid ""
"Find the first superclass whose module was created from the given "
":c:type:`PyModuleDef` *def*, and return that module."
msgstr ""

#: ../../c-api/type.rst:259
msgid ""
"If no module is found, raises a :py:class:`TypeError` and returns ``NULL``."
msgstr ""

#: ../../c-api/type.rst:261
msgid ""
"This function is intended to be used together with "
":c:func:`PyModule_GetState()` to get module state from slot methods (such as"
" :c:member:`~PyTypeObject.tp_init` or :c:member:`~PyNumberMethods.nb_add`) "
"and other places where a method's defining class cannot be passed using the "
":c:type:`PyCMethod` calling convention."
msgstr ""

#: ../../c-api/type.rst:271
msgid "Attempt to assign a version tag to the given type."
msgstr ""

#: ../../c-api/type.rst:273
msgid ""
"Returns 1 if the type already had a valid version tag or a new one was "
"assigned, or 0 if a new tag could not be assigned."
msgstr ""

#: ../../c-api/type.rst:280
msgid "Creating Heap-Allocated Types"
msgstr "Створення типів, виділених у купі"

#: ../../c-api/type.rst:282
msgid ""
"The following functions and structs are used to create :ref:`heap types "
"<heap-types>`."
msgstr ""
"Наступні функції та структури використовуються для створення :ref:`типів "
"купи <heap-types>`."

#: ../../c-api/type.rst:287
msgid ""
"Create and return a :ref:`heap type <heap-types>` from the *spec* (see "
":c:macro:`Py_TPFLAGS_HEAPTYPE`)."
msgstr ""

#: ../../c-api/type.rst:290
msgid ""
"The metaclass *metaclass* is used to construct the resulting type object. "
"When *metaclass* is ``NULL``, the metaclass is derived from *bases* (or "
"*Py_tp_base[s]* slots if *bases* is ``NULL``, see below)."
msgstr ""

#: ../../c-api/type.rst:294
msgid ""
"Metaclasses that override :c:member:`~PyTypeObject.tp_new` are not "
"supported, except if ``tp_new`` is ``NULL``. (For backwards compatibility, "
"other ``PyType_From*`` functions allow such metaclasses. They ignore "
"``tp_new``, which may result in incomplete initialization. This is "
"deprecated and in Python 3.14+ such metaclasses will not be supported.)"
msgstr ""

#: ../../c-api/type.rst:301
msgid ""
"The *bases* argument can be used to specify base classes; it can either be "
"only one class or a tuple of classes. If *bases* is ``NULL``, the "
"*Py_tp_bases* slot is used instead. If that also is ``NULL``, the "
"*Py_tp_base* slot is used instead. If that also is ``NULL``, the new type "
"derives from :class:`object`."
msgstr ""
"Аргумент *bases* можна використовувати для визначення базових класів; це "
"може бути лише один клас або кортеж класів. Якщо *bases* має значення "
"``NULL``, замість нього використовується слот *Py_tp_bases*. Якщо це також "
"``NULL``, замість нього використовується слот *Py_tp_base*. Якщо це також "
"``NULL``, новий тип походить від :class:`object`."

#: ../../c-api/type.rst:307
msgid ""
"The *module* argument can be used to record the module in which the new "
"class is defined. It must be a module object or ``NULL``. If not ``NULL``, "
"the module is associated with the new type and can later be retrieved with "
":c:func:`PyType_GetModule`. The associated module is not inherited by "
"subclasses; it must be specified for each class individually."
msgstr ""
"Аргумент *module* можна використовувати для запису модуля, в якому визначено"
" новий клас. Це має бути об’єкт модуля або ``NULL``. Якщо не ``NULL``, "
"модуль асоціюється з новим типом і може бути пізніше отриманий за допомогою "
":c:func:`PyType_GetModule`. Асоційований модуль не успадковується "
"підкласами; її необхідно вказувати для кожного класу окремо."

#: ../../c-api/type.rst:314
msgid "This function calls :c:func:`PyType_Ready` on the new type."
msgstr "Ця функція викликає :c:func:`PyType_Ready` для нового типу."

#: ../../c-api/type.rst:316
msgid ""
"Note that this function does *not* fully match the behavior of calling "
":py:class:`type() <type>` or using the :keyword:`class` statement. With "
"user-provided base types or metaclasses, prefer :ref:`calling <capi-call>` "
":py:class:`type` (or the metaclass) over ``PyType_From*`` functions. "
"Specifically:"
msgstr ""

#: ../../c-api/type.rst:323
msgid ""
":py:meth:`~object.__new__` is not called on the new class (and it must be "
"set to ``type.__new__``)."
msgstr ""

#: ../../c-api/type.rst:325
msgid ":py:meth:`~object.__init__` is not called on the new class."
msgstr ""

#: ../../c-api/type.rst:326
msgid ":py:meth:`~object.__init_subclass__` is not called on any bases."
msgstr ""

#: ../../c-api/type.rst:327
msgid ":py:meth:`~object.__set_name__` is not called on new descriptors."
msgstr ""

#: ../../c-api/type.rst:333
msgid "Equivalent to ``PyType_FromMetaclass(NULL, module, spec, bases)``."
msgstr ""

#: ../../c-api/type.rst:339
msgid ""
"The function now accepts a single class as the *bases* argument and ``NULL``"
" as the ``tp_doc`` slot."
msgstr ""
"Тепер функція приймає один клас як аргумент *bases* і ``NULL`` як слот "
"``tp_doc``."

#: ../../c-api/type.rst:344 ../../c-api/type.rst:361
msgid ""
"The function now finds and uses a metaclass corresponding to the provided "
"base classes.  Previously, only :class:`type` instances were returned."
msgstr ""

#: ../../c-api/type.rst:347 ../../c-api/type.rst:364 ../../c-api/type.rst:380
msgid ""
"The :c:member:`~PyTypeObject.tp_new` of the metaclass is *ignored*. which "
"may result in incomplete initialization. Creating classes whose metaclass "
"overrides :c:member:`~PyTypeObject.tp_new` is deprecated and in Python 3.14+"
" it will be no longer allowed."
msgstr ""

#: ../../c-api/type.rst:355
msgid "Equivalent to ``PyType_FromMetaclass(NULL, NULL, spec, bases)``."
msgstr ""

#: ../../c-api/type.rst:372
msgid "Equivalent to ``PyType_FromMetaclass(NULL, NULL, spec, NULL)``."
msgstr ""

#: ../../c-api/type.rst:376
msgid ""
"The function now finds and uses a metaclass corresponding to the base "
"classes provided in *Py_tp_base[s]* slots. Previously, only :class:`type` "
"instances were returned."
msgstr ""

#: ../../c-api/type.rst:397
msgid "Structure defining a type's behavior."
msgstr "Структура, що визначає поведінку типу."

#: ../../c-api/type.rst:401
msgid "Name of the type, used to set :c:member:`PyTypeObject.tp_name`."
msgstr ""
"Назва типу, що використовується для встановлення "
":c:member:`PyTypeObject.tp_name`."

#: ../../c-api/type.rst:405
msgid ""
"If positive, specifies the size of the instance in bytes. It is used to set "
":c:member:`PyTypeObject.tp_basicsize`."
msgstr ""

#: ../../c-api/type.rst:408
msgid ""
"If zero, specifies that :c:member:`~PyTypeObject.tp_basicsize` should be "
"inherited."
msgstr ""

#: ../../c-api/type.rst:411
msgid ""
"If negative, the absolute value specifies how much space instances of the "
"class need *in addition* to the superclass. Use "
":c:func:`PyObject_GetTypeData` to get a pointer to subclass-specific memory "
"reserved this way."
msgstr ""

#: ../../c-api/type.rst:418
msgid "Previously, this field could not be negative."
msgstr ""

#: ../../c-api/type.rst:422
msgid ""
"Size of one element of a variable-size type, in bytes. Used to set "
":c:member:`PyTypeObject.tp_itemsize`. See ``tp_itemsize`` documentation for "
"caveats."
msgstr ""

#: ../../c-api/type.rst:426
msgid ""
"If zero, :c:member:`~PyTypeObject.tp_itemsize` is inherited. Extending "
"arbitrary variable-sized classes is dangerous, since some types use a fixed "
"offset for variable-sized memory, which can then overlap fixed-sized memory "
"used by a subclass. To help prevent mistakes, inheriting ``itemsize`` is "
"only possible in the following situations:"
msgstr ""

#: ../../c-api/type.rst:433
msgid ""
"The base is not variable-sized (its :c:member:`~PyTypeObject.tp_itemsize`)."
msgstr ""

#: ../../c-api/type.rst:435
msgid ""
"The requested :c:member:`PyType_Spec.basicsize` is positive, suggesting that"
" the memory layout of the base class is known."
msgstr ""

#: ../../c-api/type.rst:437
msgid ""
"The requested :c:member:`PyType_Spec.basicsize` is zero, suggesting that the"
" subclass does not access the instance's memory directly."
msgstr ""

#: ../../c-api/type.rst:440
msgid "With the :c:macro:`Py_TPFLAGS_ITEMS_AT_END` flag."
msgstr ""

#: ../../c-api/type.rst:444
msgid "Type flags, used to set :c:member:`PyTypeObject.tp_flags`."
msgstr ""
"Прапорці типу, які використовуються для встановлення "
":c:member:`PyTypeObject.tp_flags`."

#: ../../c-api/type.rst:446
msgid ""
"If the ``Py_TPFLAGS_HEAPTYPE`` flag is not set, "
":c:func:`PyType_FromSpecWithBases` sets it automatically."
msgstr ""
"Якщо прапор ``Py_TPFLAGS_HEAPTYPE`` не встановлено, "
":c:func:`PyType_FromSpecWithBases` встановлює його автоматично."

#: ../../c-api/type.rst:451
msgid ""
"Array of :c:type:`PyType_Slot` structures. Terminated by the special slot "
"value ``{0, NULL}``."
msgstr ""
"Масив структур :c:type:`PyType_Slot`. Закінчується спеціальним значенням "
"слота ``{0, NULL}``."

#: ../../c-api/type.rst:454
msgid "Each slot ID should be specified at most once."
msgstr ""

#: ../../c-api/type.rst:464
msgid ""
"Structure defining optional functionality of a type, containing a slot ID "
"and a value pointer."
msgstr ""
"Структура, що визначає необов’язкову функціональність типу, що містить "
"ідентифікатор слота та покажчик значення."

#: ../../c-api/type.rst:469
msgid "A slot ID."
msgstr "Ідентифікатор слота."

#: ../../c-api/type.rst:471
msgid ""
"Slot IDs are named like the field names of the structures "
":c:type:`PyTypeObject`, :c:type:`PyNumberMethods`, "
":c:type:`PySequenceMethods`, :c:type:`PyMappingMethods` and "
":c:type:`PyAsyncMethods` with an added ``Py_`` prefix. For example, use:"
msgstr ""
"Ідентифікатори слотів називаються як імена полів структур "
":c:type:`PyTypeObject`, :c:type:`PyNumberMethods`, "
":c:type:`PySequenceMethods`, :c:type:`PyMappingMethods` і "
":c:type:`PyAsyncMethods` з доданим префіксом ``Py_``. Наприклад, "
"використовуйте:"

#: ../../c-api/type.rst:477
msgid "``Py_tp_dealloc`` to set :c:member:`PyTypeObject.tp_dealloc`"
msgstr ""
"``Py_tp_dealloc`` для встановлення :c:member:`PyTypeObject.tp_dealloc`"

#: ../../c-api/type.rst:478
msgid "``Py_nb_add`` to set :c:member:`PyNumberMethods.nb_add`"
msgstr "``Py_nb_add`` для встановлення :c:member:`PyNumberMethods.nb_add`"

#: ../../c-api/type.rst:479
msgid "``Py_sq_length`` to set :c:member:`PySequenceMethods.sq_length`"
msgstr ""
"``Py_sq_length`` для встановлення :c:member:`PySequenceMethods.sq_length`"

#: ../../c-api/type.rst:481
msgid ""
"The following “offset” fields cannot be set using :c:type:`PyType_Slot`:"
msgstr ""

#: ../../c-api/type.rst:483
msgid ""
":c:member:`~PyTypeObject.tp_weaklistoffset` (use "
":c:macro:`Py_TPFLAGS_MANAGED_WEAKREF` instead if possible)"
msgstr ""

#: ../../c-api/type.rst:485
msgid ""
":c:member:`~PyTypeObject.tp_dictoffset` (use "
":c:macro:`Py_TPFLAGS_MANAGED_DICT` instead if possible)"
msgstr ""

#: ../../c-api/type.rst:487
msgid ""
":c:member:`~PyTypeObject.tp_vectorcall_offset` (use "
"``\"__vectorcalloffset__\"`` in :ref:`PyMemberDef <pymemberdef-offsets>`)"
msgstr ""

#: ../../c-api/type.rst:491
msgid ""
"If it is not possible to switch to a ``MANAGED`` flag (for example, for "
"vectorcall or to support Python older than 3.12), specify the offset in "
":c:member:`Py_tp_members <PyTypeObject.tp_members>`. See :ref:`PyMemberDef "
"documentation <pymemberdef-offsets>` for details."
msgstr ""

#: ../../c-api/type.rst:497
msgid "The following fields cannot be set at all when creating a heap type:"
msgstr ""

#: ../../c-api/type.rst:499
msgid ""
":c:member:`~PyTypeObject.tp_vectorcall` (use "
":c:member:`~PyTypeObject.tp_new` and/or :c:member:`~PyTypeObject.tp_init`)"
msgstr ""

#: ../../c-api/type.rst:503
msgid ""
"Internal fields: :c:member:`~PyTypeObject.tp_dict`, "
":c:member:`~PyTypeObject.tp_mro`, :c:member:`~PyTypeObject.tp_cache`, "
":c:member:`~PyTypeObject.tp_subclasses`, and "
":c:member:`~PyTypeObject.tp_weaklist`."
msgstr ""

#: ../../c-api/type.rst:510
msgid ""
"Setting :c:data:`Py_tp_bases` or :c:data:`Py_tp_base` may be problematic on "
"some platforms. To avoid issues, use the *bases* argument of "
":c:func:`PyType_FromSpecWithBases` instead."
msgstr ""

#: ../../c-api/type.rst:517
msgid "Slots in :c:type:`PyBufferProcs` may be set in the unlimited API."
msgstr "Слоти в :c:type:`PyBufferProcs` можна встановити в необмеженому API."

#: ../../c-api/type.rst:519
msgid ""
":c:member:`~PyBufferProcs.bf_getbuffer` and "
":c:member:`~PyBufferProcs.bf_releasebuffer` are now available under the "
":ref:`limited API <limited-c-api>`."
msgstr ""

#: ../../c-api/type.rst:526
msgid ""
"The desired value of the slot. In most cases, this is a pointer to a "
"function."
msgstr "Бажане значення слота. У більшості випадків це вказівник на функцію."

#: ../../c-api/type.rst:529
msgid "Slots other than ``Py_tp_doc`` may not be ``NULL``."
msgstr "Слоти, окрім ``Py_tp_doc``, не можуть бути ``NULL``."

#: ../../c-api/type.rst:8
msgid "object"
msgstr "об'єкт"

#: ../../c-api/type.rst:8
msgid "type"
msgstr "тип"
