# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Dmytro Kazanzhy, 2022
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-11-19 01:00+0000\n"
"PO-Revision-Date: 2021-06-28 00:50+0000\n"
"Last-Translator: Dmytro Kazanzhy, 2022\n"
"Language-Team: Ukrainian (https://app.transifex.com/python-doc/teams/5390/uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != 11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % 100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || (n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

#: ../../c-api/typehints.rst:6
msgid "Objects for Type Hinting"
msgstr "Об'єкти для підказки типу"

#: ../../c-api/typehints.rst:8
msgid ""
"Various built-in types for type hinting are provided.  Currently, two types "
"exist -- :ref:`GenericAlias <types-genericalias>` and :ref:`Union <types-"
"union>`.  Only ``GenericAlias`` is exposed to C."
msgstr ""
"Надаються різні вбудовані типи для підказки типу. Наразі існує два типи -- "
":ref:`GenericAlias <types-genericalias>` та :ref:`Union <types-union>`. "
"Тільки ``GenericAlias`` доступний для C."

#: ../../c-api/typehints.rst:14
msgid ""
"Create a :ref:`GenericAlias <types-genericalias>` object. Equivalent to "
"calling the Python class :class:`types.GenericAlias`.  The *origin* and "
"*args* arguments set the ``GenericAlias``\\ 's ``__origin__`` and "
"``__args__`` attributes respectively. *origin* should be a "
":c:expr:`PyTypeObject*`, and *args* can be a :c:expr:`PyTupleObject*` or any"
" ``PyObject*``.  If *args* passed is not a tuple, a 1-tuple is automatically"
" constructed and ``__args__`` is set to ``(args,)``. Minimal checking is "
"done for the arguments, so the function will succeed even if *origin* is not"
" a type. The ``GenericAlias``\\ 's ``__parameters__`` attribute is "
"constructed lazily from ``__args__``.  On failure, an exception is raised "
"and ``NULL`` is returned."
msgstr ""

#: ../../c-api/typehints.rst:28
msgid "Here's an example of how to make an extension type generic::"
msgstr "Ось приклад того, як зробити тип розширення загальним::"

#: ../../c-api/typehints.rst:30
msgid ""
"...\n"
"static PyMethodDef my_obj_methods[] = {\n"
"    // Other methods.\n"
"    ...\n"
"    {\"__class_getitem__\", Py_GenericAlias, METH_O|METH_CLASS, \"See PEP 585\"}\n"
"    ...\n"
"}"
msgstr ""

#: ../../c-api/typehints.rst:38
msgid "The data model method :meth:`~object.__class_getitem__`."
msgstr ""

#: ../../c-api/typehints.rst:44
msgid ""
"The C type of the object returned by :c:func:`Py_GenericAlias`. Equivalent "
"to :class:`types.GenericAlias` in Python."
msgstr ""
"Тип C об’єкта, який повертає :c:func:`Py_GenericAlias`. Еквівалент "
":class:`types.GenericAlias` у Python."
