# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Dmytro Kazanzhy, 2023
# Yuliia Shevchenko, 2024
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-11-22 14:17+0000\n"
"PO-Revision-Date: 2021-06-28 00:48+0000\n"
"Last-Translator: Yuliia Shevchenko, 2024\n"
"Language-Team: Ukrainian (https://app.transifex.com/python-doc/teams/5390/uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != 11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % 100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || (n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

#: ../../c-api/dict.rst:6
msgid "Dictionary Objects"
msgstr "Об’єкти словника"

#: ../../c-api/dict.rst:13
msgid ""
"This subtype of :c:type:`PyObject` represents a Python dictionary object."
msgstr "Цей підтип :c:type:`PyObject` представляє об’єкт словника Python."

#: ../../c-api/dict.rst:18
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python dictionary "
"type.  This is the same object as :class:`dict` in the Python layer."
msgstr ""
"Цей екземпляр :c:type:`PyTypeObject` представляє тип словника Python. Це той"
" самий об’єкт, що й :class:`dict` на рівні Python."

#: ../../c-api/dict.rst:24
msgid ""
"Return true if *p* is a dict object or an instance of a subtype of the dict "
"type.  This function always succeeds."
msgstr ""
"Повертає true, якщо *p* є об’єктом dict або екземпляром підтипу типу dict. "
"Ця функція завжди успішна."

#: ../../c-api/dict.rst:30
msgid ""
"Return true if *p* is a dict object, but not an instance of a subtype of the"
" dict type.  This function always succeeds."
msgstr ""
"Повертає true, якщо *p* є об’єктом dict, але не екземпляром підтипу типу "
"dict. Ця функція завжди успішна."

#: ../../c-api/dict.rst:36
msgid "Return a new empty dictionary, or ``NULL`` on failure."
msgstr "Повертає новий порожній словник або ``NULL`` у разі помилки."

#: ../../c-api/dict.rst:41
msgid ""
"Return a :class:`types.MappingProxyType` object for a mapping which enforces"
" read-only behavior.  This is normally used to create a view to prevent "
"modification of the dictionary for non-dynamic class types."
msgstr ""
"Повертає об’єкт :class:`types.MappingProxyType` для зіставлення, яке "
"забезпечує поведінку лише для читання. Зазвичай це використовується для "
"створення представлення для запобігання модифікації словника для "
"нединамічних типів класів."

#: ../../c-api/dict.rst:48
msgid "Empty an existing dictionary of all key-value pairs."
msgstr "Очистити існуючий словник від усіх пар ключ-значення."

#: ../../c-api/dict.rst:53
msgid ""
"Determine if dictionary *p* contains *key*.  If an item in *p* is matches "
"*key*, return ``1``, otherwise return ``0``.  On error, return ``-1``. This "
"is equivalent to the Python expression ``key in p``."
msgstr ""
"Визначте, чи словник *p* містить *ключ*. Якщо елемент у *p* відповідає "
"*ключу*, поверніть ``1``, інакше поверніть ``0``. У разі помилки повертає "
"``-1``. Це еквівалентно виразу Python ``key in p``."

#: ../../c-api/dict.rst:60
msgid ""
"This is the same as :c:func:`PyDict_Contains`, but *key* is specified as a "
":c:expr:`const char*` UTF-8 encoded bytes string, rather than a "
":c:expr:`PyObject*`."
msgstr ""

#: ../../c-api/dict.rst:69
msgid "Return a new dictionary that contains the same key-value pairs as *p*."
msgstr ""
"Повертає новий словник, який містить ті самі пари ключ-значення, що й *p*."

#: ../../c-api/dict.rst:74
msgid ""
"Insert *val* into the dictionary *p* with a key of *key*.  *key* must be "
":term:`hashable`; if it isn't, :exc:`TypeError` will be raised. Return ``0``"
" on success or ``-1`` on failure.  This function *does not* steal a "
"reference to *val*."
msgstr ""
"Вставте *val* у словник *p* з ключем *key*. *ключ* має бути "
":term:`hashable`; якщо це не так, буде викликано :exc:`TypeError`. Повертає "
"``0`` у разі успіху або ``-1`` у разі невдачі. Ця функція *не* викрадає "
"посилання на *val*."

#: ../../c-api/dict.rst:82
msgid ""
"This is the same as :c:func:`PyDict_SetItem`, but *key* is specified as a "
":c:expr:`const char*` UTF-8 encoded bytes string, rather than a "
":c:expr:`PyObject*`."
msgstr ""

#: ../../c-api/dict.rst:89
msgid ""
"Remove the entry in dictionary *p* with key *key*. *key* must be "
":term:`hashable`; if it isn't, :exc:`TypeError` is raised. If *key* is not "
"in the dictionary, :exc:`KeyError` is raised. Return ``0`` on success or "
"``-1`` on failure."
msgstr ""

#: ../../c-api/dict.rst:97
msgid ""
"This is the same as :c:func:`PyDict_DelItem`, but *key* is specified as a "
":c:expr:`const char*` UTF-8 encoded bytes string, rather than a "
":c:expr:`PyObject*`."
msgstr ""

#: ../../c-api/dict.rst:104
msgid ""
"Return a new :term:`strong reference` to the object from dictionary *p* "
"which has a key *key*:"
msgstr ""

#: ../../c-api/dict.rst:107
msgid ""
"If the key is present, set *\\*result* to a new :term:`strong reference` to "
"the value and return ``1``."
msgstr ""

#: ../../c-api/dict.rst:109
msgid "If the key is missing, set *\\*result* to ``NULL`` and return ``0``."
msgstr ""

#: ../../c-api/dict.rst:110 ../../c-api/dict.rst:207
msgid "On error, raise an exception and return ``-1``."
msgstr ""

#: ../../c-api/dict.rst:114
msgid "See also the :c:func:`PyObject_GetItem` function."
msgstr ""

#: ../../c-api/dict.rst:119
msgid ""
"Return a :term:`borrowed reference` to the object from dictionary *p* which "
"has a key *key*.  Return ``NULL`` if the key *key* is missing *without* "
"setting an exception."
msgstr ""

#: ../../c-api/dict.rst:125
msgid ""
"Exceptions that occur while this calls :meth:`~object.__hash__` and "
":meth:`~object.__eq__` methods are silently ignored. Prefer the "
":c:func:`PyDict_GetItemWithError` function instead."
msgstr ""

#: ../../c-api/dict.rst:129
msgid ""
"Calling this API without :term:`GIL` held had been allowed for historical "
"reason. It is no longer allowed."
msgstr ""
"Виклик цього API без утримання :term:`GIL` був дозволений з історичних "
"причин. Це більше не дозволено."

#: ../../c-api/dict.rst:136
msgid ""
"Variant of :c:func:`PyDict_GetItem` that does not suppress exceptions. "
"Return ``NULL`` **with** an exception set if an exception occurred.  Return "
"``NULL`` **without** an exception set if the key wasn't present."
msgstr ""
"Варіант :c:func:`PyDict_GetItem`, який не пригнічує винятки. Повертає "
"``NULL`` **з** встановленим винятком, якщо виняток стався. Повертає ``NULL``"
" **без** набору винятків, якщо ключ відсутній."

#: ../../c-api/dict.rst:144
msgid ""
"This is the same as :c:func:`PyDict_GetItem`, but *key* is specified as a "
":c:expr:`const char*` UTF-8 encoded bytes string, rather than a "
":c:expr:`PyObject*`."
msgstr ""

#: ../../c-api/dict.rst:150
msgid ""
"Exceptions that occur while this calls :meth:`~object.__hash__` and "
":meth:`~object.__eq__` methods or while creating the temporary :class:`str` "
"object are silently ignored. Prefer using the "
":c:func:`PyDict_GetItemWithError` function with your own "
":c:func:`PyUnicode_FromString` *key* instead."
msgstr ""

#: ../../c-api/dict.rst:159
msgid ""
"Similar than :c:func:`PyDict_GetItemRef`, but *key* is specified as a "
":c:expr:`const char*` UTF-8 encoded bytes string, rather than a "
":c:expr:`PyObject*`."
msgstr ""

#: ../../c-api/dict.rst:168
msgid ""
"This is the same as the Python-level :meth:`dict.setdefault`.  If present, "
"it returns the value corresponding to *key* from the dictionary *p*.  If the"
" key is not in the dict, it is inserted with value *defaultobj* and "
"*defaultobj* is returned.  This function evaluates the hash function of "
"*key* only once, instead of evaluating it independently for the lookup and "
"the insertion."
msgstr ""
"Це те саме, що на рівні Python :meth:`dict.setdefault`. Якщо він присутній, "
"він повертає значення, що відповідає *key* зі словника *p*. Якщо ключа немає"
" в dict, він вставляється зі значенням *defaultobj* і повертається "
"*defaultobj*. Ця функція обчислює хеш-функцію *key* лише один раз, замість "
"того, щоб оцінювати її незалежно для пошуку та вставки."

#: ../../c-api/dict.rst:179
msgid ""
"Inserts *default_value* into the dictionary *p* with a key of *key* if the "
"key is not already present in the dictionary. If *result* is not ``NULL``, "
"then *\\*result* is set to a :term:`strong reference` to either "
"*default_value*, if the key was not present, or the existing value, if *key*"
" was already present in the dictionary. Returns ``1`` if the key was present"
" and *default_value* was not inserted, or ``0`` if the key was not present "
"and *default_value* was inserted. On failure, returns ``-1``, sets an "
"exception, and sets ``*result`` to ``NULL``."
msgstr ""

#: ../../c-api/dict.rst:189
msgid ""
"For clarity: if you have a strong reference to *default_value* before "
"calling this function, then after it returns, you hold a strong reference to"
" both *default_value* and *\\*result* (if it's not ``NULL``). These may "
"refer to the same object: in that case you hold two separate references to "
"it."
msgstr ""

#: ../../c-api/dict.rst:200
msgid ""
"Remove *key* from dictionary *p* and optionally return the removed value. Do"
" not raise :exc:`KeyError` if the key missing."
msgstr ""

#: ../../c-api/dict.rst:203
msgid ""
"If the key is present, set *\\*result* to a new reference to the removed "
"value if *result* is not ``NULL``, and return ``1``."
msgstr ""

#: ../../c-api/dict.rst:205
msgid ""
"If the key is missing, set *\\*result* to ``NULL`` if *result* is not "
"``NULL``, and return ``0``."
msgstr ""

#: ../../c-api/dict.rst:209
msgid ""
"This is similar to :meth:`dict.pop`, but without the default value and not "
"raising :exc:`KeyError` if the key missing."
msgstr ""

#: ../../c-api/dict.rst:217
msgid ""
"Similar to :c:func:`PyDict_Pop`, but *key* is specified as a :c:expr:`const "
"char*` UTF-8 encoded bytes string, rather than a :c:expr:`PyObject*`."
msgstr ""

#: ../../c-api/dict.rst:226
msgid ""
"Return a :c:type:`PyListObject` containing all the items from the "
"dictionary."
msgstr "Повертає :c:type:`PyListObject`, що містить усі елементи зі словника."

#: ../../c-api/dict.rst:231
msgid ""
"Return a :c:type:`PyListObject` containing all the keys from the dictionary."
msgstr "Повертає :c:type:`PyListObject`, що містить усі ключі зі словника."

#: ../../c-api/dict.rst:236
msgid ""
"Return a :c:type:`PyListObject` containing all the values from the "
"dictionary *p*."
msgstr ""
"Повертає :c:type:`PyListObject`, що містить усі значення зі словника *p*."

#: ../../c-api/dict.rst:244
msgid ""
"Return the number of items in the dictionary.  This is equivalent to "
"``len(p)`` on a dictionary."
msgstr ""
"Повернути кількість елементів у словнику. Це еквівалентно ``len(p)`` у "
"словнику."

#: ../../c-api/dict.rst:250
msgid ""
"Iterate over all key-value pairs in the dictionary *p*.  The "
":c:type:`Py_ssize_t` referred to by *ppos* must be initialized to ``0`` "
"prior to the first call to this function to start the iteration; the "
"function returns true for each pair in the dictionary, and false once all "
"pairs have been reported.  The parameters *pkey* and *pvalue* should either "
"point to :c:expr:`PyObject*` variables that will be filled in with each key "
"and value, respectively, or may be ``NULL``.  Any references returned "
"through them are borrowed.  *ppos* should not be altered during iteration. "
"Its value represents offsets within the internal dictionary structure, and "
"since the structure is sparse, the offsets are not consecutive."
msgstr ""

#: ../../c-api/dict.rst:261
msgid "For example::"
msgstr "Наприклад::"

#: ../../c-api/dict.rst:263
msgid ""
"PyObject *key, *value;\n"
"Py_ssize_t pos = 0;\n"
"\n"
"while (PyDict_Next(self->dict, &pos, &key, &value)) {\n"
"    /* do something interesting with the values... */\n"
"    ...\n"
"}"
msgstr ""

#: ../../c-api/dict.rst:271
msgid ""
"The dictionary *p* should not be mutated during iteration.  It is safe to "
"modify the values of the keys as you iterate over the dictionary, but only "
"so long as the set of keys does not change.  For example::"
msgstr ""
"Словник *p* не повинен змінюватися під час ітерації. Безпечно змінювати "
"значення ключів під час перегляду словника, але лише до тих пір, поки набір "
"ключів не зміниться. Наприклад::"

#: ../../c-api/dict.rst:275
msgid ""
"PyObject *key, *value;\n"
"Py_ssize_t pos = 0;\n"
"\n"
"while (PyDict_Next(self->dict, &pos, &key, &value)) {\n"
"    long i = PyLong_AsLong(value);\n"
"    if (i == -1 && PyErr_Occurred()) {\n"
"        return -1;\n"
"    }\n"
"    PyObject *o = PyLong_FromLong(i + 1);\n"
"    if (o == NULL)\n"
"        return -1;\n"
"    if (PyDict_SetItem(self->dict, key, o) < 0) {\n"
"        Py_DECREF(o);\n"
"        return -1;\n"
"    }\n"
"    Py_DECREF(o);\n"
"}"
msgstr ""

#: ../../c-api/dict.rst:293
msgid ""
"The function is not thread-safe in the :term:`free-threaded <free "
"threading>` build without external synchronization.  You can use "
":c:macro:`Py_BEGIN_CRITICAL_SECTION` to lock the dictionary while iterating "
"over it::"
msgstr ""

#: ../../c-api/dict.rst:298
msgid ""
"Py_BEGIN_CRITICAL_SECTION(self->dict);\n"
"while (PyDict_Next(self->dict, &pos, &key, &value)) {\n"
"    ...\n"
"}\n"
"Py_END_CRITICAL_SECTION();"
msgstr ""

#: ../../c-api/dict.rst:307
msgid ""
"Iterate over mapping object *b* adding key-value pairs to dictionary *a*. "
"*b* may be a dictionary, or any object supporting :c:func:`PyMapping_Keys` "
"and :c:func:`PyObject_GetItem`. If *override* is true, existing pairs in *a*"
" will be replaced if a matching key is found in *b*, otherwise pairs will "
"only be added if there is not a matching key in *a*. Return ``0`` on success"
" or ``-1`` if an exception was raised."
msgstr ""
"Ітерація об’єкта відображення *b*, додавання пар ключ-значення до словника "
"*a*. *b* може бути словником або будь-яким об’єктом, що підтримує "
":c:func:`PyMapping_Keys` і :c:func:`PyObject_GetItem`. Якщо *override* має "
"значення true, існуючі пари в *a* буде замінено, якщо відповідний ключ буде "
"знайдено в *b*, інакше пари будуть додані, лише якщо в *a* немає "
"відповідного ключа. Повертає ``0`` у разі успіху або ``-1``, якщо було "
"викликано виключення."

#: ../../c-api/dict.rst:317
msgid ""
"This is the same as ``PyDict_Merge(a, b, 1)`` in C, and is similar to "
"``a.update(b)`` in Python except that :c:func:`PyDict_Update` doesn't fall "
"back to the iterating over a sequence of key value pairs if the second "
"argument has no \"keys\" attribute.  Return ``0`` on success or ``-1`` if an"
" exception was raised."
msgstr ""
"Це те саме, що ``PyDict_Merge(a, b, 1)`` у C, і схоже на ``a.update(b)`` у "
"Python, за винятком того, що :c:func:`PyDict_Update` не падає повернутися до"
" повторення послідовності пар ключ-значення, якщо другий аргумент не має "
"атрибута \"ключі\". Повертає ``0`` у разі успіху або ``-1``, якщо було "
"викликано виключення."

#: ../../c-api/dict.rst:326
msgid ""
"Update or merge into dictionary *a*, from the key-value pairs in *seq2*. "
"*seq2* must be an iterable object producing iterable objects of length 2, "
"viewed as key-value pairs.  In case of duplicate keys, the last wins if "
"*override* is true, else the first wins. Return ``0`` on success or ``-1`` "
"if an exception was raised. Equivalent Python (except for the return "
"value)::"
msgstr ""
"Оновіть або об’єднайте в словник *a* з пар ключ-значення в *seq2*. *seq2* "
"має бути повторюваним об’єктом, що створює ітеровані об’єкти довжини 2, які "
"розглядаються як пари ключ-значення. У випадку дублікатів ключів, останній "
"виграє, якщо *override* має значення true, інакше виграє перший. Повертає "
"``0`` в разі успіху або ``-1``, якщо було викликано виключення. "
"Еквівалентний Python (за винятком значення, що повертається)::"

#: ../../c-api/dict.rst:333
msgid ""
"def PyDict_MergeFromSeq2(a, seq2, override):\n"
"    for key, value in seq2:\n"
"        if override or key not in a:\n"
"            a[key] = value"
msgstr ""

#: ../../c-api/dict.rst:340
msgid ""
"Register *callback* as a dictionary watcher. Return a non-negative integer "
"id which must be passed to future calls to :c:func:`PyDict_Watch`. In case "
"of error (e.g. no more watcher IDs available), return ``-1`` and set an "
"exception."
msgstr ""

#: ../../c-api/dict.rst:349
msgid ""
"Clear watcher identified by *watcher_id* previously returned from "
":c:func:`PyDict_AddWatcher`. Return ``0`` on success, ``-1`` on error (e.g. "
"if the given *watcher_id* was never registered.)"
msgstr ""

#: ../../c-api/dict.rst:357
msgid ""
"Mark dictionary *dict* as watched. The callback granted *watcher_id* by "
":c:func:`PyDict_AddWatcher` will be called when *dict* is modified or "
"deallocated. Return ``0`` on success or ``-1`` on error."
msgstr ""

#: ../../c-api/dict.rst:365
msgid ""
"Mark dictionary *dict* as no longer watched. The callback granted "
"*watcher_id* by :c:func:`PyDict_AddWatcher` will no longer be called when "
"*dict* is modified or deallocated. The dict must previously have been "
"watched by this watcher. Return ``0`` on success or ``-1`` on error."
msgstr ""

#: ../../c-api/dict.rst:374
msgid ""
"Enumeration of possible dictionary watcher events: ``PyDict_EVENT_ADDED``, "
"``PyDict_EVENT_MODIFIED``, ``PyDict_EVENT_DELETED``, "
"``PyDict_EVENT_CLONED``, ``PyDict_EVENT_CLEARED``, or "
"``PyDict_EVENT_DEALLOCATED``."
msgstr ""

#: ../../c-api/dict.rst:382
msgid "Type of a dict watcher callback function."
msgstr ""

#: ../../c-api/dict.rst:384
msgid ""
"If *event* is ``PyDict_EVENT_CLEARED`` or ``PyDict_EVENT_DEALLOCATED``, both"
" *key* and *new_value* will be ``NULL``. If *event* is "
"``PyDict_EVENT_ADDED`` or ``PyDict_EVENT_MODIFIED``, *new_value* will be the"
" new value for *key*. If *event* is ``PyDict_EVENT_DELETED``, *key* is being"
" deleted from the dictionary and *new_value* will be ``NULL``."
msgstr ""

#: ../../c-api/dict.rst:390
msgid ""
"``PyDict_EVENT_CLONED`` occurs when *dict* was previously empty and another "
"dict is merged into it. To maintain efficiency of this operation, per-key "
"``PyDict_EVENT_ADDED`` events are not issued in this case; instead a single "
"``PyDict_EVENT_CLONED`` is issued, and *key* will be the source dictionary."
msgstr ""

#: ../../c-api/dict.rst:396
msgid ""
"The callback may inspect but must not modify *dict*; doing so could have "
"unpredictable effects, including infinite recursion. Do not trigger Python "
"code execution in the callback, as it could modify the dict as a side "
"effect."
msgstr ""

#: ../../c-api/dict.rst:400
msgid ""
"If *event* is ``PyDict_EVENT_DEALLOCATED``, taking a new reference in the "
"callback to the about-to-be-destroyed dictionary will resurrect it and "
"prevent it from being freed at this time. When the resurrected object is "
"destroyed later, any watcher callbacks active at that time will be called "
"again."
msgstr ""

#: ../../c-api/dict.rst:406
msgid ""
"Callbacks occur before the notified modification to *dict* takes place, so "
"the prior state of *dict* can be inspected."
msgstr ""

#: ../../c-api/dict.rst:409
msgid ""
"If the callback sets an exception, it must return ``-1``; this exception "
"will be printed as an unraisable exception using "
":c:func:`PyErr_WriteUnraisable`. Otherwise it should return ``0``."
msgstr ""

#: ../../c-api/dict.rst:413
msgid ""
"There may already be a pending exception set on entry to the callback. In "
"this case, the callback should return ``0`` with the same exception still "
"set. This means the callback may not call any other API that can set an "
"exception unless it saves and clears the exception state first, and restores"
" it before returning."
msgstr ""

#: ../../c-api/dict.rst:8
msgid "object"
msgstr "об'єкт"

#: ../../c-api/dict.rst:8
msgid "dictionary"
msgstr "словник"

#: ../../c-api/dict.rst:242
msgid "built-in function"
msgstr "вбудована функція"

#: ../../c-api/dict.rst:242
msgid "len"
msgstr ""
