# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Dmytro Kazanzhy, 2022
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-11-15 14:18+0000\n"
"PO-Revision-Date: 2021-06-28 00:50+0000\n"
"Last-Translator: Dmytro Kazanzhy, 2022\n"
"Language-Team: Ukrainian (https://app.transifex.com/python-doc/teams/5390/uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != 11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % 100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || (n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

#: ../../c-api/weakref.rst:6
msgid "Weak Reference Objects"
msgstr "Слабкі довідкові об’єкти"

#: ../../c-api/weakref.rst:8
msgid ""
"Python supports *weak references* as first-class objects.  There are two "
"specific object types which directly implement weak references.  The first "
"is a simple reference object, and the second acts as a proxy for the "
"original object as much as it can."
msgstr ""
"Python підтримує *слабкі посилання* як об’єкти першого класу. Існує два типи"
" об’єктів, які безпосередньо реалізують слабкі посилання. Перший є простим "
"довідковим об’єктом, а другий діє як проксі для оригінального об’єкта, "
"наскільки це можливо."

#: ../../c-api/weakref.rst:16
msgid ""
"Return non-zero if *ob* is either a reference or proxy object.  This "
"function always succeeds."
msgstr ""

#: ../../c-api/weakref.rst:22
msgid ""
"Return non-zero if *ob* is a reference object.  This function always "
"succeeds."
msgstr ""

#: ../../c-api/weakref.rst:27
msgid ""
"Return non-zero if *ob* is a proxy object.  This function always succeeds."
msgstr ""

#: ../../c-api/weakref.rst:32
msgid ""
"Return a weak reference object for the object *ob*.  This will always return"
" a new reference, but is not guaranteed to create a new object; an existing "
"reference object may be returned.  The second parameter, *callback*, can be "
"a callable object that receives notification when *ob* is garbage collected;"
" it should accept a single parameter, which will be the weak reference "
"object itself. *callback* may also be ``None`` or ``NULL``.  If *ob* is not "
"a weakly referenceable object, or if *callback* is not callable, ``None``, "
"or ``NULL``, this will return ``NULL`` and raise :exc:`TypeError`."
msgstr ""

#: ../../c-api/weakref.rst:44
msgid ""
"Return a weak reference proxy object for the object *ob*.  This will always "
"return a new reference, but is not guaranteed to create a new object; an "
"existing proxy object may be returned.  The second parameter, *callback*, "
"can be a callable object that receives notification when *ob* is garbage "
"collected; it should accept a single parameter, which will be the weak "
"reference object itself. *callback* may also be ``None`` or ``NULL``.  If "
"*ob* is not a weakly referenceable object, or if *callback* is not callable,"
" ``None``, or ``NULL``, this will return ``NULL`` and raise "
":exc:`TypeError`."
msgstr ""

#: ../../c-api/weakref.rst:56
msgid ""
"Get a :term:`strong reference` to the referenced object from a weak "
"reference, *ref*, into *\\*pobj*."
msgstr ""

#: ../../c-api/weakref.rst:59
msgid ""
"On success, set *\\*pobj* to a new :term:`strong reference` to the "
"referenced object and return 1."
msgstr ""

#: ../../c-api/weakref.rst:61
msgid "If the reference is dead, set *\\*pobj* to ``NULL`` and return 0."
msgstr ""

#: ../../c-api/weakref.rst:62
msgid "On error, raise an exception and return -1."
msgstr ""

#: ../../c-api/weakref.rst:69
msgid ""
"Return a :term:`borrowed reference` to the referenced object from a weak "
"reference, *ref*.  If the referent is no longer live, returns ``Py_None``."
msgstr ""

#: ../../c-api/weakref.rst:74
msgid ""
"This function returns a :term:`borrowed reference` to the referenced object."
" This means that you should always call :c:func:`Py_INCREF` on the object "
"except when it cannot be destroyed before the last usage of the borrowed "
"reference."
msgstr ""
"Ця функція повертає :term:`borrowed reference` на об’єкт, на який "
"посилається. Це означає, що ви завжди повинні викликати :c:func:`Py_INCREF` "
"для об’єкта, за винятком випадків, коли його не можна знищити перед останнім"
" використанням запозиченого посилання."

#: ../../c-api/weakref.rst:79 ../../c-api/weakref.rst:87
msgid "Use :c:func:`PyWeakref_GetRef` instead."
msgstr ""

#: ../../c-api/weakref.rst:85
msgid "Similar to :c:func:`PyWeakref_GetObject`, but does no error checking."
msgstr ""

#: ../../c-api/weakref.rst:93
msgid ""
"This function is called by the :c:member:`~PyTypeObject.tp_dealloc` handler "
"to clear weak references."
msgstr ""

#: ../../c-api/weakref.rst:96
msgid ""
"This iterates through the weak references for *object* and calls callbacks "
"for those references which have one. It returns when all callbacks have been"
" attempted."
msgstr ""

#: ../../c-api/weakref.rst:103
msgid "Clears the weakrefs for *object* without calling the callbacks."
msgstr ""

#: ../../c-api/weakref.rst:105
msgid ""
"This function is called by the :c:member:`~PyTypeObject.tp_dealloc` handler "
"for types with finalizers (i.e., :meth:`~object.__del__`).  The handler for "
"those objects first calls :c:func:`PyObject_ClearWeakRefs` to clear weakrefs"
" and call their callbacks, then the finalizer, and finally this function to "
"clear any weakrefs that may have been created by the finalizer."
msgstr ""

#: ../../c-api/weakref.rst:111
msgid ""
"In most circumstances, it's more appropriate to use "
":c:func:`PyObject_ClearWeakRefs` to clear weakrefs instead of this function."
msgstr ""
