# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Dmytro Kazanzhy, 2022
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-11-19 01:00+0000\n"
"PO-Revision-Date: 2021-06-28 00:49+0000\n"
"Last-Translator: Dmytro Kazanzhy, 2022\n"
"Language-Team: Ukrainian (https://app.transifex.com/python-doc/teams/5390/uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != 11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % 100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || (n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

#: ../../c-api/init_config.rst:7
msgid "Python Initialization Configuration"
msgstr "Конфігурація ініціалізації Python"

#: ../../c-api/init_config.rst:11
msgid ""
"Python can be initialized with :c:func:`Py_InitializeFromConfig` and the "
":c:type:`PyConfig` structure. It can be preinitialized with "
":c:func:`Py_PreInitialize` and the :c:type:`PyPreConfig` structure."
msgstr ""
"Python можна ініціалізувати за допомогою :c:func:`Py_InitializeFromConfig` і"
" структури :c:type:`PyConfig`. Його можна попередньо ініціалізувати за "
"допомогою :c:func:`Py_PreInitialize` і структури :c:type:`PyPreConfig`."

#: ../../c-api/init_config.rst:15
msgid "There are two kinds of configuration:"
msgstr "Існує два види конфігурації:"

#: ../../c-api/init_config.rst:17
msgid ""
"The :ref:`Python Configuration <init-python-config>` can be used to build a "
"customized Python which behaves as the regular Python. For example, "
"environment variables and command line arguments are used to configure "
"Python."
msgstr ""
":ref:`Налаштування Python <init-python-config>` можна використовувати для "
"створення налаштованого Python, який веде себе як звичайний Python. "
"Наприклад, змінні середовища та аргументи командного рядка використовуються "
"для налаштування Python."

#: ../../c-api/init_config.rst:22
msgid ""
"The :ref:`Isolated Configuration <init-isolated-conf>` can be used to embed "
"Python into an application. It isolates Python from the system. For example,"
" environment variables are ignored, the LC_CTYPE locale is left unchanged "
"and no signal handler is registered."
msgstr ""
":ref:`Ізольована конфігурація <init-isolated-conf>` може бути використана "
"для вбудовування Python у програму. Він ізолює Python від системи. "
"Наприклад, змінні середовища ігноруються, локаль LC_CTYPE не змінюється, а "
"обробник сигналів не реєструється."

#: ../../c-api/init_config.rst:27
msgid ""
"The :c:func:`Py_RunMain` function can be used to write a customized Python "
"program."
msgstr ""
"Функцію :c:func:`Py_RunMain` можна використовувати для написання спеціальної"
" програми Python."

#: ../../c-api/init_config.rst:30
msgid ""
"See also :ref:`Initialization, Finalization, and Threads <initialization>`."
msgstr ""
"Дивіться також :ref:`Ініціалізація, фіналізація та потоки <initialization>`."

#: ../../c-api/init_config.rst:33
msgid ":pep:`587` \"Python Initialization Configuration\"."
msgstr ":pep:`587` \"Конфігурація ініціалізації Python\"."

#: ../../c-api/init_config.rst:37
msgid "Example"
msgstr "приклад"

#: ../../c-api/init_config.rst:39
msgid "Example of customized Python always running in isolated mode::"
msgstr ""
"Приклад налаштованого Python, який завжди працює в ізольованому режимі::"

#: ../../c-api/init_config.rst:41
msgid ""
"int main(int argc, char **argv)\n"
"{\n"
"    PyStatus status;\n"
"\n"
"    PyConfig config;\n"
"    PyConfig_InitPythonConfig(&config);\n"
"    config.isolated = 1;\n"
"\n"
"    /* Decode command line arguments.\n"
"       Implicitly preinitialize Python (in isolated mode). */\n"
"    status = PyConfig_SetBytesArgv(&config, argc, argv);\n"
"    if (PyStatus_Exception(status)) {\n"
"        goto exception;\n"
"    }\n"
"\n"
"    status = Py_InitializeFromConfig(&config);\n"
"    if (PyStatus_Exception(status)) {\n"
"        goto exception;\n"
"    }\n"
"    PyConfig_Clear(&config);\n"
"\n"
"    return Py_RunMain();\n"
"\n"
"exception:\n"
"    PyConfig_Clear(&config);\n"
"    if (PyStatus_IsExit(status)) {\n"
"        return status.exitcode;\n"
"    }\n"
"    /* Display the error message and exit the process with\n"
"       non-zero exit code */\n"
"    Py_ExitStatusException(status);\n"
"}"
msgstr ""

#: ../../c-api/init_config.rst:76
msgid "PyWideStringList"
msgstr "PyWideStringList"

#: ../../c-api/init_config.rst:80
msgid "List of ``wchar_t*`` strings."
msgstr "Список рядків ``wchar_t*``."

#: ../../c-api/init_config.rst:82
msgid ""
"If *length* is non-zero, *items* must be non-``NULL`` and all strings must "
"be non-``NULL``."
msgstr ""
"Якщо *length* не дорівнює нулю, *items* не мають бути ``NULL``, а всі рядки "
"мають бути не ``NULL``."

#: ../../c-api/init_config.rst:87
msgid "Methods:"
msgstr "Методи:"

#: ../../c-api/init_config.rst:91
msgid "Append *item* to *list*."
msgstr "Додайте *елемент* до *списку*."

#: ../../c-api/init_config.rst:93 ../../c-api/init_config.rst:104
msgid "Python must be preinitialized to call this function."
msgstr "Щоб викликати цю функцію, Python має бути попередньо ініціалізований."

#: ../../c-api/init_config.rst:97
msgid "Insert *item* into *list* at *index*."
msgstr "Вставте *елемент* у *список* за *індексом*."

#: ../../c-api/init_config.rst:99
msgid ""
"If *index* is greater than or equal to *list* length, append *item* to "
"*list*."
msgstr ""
"Якщо *index* більше або дорівнює довжині *list*, додайте *item* до *list*."

#: ../../c-api/init_config.rst:102
msgid "*index* must be greater than or equal to ``0``."
msgstr ""

#: ../../c-api/init_config.rst:108 ../../c-api/init_config.rst:128
#: ../../c-api/init_config.rst:235 ../../c-api/init_config.rst:554
msgid "Structure fields:"
msgstr "Поля структури:"

#: ../../c-api/init_config.rst:112
msgid "List length."
msgstr "Довжина списку."

#: ../../c-api/init_config.rst:116
msgid "List items."
msgstr "Список елементів."

#: ../../c-api/init_config.rst:119
msgid "PyStatus"
msgstr "PyStatus"

#: ../../c-api/init_config.rst:123
msgid ""
"Structure to store an initialization function status: success, error or "
"exit."
msgstr ""
"Структура для збереження стану функції ініціалізації: успіх, помилка або "
"вихід."

#: ../../c-api/init_config.rst:126
msgid ""
"For an error, it can store the C function name which created the error."
msgstr "Для помилки він може зберегти назву функції C, яка створила помилку."

#: ../../c-api/init_config.rst:132
msgid "Exit code. Argument passed to ``exit()``."
msgstr "Код виходу. Аргумент, переданий до ``exit()``."

#: ../../c-api/init_config.rst:136
msgid "Error message."
msgstr "Повідомлення про помилку."

#: ../../c-api/init_config.rst:140
msgid "Name of the function which created an error, can be ``NULL``."
msgstr "Ім'я функції, яка створила помилку, може бути ``NULL``."

#: ../../c-api/init_config.rst:144
msgid "Functions to create a status:"
msgstr "Функції для створення статусу:"

#: ../../c-api/init_config.rst:148
msgid "Success."
msgstr "Успіх."

#: ../../c-api/init_config.rst:152
msgid "Initialization error with a message."
msgstr "Помилка ініціалізації з повідомленням."

#: ../../c-api/init_config.rst:154
msgid "*err_msg* must not be ``NULL``."
msgstr "*err_msg* не має бути ``NULL``."

#: ../../c-api/init_config.rst:158
msgid "Memory allocation failure (out of memory)."
msgstr "Помилка виділення пам'яті (брак пам'яті)."

#: ../../c-api/init_config.rst:162
msgid "Exit Python with the specified exit code."
msgstr "Вийдіть із Python із вказаним кодом виходу."

#: ../../c-api/init_config.rst:164
msgid "Functions to handle a status:"
msgstr "Функції для обробки статусу:"

#: ../../c-api/init_config.rst:168
msgid ""
"Is the status an error or an exit? If true, the exception must be handled; "
"by calling :c:func:`Py_ExitStatusException` for example."
msgstr ""
"Статус помилка чи вихід? Якщо істина, виняток потрібно обробити; наприклад, "
"викликом :c:func:`Py_ExitStatusException`."

#: ../../c-api/init_config.rst:173
msgid "Is the result an error?"
msgstr "Чи є результат помилкою?"

#: ../../c-api/init_config.rst:177
msgid "Is the result an exit?"
msgstr "Результат – це вихід?"

#: ../../c-api/init_config.rst:181
msgid ""
"Call ``exit(exitcode)`` if *status* is an exit. Print the error message and "
"exit with a non-zero exit code if *status* is an error.  Must only be called"
" if ``PyStatus_Exception(status)`` is non-zero."
msgstr ""
"Викличте ``exit(exitcode)``, якщо *status* є виходом. Роздрукуйте "
"повідомлення про помилку та вийдіть із ненульовим кодом виходу, якщо "
"*статус* є помилкою. Потрібно викликати, лише якщо "
"``PyStatus_Exception(status)`` не дорівнює нулю."

#: ../../c-api/init_config.rst:186
msgid ""
"Internally, Python uses macros which set ``PyStatus.func``, whereas "
"functions to create a status set ``func`` to ``NULL``."
msgstr ""
"Внутрішньо Python використовує макроси, які встановлюють ``PyStatus.func``, "
"тоді як функції для створення стану встановлюють ``func`` на ``NULL``."

#: ../../c-api/init_config.rst:189
msgid "Example::"
msgstr "Приклад::"

#: ../../c-api/init_config.rst:191
msgid ""
"PyStatus alloc(void **ptr, size_t size)\n"
"{\n"
"    *ptr = PyMem_RawMalloc(size);\n"
"    if (*ptr == NULL) {\n"
"        return PyStatus_NoMemory();\n"
"    }\n"
"    return PyStatus_Ok();\n"
"}\n"
"\n"
"int main(int argc, char **argv)\n"
"{\n"
"    void *ptr;\n"
"    PyStatus status = alloc(&ptr, 16);\n"
"    if (PyStatus_Exception(status)) {\n"
"        Py_ExitStatusException(status);\n"
"    }\n"
"    PyMem_Free(ptr);\n"
"    return 0;\n"
"}"
msgstr ""

#: ../../c-api/init_config.rst:213
msgid "PyPreConfig"
msgstr "PyPreConfig"

#: ../../c-api/init_config.rst:217
msgid "Structure used to preinitialize Python."
msgstr "Структура, яка використовується для попередньої ініціалізації Python."

#: ../../c-api/init_config.rst:221
msgid "Function to initialize a preconfiguration:"
msgstr "Функція ініціалізації попередньої конфігурації:"

#: ../../c-api/init_config.rst:225
msgid ""
"Initialize the preconfiguration with :ref:`Python Configuration <init-"
"python-config>`."
msgstr ""
"Ініціалізуйте попередню конфігурацію за допомогою :ref:`Налаштування Python "
"<init-python-config>`."

#: ../../c-api/init_config.rst:230
msgid ""
"Initialize the preconfiguration with :ref:`Isolated Configuration <init-"
"isolated-conf>`."
msgstr ""
"Ініціалізуйте попередню конфігурацію за допомогою :ref:`Ізольованої "
"конфігурації <init-isolated-conf>`."

#: ../../c-api/init_config.rst:239
msgid "Name of the Python memory allocators:"
msgstr "Ім'я розподілювачів пам'яті Python:"

#: ../../c-api/init_config.rst:241
msgid ""
"``PYMEM_ALLOCATOR_NOT_SET`` (``0``): don't change memory allocators (use "
"defaults)."
msgstr ""
"``PYMEM_ALLOCATOR_NOT_SET`` (``0``): не змінювати розподільники пам'яті "
"(використовувати значення за замовчуванням)."

#: ../../c-api/init_config.rst:243
msgid ""
"``PYMEM_ALLOCATOR_DEFAULT`` (``1``): :ref:`default memory allocators "
"<default-memory-allocators>`."
msgstr ""
"``PYMEM_ALLOCATOR_DEFAULT`` (``1``): :ref:`розподіл пам'яті за замовчуванням"
" <default-memory-allocators>`."

#: ../../c-api/init_config.rst:245
msgid ""
"``PYMEM_ALLOCATOR_DEBUG`` (``2``): :ref:`default memory allocators <default-"
"memory-allocators>` with :ref:`debug hooks <pymem-debug-hooks>`."
msgstr ""
"``PYMEM_ALLOCATOR_DEBUG`` (``2``): :ref:`розподільники пам’яті за "
"замовчуванням <default-memory-allocators>` з :ref:`налагоджувальними хуками "
"<pymem-debug-hooks>`."

#: ../../c-api/init_config.rst:248
msgid "``PYMEM_ALLOCATOR_MALLOC`` (``3``): use ``malloc()`` of the C library."
msgstr ""
"``PYMEM_ALLOCATOR_MALLOC`` (``3``): використовуйте ``malloc()`` бібліотеки "
"C."

#: ../../c-api/init_config.rst:249
msgid ""
"``PYMEM_ALLOCATOR_MALLOC_DEBUG`` (``4``): force usage of ``malloc()`` with "
":ref:`debug hooks <pymem-debug-hooks>`."
msgstr ""
"``PYMEM_ALLOCATOR_MALLOC_DEBUG`` (``4``): примусове використання "
"``malloc()`` з :ref:`налагоджувальними хуками <pymem-debug-hooks>`."

#: ../../c-api/init_config.rst:251
msgid ""
"``PYMEM_ALLOCATOR_PYMALLOC`` (``5``): :ref:`Python pymalloc memory allocator"
" <pymalloc>`."
msgstr ""
"``PYMEM_ALLOCATOR_PYMALLOC`` (``5``): :ref:`Виділювач пам'яті Python "
"pymalloc <pymalloc>`."

#: ../../c-api/init_config.rst:253
msgid ""
"``PYMEM_ALLOCATOR_PYMALLOC_DEBUG`` (``6``): :ref:`Python pymalloc memory "
"allocator <pymalloc>` with :ref:`debug hooks <pymem-debug-hooks>`."
msgstr ""
"``PYMEM_ALLOCATOR_PYMALLOC_DEBUG`` (``6``): :ref:`Розподіл пам’яті Python "
"pymalloc <pymalloc>` з :ref:`налагоджувальними хуками <pymem-debug-hooks>`."

#: ../../c-api/init_config.rst:256
msgid ""
"``PYMEM_ALLOCATOR_MIMALLOC`` (``6``): use ``mimalloc``, a fast malloc "
"replacement."
msgstr ""

#: ../../c-api/init_config.rst:258
msgid ""
"``PYMEM_ALLOCATOR_MIMALLOC_DEBUG`` (``7``): use ``mimalloc``, a fast malloc "
"replacement with :ref:`debug hooks <pymem-debug-hooks>`."
msgstr ""

#: ../../c-api/init_config.rst:262
msgid ""
"``PYMEM_ALLOCATOR_PYMALLOC`` and ``PYMEM_ALLOCATOR_PYMALLOC_DEBUG`` are not "
"supported if Python is :option:`configured using --without-pymalloc "
"<--without-pymalloc>`."
msgstr ""
"``PYMEM_ALLOCATOR_PYMALLOC`` і ``PYMEM_ALLOCATOR_PYMALLOC_DEBUG`` не "
"підтримуються, якщо Python :option:`налаштовано за допомогою --without-"
"pymalloc <--without-pymalloc>`."

#: ../../c-api/init_config.rst:266
msgid ""
"``PYMEM_ALLOCATOR_MIMALLOC`` and ``PYMEM_ALLOCATOR_MIMALLOC_DEBUG`` are not "
"supported if Python is :option:`configured using --without-mimalloc "
"<--without-mimalloc>` or if the underlying atomic support isn't available."
msgstr ""

#: ../../c-api/init_config.rst:271
msgid "See :ref:`Memory Management <memory>`."
msgstr "Перегляньте :ref:`Керування пам’яттю <memory>`."

#: ../../c-api/init_config.rst:273
msgid "Default: ``PYMEM_ALLOCATOR_NOT_SET``."
msgstr "Типове значення: ``PYMEM_ALLOCATOR_NOT_SET``."

#: ../../c-api/init_config.rst:277
msgid "Set the LC_CTYPE locale to the user preferred locale."
msgstr ""

#: ../../c-api/init_config.rst:279
msgid ""
"If equals to ``0``, set :c:member:`~PyPreConfig.coerce_c_locale` and "
":c:member:`~PyPreConfig.coerce_c_locale_warn` members to ``0``."
msgstr ""

#: ../../c-api/init_config.rst:282 ../../c-api/init_config.rst:293
msgid "See the :term:`locale encoding`."
msgstr "Перегляньте :term:`locale encoding`."

#: ../../c-api/init_config.rst:284 ../../c-api/init_config.rst:339
#: ../../c-api/init_config.rst:710
msgid "Default: ``1`` in Python config, ``0`` in isolated config."
msgstr ""
"За замовчуванням: ``1`` у конфігурації Python, ``0`` в ізольованій "
"конфігурації."

#: ../../c-api/init_config.rst:288
msgid "If equals to ``2``, coerce the C locale."
msgstr ""

#: ../../c-api/init_config.rst:290
msgid ""
"If equals to ``1``, read the LC_CTYPE locale to decide if it should be "
"coerced."
msgstr ""

#: ../../c-api/init_config.rst:295 ../../c-api/init_config.rst:301
msgid "Default: ``-1`` in Python config, ``0`` in isolated config."
msgstr ""
"За замовчуванням: ``-1`` у конфігурації Python, ``0`` в ізольованій "
"конфігурації."

#: ../../c-api/init_config.rst:299
msgid "If non-zero, emit a warning if the C locale is coerced."
msgstr ""
"Якщо значення відмінне від нуля, видати попередження, якщо локаль C виведена"
" примусово."

#: ../../c-api/init_config.rst:305
msgid ""
":ref:`Python Development Mode <devmode>`: see :c:member:`PyConfig.dev_mode`."
msgstr ""

#: ../../c-api/init_config.rst:308 ../../c-api/init_config.rst:719
#: ../../c-api/init_config.rst:765 ../../c-api/init_config.rst:1244
msgid "Default: ``-1`` in Python mode, ``0`` in isolated mode."
msgstr "Типове значення: ``-1`` в режимі Python, ``0`` в ізольованому режимі."

#: ../../c-api/init_config.rst:312
msgid "Isolated mode: see :c:member:`PyConfig.isolated`."
msgstr "Ізольований режим: див. :c:member:`PyConfig.isolated`."

#: ../../c-api/init_config.rst:314 ../../c-api/init_config.rst:921
msgid "Default: ``0`` in Python mode, ``1`` in isolated mode."
msgstr "Типове значення: ``0`` в режимі Python, ``1`` в ізольованому режимі."

#: ../../c-api/init_config.rst:318
msgid "If non-zero:"
msgstr "Якщо відмінне від нуля:"

#: ../../c-api/init_config.rst:320
msgid "Set :c:member:`PyPreConfig.utf8_mode` to ``0``,"
msgstr "Установіть :c:member:`PyPreConfig.utf8_mode` на ``0``,"

#: ../../c-api/init_config.rst:321
msgid "Set :c:member:`PyConfig.filesystem_encoding` to ``\"mbcs\"``,"
msgstr "Установіть :c:member:`PyConfig.filesystem_encoding` на ``\"mbcs\"``,"

#: ../../c-api/init_config.rst:322
msgid "Set :c:member:`PyConfig.filesystem_errors` to ``\"replace\"``."
msgstr "Установіть :c:member:`PyConfig.filesystem_errors` на ``\"replace\"``."

#: ../../c-api/init_config.rst:324
msgid ""
"Initialized from the :envvar:`PYTHONLEGACYWINDOWSFSENCODING` environment "
"variable value."
msgstr ""

#: ../../c-api/init_config.rst:327 ../../c-api/init_config.rst:935
msgid ""
"Only available on Windows. ``#ifdef MS_WINDOWS`` macro can be used for "
"Windows specific code."
msgstr ""
"Доступно лише для Windows. Макрос ``#ifdef MS_WINDOWS`` можна "
"використовувати для спеціального коду Windows."

#: ../../c-api/init_config.rst:330 ../../c-api/init_config.rst:658
#: ../../c-api/init_config.rst:665 ../../c-api/init_config.rst:732
#: ../../c-api/init_config.rst:843 ../../c-api/init_config.rst:857
#: ../../c-api/init_config.rst:871 ../../c-api/init_config.rst:938
#: ../../c-api/init_config.rst:952 ../../c-api/init_config.rst:1012
#: ../../c-api/init_config.rst:1064 ../../c-api/init_config.rst:1126
#: ../../c-api/init_config.rst:1180 ../../c-api/init_config.rst:1209
#: ../../c-api/init_config.rst:1298
msgid "Default: ``0``."
msgstr "Типове значення: ``0``."

#: ../../c-api/init_config.rst:334
msgid ""
"If non-zero, :c:func:`Py_PreInitializeFromArgs` and "
":c:func:`Py_PreInitializeFromBytesArgs` parse their ``argv`` argument the "
"same way the regular Python parses command line arguments: see :ref:`Command"
" Line Arguments <using-on-cmdline>`."
msgstr ""
"Якщо значення відмінне від нуля, :c:func:`Py_PreInitializeFromArgs` і "
":c:func:`Py_PreInitializeFromBytesArgs` аналізують свій аргумент ``argv`` "
"так само, як звичайний Python аналізує аргументи командного рядка: див. "
":ref:`Аргументи командного рядка <using-on-cmdline>`."

#: ../../c-api/init_config.rst:343
msgid ""
"Use :ref:`environment variables <using-on-envvars>`? See "
":c:member:`PyConfig.use_environment`."
msgstr ""
"Використовувати :ref:`змінні середовища <using-on-envvars>`? Перегляньте "
":c:member:`PyConfig.use_environment`."

#: ../../c-api/init_config.rst:346 ../../c-api/init_config.rst:1272
msgid "Default: ``1`` in Python config and ``0`` in isolated config."
msgstr ""
"За замовчуванням: ``1`` у конфігурації Python і ``0`` в ізольованій "
"конфігурації."

#: ../../c-api/init_config.rst:350
msgid "If non-zero, enable the :ref:`Python UTF-8 Mode <utf8-mode>`."
msgstr "Якщо не нуль, увімкніть :ref:`Режим Python UTF-8 <utf8-mode>`."

#: ../../c-api/init_config.rst:352
msgid ""
"Set to ``0`` or ``1`` by the :option:`-X utf8 <-X>` command line option and "
"the :envvar:`PYTHONUTF8` environment variable."
msgstr ""

#: ../../c-api/init_config.rst:355
msgid "Also set to ``1`` if the ``LC_CTYPE`` locale is ``C`` or ``POSIX``."
msgstr ""

#: ../../c-api/init_config.rst:357
msgid "Default: ``-1`` in Python config and ``0`` in isolated config."
msgstr ""
"За замовчуванням: ``-1`` у конфігурації Python і ``0`` в ізольованій "
"конфігурації."

#: ../../c-api/init_config.rst:363
msgid "Preinitialize Python with PyPreConfig"
msgstr "Попередня ініціалізація Python за допомогою PyPreConfig"

#: ../../c-api/init_config.rst:365
msgid "The preinitialization of Python:"
msgstr "Попередня ініціалізація Python:"

#: ../../c-api/init_config.rst:367
msgid "Set the Python memory allocators (:c:member:`PyPreConfig.allocator`)"
msgstr ""
"Встановіть розподільники пам’яті Python (:c:member:`PyPreConfig.allocator`)"

#: ../../c-api/init_config.rst:368
msgid "Configure the LC_CTYPE locale (:term:`locale encoding`)"
msgstr "Налаштувати локаль LC_CTYPE (:term:`locale encoding`)"

#: ../../c-api/init_config.rst:369
msgid ""
"Set the :ref:`Python UTF-8 Mode <utf8-mode>` "
"(:c:member:`PyPreConfig.utf8_mode`)"
msgstr ""
"Установіть режим :ref:`Python UTF-8 Mode <utf8-mode>` "
"(:c:member:`PyPreConfig.utf8_mode`)"

#: ../../c-api/init_config.rst:372
msgid ""
"The current preconfiguration (``PyPreConfig`` type) is stored in "
"``_PyRuntime.preconfig``."
msgstr ""
"Поточна попередня конфігурація (тип ``PyPreConfig``) зберігається в "
"``_PyRuntime.preconfig``."

#: ../../c-api/init_config.rst:375
msgid "Functions to preinitialize Python:"
msgstr "Функції для попередньої ініціалізації Python:"

#: ../../c-api/init_config.rst:379 ../../c-api/init_config.rst:385
#: ../../c-api/init_config.rst:394
msgid "Preinitialize Python from *preconfig* preconfiguration."
msgstr ""
"Попередньо ініціалізуйте Python із попередньої конфігурації *preconfig*."

#: ../../c-api/init_config.rst:381 ../../c-api/init_config.rst:390
#: ../../c-api/init_config.rst:399
msgid "*preconfig* must not be ``NULL``."
msgstr "*preconfig* не має бути ``NULL``."

#: ../../c-api/init_config.rst:387
msgid ""
"Parse *argv* command line arguments (bytes strings) if "
":c:member:`~PyPreConfig.parse_argv` of *preconfig* is non-zero."
msgstr ""
"Проаналізуйте аргументи командного рядка *argv* (рядки байтів), якщо "
":c:member:`~PyPreConfig.parse_argv` *preconfig* не дорівнює нулю."

#: ../../c-api/init_config.rst:396
msgid ""
"Parse *argv* command line arguments (wide strings) if "
":c:member:`~PyPreConfig.parse_argv` of *preconfig* is non-zero."
msgstr ""
"Проаналізуйте аргументи командного рядка *argv* (широкі рядки), якщо "
":c:member:`~PyPreConfig.parse_argv` *preconfig* не дорівнює нулю."

#: ../../c-api/init_config.rst:401 ../../c-api/init_config.rst:1359
msgid ""
"The caller is responsible to handle exceptions (error or exit) using "
":c:func:`PyStatus_Exception` and :c:func:`Py_ExitStatusException`."
msgstr ""
"Виклик відповідає за обробку винятків (помилка або вихід) за допомогою "
":c:func:`PyStatus_Exception` і :c:func:`Py_ExitStatusException`."

#: ../../c-api/init_config.rst:404
msgid ""
"For :ref:`Python Configuration <init-python-config>` "
"(:c:func:`PyPreConfig_InitPythonConfig`), if Python is initialized with "
"command line arguments, the command line arguments must also be passed to "
"preinitialize Python, since they have an effect on the pre-configuration "
"like encodings. For example, the :option:`-X utf8 <-X>` command line option "
"enables the :ref:`Python UTF-8 Mode <utf8-mode>`."
msgstr ""
"Для :ref:`Конфігурації Python <init-python-config>` "
"(:c:func:`PyPreConfig_InitPythonConfig`), якщо Python ініціалізовано "
"аргументами командного рядка, аргументи командного рядка також потрібно "
"передати для попередньої ініціалізації Python, оскільки вони впливають на "
"попередні конфігурація, як кодування. Наприклад, параметр командного рядка "
":option:`-X utf8 <-X>` вмикає :ref:`Режим Python UTF-8 <utf8-mode>`."

#: ../../c-api/init_config.rst:411
msgid ""
"``PyMem_SetAllocator()`` can be called after :c:func:`Py_PreInitialize` and "
"before :c:func:`Py_InitializeFromConfig` to install a custom memory "
"allocator. It can be called before :c:func:`Py_PreInitialize` if "
":c:member:`PyPreConfig.allocator` is set to ``PYMEM_ALLOCATOR_NOT_SET``."
msgstr ""
"``PyMem_SetAllocator()`` можна викликати після :c:func:`Py_PreInitialize` і "
"перед :c:func:`Py_InitializeFromConfig`, щоб встановити спеціальний "
"розподільник пам’яті. Його можна викликати перед :c:func:`Py_PreInitialize`,"
" якщо :c:member:`PyPreConfig.allocator` має значення "
"``PYMEM_ALLOCATOR_NOT_SET``."

#: ../../c-api/init_config.rst:416
msgid ""
"Python memory allocation functions like :c:func:`PyMem_RawMalloc` must not "
"be used before the Python preinitialization, whereas calling directly "
"``malloc()`` and ``free()`` is always safe. :c:func:`Py_DecodeLocale` must "
"not be called before the Python preinitialization."
msgstr ""
"Функції виділення пам’яті Python, такі як :c:func:`PyMem_RawMalloc`, не "
"можна використовувати до попередньої ініціалізації Python, тоді як прямий "
"виклик ``malloc()`` і ``free()`` завжди безпечний. :c:func:`Py_DecodeLocale`"
" не можна викликати до попередньої ініціалізації Python."

#: ../../c-api/init_config.rst:421
msgid ""
"Example using the preinitialization to enable the :ref:`Python UTF-8 Mode "
"<utf8-mode>`::"
msgstr ""
"Приклад використання попередньої ініціалізації для ввімкнення режиму "
":ref:`Python UTF-8 <utf8-mode>`::"

#: ../../c-api/init_config.rst:424
msgid ""
"PyStatus status;\n"
"PyPreConfig preconfig;\n"
"PyPreConfig_InitPythonConfig(&preconfig);\n"
"\n"
"preconfig.utf8_mode = 1;\n"
"\n"
"status = Py_PreInitialize(&preconfig);\n"
"if (PyStatus_Exception(status)) {\n"
"    Py_ExitStatusException(status);\n"
"}\n"
"\n"
"/* at this point, Python speaks UTF-8 */\n"
"\n"
"Py_Initialize();\n"
"/* ... use Python API here ... */\n"
"Py_Finalize();"
msgstr ""

#: ../../c-api/init_config.rst:443
msgid "PyConfig"
msgstr "PyConfig"

#: ../../c-api/init_config.rst:447
msgid "Structure containing most parameters to configure Python."
msgstr "Структура, що містить більшість параметрів для налаштування Python."

#: ../../c-api/init_config.rst:449
msgid ""
"When done, the :c:func:`PyConfig_Clear` function must be used to release the"
" configuration memory."
msgstr ""
"Після завершення необхідно використати функцію :c:func:`PyConfig_Clear`, щоб"
" звільнити конфігураційну пам’ять."

#: ../../c-api/init_config.rst:454
msgid "Structure methods:"
msgstr "Методи будови:"

#: ../../c-api/init_config.rst:458
msgid ""
"Initialize configuration with the :ref:`Python Configuration <init-python-"
"config>`."
msgstr ""
"Ініціалізуйте конфігурацію за допомогою :ref:`Налаштування Python <init-"
"python-config>`."

#: ../../c-api/init_config.rst:463
msgid ""
"Initialize configuration with the :ref:`Isolated Configuration <init-"
"isolated-conf>`."
msgstr ""
"Ініціалізуйте конфігурацію за допомогою :ref:`ізольованої конфігурації "
"<init-isolated-conf>`."

#: ../../c-api/init_config.rst:468
msgid "Copy the wide character string *str* into ``*config_str``."
msgstr "Скопіюйте широкий символьний рядок *str* у ``*config_str``."

#: ../../c-api/init_config.rst:470 ../../c-api/init_config.rst:477
#: ../../c-api/init_config.rst:484 ../../c-api/init_config.rst:492
#: ../../c-api/init_config.rst:498 ../../c-api/init_config.rst:515
msgid ":ref:`Preinitialize Python <c-preinit>` if needed."
msgstr ":ref:`Попередньо ініціалізуйте Python <c-preinit>`, якщо потрібно."

#: ../../c-api/init_config.rst:474
msgid ""
"Decode *str* using :c:func:`Py_DecodeLocale` and set the result into "
"``*config_str``."
msgstr ""
"Декодуйте *str* за допомогою :c:func:`Py_DecodeLocale` і встановіть "
"результат у ``*config_str``."

#: ../../c-api/init_config.rst:481
msgid ""
"Set command line arguments (:c:member:`~PyConfig.argv` member of *config*) "
"from the *argv* list of wide character strings."
msgstr ""
"Установіть аргументи командного рядка (:c:member:`~PyConfig.argv` член "
"*config*) зі списку *argv* рядків широких символів."

#: ../../c-api/init_config.rst:488
msgid ""
"Set command line arguments (:c:member:`~PyConfig.argv` member of *config*) "
"from the *argv* list of bytes strings. Decode bytes using "
":c:func:`Py_DecodeLocale`."
msgstr ""
"Установіть аргументи командного рядка (:c:member:`~PyConfig.argv` член "
"*config*) зі списку *argv* рядків байтів. Декодуйте байти за допомогою "
":c:func:`Py_DecodeLocale`."

#: ../../c-api/init_config.rst:496
msgid "Set the list of wide strings *list* to *length* and *items*."
msgstr ""
"Установіть для списку широких рядків *list* значення *length* і *items*."

#: ../../c-api/init_config.rst:502
msgid "Read all Python configuration."
msgstr "Прочитайте всю конфігурацію Python."

#: ../../c-api/init_config.rst:504
msgid "Fields which are already initialized are left unchanged."
msgstr "Поля, які вже ініціалізовані, залишаються без змін."

#: ../../c-api/init_config.rst:506
msgid ""
"Fields for :ref:`path configuration <init-path-config>` are no longer "
"calculated or modified when calling this function, as of Python 3.11."
msgstr ""

#: ../../c-api/init_config.rst:509 ../../c-api/init_config.rst:1041
msgid ""
"The :c:func:`PyConfig_Read` function only parses :c:member:`PyConfig.argv` "
"arguments once: :c:member:`PyConfig.parse_argv` is set to ``2`` after "
"arguments are parsed. Since Python arguments are stripped from "
":c:member:`PyConfig.argv`, parsing arguments twice would parse the "
"application options as Python options."
msgstr ""

#: ../../c-api/init_config.rst:517
msgid ""
"The :c:member:`PyConfig.argv` arguments are now only parsed once, "
":c:member:`PyConfig.parse_argv` is set to ``2`` after arguments are parsed, "
"and arguments are only parsed if :c:member:`PyConfig.parse_argv` equals "
"``1``."
msgstr ""
"Аргументи :c:member:`PyConfig.argv` тепер аналізуються лише один раз, "
":c:member:`PyConfig.parse_argv` встановлюється на ``2`` після аналізу "
"аргументів, і аргументи аналізуються, лише якщо "
":c:member:`PyConfig.parse_argv` дорівнює ``1``."

#: ../../c-api/init_config.rst:523
msgid ""
":c:func:`PyConfig_Read` no longer calculates all paths, and so fields listed"
" under :ref:`Python Path Configuration <init-path-config>` may no longer be "
"updated until :c:func:`Py_InitializeFromConfig` is called."
msgstr ""

#: ../../c-api/init_config.rst:531
msgid "Release configuration memory."
msgstr "Звільніть конфігураційну пам'ять."

#: ../../c-api/init_config.rst:533
msgid ""
"Most ``PyConfig`` methods :ref:`preinitialize Python <c-preinit>` if needed."
" In that case, the Python preinitialization configuration "
"(:c:type:`PyPreConfig`) in based on the :c:type:`PyConfig`. If configuration"
" fields which are in common with :c:type:`PyPreConfig` are tuned, they must "
"be set before calling a :c:type:`PyConfig` method:"
msgstr ""
"Більшість методів ``PyConfig`` :ref:`за необхідності попередньо "
"ініціалізують Python <c-preinit>`. У цьому випадку конфігурація попередньої "
"ініціалізації Python (:c:type:`PyPreConfig`) базується на "
":c:type:`PyConfig`. Якщо поля конфігурації, які є спільними з "
":c:type:`PyPreConfig`, налаштовано, їх потрібно встановити перед викликом "
"методу :c:type:`PyConfig`:"

#: ../../c-api/init_config.rst:539
msgid ":c:member:`PyConfig.dev_mode`"
msgstr ":c:member:`PyConfig.dev_mode`"

#: ../../c-api/init_config.rst:540
msgid ":c:member:`PyConfig.isolated`"
msgstr ":c:member:`PyConfig.isolated`"

#: ../../c-api/init_config.rst:541
msgid ":c:member:`PyConfig.parse_argv`"
msgstr ":c:member:`PyConfig.parse_argv`"

#: ../../c-api/init_config.rst:542
msgid ":c:member:`PyConfig.use_environment`"
msgstr ":c:member:`PyConfig.use_environment`"

#: ../../c-api/init_config.rst:544
msgid ""
"Moreover, if :c:func:`PyConfig_SetArgv` or :c:func:`PyConfig_SetBytesArgv` "
"is used, this method must be called before other methods, since the "
"preinitialization configuration depends on command line arguments (if "
":c:member:`~PyConfig.parse_argv` is non-zero)."
msgstr ""

#: ../../c-api/init_config.rst:549
msgid ""
"The caller of these methods is responsible to handle exceptions (error or "
"exit) using ``PyStatus_Exception()`` and ``Py_ExitStatusException()``."
msgstr ""
"Виклик цих методів відповідає за обробку винятків (помилка або вихід) за "
"допомогою ``PyStatus_Exception()`` і ``Py_ExitStatusException()``."

#: ../../c-api/init_config.rst:562
msgid ""
"Set :data:`sys.argv` command line arguments based on "
":c:member:`~PyConfig.argv`.  These parameters are similar to those passed to"
" the program's :c:func:`main` function with the difference that the first "
"entry should refer to the script file to be executed rather than the "
"executable hosting the Python interpreter.  If there isn't a script that "
"will be run, the first entry in :c:member:`~PyConfig.argv` can be an empty "
"string."
msgstr ""

#: ../../c-api/init_config.rst:570
msgid ""
"Set :c:member:`~PyConfig.parse_argv` to ``1`` to parse "
":c:member:`~PyConfig.argv` the same way the regular Python parses Python "
"command line arguments and then to strip Python arguments from "
":c:member:`~PyConfig.argv`."
msgstr ""
"Установіть для :c:member:`~PyConfig.parse_argv` значення ``1``, щоб "
"аналізувати :c:member:`~PyConfig.argv` так само, як звичайний Python "
"аналізує аргументи командного рядка Python, а потім видаляти аргументи "
"Python з :c:member:`~PyConfig.argv`."

#: ../../c-api/init_config.rst:575
msgid ""
"If :c:member:`~PyConfig.argv` is empty, an empty string is added to ensure "
"that :data:`sys.argv` always exists and is never empty."
msgstr ""
"Якщо :c:member:`~PyConfig.argv` порожній, додається порожній рядок, щоб "
"гарантувати, що :data:`sys.argv` завжди існує і ніколи не буде порожнім."

#: ../../c-api/init_config.rst:578 ../../c-api/init_config.rst:605
#: ../../c-api/init_config.rst:619 ../../c-api/init_config.rst:629
#: ../../c-api/init_config.rst:739 ../../c-api/init_config.rst:750
#: ../../c-api/init_config.rst:832 ../../c-api/init_config.rst:982
#: ../../c-api/init_config.rst:1083 ../../c-api/init_config.rst:1102
#: ../../c-api/init_config.rst:1117 ../../c-api/init_config.rst:1134
#: ../../c-api/init_config.rst:1147 ../../c-api/init_config.rst:1155
#: ../../c-api/init_config.rst:1169
msgid "Default: ``NULL``."
msgstr "Типове значення: ``NULL``."

#: ../../c-api/init_config.rst:580
msgid "See also the :c:member:`~PyConfig.orig_argv` member."
msgstr "Дивіться також елемент :c:member:`~PyConfig.orig_argv`."

#: ../../c-api/init_config.rst:584
msgid ""
"If equals to zero, ``Py_RunMain()`` prepends a potentially unsafe path to "
":data:`sys.path` at startup:"
msgstr ""

#: ../../c-api/init_config.rst:587
msgid ""
"If :c:member:`argv[0] <PyConfig.argv>` is equal to ``L\"-m\"`` (``python -m "
"module``), prepend the current working directory."
msgstr ""

#: ../../c-api/init_config.rst:589
msgid ""
"If running a script (``python script.py``), prepend the script's directory."
"  If it's a symbolic link, resolve symbolic links."
msgstr ""

#: ../../c-api/init_config.rst:591
msgid ""
"Otherwise (``python -c code`` and ``python``), prepend an empty string, "
"which means the current working directory."
msgstr ""

#: ../../c-api/init_config.rst:594
msgid ""
"Set to ``1`` by the :option:`-P` command line option and the "
":envvar:`PYTHONSAFEPATH` environment variable."
msgstr ""

#: ../../c-api/init_config.rst:597
msgid "Default: ``0`` in Python config, ``1`` in isolated config."
msgstr ""

#: ../../c-api/init_config.rst:603
msgid ":data:`sys.base_exec_prefix`."
msgstr ":data:`sys.base_exec_prefix`."

#: ../../c-api/init_config.rst:607 ../../c-api/init_config.rst:621
#: ../../c-api/init_config.rst:631 ../../c-api/init_config.rst:741
#: ../../c-api/init_config.rst:752 ../../c-api/init_config.rst:999
#: ../../c-api/init_config.rst:1085
msgid ""
"Part of the :ref:`Python Path Configuration <init-path-config>` output."
msgstr ""
"Частина виведення :ref:`Налаштування шляху Python <init-path-config>`."

#: ../../c-api/init_config.rst:609
msgid "See also :c:member:`PyConfig.exec_prefix`."
msgstr ""

#: ../../c-api/init_config.rst:613
msgid "Python base executable: :data:`sys._base_executable`."
msgstr "Базовий виконуваний файл Python: :data:`sys._base_executable`."

#: ../../c-api/init_config.rst:615
msgid "Set by the :envvar:`__PYVENV_LAUNCHER__` environment variable."
msgstr "Встановлюється змінною середовища :envvar:`__PYVENV_LAUNCHER__`."

#: ../../c-api/init_config.rst:617
msgid "Set from :c:member:`PyConfig.executable` if ``NULL``."
msgstr "Установити з :c:member:`PyConfig.executable`, якщо ``NULL``."

#: ../../c-api/init_config.rst:623
msgid "See also :c:member:`PyConfig.executable`."
msgstr ""

#: ../../c-api/init_config.rst:627
msgid ":data:`sys.base_prefix`."
msgstr ":data:`sys.base_prefix`."

#: ../../c-api/init_config.rst:633
msgid "See also :c:member:`PyConfig.prefix`."
msgstr ""

#: ../../c-api/init_config.rst:637
msgid ""
"If equals to ``0`` and :c:member:`~PyConfig.configure_c_stdio` is non-zero, "
"disable buffering on the C streams stdout and stderr."
msgstr ""

#: ../../c-api/init_config.rst:640
msgid ""
"Set to ``0`` by the :option:`-u` command line option and the "
":envvar:`PYTHONUNBUFFERED` environment variable."
msgstr ""

#: ../../c-api/init_config.rst:643
msgid "stdin is always opened in buffered mode."
msgstr "stdin завжди відкривається в режимі буферизації."

#: ../../c-api/init_config.rst:645 ../../c-api/init_config.rst:678
#: ../../c-api/init_config.rst:1197 ../../c-api/init_config.rst:1330
msgid "Default: ``1``."
msgstr "Типове значення: ``1``."

#: ../../c-api/init_config.rst:649
msgid ""
"If equals to ``1``, issue a warning when comparing :class:`bytes` or "
":class:`bytearray` with :class:`str`, or comparing :class:`bytes` with "
":class:`int`."
msgstr ""

#: ../../c-api/init_config.rst:653
msgid ""
"If equal or greater to ``2``, raise a :exc:`BytesWarning` exception in these"
" cases."
msgstr ""

#: ../../c-api/init_config.rst:656
msgid "Incremented by the :option:`-b` command line option."
msgstr "Збільшується параметром командного рядка :option:`-b`."

#: ../../c-api/init_config.rst:662
msgid ""
"If non-zero, emit a :exc:`EncodingWarning` warning when "
":class:`io.TextIOWrapper` uses its default encoding. See :ref:`io-encoding-"
"warning` for details."
msgstr ""
"Якщо не нуль, видавати попередження :exc:`EncodingWarning`, коли "
":class:`io.TextIOWrapper` використовує кодування за замовчуванням. Дивіться "
":ref:`io-encoding-warning` для деталей."

#: ../../c-api/init_config.rst:671
msgid ""
"If equals to ``0``, disables the inclusion of the end line and column "
"mappings in code objects. Also disables traceback printing carets to "
"specific error locations."
msgstr ""

#: ../../c-api/init_config.rst:675
msgid ""
"Set to ``0`` by the :envvar:`PYTHONNODEBUGRANGES` environment variable and "
"by the :option:`-X no_debug_ranges <-X>` command line option."
msgstr ""

#: ../../c-api/init_config.rst:684
msgid ""
"Control the validation behavior of hash-based ``.pyc`` files: value of the "
":option:`--check-hash-based-pycs` command line option."
msgstr ""
"Керуйте поведінкою перевірки файлів ``.pyc`` на основі хешу: значення "
"параметра командного рядка :option:`--check-hash-based-pycs`."

#: ../../c-api/init_config.rst:687
msgid "Valid values:"
msgstr "Дійсні значення:"

#: ../../c-api/init_config.rst:689
msgid ""
"``L\"always\"``: Hash the source file for invalidation regardless of value "
"of the 'check_source' flag."
msgstr ""
"``L\"always\"``: хеш вихідного файлу для визнання недійсним незалежно від "
"значення позначки 'check_source'."

#: ../../c-api/init_config.rst:691
msgid "``L\"never\"``: Assume that hash-based pycs always are valid."
msgstr "``L\"never\"``: припустимо, що pics на основі хешу завжди дійсні."

#: ../../c-api/init_config.rst:692
msgid ""
"``L\"default\"``: The 'check_source' flag in hash-based pycs determines "
"invalidation."
msgstr ""
"``L\"default\"``: прапор 'check_source' у pycs на основі хешу визначає "
"недійсність."

#: ../../c-api/init_config.rst:695
msgid "Default: ``L\"default\"``."
msgstr "Типове значення: ``L\"default\"``."

#: ../../c-api/init_config.rst:697
msgid "See also :pep:`552` \"Deterministic pycs\"."
msgstr "Дивіться також :pep:`552` \"Детерміновані фото\"."

#: ../../c-api/init_config.rst:701
msgid "If non-zero, configure C standard streams:"
msgstr "Якщо не нуль, налаштуйте стандартні потоки C:"

#: ../../c-api/init_config.rst:703
msgid ""
"On Windows, set the binary mode (``O_BINARY``) on stdin, stdout and stderr."
msgstr ""
"У Windows установіть бінарний режим (``O_BINARY``) для stdin, stdout і "
"stderr."

#: ../../c-api/init_config.rst:705
msgid ""
"If :c:member:`~PyConfig.buffered_stdio` equals zero, disable buffering of "
"stdin, stdout and stderr streams."
msgstr ""
"Якщо :c:member:`~PyConfig.buffered_stdio` дорівнює нулю, вимкніть "
"буферизацію потоків stdin, stdout і stderr."

#: ../../c-api/init_config.rst:707
msgid ""
"If :c:member:`~PyConfig.interactive` is non-zero, enable stream buffering on"
" stdin and stdout (only stdout on Windows)."
msgstr ""
"Якщо :c:member:`~PyConfig.interactive` не дорівнює нулю, увімкніть "
"буферизацію потоку на stdin і stdout (лише stdout у Windows)."

#: ../../c-api/init_config.rst:714
msgid "If non-zero, enable the :ref:`Python Development Mode <devmode>`."
msgstr "Якщо не нуль, увімкніть :ref:`Режим розробки Python <devmode>`."

#: ../../c-api/init_config.rst:716
msgid ""
"Set to ``1`` by the :option:`-X dev <-X>` option and the "
":envvar:`PYTHONDEVMODE` environment variable."
msgstr ""

#: ../../c-api/init_config.rst:723
msgid "Dump Python references?"
msgstr "Скинути посилання на Python?"

#: ../../c-api/init_config.rst:725
msgid "If non-zero, dump all objects which are still alive at exit."
msgstr ""
"Якщо значення відмінне від нуля, скинути всі об’єкти, які ще живі при "
"виході."

#: ../../c-api/init_config.rst:727
msgid "Set to ``1`` by the :envvar:`PYTHONDUMPREFS` environment variable."
msgstr ""
"Установіть значення ``1`` за допомогою змінної середовища "
":envvar:`PYTHONDUMPREFS`."

#: ../../c-api/init_config.rst:729
msgid ""
"Needs a special build of Python with the ``Py_TRACE_REFS`` macro defined: "
"see the :option:`configure --with-trace-refs option <--with-trace-refs>`."
msgstr ""

#: ../../c-api/init_config.rst:736
msgid ""
"The site-specific directory prefix where the platform-dependent Python files"
" are installed: :data:`sys.exec_prefix`."
msgstr ""
"Префікс каталогу сайту, де встановлено файли Python, залежні від платформи: "
":data:`sys.exec_prefix`."

#: ../../c-api/init_config.rst:743
msgid "See also :c:member:`PyConfig.base_exec_prefix`."
msgstr ""

#: ../../c-api/init_config.rst:747
msgid ""
"The absolute path of the executable binary for the Python interpreter: "
":data:`sys.executable`."
msgstr ""
"Абсолютний шлях виконуваного двійкового файлу для інтерпретатора Python: "
":data:`sys.executable`."

#: ../../c-api/init_config.rst:754
msgid "See also :c:member:`PyConfig.base_executable`."
msgstr ""

#: ../../c-api/init_config.rst:758
msgid "Enable faulthandler?"
msgstr "Увімкнути обробник помилок?"

#: ../../c-api/init_config.rst:760
msgid "If non-zero, call :func:`faulthandler.enable` at startup."
msgstr "Якщо не нуль, викликати :func:`faulthandler.enable` під час запуску."

#: ../../c-api/init_config.rst:762
msgid ""
"Set to ``1`` by :option:`-X faulthandler <-X>` and the "
":envvar:`PYTHONFAULTHANDLER` environment variable."
msgstr ""
"Установіть значення ``1`` за допомогою :option:`-X faulthandler <-X>` і "
"змінної середовища :envvar:`PYTHONFAULTHANDLER`."

#: ../../c-api/init_config.rst:769
msgid ""
":term:`Filesystem encoding <filesystem encoding and error handler>`: "
":func:`sys.getfilesystemencoding`."
msgstr ""
":term:`Кодування файлової системи <filesystem encoding and error handler>`: "
":func:`sys.getfilesystemencoding`."

#: ../../c-api/init_config.rst:772
msgid "On macOS, Android and VxWorks: use ``\"utf-8\"`` by default."
msgstr "У macOS, Android і VxWorks: використовуйте ``\"utf-8\"`` за умовчанням."

#: ../../c-api/init_config.rst:774
msgid ""
"On Windows: use ``\"utf-8\"`` by default, or ``\"mbcs\"`` if "
":c:member:`~PyPreConfig.legacy_windows_fs_encoding` of :c:type:`PyPreConfig`"
" is non-zero."
msgstr ""
"У Windows: використовуйте ``\"utf-8\"`` за замовчуванням або ``\"mbcs\"``, "
"якщо :c:member:`~PyPreConfig.legacy_windows_fs_encoding` "
":c:type:`PyPreConfig` не дорівнює нулю."

#: ../../c-api/init_config.rst:778
msgid "Default encoding on other platforms:"
msgstr "Стандартне кодування на інших платформах:"

#: ../../c-api/init_config.rst:780
msgid "``\"utf-8\"`` if :c:member:`PyPreConfig.utf8_mode` is non-zero."
msgstr "``\"utf-8\"``, якщо :c:member:`PyPreConfig.utf8_mode` не нульовий."

#: ../../c-api/init_config.rst:781
msgid ""
"``\"ascii\"`` if Python detects that ``nl_langinfo(CODESET)`` announces the "
"ASCII encoding, whereas the ``mbstowcs()`` function decodes from a different"
" encoding (usually Latin1)."
msgstr ""
"``\"ascii\"``, якщо Python виявляє, що ``nl_langinfo(CODESET)`` повідомляє "
"про кодування ASCII, тоді як функція ``mbstowcs()`` декодує з іншого "
"кодування (зазвичай Latin1)."

#: ../../c-api/init_config.rst:784
msgid "``\"utf-8\"`` if ``nl_langinfo(CODESET)`` returns an empty string."
msgstr "``\"utf-8\"``, якщо ``nl_langinfo(CODESET)`` повертає порожній рядок."

#: ../../c-api/init_config.rst:785
msgid ""
"Otherwise, use the :term:`locale encoding`: ``nl_langinfo(CODESET)`` result."
msgstr ""
"В іншому випадку використовуйте результат :term:`locale encoding`: "
"``nl_langinfo(CODESET)``."

#: ../../c-api/init_config.rst:788
msgid ""
"At Python startup, the encoding name is normalized to the Python codec name."
" For example, ``\"ANSI_X3.4-1968\"`` is replaced with ``\"ascii\"``."
msgstr ""
"Під час запуску Python назва кодування нормалізується до назви кодека "
"Python. Наприклад, ``\"ANSI_X3.4-1968\"`` замінюється на ``\"ascii\"``."

#: ../../c-api/init_config.rst:791
msgid "See also the :c:member:`~PyConfig.filesystem_errors` member."
msgstr "Дивіться також елемент :c:member:`~PyConfig.filesystem_errors`."

#: ../../c-api/init_config.rst:795
msgid ""
":term:`Filesystem error handler <filesystem encoding and error handler>`: "
":func:`sys.getfilesystemencodeerrors`."
msgstr ""
":term:`Обробник помилок файлової системи <filesystem encoding and error "
"handler>`: :func:`sys.getfilesystemencodeerrors`."

#: ../../c-api/init_config.rst:798
msgid ""
"On Windows: use ``\"surrogatepass\"`` by default, or ``\"replace\"``  if "
":c:member:`~PyPreConfig.legacy_windows_fs_encoding` of :c:type:`PyPreConfig`"
" is non-zero."
msgstr ""
"У Windows: використовуйте ``\"surrogatepass\"`` за замовчуванням або "
"``\"replace\"``, якщо :c:member:`~PyPreConfig.legacy_windows_fs_encoding` "
":c:type:`PyPreConfig` не дорівнює нулю."

#: ../../c-api/init_config.rst:802
msgid "On other platforms: use ``\"surrogateescape\"`` by default."
msgstr ""
"На інших платформах: використовуйте ``\"surrogateescape\"`` за умовчанням."

#: ../../c-api/init_config.rst:804
msgid "Supported error handlers:"
msgstr "Підтримувані засоби обробки помилок:"

#: ../../c-api/init_config.rst:806
msgid "``\"strict\"``"
msgstr "``\"суворий\"``"

#: ../../c-api/init_config.rst:807
msgid "``\"surrogateescape\"``"
msgstr "``\"сурогатна втеча\"``"

#: ../../c-api/init_config.rst:808
msgid "``\"surrogatepass\"`` (only supported with the UTF-8 encoding)"
msgstr "``\"surrogatepass\"`` (підтримується лише з кодуванням UTF-8)"

#: ../../c-api/init_config.rst:810
msgid "See also the :c:member:`~PyConfig.filesystem_encoding` member."
msgstr "Дивіться також елемент :c:member:`~PyConfig.filesystem_encoding`."

#: ../../c-api/init_config.rst:815
msgid "Randomized hash function seed."
msgstr "Рандомізоване початкове значення хеш-функції."

#: ../../c-api/init_config.rst:817
msgid ""
"If :c:member:`~PyConfig.use_hash_seed` is zero, a seed is chosen randomly at"
" Python startup, and :c:member:`~PyConfig.hash_seed` is ignored."
msgstr ""
"Якщо :c:member:`~PyConfig.use_hash_seed` дорівнює нулю, початкове значення "
"вибирається випадковим чином під час запуску Python, а "
":c:member:`~PyConfig.hash_seed` ігнорується."

#: ../../c-api/init_config.rst:820
msgid "Set by the :envvar:`PYTHONHASHSEED` environment variable."
msgstr "Встановлюється змінною середовища :envvar:`PYTHONHASHSEED`."

#: ../../c-api/init_config.rst:822
msgid ""
"Default *use_hash_seed* value: ``-1`` in Python mode, ``0`` in isolated "
"mode."
msgstr ""
"Значення *use_hash_seed* за замовчуванням: ``-1`` у режимі Python, ``0`` в "
"ізольованому режимі."

#: ../../c-api/init_config.rst:827
msgid ""
"Set the default Python \"home\" directory, that is, the location of the "
"standard Python libraries (see :envvar:`PYTHONHOME`)."
msgstr ""

#: ../../c-api/init_config.rst:830
msgid "Set by the :envvar:`PYTHONHOME` environment variable."
msgstr "Встановлюється змінною середовища :envvar:`PYTHONHOME`."

#: ../../c-api/init_config.rst:834 ../../c-api/init_config.rst:964
#: ../../c-api/init_config.rst:984 ../../c-api/init_config.rst:1073
#: ../../c-api/init_config.rst:1104
msgid "Part of the :ref:`Python Path Configuration <init-path-config>` input."
msgstr ""
"Частина вхідних даних :ref:`Налаштування шляху Python <init-path-config>`."

#: ../../c-api/init_config.rst:838
msgid "If non-zero, profile import time."
msgstr "Якщо не нуль, час імпорту профілю."

#: ../../c-api/init_config.rst:840
msgid ""
"Set the ``1`` by the :option:`-X importtime <-X>` option and the "
":envvar:`PYTHONPROFILEIMPORTTIME` environment variable."
msgstr ""
"Установіть ``1`` за допомогою параметра :option:`-X importtime <-X>` і "
"змінної середовища :envvar:`PYTHONPROFILEIMPORTTIME`."

#: ../../c-api/init_config.rst:847
msgid "Enter interactive mode after executing a script or a command."
msgstr "Увійти в інтерактивний режим після виконання сценарію або команди."

#: ../../c-api/init_config.rst:849
msgid ""
"If greater than ``0``, enable inspect: when a script is passed as first "
"argument or the -c option is used, enter interactive mode after executing "
"the script or the command, even when :data:`sys.stdin` does not appear to be"
" a terminal."
msgstr ""

#: ../../c-api/init_config.rst:854
msgid ""
"Incremented by the :option:`-i` command line option. Set to ``1`` if the "
":envvar:`PYTHONINSPECT` environment variable is non-empty."
msgstr ""
"Збільшується параметром командного рядка :option:`-i`. Установіть значення "
"``1``, якщо змінна середовища :envvar:`PYTHONINSPECT` не порожня."

#: ../../c-api/init_config.rst:861
msgid "Install Python signal handlers?"
msgstr "Установити обробники сигналів Python?"

#: ../../c-api/init_config.rst:863 ../../c-api/init_config.rst:1047
#: ../../c-api/init_config.rst:1071 ../../c-api/init_config.rst:1282
msgid "Default: ``1`` in Python mode, ``0`` in isolated mode."
msgstr "Типове значення: ``1`` в режимі Python, ``0`` в ізольованому режимі."

#: ../../c-api/init_config.rst:867
msgid "If greater than ``0``, enable the interactive mode (REPL)."
msgstr ""

#: ../../c-api/init_config.rst:869
msgid "Incremented by the :option:`-i` command line option."
msgstr "Збільшується параметром командного рядка :option:`-i`."

#: ../../c-api/init_config.rst:875
msgid ""
"Configures the :ref:`integer string conversion length limitation "
"<int_max_str_digits>`.  An initial value of ``-1`` means the value will be "
"taken from the command line or environment or otherwise default to 4300 "
"(:data:`sys.int_info.default_max_str_digits`).  A value of ``0`` disables "
"the limitation.  Values greater than zero but less than 640 "
"(:data:`sys.int_info.str_digits_check_threshold`) are unsupported and will "
"produce an error."
msgstr ""

#: ../../c-api/init_config.rst:883
msgid ""
"Configured by the :option:`-X int_max_str_digits <-X>` command line flag or "
"the :envvar:`PYTHONINTMAXSTRDIGITS` environment variable."
msgstr ""

#: ../../c-api/init_config.rst:886
msgid ""
"Default: ``-1`` in Python mode.  4300 "
"(:data:`sys.int_info.default_max_str_digits`) in isolated mode."
msgstr ""

#: ../../c-api/init_config.rst:893
msgid ""
"If the value of :c:member:`~PyConfig.cpu_count` is not ``-1`` then it will "
"override the return values of :func:`os.cpu_count`, "
":func:`os.process_cpu_count`, and :func:`multiprocessing.cpu_count`."
msgstr ""

#: ../../c-api/init_config.rst:897
msgid ""
"Configured by the :samp:`-X cpu_count={n|default}` command line flag or the "
":envvar:`PYTHON_CPU_COUNT` environment variable."
msgstr ""

#: ../../c-api/init_config.rst:900 ../../c-api/init_config.rst:1259
msgid "Default: ``-1``."
msgstr ""

#: ../../c-api/init_config.rst:906
msgid "If greater than ``0``, enable isolated mode:"
msgstr ""

#: ../../c-api/init_config.rst:908
msgid ""
"Set :c:member:`~PyConfig.safe_path` to ``1``: don't prepend a potentially "
"unsafe path to :data:`sys.path` at Python startup, such as the current "
"directory, the script's directory or an empty string."
msgstr ""

#: ../../c-api/init_config.rst:912
msgid ""
"Set :c:member:`~PyConfig.use_environment` to ``0``: ignore ``PYTHON`` "
"environment variables."
msgstr ""

#: ../../c-api/init_config.rst:914
msgid ""
"Set :c:member:`~PyConfig.user_site_directory` to ``0``: don't add the user "
"site directory to :data:`sys.path`."
msgstr ""

#: ../../c-api/init_config.rst:916
msgid ""
"Python REPL doesn't import :mod:`readline` nor enable default readline "
"configuration on interactive prompts."
msgstr ""
"Python REPL не імпортує :mod:`readline` і не вмикає стандартну конфігурацію "
"readline в інтерактивних підказках."

#: ../../c-api/init_config.rst:919
msgid "Set to ``1`` by the :option:`-I` command line option."
msgstr ""

#: ../../c-api/init_config.rst:923
msgid ""
"See also the :ref:`Isolated Configuration <init-isolated-conf>` and "
":c:member:`PyPreConfig.isolated`."
msgstr ""

#: ../../c-api/init_config.rst:928
msgid ""
"If non-zero, use :class:`io.FileIO` instead of "
":class:`!io._WindowsConsoleIO` for :data:`sys.stdin`, :data:`sys.stdout` and"
" :data:`sys.stderr`."
msgstr ""

#: ../../c-api/init_config.rst:932
msgid ""
"Set to ``1`` if the :envvar:`PYTHONLEGACYWINDOWSSTDIO` environment variable "
"is set to a non-empty string."
msgstr ""
"Установіть значення ``1``, якщо змінна середовища "
":envvar:`PYTHONLEGACYWINDOWSSTDIO` має значення непорожнього рядка."

#: ../../c-api/init_config.rst:940
msgid "See also the :pep:`528` (Change Windows console encoding to UTF-8)."
msgstr ""
"Дивіться також :pep:`528` (Змінити кодування консолі Windows на UTF-8)."

#: ../../c-api/init_config.rst:944
msgid ""
"If non-zero, dump statistics on :ref:`Python pymalloc memory allocator "
"<pymalloc>` at exit."
msgstr ""
"Якщо значення відмінне від нуля, вивести статистику на :ref:`Python pymalloc"
" memory allocator <pymalloc>` при виході."

#: ../../c-api/init_config.rst:947
msgid "Set to ``1`` by the :envvar:`PYTHONMALLOCSTATS` environment variable."
msgstr ""
"Установіть значення ``1`` за допомогою змінної середовища "
":envvar:`PYTHONMALLOCSTATS`."

#: ../../c-api/init_config.rst:949
msgid ""
"The option is ignored if Python is :option:`configured using the --without-"
"pymalloc option <--without-pymalloc>`."
msgstr ""
"Параметр ігнорується, якщо Python :option:`налаштовано за допомогою "
"параметра --without-pymalloc <--without-pymalloc>`."

#: ../../c-api/init_config.rst:956
msgid "Platform library directory name: :data:`sys.platlibdir`."
msgstr "Назва каталогу бібліотеки платформи: :data:`sys.platlibdir`."

#: ../../c-api/init_config.rst:958
msgid "Set by the :envvar:`PYTHONPLATLIBDIR` environment variable."
msgstr "Встановлюється змінною середовища :envvar:`PYTHONPLATLIBDIR`."

#: ../../c-api/init_config.rst:960
msgid ""
"Default: value of the ``PLATLIBDIR`` macro which is set by the "
":option:`configure --with-platlibdir option <--with-platlibdir>` (default: "
"``\"lib\"``, or ``\"DLLs\"`` on Windows)."
msgstr ""

#: ../../c-api/init_config.rst:968
msgid ""
"This macro is now used on Windows to locate the standard library extension "
"modules, typically under ``DLLs``. However, for compatibility, note that "
"this value is ignored for any non-standard layouts, including in-tree builds"
" and virtual environments."
msgstr ""

#: ../../c-api/init_config.rst:977
msgid ""
"Module search paths (:data:`sys.path`) as a string separated by ``DELIM`` "
"(:data:`os.pathsep`)."
msgstr ""

#: ../../c-api/init_config.rst:980
msgid "Set by the :envvar:`PYTHONPATH` environment variable."
msgstr "Встановлюється змінною середовища :envvar:`PYTHONPATH`."

#: ../../c-api/init_config.rst:989
msgid "Module search paths: :data:`sys.path`."
msgstr "Шляхи пошуку модуля: :data:`sys.path`."

#: ../../c-api/init_config.rst:991
msgid ""
"If :c:member:`~PyConfig.module_search_paths_set` is equal to ``0``, "
":c:func:`Py_InitializeFromConfig` will replace "
":c:member:`~PyConfig.module_search_paths` and sets "
":c:member:`~PyConfig.module_search_paths_set` to ``1``."
msgstr ""

#: ../../c-api/init_config.rst:996
msgid ""
"Default: empty list (``module_search_paths``) and ``0`` "
"(``module_search_paths_set``)."
msgstr ""
"За замовчуванням: порожній список (``module_search_paths``) і ``0`` "
"(``module_search_paths_set``)."

#: ../../c-api/init_config.rst:1003
msgid "Compilation optimization level:"
msgstr "Рівень оптимізації компіляції:"

#: ../../c-api/init_config.rst:1005
msgid "``0``: Peephole optimizer, set ``__debug__`` to ``True``."
msgstr "``0``: оптимізатор Peephole, встановіть ``__debug__`` на ``True``."

#: ../../c-api/init_config.rst:1006
msgid "``1``: Level 0, remove assertions, set ``__debug__`` to ``False``."
msgstr ""
"``1``: Рівень 0, видалити твердження, встановити ``__debug__`` на ``False``."

#: ../../c-api/init_config.rst:1007
msgid "``2``: Level 1, strip docstrings."
msgstr "``2``: Рівень 1, рядки документації."

#: ../../c-api/init_config.rst:1009
msgid ""
"Incremented by the :option:`-O` command line option. Set to the "
":envvar:`PYTHONOPTIMIZE` environment variable value."
msgstr ""
"Збільшується параметром командного рядка :option:`-O`. Установіть значення "
"змінної середовища :envvar:`PYTHONOPTIMIZE`."

#: ../../c-api/init_config.rst:1016
msgid ""
"The list of the original command line arguments passed to the Python "
"executable: :data:`sys.orig_argv`."
msgstr ""
"Список вихідних аргументів командного рядка, переданих у виконуваний файл "
"Python: :data:`sys.orig_argv`."

#: ../../c-api/init_config.rst:1019
msgid ""
"If :c:member:`~PyConfig.orig_argv` list is empty and "
":c:member:`~PyConfig.argv` is not a list only containing an empty string, "
":c:func:`PyConfig_Read` copies :c:member:`~PyConfig.argv` into "
":c:member:`~PyConfig.orig_argv` before modifying :c:member:`~PyConfig.argv` "
"(if :c:member:`~PyConfig.parse_argv` is non-zero)."
msgstr ""
"Якщо список :c:member:`~PyConfig.orig_argv` порожній і "
":c:member:`~PyConfig.argv` не є списком, який містить лише порожній рядок, "
":c:func:`PyConfig_Read` копіює :c:member:`~PyConfig.argv` в "
":c:member:`~PyConfig.orig_argv` перед зміною :c:member:`~PyConfig.argv` "
"(якщо :c:member:`~PyConfig.parse_argv` не дорівнює нулю) ."

#: ../../c-api/init_config.rst:1026
msgid ""
"See also the :c:member:`~PyConfig.argv` member and the "
":c:func:`Py_GetArgcArgv` function."
msgstr ""
"Дивіться також член :c:member:`~PyConfig.argv` і функцію "
":c:func:`Py_GetArgcArgv`."

#: ../../c-api/init_config.rst:1029 ../../c-api/init_config.rst:1317
#: ../../c-api/init_config.rst:1336
msgid "Default: empty list."
msgstr "За замовчуванням: порожній список."

#: ../../c-api/init_config.rst:1035
msgid "Parse command line arguments?"
msgstr "Розібрати аргументи командного рядка?"

#: ../../c-api/init_config.rst:1037
msgid ""
"If equals to ``1``, parse :c:member:`~PyConfig.argv` the same way the "
"regular Python parses :ref:`command line arguments <using-on-cmdline>`, and "
"strip Python arguments from :c:member:`~PyConfig.argv`."
msgstr ""
"Якщо дорівнює ``1``, аналізувати :c:member:`~PyConfig.argv` так само, як "
"звичайний Python аналізує :ref:`аргументи командного рядка <using-on-"
"cmdline>`, і видаляти аргументи Python з :c:member:`~PyConfig.argv`."

#: ../../c-api/init_config.rst:1049
msgid ""
"The :c:member:`PyConfig.argv` arguments are now only parsed if "
":c:member:`PyConfig.parse_argv` equals to ``1``."
msgstr ""
"Аргументи :c:member:`PyConfig.argv` тепер аналізуються, лише якщо "
":c:member:`PyConfig.parse_argv` дорівнює ``1``."

#: ../../c-api/init_config.rst:1055
msgid ""
"Parser debug mode. If greater than ``0``, turn on parser debugging output "
"(for expert only, depending on compilation options)."
msgstr ""

#: ../../c-api/init_config.rst:1058
msgid ""
"Incremented by the :option:`-d` command line option. Set to the "
":envvar:`PYTHONDEBUG` environment variable value."
msgstr ""
"Збільшується параметром командного рядка :option:`-d`. Установіть значення "
"змінної середовища :envvar:`PYTHONDEBUG`."

#: ../../c-api/init_config.rst:1061 ../../c-api/init_config.rst:1166
msgid ""
"Needs a :ref:`debug build of Python <debug-build>` (the ``Py_DEBUG`` macro "
"must be defined)."
msgstr ""

#: ../../c-api/init_config.rst:1068
msgid ""
"If non-zero, calculation of path configuration is allowed to log warnings "
"into ``stderr``. If equals to ``0``, suppress these warnings."
msgstr ""

#: ../../c-api/init_config.rst:1075
msgid "Now also applies on Windows."
msgstr ""

#: ../../c-api/init_config.rst:1080
msgid ""
"The site-specific directory prefix where the platform independent Python "
"files are installed: :data:`sys.prefix`."
msgstr ""
"Префікс каталогу сайту, де встановлено незалежні від платформи файли Python:"
" :data:`sys.prefix`."

#: ../../c-api/init_config.rst:1087
msgid "See also :c:member:`PyConfig.base_prefix`."
msgstr ""

#: ../../c-api/init_config.rst:1091
msgid ""
"Program name used to initialize :c:member:`~PyConfig.executable` and in "
"early error messages during Python initialization."
msgstr ""
"Ім’я програми, що використовується для ініціалізації "
":c:member:`~PyConfig.executable` і в ранніх повідомленнях про помилки під "
"час ініціалізації Python."

#: ../../c-api/init_config.rst:1094
msgid "On macOS, use :envvar:`PYTHONEXECUTABLE` environment variable if set."
msgstr ""
"У macOS використовуйте змінну середовища :envvar:`PYTHONEXECUTABLE`, якщо "
"встановлено."

#: ../../c-api/init_config.rst:1095
msgid ""
"If the ``WITH_NEXT_FRAMEWORK`` macro is defined, use "
":envvar:`__PYVENV_LAUNCHER__` environment variable if set."
msgstr ""
"Якщо визначено макрос ``WITH_NEXT_FRAMEWORK``, використовуйте змінну "
"середовища :envvar:`__PYVENV_LAUNCHER__`, якщо встановлено."

#: ../../c-api/init_config.rst:1097
msgid ""
"Use ``argv[0]`` of :c:member:`~PyConfig.argv` if available and non-empty."
msgstr ""
"Використовуйте ``argv[0]`` :c:member:`~PyConfig.argv`, якщо доступний і не є"
" порожнім."

#: ../../c-api/init_config.rst:1099
msgid ""
"Otherwise, use ``L\"python\"`` on Windows, or ``L\"python3\"`` on other "
"platforms."
msgstr ""
"В іншому випадку використовуйте ``L\"python\"`` у Windows або "
"``L\"python3\"`` на інших платформах."

#: ../../c-api/init_config.rst:1108
msgid ""
"Directory where cached ``.pyc`` files are written: "
":data:`sys.pycache_prefix`."
msgstr ""
"Каталог, де записуються кешовані файли ``.pyc``: :data:`sys.pycache_prefix`."

#: ../../c-api/init_config.rst:1111
msgid ""
"Set by the :option:`-X pycache_prefix=PATH <-X>` command line option and the"
" :envvar:`PYTHONPYCACHEPREFIX` environment variable. The command-line option"
" takes precedence."
msgstr ""

#: ../../c-api/init_config.rst:1115
msgid "If ``NULL``, :data:`sys.pycache_prefix` is set to ``None``."
msgstr "Якщо ``NULL``, :data:`sys.pycache_prefix` має значення ``None``."

#: ../../c-api/init_config.rst:1121
msgid ""
"Quiet mode. If greater than ``0``, don't display the copyright and version "
"at Python startup in interactive mode."
msgstr ""

#: ../../c-api/init_config.rst:1124
msgid "Incremented by the :option:`-q` command line option."
msgstr "Збільшується параметром командного рядка :option:`-q`."

#: ../../c-api/init_config.rst:1130
msgid "Value of the :option:`-c` command line option."
msgstr "Значення параметра командного рядка :option:`-c`."

#: ../../c-api/init_config.rst:1132 ../../c-api/init_config.rst:1153
msgid "Used by :c:func:`Py_RunMain`."
msgstr "Використовується :c:func:`Py_RunMain`."

#: ../../c-api/init_config.rst:1138
msgid ""
"Filename passed on the command line: trailing command line argument without "
":option:`-c` or :option:`-m`. It is used by the :c:func:`Py_RunMain` "
"function."
msgstr ""

#: ../../c-api/init_config.rst:1142
msgid ""
"For example, it is set to ``script.py`` by the ``python3 script.py arg`` "
"command line."
msgstr ""

#: ../../c-api/init_config.rst:1145
msgid "See also the :c:member:`PyConfig.skip_source_first_line` option."
msgstr ""

#: ../../c-api/init_config.rst:1151
msgid "Value of the :option:`-m` command line option."
msgstr "Значення параметра командного рядка :option:`-m`."

#: ../../c-api/init_config.rst:1159
msgid ""
"``package.module`` path to module that should be imported before ``site.py``"
" is run."
msgstr ""

#: ../../c-api/init_config.rst:1162
msgid ""
"Set by the :option:`-X presite=package.module <-X>` command-line option and "
"the :envvar:`PYTHON_PRESITE` environment variable. The command-line option "
"takes precedence."
msgstr ""

#: ../../c-api/init_config.rst:1173
msgid ""
"Show total reference count at exit (excluding :term:`immortal` objects)?"
msgstr ""

#: ../../c-api/init_config.rst:1175
msgid "Set to ``1`` by :option:`-X showrefcount <-X>` command line option."
msgstr ""

#: ../../c-api/init_config.rst:1177
msgid ""
"Needs a :ref:`debug build of Python <debug-build>` (the ``Py_REF_DEBUG`` "
"macro must be defined)."
msgstr ""

#: ../../c-api/init_config.rst:1184
msgid "Import the :mod:`site` module at startup?"
msgstr "Імпортувати модуль :mod:`site` під час запуску?"

#: ../../c-api/init_config.rst:1186
msgid ""
"If equal to zero, disable the import of the module site and the site-"
"dependent manipulations of :data:`sys.path` that it entails."
msgstr ""
"Якщо дорівнює нулю, вимкніть імпорт сайту модуля та залежні від сайту "
"маніпуляції :data:`sys.path`, які він тягне за собою."

#: ../../c-api/init_config.rst:1189
msgid ""
"Also disable these manipulations if the :mod:`site` module is explicitly "
"imported later (call :func:`site.main` if you want them to be triggered)."
msgstr ""
"Також вимкніть ці маніпуляції, якщо модуль :mod:`site` буде явно імпортовано"
" пізніше (викличте :func:`site.main`, якщо ви хочете, щоб вони були "
"активовані)."

#: ../../c-api/init_config.rst:1192
msgid "Set to ``0`` by the :option:`-S` command line option."
msgstr ""
"Установіть ``0`` за допомогою параметра командного рядка :option:`-S`."

#: ../../c-api/init_config.rst:1194
msgid ""
":data:`sys.flags.no_site <sys.flags>` is set to the inverted value of "
":c:member:`~PyConfig.site_import`."
msgstr ""

#: ../../c-api/init_config.rst:1201
msgid ""
"If non-zero, skip the first line of the :c:member:`PyConfig.run_filename` "
"source."
msgstr ""
"Якщо значення не нульове, пропустіть перший рядок джерела "
":c:member:`PyConfig.run_filename`."

#: ../../c-api/init_config.rst:1204
msgid ""
"It allows the usage of non-Unix forms of ``#!cmd``. This is intended for a "
"DOS specific hack only."
msgstr ""
"Це дозволяє використовувати не-Unix форми ``#!cmd``. Це призначено лише для "
"спеціального злому DOS."

#: ../../c-api/init_config.rst:1207
msgid "Set to ``1`` by the :option:`-x` command line option."
msgstr ""
"Установіть значення ``1`` за допомогою параметра командного рядка "
":option:`-x`."

#: ../../c-api/init_config.rst:1214
msgid ""
"Encoding and encoding errors of :data:`sys.stdin`, :data:`sys.stdout` and "
":data:`sys.stderr` (but :data:`sys.stderr` always uses "
"``\"backslashreplace\"`` error handler)."
msgstr ""
"Кодування та помилки кодування :data:`sys.stdin`, :data:`sys.stdout` і "
":data:`sys.stderr` (але :data:`sys.stderr` завжди використовує "
"``\"backslashreplace\"`` обробник помилок)."

#: ../../c-api/init_config.rst:1218
msgid ""
"Use the :envvar:`PYTHONIOENCODING` environment variable if it is non-empty."
msgstr ""
"Використовуйте змінну середовища :envvar:`PYTHONIOENCODING`, якщо вона "
"непорожня."

#: ../../c-api/init_config.rst:1221
msgid "Default encoding:"
msgstr "Стандартне кодування:"

#: ../../c-api/init_config.rst:1223
msgid "``\"UTF-8\"`` if :c:member:`PyPreConfig.utf8_mode` is non-zero."
msgstr "``\"UTF-8\"``, якщо :c:member:`PyPreConfig.utf8_mode` не нульовий."

#: ../../c-api/init_config.rst:1224
msgid "Otherwise, use the :term:`locale encoding`."
msgstr "В іншому випадку використовуйте :term:`locale encoding`."

#: ../../c-api/init_config.rst:1226
msgid "Default error handler:"
msgstr "Обробник помилок за замовчуванням:"

#: ../../c-api/init_config.rst:1228
msgid "On Windows: use ``\"surrogateescape\"``."
msgstr "У Windows: використовуйте ``\"surrogateescape\"``."

#: ../../c-api/init_config.rst:1229
msgid ""
"``\"surrogateescape\"`` if :c:member:`PyPreConfig.utf8_mode` is non-zero, or"
" if the LC_CTYPE locale is \"C\" or \"POSIX\"."
msgstr ""
"``\"surrogateescape\"``, якщо :c:member:`PyPreConfig.utf8_mode` не нульовий,"
" або якщо LC_CTYPE локаль \"C\" або \"POSIX\"."

#: ../../c-api/init_config.rst:1231
msgid "``\"strict\"`` otherwise."
msgstr "``\"строгий\"`` інакше."

#: ../../c-api/init_config.rst:1233
msgid "See also :c:member:`PyConfig.legacy_windows_stdio`."
msgstr ""

#: ../../c-api/init_config.rst:1237
msgid "Enable tracemalloc?"
msgstr "Увімкнути tracemalloc?"

#: ../../c-api/init_config.rst:1239
msgid "If non-zero, call :func:`tracemalloc.start` at startup."
msgstr "Якщо не нуль, викликати :func:`tracemalloc.start` під час запуску."

#: ../../c-api/init_config.rst:1241
msgid ""
"Set by :option:`-X tracemalloc=N <-X>` command line option and by the "
":envvar:`PYTHONTRACEMALLOC` environment variable."
msgstr ""
"Встановлюється параметром командного рядка :option:`-X tracemalloc=N <-X>` і"
" змінною середовища :envvar:`PYTHONTRACEMALLOC`."

#: ../../c-api/init_config.rst:1248
msgid "Enable compatibility mode with the perf profiler?"
msgstr ""

#: ../../c-api/init_config.rst:1250
msgid ""
"If non-zero, initialize the perf trampoline. See :ref:`perf_profiling` for "
"more information."
msgstr ""

#: ../../c-api/init_config.rst:1253
msgid ""
"Set by :option:`-X perf <-X>` command-line option and by the "
":envvar:`PYTHON_PERF_JIT_SUPPORT` environment variable for perf support with"
" stack pointers and :option:`-X perf_jit <-X>` command-line option and by "
"the :envvar:`PYTHON_PERF_JIT_SUPPORT` environment variable for perf support "
"with DWARF JIT information."
msgstr ""

#: ../../c-api/init_config.rst:1265
msgid "Use :ref:`environment variables <using-on-envvars>`?"
msgstr "Використовувати :ref:`змінні середовища <using-on-envvars>`?"

#: ../../c-api/init_config.rst:1267
msgid ""
"If equals to zero, ignore the :ref:`environment variables <using-on-"
"envvars>`."
msgstr ""
"Якщо дорівнює нулю, ігноруйте :ref:`змінні середовища <using-on-envvars>`."

#: ../../c-api/init_config.rst:1270
msgid "Set to ``0`` by the :option:`-E` environment variable."
msgstr ""

#: ../../c-api/init_config.rst:1276
msgid "If non-zero, add the user site directory to :data:`sys.path`."
msgstr ""
"Якщо значення не нульове, додайте каталог сайту користувача до "
":data:`sys.path`."

#: ../../c-api/init_config.rst:1278
msgid ""
"Set to ``0`` by the :option:`-s` and :option:`-I` command line options."
msgstr ""
"Установіть значення ``0`` за допомогою параметрів командного рядка "
":option:`-s` і :option:`-I`."

#: ../../c-api/init_config.rst:1280
msgid "Set to ``0`` by the :envvar:`PYTHONNOUSERSITE` environment variable."
msgstr ""
"Установлено значення ``0`` за допомогою змінної середовища "
":envvar:`PYTHONNOUSERSITE`."

#: ../../c-api/init_config.rst:1286
msgid ""
"Verbose mode. If greater than ``0``, print a message each time a module is "
"imported, showing the place (filename or built-in module) from which it is "
"loaded."
msgstr ""

#: ../../c-api/init_config.rst:1290
msgid ""
"If greater than or equal to ``2``, print a message for each file that is "
"checked for when searching for a module. Also provides information on module"
" cleanup at exit."
msgstr ""

#: ../../c-api/init_config.rst:1294
msgid "Incremented by the :option:`-v` command line option."
msgstr "Збільшується параметром командного рядка :option:`-v`."

#: ../../c-api/init_config.rst:1296
msgid "Set by the :envvar:`PYTHONVERBOSE` environment variable value."
msgstr ""

#: ../../c-api/init_config.rst:1302
msgid ""
"Options of the :mod:`warnings` module to build warnings filters, lowest to "
"highest priority: :data:`sys.warnoptions`."
msgstr ""
"Параметри модуля :mod:`warnings` для створення фільтрів попереджень, від "
"найнижчого до найвищого пріоритету: :data:`sys.warnoptions`."

#: ../../c-api/init_config.rst:1305
msgid ""
"The :mod:`warnings` module adds :data:`sys.warnoptions` in the reverse "
"order: the last :c:member:`PyConfig.warnoptions` item becomes the first item"
" of :data:`warnings.filters` which is checked first (highest priority)."
msgstr ""
"Модуль :mod:`warnings` додає :data:`sys.warnoptions` у зворотному порядку: "
"останній елемент :c:member:`PyConfig.warnoptions` стає першим елементом "
":data:`warnings.filters`, який є перевіряється першим (найвищий пріоритет)."

#: ../../c-api/init_config.rst:1310
msgid ""
"The :option:`-W` command line options adds its value to "
":c:member:`~PyConfig.warnoptions`, it can be used multiple times."
msgstr ""
"Параметр командного рядка :option:`-W` додає значення до "
":c:member:`~PyConfig.warnoptions`, тому його можна використовувати кілька "
"разів."

#: ../../c-api/init_config.rst:1313
msgid ""
"The :envvar:`PYTHONWARNINGS` environment variable can also be used to add "
"warning options. Multiple options can be specified, separated by commas "
"(``,``)."
msgstr ""
"Змінну середовища :envvar:`PYTHONWARNINGS` також можна використовувати для "
"додавання параметрів попередження. Можна вказати декілька параметрів, "
"розділених комами (``,``)."

#: ../../c-api/init_config.rst:1321
msgid ""
"If equal to ``0``, Python won't try to write ``.pyc`` files on the import of"
" source modules."
msgstr ""

#: ../../c-api/init_config.rst:1324
msgid ""
"Set to ``0`` by the :option:`-B` command line option and the "
":envvar:`PYTHONDONTWRITEBYTECODE` environment variable."
msgstr ""
"Установіть значення ``0`` за допомогою параметра командного рядка "
":option:`-B` і змінної середовища :envvar:`PYTHONDONTWRITEBYTECODE`."

#: ../../c-api/init_config.rst:1327
msgid ""
":data:`sys.dont_write_bytecode` is initialized to the inverted value of "
":c:member:`~PyConfig.write_bytecode`."
msgstr ""
":data:`sys.dont_write_bytecode` ініціалізується інвертованим значенням "
":c:member:`~PyConfig.write_bytecode`."

#: ../../c-api/init_config.rst:1334
msgid ""
"Values of the :option:`-X` command line options: :data:`sys._xoptions`."
msgstr ""
"Значення параметрів командного рядка :option:`-X`: :data:`sys._xoptions`."

#: ../../c-api/init_config.rst:1338
msgid ""
"If :c:member:`~PyConfig.parse_argv` is non-zero, :c:member:`~PyConfig.argv` "
"arguments are parsed the same way the regular Python parses :ref:`command "
"line arguments <using-on-cmdline>`, and Python arguments are stripped from "
":c:member:`~PyConfig.argv`."
msgstr ""
"Якщо :c:member:`~PyConfig.parse_argv` не дорівнює нулю, аргументи "
":c:member:`~PyConfig.argv` аналізуються так само, як звичайний Python "
"аналізує :ref:`аргументи командного рядка <using-on-cmdline>`, і Python "
"аргументи видаляються з :c:member:`~PyConfig.argv`."

#: ../../c-api/init_config.rst:1343
msgid ""
"The :c:member:`~PyConfig.xoptions` options are parsed to set other options: "
"see the :option:`-X` command line option."
msgstr ""
"Параметри :c:member:`~PyConfig.xoptions` аналізуються, щоб встановити інші "
"параметри: дивіться параметр командного рядка :option:`-X`."

#: ../../c-api/init_config.rst:1348
msgid "The ``show_alloc_count`` field has been removed."
msgstr "Поле ``show_alloc_count`` видалено."

#: ../../c-api/init_config.rst:1354
msgid "Initialization with PyConfig"
msgstr "Ініціалізація за допомогою PyConfig"

#: ../../c-api/init_config.rst:1356
msgid ""
"Initializing the interpreter from a populated configuration struct is "
"handled by calling :c:func:`Py_InitializeFromConfig`."
msgstr ""

#: ../../c-api/init_config.rst:1362
msgid ""
"If :c:func:`PyImport_FrozenModules`, :c:func:`PyImport_AppendInittab` or "
":c:func:`PyImport_ExtendInittab` are used, they must be set or called after "
"Python preinitialization and before the Python initialization. If Python is "
"initialized multiple times, :c:func:`PyImport_AppendInittab` or "
":c:func:`PyImport_ExtendInittab` must be called before each Python "
"initialization."
msgstr ""
"Якщо :c:func:`PyImport_FrozenModules`, :c:func:`PyImport_AppendInittab` або "
":c:func:`PyImport_ExtendInittab` використовуються, їх потрібно встановити "
"або викликати після попередньої ініціалізації Python та перед ініціалізацією"
" Python. Якщо Python ініціалізовано кілька разів, перед кожною "
"ініціалізацією Python потрібно викликати :c:func:`PyImport_AppendInittab` "
"або :c:func:`PyImport_ExtendInittab`."

#: ../../c-api/init_config.rst:1369
msgid ""
"The current configuration (``PyConfig`` type) is stored in "
"``PyInterpreterState.config``."
msgstr ""
"Поточна конфігурація (тип ``PyConfig``) зберігається в "
"``PyInterpreterState.config``."

#: ../../c-api/init_config.rst:1372
msgid "Example setting the program name::"
msgstr "Приклад налаштування імені програми::"

#: ../../c-api/init_config.rst:1374
msgid ""
"void init_python(void)\n"
"{\n"
"    PyStatus status;\n"
"\n"
"    PyConfig config;\n"
"    PyConfig_InitPythonConfig(&config);\n"
"\n"
"    /* Set the program name. Implicitly preinitialize Python. */\n"
"    status = PyConfig_SetString(&config, &config.program_name,\n"
"                                L\"/path/to/my_program\");\n"
"    if (PyStatus_Exception(status)) {\n"
"        goto exception;\n"
"    }\n"
"\n"
"    status = Py_InitializeFromConfig(&config);\n"
"    if (PyStatus_Exception(status)) {\n"
"        goto exception;\n"
"    }\n"
"    PyConfig_Clear(&config);\n"
"    return;\n"
"\n"
"exception:\n"
"    PyConfig_Clear(&config);\n"
"    Py_ExitStatusException(status);\n"
"}"
msgstr ""

#: ../../c-api/init_config.rst:1400
msgid ""
"More complete example modifying the default configuration, read the "
"configuration, and then override some parameters. Note that since 3.11, many"
" parameters are not calculated until initialization, and so values cannot be"
" read from the configuration structure. Any values set before initialize is "
"called will be left unchanged by initialization::"
msgstr ""

#: ../../c-api/init_config.rst:1407
msgid ""
"PyStatus init_python(const char *program_name)\n"
"{\n"
"    PyStatus status;\n"
"\n"
"    PyConfig config;\n"
"    PyConfig_InitPythonConfig(&config);\n"
"\n"
"    /* Set the program name before reading the configuration\n"
"       (decode byte string from the locale encoding).\n"
"\n"
"       Implicitly preinitialize Python. */\n"
"    status = PyConfig_SetBytesString(&config, &config.program_name,\n"
"                                     program_name);\n"
"    if (PyStatus_Exception(status)) {\n"
"        goto done;\n"
"    }\n"
"\n"
"    /* Read all configuration at once */\n"
"    status = PyConfig_Read(&config);\n"
"    if (PyStatus_Exception(status)) {\n"
"        goto done;\n"
"    }\n"
"\n"
"    /* Specify sys.path explicitly */\n"
"    /* If you want to modify the default set of paths, finish\n"
"       initialization first and then use PySys_GetObject(\"path\") */\n"
"    config.module_search_paths_set = 1;\n"
"    status = PyWideStringList_Append(&config.module_search_paths,\n"
"                                     L\"/path/to/stdlib\");\n"
"    if (PyStatus_Exception(status)) {\n"
"        goto done;\n"
"    }\n"
"    status = PyWideStringList_Append(&config.module_search_paths,\n"
"                                     L\"/path/to/more/modules\");\n"
"    if (PyStatus_Exception(status)) {\n"
"        goto done;\n"
"    }\n"
"\n"
"    /* Override executable computed by PyConfig_Read() */\n"
"    status = PyConfig_SetString(&config, &config.executable,\n"
"                                L\"/path/to/my_executable\");\n"
"    if (PyStatus_Exception(status)) {\n"
"        goto done;\n"
"    }\n"
"\n"
"    status = Py_InitializeFromConfig(&config);\n"
"\n"
"done:\n"
"    PyConfig_Clear(&config);\n"
"    return status;\n"
"}"
msgstr ""

#: ../../c-api/init_config.rst:1463
msgid "Isolated Configuration"
msgstr "Ізольована конфігурація"

#: ../../c-api/init_config.rst:1465
msgid ""
":c:func:`PyPreConfig_InitIsolatedConfig` and "
":c:func:`PyConfig_InitIsolatedConfig` functions create a configuration to "
"isolate Python from the system. For example, to embed Python into an "
"application."
msgstr ""
"Функції :c:func:`PyPreConfig_InitIsolatedConfig` і "
":c:func:`PyConfig_InitIsolatedConfig` створюють конфігурацію для ізоляції "
"Python від системи. Наприклад, щоб вбудувати Python у програму."

#: ../../c-api/init_config.rst:1470
msgid ""
"This configuration ignores global configuration variables, environment "
"variables, command line arguments (:c:member:`PyConfig.argv` is not parsed) "
"and user site directory. The C standard streams (ex: ``stdout``) and the "
"LC_CTYPE locale are left unchanged. Signal handlers are not installed."
msgstr ""
"Ця конфігурація ігнорує глобальні змінні конфігурації, змінні середовища, "
"аргументи командного рядка (:c:member:`PyConfig.argv` не аналізується) і "
"каталог сайту користувача. Стандартні потоки C (наприклад: ``stdout``) і "
"локаль LC_CTYPE залишаються без змін. Обробники сигналів не встановлені."

#: ../../c-api/init_config.rst:1475
msgid ""
"Configuration files are still used with this configuration to determine "
"paths that are unspecified. Ensure :c:member:`PyConfig.home` is specified to"
" avoid computing the default path configuration."
msgstr ""

#: ../../c-api/init_config.rst:1483
msgid "Python Configuration"
msgstr "Конфігурація Python"

#: ../../c-api/init_config.rst:1485
msgid ""
":c:func:`PyPreConfig_InitPythonConfig` and "
":c:func:`PyConfig_InitPythonConfig` functions create a configuration to "
"build a customized Python which behaves as the regular Python."
msgstr ""
"Функції :c:func:`PyPreConfig_InitPythonConfig` і "
":c:func:`PyConfig_InitPythonConfig` створюють конфігурацію для створення "
"налаштованого Python, який веде себе як звичайний Python."

#: ../../c-api/init_config.rst:1489
msgid ""
"Environments variables and command line arguments are used to configure "
"Python, whereas global configuration variables are ignored."
msgstr ""
"Для налаштування Python використовуються змінні середовища та аргументи "
"командного рядка, тоді як глобальні змінні конфігурації ігноруються."

#: ../../c-api/init_config.rst:1492
msgid ""
"This function enables C locale coercion (:pep:`538`) and :ref:`Python UTF-8 "
"Mode <utf8-mode>` (:pep:`540`) depending on the LC_CTYPE locale, "
":envvar:`PYTHONUTF8` and :envvar:`PYTHONCOERCECLOCALE` environment "
"variables."
msgstr ""
"Ця функція вмикає примусове налаштування локалі C (:pep:`538`) і "
":ref:`Python UTF-8 Mode <utf8-mode>` (:pep:`540`) залежно від локалі "
"LC_CTYPE, :envvar:`PYTHONUTF8` і Змінні середовища "
":envvar:`PYTHONCOERCECLOCALE`."

#: ../../c-api/init_config.rst:1501
msgid "Python Path Configuration"
msgstr "Конфігурація шляху Python"

#: ../../c-api/init_config.rst:1503
msgid ""
":c:type:`PyConfig` contains multiple fields for the path configuration:"
msgstr ":c:type:`PyConfig` містить кілька полів для конфігурації шляху:"

#: ../../c-api/init_config.rst:1505
msgid "Path configuration inputs:"
msgstr "Вхідні дані конфігурації шляху:"

#: ../../c-api/init_config.rst:1507
msgid ":c:member:`PyConfig.home`"
msgstr ":c:member:`PyConfig.home`"

#: ../../c-api/init_config.rst:1508
msgid ":c:member:`PyConfig.platlibdir`"
msgstr ":c:member:`PyConfig.platlibdir`"

#: ../../c-api/init_config.rst:1509
msgid ":c:member:`PyConfig.pathconfig_warnings`"
msgstr ":c:member:`PyConfig.pathconfig_warnings`"

#: ../../c-api/init_config.rst:1510
msgid ":c:member:`PyConfig.program_name`"
msgstr ":c:member:`PyConfig.program_name`"

#: ../../c-api/init_config.rst:1511
msgid ":c:member:`PyConfig.pythonpath_env`"
msgstr ":c:member:`PyConfig.pythonpath_env`"

#: ../../c-api/init_config.rst:1512
msgid "current working directory: to get absolute paths"
msgstr "поточний робочий каталог: щоб отримати абсолютні шляхи"

#: ../../c-api/init_config.rst:1513
msgid ""
"``PATH`` environment variable to get the program full path (from "
":c:member:`PyConfig.program_name`)"
msgstr ""
"Змінна середовища ``PATH``, щоб отримати повний шлях до програми (з "
":c:member:`PyConfig.program_name`)"

#: ../../c-api/init_config.rst:1515
msgid "``__PYVENV_LAUNCHER__`` environment variable"
msgstr "Змінна середовища ``__PYVENV_LAUNCHER__``"

#: ../../c-api/init_config.rst:1516
msgid ""
"(Windows only) Application paths in the registry under "
"\"Software\\Python\\PythonCore\\X.Y\\PythonPath\" of HKEY_CURRENT_USER and "
"HKEY_LOCAL_MACHINE (where X.Y is the Python version)."
msgstr ""
"(Лише для Windows) Шляхи програм у реєстрі в розділі "
"\"Software\\Python\\PythonCore\\X.Y\\PythonPath\" HKEY_CURRENT_USER і "
"HKEY_LOCAL_MACHINE (де X.Y — версія Python)."

#: ../../c-api/init_config.rst:1520
msgid "Path configuration output fields:"
msgstr "Поля виведення конфігурації шляху:"

#: ../../c-api/init_config.rst:1522
msgid ":c:member:`PyConfig.base_exec_prefix`"
msgstr ":c:member:`PyConfig.base_exec_prefix`"

#: ../../c-api/init_config.rst:1523
msgid ":c:member:`PyConfig.base_executable`"
msgstr ":c:member:`PyConfig.base_executable`"

#: ../../c-api/init_config.rst:1524
msgid ":c:member:`PyConfig.base_prefix`"
msgstr ":c:member:`PyConfig.base_prefix`"

#: ../../c-api/init_config.rst:1525
msgid ":c:member:`PyConfig.exec_prefix`"
msgstr ":c:member:`PyConfig.exec_prefix`"

#: ../../c-api/init_config.rst:1526
msgid ":c:member:`PyConfig.executable`"
msgstr ":c:member:`PyConfig.executable`"

#: ../../c-api/init_config.rst:1527
msgid ""
":c:member:`PyConfig.module_search_paths_set`, "
":c:member:`PyConfig.module_search_paths`"
msgstr ""
":c:member:`PyConfig.module_search_paths_set`, "
":c:member:`PyConfig.module_search_paths`"

#: ../../c-api/init_config.rst:1529
msgid ":c:member:`PyConfig.prefix`"
msgstr ":c:member:`PyConfig.prefix`"

#: ../../c-api/init_config.rst:1531
msgid ""
"If at least one \"output field\" is not set, Python calculates the path "
"configuration to fill unset fields. If "
":c:member:`~PyConfig.module_search_paths_set` is equal to ``0``, "
":c:member:`~PyConfig.module_search_paths` is overridden and "
":c:member:`~PyConfig.module_search_paths_set` is set to ``1``."
msgstr ""

#: ../../c-api/init_config.rst:1537
msgid ""
"It is possible to completely ignore the function calculating the default "
"path configuration by setting explicitly all path configuration output "
"fields listed above. A string is considered as set even if it is non-empty. "
"``module_search_paths`` is considered as set if ``module_search_paths_set`` "
"is set to ``1``. In this case, ``module_search_paths`` will be used without "
"modification."
msgstr ""

#: ../../c-api/init_config.rst:1544
msgid ""
"Set :c:member:`~PyConfig.pathconfig_warnings` to ``0`` to suppress warnings "
"when calculating the path configuration (Unix only, Windows does not log any"
" warning)."
msgstr ""

#: ../../c-api/init_config.rst:1547
msgid ""
"If :c:member:`~PyConfig.base_prefix` or "
":c:member:`~PyConfig.base_exec_prefix` fields are not set, they inherit "
"their value from :c:member:`~PyConfig.prefix` and "
":c:member:`~PyConfig.exec_prefix` respectively."
msgstr ""
"Якщо поля :c:member:`~PyConfig.base_prefix` або "
":c:member:`~PyConfig.base_exec_prefix` не встановлені, вони успадковують "
"свої значення від :c:member:`~PyConfig.prefix` і "
":c:member:`~PyConfig.exec_prefix` відповідно."

#: ../../c-api/init_config.rst:1551
msgid ":c:func:`Py_RunMain` and :c:func:`Py_Main` modify :data:`sys.path`:"
msgstr ":c:func:`Py_RunMain` і :c:func:`Py_Main` змінюють :data:`sys.path`:"

#: ../../c-api/init_config.rst:1553
msgid ""
"If :c:member:`~PyConfig.run_filename` is set and is a directory which "
"contains a ``__main__.py`` script, prepend "
":c:member:`~PyConfig.run_filename` to :data:`sys.path`."
msgstr ""
"Якщо :c:member:`~PyConfig.run_filename` встановлено і це каталог, який "
"містить сценарій ``__main__.py``, додайте :c:member:`~PyConfig.run_filename`"
" до :data:`sys.path`."

#: ../../c-api/init_config.rst:1556
msgid "If :c:member:`~PyConfig.isolated` is zero:"
msgstr "Якщо :c:member:`~PyConfig.isolated` дорівнює нулю:"

#: ../../c-api/init_config.rst:1558
msgid ""
"If :c:member:`~PyConfig.run_module` is set, prepend the current directory to"
" :data:`sys.path`. Do nothing if the current directory cannot be read."
msgstr ""
"Якщо встановлено :c:member:`~PyConfig.run_module`, додайте поточний каталог "
"до :data:`sys.path`. Нічого не робити, якщо поточний каталог неможливо "
"прочитати."

#: ../../c-api/init_config.rst:1560
msgid ""
"If :c:member:`~PyConfig.run_filename` is set, prepend the directory of the "
"filename to :data:`sys.path`."
msgstr ""
"Якщо встановлено :c:member:`~PyConfig.run_filename`, додайте каталог імені "
"файлу перед :data:`sys.path`."

#: ../../c-api/init_config.rst:1562
msgid "Otherwise, prepend an empty string to :data:`sys.path`."
msgstr "В іншому випадку додайте порожній рядок до :data:`sys.path`."

#: ../../c-api/init_config.rst:1564
msgid ""
"If :c:member:`~PyConfig.site_import` is non-zero, :data:`sys.path` can be "
"modified by the :mod:`site` module. If "
":c:member:`~PyConfig.user_site_directory` is non-zero and the user's site-"
"package directory exists, the :mod:`site` module appends the user's site-"
"package directory to :data:`sys.path`."
msgstr ""
"Якщо :c:member:`~PyConfig.site_import` не дорівнює нулю, :data:`sys.path` "
"можна змінити за допомогою модуля :mod:`site`. Якщо "
":c:member:`~PyConfig.user_site_directory` не дорівнює нулю, а каталог "
"пакетів сайту користувача існує, модуль :mod:`site` додає каталог пакетів "
"сайту користувача до :data:`sys.path`."

#: ../../c-api/init_config.rst:1570
msgid "The following configuration files are used by the path configuration:"
msgstr "У конфігурації шляху використовуються такі файли конфігурації:"

#: ../../c-api/init_config.rst:1572
msgid "``pyvenv.cfg``"
msgstr "``pyvenv.cfg``"

#: ../../c-api/init_config.rst:1573
msgid "``._pth`` file (ex: ``python._pth``)"
msgstr ""

#: ../../c-api/init_config.rst:1574
msgid "``pybuilddir.txt`` (Unix only)"
msgstr "``pybuilddir.txt`` (лише Unix)"

#: ../../c-api/init_config.rst:1576
msgid "If a ``._pth`` file is present:"
msgstr ""

#: ../../c-api/init_config.rst:1578
msgid "Set :c:member:`~PyConfig.isolated` to ``1``."
msgstr ""

#: ../../c-api/init_config.rst:1579
msgid "Set :c:member:`~PyConfig.use_environment` to ``0``."
msgstr ""

#: ../../c-api/init_config.rst:1580
msgid "Set :c:member:`~PyConfig.site_import` to ``0``."
msgstr ""

#: ../../c-api/init_config.rst:1581
msgid "Set :c:member:`~PyConfig.safe_path` to ``1``."
msgstr ""

#: ../../c-api/init_config.rst:1583
msgid ""
"The ``__PYVENV_LAUNCHER__`` environment variable is used to set "
":c:member:`PyConfig.base_executable`."
msgstr ""

#: ../../c-api/init_config.rst:1588
msgid "Py_GetArgcArgv()"
msgstr "Py_GetArgcArgv()"

#: ../../c-api/init_config.rst:1592
msgid "Get the original command line arguments, before Python modified them."
msgstr ""
"Отримайте оригінальні аргументи командного рядка до того, як Python їх "
"змінив."

#: ../../c-api/init_config.rst:1594
msgid "See also :c:member:`PyConfig.orig_argv` member."
msgstr "Дивіться також член :c:member:`PyConfig.orig_argv`."

#: ../../c-api/init_config.rst:1598
msgid "Multi-Phase Initialization Private Provisional API"
msgstr "Приватний тимчасовий API багатофазної ініціалізації"

#: ../../c-api/init_config.rst:1600
msgid ""
"This section is a private provisional API introducing multi-phase "
"initialization, the core feature of :pep:`432`:"
msgstr ""
"Цей розділ є приватним тимчасовим API, який представляє багатофазову "
"ініціалізацію, основну функцію :pep:`432`:"

#: ../../c-api/init_config.rst:1603
msgid "\"Core\" initialization phase, \"bare minimum Python\":"
msgstr "Фаза ініціалізації \"Core\", \"мінімум Python\":"

#: ../../c-api/init_config.rst:1605
msgid "Builtin types;"
msgstr "Вбудовані типи;"

#: ../../c-api/init_config.rst:1606
msgid "Builtin exceptions;"
msgstr "Вбудовані винятки;"

#: ../../c-api/init_config.rst:1607
msgid "Builtin and frozen modules;"
msgstr "Вбудовані та заморожені модулі;"

#: ../../c-api/init_config.rst:1608
msgid ""
"The :mod:`sys` module is only partially initialized (ex: :data:`sys.path` "
"doesn't exist yet)."
msgstr ""
"Модуль :mod:`sys` ініціалізовано лише частково (наприклад: :data:`sys.path` "
"ще не існує)."

#: ../../c-api/init_config.rst:1611
msgid "\"Main\" initialization phase, Python is fully initialized:"
msgstr "\"Основна\" фаза ініціалізації, Python повністю ініціалізовано:"

#: ../../c-api/init_config.rst:1613
msgid "Install and configure :mod:`importlib`;"
msgstr "Встановити та налаштувати :mod:`importlib`;"

#: ../../c-api/init_config.rst:1614
msgid "Apply the :ref:`Path Configuration <init-path-config>`;"
msgstr "Застосуйте :ref:`Конфігурацію шляху <init-path-config>`;"

#: ../../c-api/init_config.rst:1615
msgid "Install signal handlers;"
msgstr "встановити обробники сигналів;"

#: ../../c-api/init_config.rst:1616
msgid ""
"Finish :mod:`sys` module initialization (ex: create :data:`sys.stdout` and "
":data:`sys.path`);"
msgstr ""
"Завершити ініціалізацію модуля :mod:`sys` (наприклад, створити "
":data:`sys.stdout` і :data:`sys.path`);"

#: ../../c-api/init_config.rst:1618
msgid ""
"Enable optional features like :mod:`faulthandler` and :mod:`tracemalloc`;"
msgstr ""
"Увімкнути додаткові функції, такі як :mod:`faulthandler` і "
":mod:`tracemalloc`;"

#: ../../c-api/init_config.rst:1619
msgid "Import the :mod:`site` module;"
msgstr "Імпортуйте модуль :mod:`site`;"

#: ../../c-api/init_config.rst:1620
msgid "etc."
msgstr "тощо"

#: ../../c-api/init_config.rst:1622
msgid "Private provisional API:"
msgstr "Приватний тимчасовий API:"

#: ../../c-api/init_config.rst:1624
msgid ""
":c:member:`PyConfig._init_main`: if set to ``0``, "
":c:func:`Py_InitializeFromConfig` stops at the \"Core\" initialization "
"phase."
msgstr ""

#: ../../c-api/init_config.rst:1629
msgid ""
"Move to the \"Main\" initialization phase, finish the Python initialization."
msgstr "Перейдіть до фази ініціалізації \"Main\", завершіть ініціалізацію Python."

#: ../../c-api/init_config.rst:1631
msgid ""
"No module is imported during the \"Core\" phase and the ``importlib`` module"
" is not configured: the :ref:`Path Configuration <init-path-config>` is only"
" applied during the \"Main\" phase. It may allow to customize Python in "
"Python to override or tune the :ref:`Path Configuration <init-path-config>`,"
" maybe install a custom :data:`sys.meta_path` importer or an import hook, "
"etc."
msgstr ""
"Жоден модуль не імпортується під час фази \"Core\", а модуль ``importlib`` "
"не налаштовано: :ref:`Конфігурація шляху <init-path-config>` застосовується "
"лише під час фази \"Main\". Це може дозволити налаштувати Python у Python, "
"щоб перевизначити або налаштувати :ref:`Конфігурацію шляху <init-path-"
"config>`, можливо, встановити спеціальний імпортер :data:`sys.meta_path` або"
" хук імпорту тощо."

#: ../../c-api/init_config.rst:1637
msgid ""
"It may become possible to calculate the :ref:`Path Configuration <init-path-"
"config>` in Python, after the Core phase and before the Main phase, which is"
" one of the :pep:`432` motivation."
msgstr ""

#: ../../c-api/init_config.rst:1641
msgid ""
"The \"Core\" phase is not properly defined: what should be and what should "
"not be available at this phase is not specified yet. The API is marked as "
"private and provisional: the API can be modified or even be removed anytime "
"until a proper public API is designed."
msgstr ""
"Фаза \"Core\" не визначена належним чином: що має бути, а що не має бути "
"доступним на цій фазі, ще не визначено. API позначено як приватний і "
"тимчасовий: API можна змінити або навіть видалити в будь-який час, доки не "
"буде розроблено відповідний публічний API."

#: ../../c-api/init_config.rst:1646
msgid ""
"Example running Python code between \"Core\" and \"Main\" initialization "
"phases::"
msgstr "Приклад виконання коду Python між фазами ініціалізації \"Core\" і \"Main\"::"

#: ../../c-api/init_config.rst:1649
msgid ""
"void init_python(void)\n"
"{\n"
"    PyStatus status;\n"
"\n"
"    PyConfig config;\n"
"    PyConfig_InitPythonConfig(&config);\n"
"    config._init_main = 0;\n"
"\n"
"    /* ... customize 'config' configuration ... */\n"
"\n"
"    status = Py_InitializeFromConfig(&config);\n"
"    PyConfig_Clear(&config);\n"
"    if (PyStatus_Exception(status)) {\n"
"        Py_ExitStatusException(status);\n"
"    }\n"
"\n"
"    /* Use sys.stderr because sys.stdout is only created\n"
"       by _Py_InitializeMain() */\n"
"    int res = PyRun_SimpleString(\n"
"        \"import sys; \"\n"
"        \"print('Run Python code before _Py_InitializeMain', \"\n"
"               \"file=sys.stderr)\");\n"
"    if (res < 0) {\n"
"        exit(1);\n"
"    }\n"
"\n"
"    /* ... put more configuration code here ... */\n"
"\n"
"    status = _Py_InitializeMain();\n"
"    if (PyStatus_Exception(status)) {\n"
"        Py_ExitStatusException(status);\n"
"    }\n"
"}"
msgstr ""

#: ../../c-api/init_config.rst:558
msgid "main()"
msgstr ""

#: ../../c-api/init_config.rst:558
msgid "argv (in module sys)"
msgstr ""
