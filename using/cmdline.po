# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Dmytro Kazanzhy, 2024
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-11-19 01:00+0000\n"
"PO-Revision-Date: 2021-06-28 01:50+0000\n"
"Last-Translator: Dmytro Kazanzhy, 2024\n"
"Language-Team: Ukrainian (https://app.transifex.com/python-doc/teams/5390/uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != 11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % 100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || (n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

#: ../../using/cmdline.rst:9
msgid "Command line and environment"
msgstr "Командний рядок і середовище"

#: ../../using/cmdline.rst:11
msgid ""
"The CPython interpreter scans the command line and the environment for "
"various settings."
msgstr ""
"Інтерпретатор CPython сканує командний рядок і середовище на наявність "
"різних параметрів."

#: ../../using/cmdline.rst:16
msgid ""
"Other implementations' command line schemes may differ.  See "
":ref:`implementations` for further resources."
msgstr ""
"Схеми командного рядка інших реалізацій можуть відрізнятися. Перегляньте "
":ref:`implementations` для отримання додаткових ресурсів."

#: ../../using/cmdline.rst:23
msgid "Command line"
msgstr "Командний рядок"

#: ../../using/cmdline.rst:25
msgid "When invoking Python, you may specify any of these options::"
msgstr "Під час виклику Python ви можете вказати будь-який із цих параметрів:"

#: ../../using/cmdline.rst:27
msgid ""
"python [-bBdEhiIOPqRsSuvVWx?] [-c command | -m module-name | script | - ] "
"[args]"
msgstr ""

#: ../../using/cmdline.rst:29
msgid ""
"The most common use case is, of course, a simple invocation of a script::"
msgstr ""
"Найпоширенішим випадком використання є, звичайно, простий виклик сценарію::"

#: ../../using/cmdline.rst:31
msgid "python myscript.py"
msgstr ""

#: ../../using/cmdline.rst:37
msgid "Interface options"
msgstr "Параметри інтерфейсу"

#: ../../using/cmdline.rst:39
msgid ""
"The interpreter interface resembles that of the UNIX shell, but provides "
"some additional methods of invocation:"
msgstr ""
"Інтерфейс інтерпретатора нагадує інтерфейс оболонки UNIX, але надає деякі "
"додаткові методи виклику:"

#: ../../using/cmdline.rst:42
msgid ""
"When called with standard input connected to a tty device, it prompts for "
"commands and executes them until an EOF (an end-of-file character, you can "
"produce that with :kbd:`Ctrl-D` on UNIX or :kbd:`Ctrl-Z, Enter` on Windows) "
"is read. For more on interactive mode, see :ref:`tut-interac`."
msgstr ""

#: ../../using/cmdline.rst:46
msgid ""
"When called with a file name argument or with a file as standard input, it "
"reads and executes a script from that file."
msgstr ""
"При виклику з аргументом імені файлу або з файлом як стандартним введенням "
"він читає та виконує сценарій із цього файлу."

#: ../../using/cmdline.rst:48
msgid ""
"When called with a directory name argument, it reads and executes an "
"appropriately named script from that directory."
msgstr ""
"При виклику з аргументом назви каталогу він читає та виконує сценарій із "
"відповідною назвою з цього каталогу."

#: ../../using/cmdline.rst:50
msgid ""
"When called with ``-c command``, it executes the Python statement(s) given "
"as *command*.  Here *command* may contain multiple statements separated by "
"newlines. Leading whitespace is significant in Python statements!"
msgstr ""
"При виклику за допомогою команди ``-c`` виконується оператор(и) Python, "
"наданий як *команда*. Тут *команда* може містити декілька операторів, "
"розділених символом нового рядка. Пробіли на початку є важливими в "
"операторах Python!"

#: ../../using/cmdline.rst:53
msgid ""
"When called with ``-m module-name``, the given module is located on the "
"Python module path and executed as a script."
msgstr ""
"При виклику за допомогою ``-m назва-модуля`` заданий модуль розташовується "
"на шляху модуля Python і виконується як сценарій."

#: ../../using/cmdline.rst:56
msgid ""
"In non-interactive mode, the entire input is parsed before it is executed."
msgstr "У неінтерактивному режимі весь вхід аналізується перед виконанням."

#: ../../using/cmdline.rst:58
msgid ""
"An interface option terminates the list of options consumed by the "
"interpreter, all consecutive arguments will end up in :data:`sys.argv` -- "
"note that the first element, subscript zero (``sys.argv[0]``), is a string "
"reflecting the program's source."
msgstr ""
"Опція інтерфейсу завершує список опцій, які використовує інтерпретатор, усі "
"послідовні аргументи закінчаться в :data:`sys.argv` -- зверніть увагу, що "
"перший елемент, індекс нуль (``sys.argv[0]``) , це рядок, що відображає "
"джерело програми."

#: ../../using/cmdline.rst:65
msgid ""
"Execute the Python code in *command*.  *command* can be one or more "
"statements separated by newlines, with significant leading whitespace as in "
"normal module code."
msgstr ""
"Виконайте код Python у *команді*. *команда* може бути одним або декількома "
"операторами, розділеними символом нового рядка, зі значними пробілами на "
"початку, як у звичайному коді модуля."

#: ../../using/cmdline.rst:69
msgid ""
"If this option is given, the first element of :data:`sys.argv` will be "
"``\"-c\"`` and the current directory will be added to the start of "
":data:`sys.path` (allowing modules in that directory to be imported as top "
"level modules)."
msgstr ""
"Якщо вказано цей параметр, першим елементом :data:`sys.argv` буде "
"``\"-c\"``, а поточний каталог буде додано до початку :data:`sys.path` "
"(дозволяючи модулі у цьому каталозі, який буде імпортовано як модулі "
"верхнього рівня)."

#: ../../using/cmdline.rst:74
msgid ""
"Raises an :ref:`auditing event <auditing>` ``cpython.run_command`` with "
"argument ``command``."
msgstr ""
"Викликає :ref:`подію аудиту <auditing>` ``cpython.run_command`` з аргументом"
" ``command``."

#: ../../using/cmdline.rst:78
msgid ""
"Search :data:`sys.path` for the named module and execute its contents as the"
" :mod:`__main__` module."
msgstr ""
"Знайдіть у :data:`sys.path` названий модуль і виконайте його вміст як модуль"
" :mod:`__main__`."

#: ../../using/cmdline.rst:81
msgid ""
"Since the argument is a *module* name, you must not give a file extension "
"(``.py``).  The module name should be a valid absolute Python module name, "
"but the implementation may not always enforce this (e.g. it may allow you to"
" use a name that includes a hyphen)."
msgstr ""
"Оскільки аргументом є назва *модуля*, ви не повинні вказувати розширення "
"файлу (``.py``). Ім’я модуля має бути дійсним абсолютним ім’ям модуля "
"Python, але реалізація може не завжди забезпечити це (наприклад, вона може "
"дозволити вам використовувати ім’я, яке містить дефіс)."

#: ../../using/cmdline.rst:86
msgid ""
"Package names (including namespace packages) are also permitted. When a "
"package name is supplied instead of a normal module, the interpreter will "
"execute ``<pkg>.__main__`` as the main module. This behaviour is "
"deliberately similar to the handling of directories and zipfiles that are "
"passed to the interpreter as the script argument."
msgstr ""
"Імена пакетів (включаючи пакети простору імен) також дозволені. Якщо замість"
" звичайного модуля вказано назву пакета, інтерпретатор виконає ``<pkg> "
".__main__`` як головний модуль. Ця поведінка навмисно подібна до обробки "
"каталогів і zip-файлів, які передаються інтерпретатору як аргумент сценарію."

#: ../../using/cmdline.rst:95
msgid ""
"This option cannot be used with built-in modules and extension modules "
"written in C, since they do not have Python module files. However, it can "
"still be used for precompiled modules, even if the original source file is "
"not available."
msgstr ""
"Цей параметр не можна використовувати з вбудованими модулями та модулями "
"розширення, написаними мовою C, оскільки вони не мають файлів модулів "
"Python. Однак його все одно можна використовувати для попередньо "
"скомпільованих модулів, навіть якщо вихідний вихідний файл недоступний."

#: ../../using/cmdline.rst:100
msgid ""
"If this option is given, the first element of :data:`sys.argv` will be the "
"full path to the module file (while the module file is being located, the "
"first element will be set to ``\"-m\"``). As with the :option:`-c` option, "
"the current directory will be added to the start of :data:`sys.path`."
msgstr ""
"Якщо вказано цей параметр, перший елемент :data:`sys.argv` буде повним "
"шляхом до файлу модуля (під час пошуку файлу модуля для першого елемента "
"буде встановлено значення ``\"-m\"``). Як і з опцією :option:`-c`, поточний "
"каталог буде додано на початок :data:`sys.path`."

#: ../../using/cmdline.rst:105
msgid ""
":option:`-I` option can  be used to run the script in isolated mode where "
":data:`sys.path` contains neither the current directory nor the user's site-"
"packages directory. All ``PYTHON*`` environment variables are ignored, too."
msgstr ""

#: ../../using/cmdline.rst:110
msgid ""
"Many standard library modules contain code that is invoked on their "
"execution as a script.  An example is the :mod:`timeit` module::"
msgstr ""
"Багато модулів стандартної бібліотеки містять код, який викликається під час"
" їх виконання як сценарій. Прикладом є модуль :mod:`timeit`::"

#: ../../using/cmdline.rst:113
msgid ""
"python -m timeit -s \"setup here\" \"benchmarked code here\"\n"
"python -m timeit -h # for details"
msgstr ""

#: ../../using/cmdline.rst:116
msgid ""
"Raises an :ref:`auditing event <auditing>` ``cpython.run_module`` with "
"argument ``module-name``."
msgstr ""
"Викликає :ref:`подію аудиту <auditing>` ``cpython.run_module`` з аргументом "
"``module-name``."

#: ../../using/cmdline.rst:119
msgid ":func:`runpy.run_module`"
msgstr ":func:`runpy.run_module`"

#: ../../using/cmdline.rst:120 ../../using/cmdline.rst:172
msgid "Equivalent functionality directly available to Python code"
msgstr "Еквівалентна функція, безпосередньо доступна для коду Python"

#: ../../using/cmdline.rst:122
msgid ":pep:`338` -- Executing modules as scripts"
msgstr ":pep:`338` -- Виконання модулів як скриптів"

#: ../../using/cmdline.rst:124
msgid "Supply the package name to run a ``__main__`` submodule."
msgstr "Укажіть назву пакета для запуску підмодуля ``__main__``."

#: ../../using/cmdline.rst:127
msgid "namespace packages are also supported"
msgstr "також підтримуються пакети простору імен"

#: ../../using/cmdline.rst:134
msgid ""
"Read commands from standard input (:data:`sys.stdin`).  If standard input is"
" a terminal, :option:`-i` is implied."
msgstr ""
"Читання команд зі стандартного введення (:data:`sys.stdin`). Якщо "
"стандартним введенням є термінал, мається на увазі :option:`-i`."

#: ../../using/cmdline.rst:137
msgid ""
"If this option is given, the first element of :data:`sys.argv` will be "
"``\"-\"`` and the current directory will be added to the start of "
":data:`sys.path`."
msgstr ""
"Якщо вказано цей параметр, першим елементом :data:`sys.argv` буде ``\"-\"``,"
" а поточний каталог буде додано до початку :data:`sys.path`."

#: ../../using/cmdline.rst:141 ../../using/cmdline.rst:790
msgid ""
"Raises an :ref:`auditing event <auditing>` ``cpython.run_stdin`` with no "
"arguments."
msgstr ""
"Викликає :ref:`подію аудиту <auditing>` ``cpython.run_stdin`` без "
"аргументів."

#: ../../using/cmdline.rst:147
msgid ""
"Execute the Python code contained in *script*, which must be a filesystem "
"path (absolute or relative) referring to either a Python file, a directory "
"containing a ``__main__.py`` file, or a zipfile containing a ``__main__.py``"
" file."
msgstr ""
"Виконайте код Python, що міститься в *script*, який має бути шляхом до "
"файлової системи (абсолютним або відносним), що посилається на файл Python, "
"каталог, що містить файл ``__main__.py``, або файл zip, що містить "
"``__main__. файл py``."

#: ../../using/cmdline.rst:152
msgid ""
"If this option is given, the first element of :data:`sys.argv` will be the "
"script name as given on the command line."
msgstr ""
"Якщо вказано цей параметр, першим елементом :data:`sys.argv` буде ім’я "
"сценарію, подане в командному рядку."

#: ../../using/cmdline.rst:155
msgid ""
"If the script name refers directly to a Python file, the directory "
"containing that file is added to the start of :data:`sys.path`, and the file"
" is executed as the :mod:`__main__` module."
msgstr ""
"Якщо назва сценарію посилається безпосередньо на файл Python, каталог, що "
"містить цей файл, додається до початку :data:`sys.path`, і файл виконується "
"як модуль :mod:`__main__`."

#: ../../using/cmdline.rst:159
msgid ""
"If the script name refers to a directory or zipfile, the script name is "
"added to the start of :data:`sys.path` and the ``__main__.py`` file in that "
"location is executed as the :mod:`__main__` module."
msgstr ""
"Якщо назва сценарію посилається на каталог або zip-файл, назва сценарію "
"додається до початку :data:`sys.path`, а файл ``__main__.py`` у цьому місці "
"виконується як :mod:`__main__` модуль."

#: ../../using/cmdline.rst:163
msgid ""
":option:`-I` option can  be used to run the script in isolated mode where "
":data:`sys.path` contains neither the script's directory nor the user's "
"site-packages directory. All ``PYTHON*`` environment variables are ignored, "
"too."
msgstr ""

#: ../../using/cmdline.rst:168
msgid ""
"Raises an :ref:`auditing event <auditing>` ``cpython.run_file`` with "
"argument ``filename``."
msgstr ""
"Викликає :ref:`подію аудиту <auditing>` ``cpython.run_file`` з аргументом "
"``filename``."

#: ../../using/cmdline.rst:171
msgid ":func:`runpy.run_path`"
msgstr ":func:`runpy.run_path`"

#: ../../using/cmdline.rst:175
msgid ""
"If no interface option is given, :option:`-i` is implied, ``sys.argv[0]`` is"
" an empty string (``\"\"``) and the current directory will be added to the "
"start of :data:`sys.path`.  Also, tab-completion and history editing is "
"automatically enabled, if available on your platform (see :ref:`rlcompleter-"
"config`)."
msgstr ""
"Якщо параметр інтерфейсу не вказано, мається на увазі :option:`-i`, "
"``sys.argv[0]`` є порожнім рядком (``\"\"``), і поточний каталог буде додано"
" на початку :data:`sys.path`. Крім того, автоматично вмикається завершення "
"вкладок і редагування історії, якщо вони доступні на вашій платформі (див. "
":ref:`rlcompleter-config`)."

#: ../../using/cmdline.rst:181
msgid ":ref:`tut-invoking`"
msgstr ":ref:`tut-invoking`"

#: ../../using/cmdline.rst:183
msgid "Automatic enabling of tab-completion and history editing."
msgstr "Автоматичне ввімкнення табуляції та редагування історії."

#: ../../using/cmdline.rst:190
msgid "Generic options"
msgstr "Загальні варіанти"

#: ../../using/cmdline.rst:196
msgid ""
"Print a short description of all command line options and corresponding "
"environment variables and exit."
msgstr ""

#: ../../using/cmdline.rst:201
msgid ""
"Print a short description of Python-specific environment variables and exit."
msgstr ""

#: ../../using/cmdline.rst:208
msgid ""
"Print a description of implementation-specific :option:`-X` options and "
"exit."
msgstr ""

#: ../../using/cmdline.rst:215
msgid "Print complete usage information and exit."
msgstr ""

#: ../../using/cmdline.rst:222
msgid "Print the Python version number and exit.  Example output could be:"
msgstr ""
"Надрукуйте номер версії Python і вийдіть. Приклад результату може бути "
"таким:"

#: ../../using/cmdline.rst:224
msgid "Python 3.8.0b2+"
msgstr ""

#: ../../using/cmdline.rst:228
msgid "When given twice, print more information about the build, like:"
msgstr ""
"Якщо надати двічі, надрукувати більше інформації про збірку, наприклад:"

#: ../../using/cmdline.rst:230
msgid ""
"Python 3.8.0b2+ (3.8:0c076caaa8, Apr 20 2019, 21:55:00)\n"
"[GCC 6.2.0 20161005]"
msgstr ""

#: ../../using/cmdline.rst:235
msgid "The ``-VV`` option."
msgstr "Параметр ``-VV``."

#: ../../using/cmdline.rst:242
msgid "Miscellaneous options"
msgstr "Різні варіанти"

#: ../../using/cmdline.rst:246
msgid ""
"Issue a warning when converting :class:`bytes` or :class:`bytearray` to "
":class:`str` without specifying encoding or comparing :class:`!bytes` or "
":class:`!bytearray` with :class:`!str` or :class:`!bytes` with :class:`int`."
" Issue an error when the option is given twice (:option:`!-bb`)."
msgstr ""

#: ../../using/cmdline.rst:251
msgid "Affects also comparisons of :class:`bytes` with :class:`int`."
msgstr ""

#: ../../using/cmdline.rst:256
msgid ""
"If given, Python won't try to write ``.pyc`` files on the import of source "
"modules.  See also :envvar:`PYTHONDONTWRITEBYTECODE`."
msgstr ""
"Якщо дано, Python не намагатиметься записати файли ``.pyc`` під час імпорту "
"вихідних модулів. Дивіться також :envvar:`PYTHONDONTWRITEBYTECODE`."

#: ../../using/cmdline.rst:262
msgid ""
"Control the validation behavior of hash-based ``.pyc`` files. See :ref:`pyc-"
"invalidation`. When set to ``default``, checked and unchecked hash-based "
"bytecode cache files are validated according to their default semantics. "
"When set to ``always``, all hash-based ``.pyc`` files, whether checked or "
"unchecked, are validated against their corresponding source file. When set "
"to ``never``, hash-based ``.pyc`` files are not validated against their "
"corresponding source files."
msgstr ""
"Керуйте поведінкою перевірки файлів ``.pyc`` на основі хешу. Перегляньте "
":ref:`pyc-invalidation`. Якщо встановлено ``за замовчуванням``, позначені та"
" не позначені файли кешу на основі хеш-коду перевіряються відповідно до їх "
"семантики за замовчуванням. Якщо встановлено значення ``always``, усі файли "
"``.pyc`` на основі хешу, позначені чи не позначені, перевіряються на "
"відповідність їхньому вихідному файлу. Якщо встановлено значення ``never``, "
"файли ``.pyc`` на основі хешу не перевіряються на відповідність відповідним "
"вихідним файлам."

#: ../../using/cmdline.rst:270
msgid ""
"The semantics of timestamp-based ``.pyc`` files are unaffected by this "
"option."
msgstr ""
"Цей параметр не впливає на семантику файлів ``.pyc`` на основі часових "
"позначок."

#: ../../using/cmdline.rst:276
msgid ""
"Turn on parser debugging output (for expert only). See also the "
":envvar:`PYTHONDEBUG` environment variable."
msgstr ""

#: ../../using/cmdline.rst:279
msgid ""
"This option requires a :ref:`debug build of Python <debug-build>`, otherwise"
" it's ignored."
msgstr ""

#: ../../using/cmdline.rst:285
msgid ""
"Ignore all ``PYTHON*`` environment variables, e.g. :envvar:`PYTHONPATH` and "
":envvar:`PYTHONHOME`, that might be set."
msgstr ""

#: ../../using/cmdline.rst:288
msgid "See also the :option:`-P` and :option:`-I` (isolated) options."
msgstr ""

#: ../../using/cmdline.rst:293
msgid ""
"When a script is passed as first argument or the :option:`-c` option is "
"used, enter interactive mode after executing the script or the command, even"
" when :data:`sys.stdin` does not appear to be a terminal.  The "
":envvar:`PYTHONSTARTUP` file is not read."
msgstr ""
"Якщо сценарій передається як перший аргумент або використовується параметр "
":option:`-c`, увійдіть в інтерактивний режим після виконання сценарію або "
"команди, навіть якщо :data:`sys.stdin` не виглядає як термінал. Файл "
":envvar:`PYTHONSTARTUP` не читається."

#: ../../using/cmdline.rst:298
msgid ""
"This can be useful to inspect global variables or a stack trace when a "
"script raises an exception.  See also :envvar:`PYTHONINSPECT`."
msgstr ""
"Це може бути корисно для перевірки глобальних змінних або трасування стека, "
"коли сценарій викликає виняткову ситуацію. Дивіться також "
":envvar:`PYTHONINSPECT`."

#: ../../using/cmdline.rst:304
msgid ""
"Run Python in isolated mode. This also implies :option:`-E`, :option:`-P` "
"and :option:`-s` options."
msgstr ""

#: ../../using/cmdline.rst:307
msgid ""
"In isolated mode :data:`sys.path` contains neither the script's directory "
"nor the user's site-packages directory. All ``PYTHON*`` environment "
"variables are ignored, too. Further restrictions may be imposed to prevent "
"the user from injecting malicious code."
msgstr ""

#: ../../using/cmdline.rst:317
msgid ""
"Remove assert statements and any code conditional on the value of "
":const:`__debug__`.  Augment the filename for compiled (:term:`bytecode`) "
"files by adding ``.opt-1`` before the ``.pyc`` extension (see :pep:`488`).  "
"See also :envvar:`PYTHONOPTIMIZE`."
msgstr ""
"Видаліть оператори assert і будь-який код, який залежить від значення "
":const:`__debug__`. Збільште назву файлу для скомпільованих "
"(:term:`bytecode`) файлів, додавши ``.opt-1`` перед розширенням ``.pyc`` "
"(див. :pep:`488`). Дивіться також :envvar:`PYTHONOPTIMIZE`."

#: ../../using/cmdline.rst:322 ../../using/cmdline.rst:332
msgid "Modify ``.pyc`` filenames according to :pep:`488`."
msgstr "Змініть назви файлів ``.pyc`` відповідно до :pep:`488`."

#: ../../using/cmdline.rst:328
msgid ""
"Do :option:`-O` and also discard docstrings.  Augment the filename for "
"compiled (:term:`bytecode`) files by adding ``.opt-2`` before the ``.pyc`` "
"extension (see :pep:`488`)."
msgstr ""
"Виконайте :option:`-O` і також відкиньте рядки документації. Збільште назву "
"файлу для скомпільованих (:term:`bytecode`) файлів, додавши ``.opt-2`` перед"
" розширенням ``.pyc`` (див. :pep:`488`)."

#: ../../using/cmdline.rst:338
msgid "Don't prepend a potentially unsafe path to :data:`sys.path`:"
msgstr ""

#: ../../using/cmdline.rst:340
msgid ""
"``python -m module`` command line: Don't prepend the current working "
"directory."
msgstr ""

#: ../../using/cmdline.rst:342
msgid ""
"``python script.py`` command line: Don't prepend the script's directory. If "
"it's a symbolic link, resolve symbolic links."
msgstr ""

#: ../../using/cmdline.rst:344
msgid ""
"``python -c code`` and ``python`` (REPL) command lines: Don't prepend an "
"empty string, which means the current working directory."
msgstr ""

#: ../../using/cmdline.rst:347
msgid ""
"See also the :envvar:`PYTHONSAFEPATH` environment variable, and :option:`-E`"
" and :option:`-I` (isolated) options."
msgstr ""

#: ../../using/cmdline.rst:355
msgid ""
"Don't display the copyright and version messages even in interactive mode."
msgstr ""
"Не відображайте повідомлення про авторські права та версію навіть в "
"інтерактивному режимі."

#: ../../using/cmdline.rst:362
msgid ""
"Turn on hash randomization. This option only has an effect if the "
":envvar:`PYTHONHASHSEED` environment variable is set to ``0``, since hash "
"randomization is enabled by default."
msgstr ""
"Увімкніть хеш-рандомізацію. Цей параметр діє, лише якщо для змінної "
"середовища :envvar:`PYTHONHASHSEED` встановлено значення ``0``, оскільки "
"рандомізацію хешу ввімкнено за замовчуванням."

#: ../../using/cmdline.rst:366
msgid ""
"On previous versions of Python, this option turns on hash randomization, so "
"that the :meth:`~object.__hash__` values of str and bytes objects are "
"\"salted\" with an unpredictable random value.  Although they remain "
"constant within an individual Python process, they are not predictable "
"between repeated invocations of Python."
msgstr ""

#: ../../using/cmdline.rst:372
msgid ""
"Hash randomization is intended to provide protection against a denial-of-"
"service caused by carefully chosen inputs that exploit the worst case "
"performance of a dict construction, *O*\\ (*n*\\ :sup:`2`) complexity.  See "
"http://ocert.org/advisories/ocert-2011-003.html for details."
msgstr ""

#: ../../using/cmdline.rst:377
msgid ""
":envvar:`PYTHONHASHSEED` allows you to set a fixed value for the hash seed "
"secret."
msgstr ""
":envvar:`PYTHONHASHSEED` дозволяє встановити фіксоване значення для "
"початкового секрету хешу."

#: ../../using/cmdline.rst:382
msgid "The option is no longer ignored."
msgstr "Опція більше не ігнорується."

#: ../../using/cmdline.rst:388
msgid ""
"Don't add the :data:`user site-packages directory <site.USER_SITE>` to "
":data:`sys.path`."
msgstr ""
"Не додавайте каталог :data:`user site-packages <site.USER_SITE>` до "
":data:`sys.path`."

#: ../../using/cmdline.rst:391
msgid "See also :envvar:`PYTHONNOUSERSITE`."
msgstr ""

#: ../../using/cmdline.rst:395 ../../using/cmdline.rst:887
#: ../../using/cmdline.rst:899
msgid ":pep:`370` -- Per user site-packages directory"
msgstr ":pep:`370` -- Каталог пакетів сайту для кожного користувача"

#: ../../using/cmdline.rst:400
msgid ""
"Disable the import of the module :mod:`site` and the site-dependent "
"manipulations of :data:`sys.path` that it entails.  Also disable these "
"manipulations if :mod:`site` is explicitly imported later (call "
":func:`site.main` if you want them to be triggered)."
msgstr ""
"Вимкніть імпорт модуля :mod:`site` і залежні від сайту маніпуляції "
":data:`sys.path`, які він передбачає. Також вимкніть ці маніпуляції, якщо "
":mod:`site` буде явно імпортовано пізніше (викличте :func:`site.main`, якщо "
"ви хочете, щоб вони були активовані)."

#: ../../using/cmdline.rst:408
msgid ""
"Force the stdout and stderr streams to be unbuffered.  This option has no "
"effect on the stdin stream."
msgstr ""
"Примусово розбуферизувати потоки stdout і stderr. Цей параметр не впливає на"
" потік stdin."

#: ../../using/cmdline.rst:411
msgid "See also :envvar:`PYTHONUNBUFFERED`."
msgstr "Дивіться також :envvar:`PYTHONUNBUFFERED`."

#: ../../using/cmdline.rst:413
msgid "The text layer of the stdout and stderr streams now is unbuffered."
msgstr "Текстовий рівень потоків stdout і stderr тепер не буферизується."

#: ../../using/cmdline.rst:419
msgid ""
"Print a message each time a module is initialized, showing the place "
"(filename or built-in module) from which it is loaded.  When given twice "
"(:option:`!-vv`), print a message for each file that is checked for when "
"searching for a module.  Also provides information on module cleanup at "
"exit."
msgstr ""
"Друкувати повідомлення кожного разу, коли модуль ініціалізовано, із "
"зазначенням місця (ім’я файлу чи вбудованого модуля), з якого він "
"завантажується. Якщо вказано двічі (:option:`!-vv`), вивести повідомлення "
"для кожного файлу, який перевіряється під час пошуку модуля. Також надає "
"інформацію про очищення модуля при виході."

#: ../../using/cmdline.rst:424
msgid ""
"The :mod:`site` module reports the site-specific paths and :file:`.pth` "
"files being processed."
msgstr ""
"Модуль :mod:`site` повідомляє про шляхи сайту та файли :file:`.pth`, що "
"обробляються."

#: ../../using/cmdline.rst:428
msgid "See also :envvar:`PYTHONVERBOSE`."
msgstr "Дивіться також :envvar:`PYTHONVERBOSE`."

#: ../../using/cmdline.rst:434
msgid ""
"Warning control. Python's warning machinery by default prints warning "
"messages to :data:`sys.stderr`."
msgstr ""
"Контроль попередження. Механізм попередження Python за замовчуванням друкує "
"попереджувальні повідомлення до :data:`sys.stderr`."

#: ../../using/cmdline.rst:437 ../../using/cmdline.rst:915
msgid ""
"The simplest settings apply a particular action unconditionally to all "
"warnings emitted by a process (even those that are otherwise ignored by "
"default)::"
msgstr ""
"Найпростіші налаштування безумовно застосовують певну дію до всіх "
"попереджень, виданих процесом (навіть до тих, які інакше ігноруються за "
"замовчуванням):"

#: ../../using/cmdline.rst:441
msgid ""
"-Wdefault  # Warn once per call location\n"
"-Werror    # Convert to exceptions\n"
"-Walways   # Warn every time\n"
"-Wall      # Same as -Walways\n"
"-Wmodule   # Warn once per calling module\n"
"-Wonce     # Warn once per Python process\n"
"-Wignore   # Never warn"
msgstr ""

#: ../../using/cmdline.rst:449
msgid ""
"The action names can be abbreviated as desired and the interpreter will "
"resolve them to the appropriate action name. For example, ``-Wi`` is the "
"same as ``-Wignore``."
msgstr ""
"Назви дій можна скоротити за бажанням, і інтерпретатор розведе їх до "
"відповідної назви дії. Наприклад, ``-Wi`` те саме, що ``-Wignore``."

#: ../../using/cmdline.rst:453
msgid "The full form of argument is::"
msgstr "Повна форма аргументу:"

#: ../../using/cmdline.rst:455
msgid "action:message:category:module:lineno"
msgstr ""

#: ../../using/cmdline.rst:457
msgid ""
"Empty fields match all values; trailing empty fields may be omitted. For "
"example ``-W ignore::DeprecationWarning`` ignores all DeprecationWarning "
"warnings."
msgstr ""
"Порожні поля відповідають усім значенням; порожні поля в кінці можна "
"опустити. Наприклад, ``-W ignore::DeprecationWarning`` ігнорує всі "
"попередження DeprecationWarning."

#: ../../using/cmdline.rst:461
msgid ""
"The *action* field is as explained above but only applies to warnings that "
"match the remaining fields."
msgstr ""
"Поле *action* описано вище, але застосовується лише до попереджень, які "
"відповідають решті полів."

#: ../../using/cmdline.rst:464
msgid ""
"The *message* field must match the whole warning message; this match is "
"case-insensitive."
msgstr ""
"Поле *повідомлення* має відповідати всьому попереджувальному повідомленню; "
"цей збіг не залежить від регістру."

#: ../../using/cmdline.rst:467
msgid ""
"The *category* field matches the warning category (ex: "
"``DeprecationWarning``). This must be a class name; the match test whether "
"the actual warning category of the message is a subclass of the specified "
"warning category."
msgstr ""
"Поле *category* відповідає категорії попередження (наприклад, "
"``DeprecationWarning``). Це має бути назва класу; перевірка відповідності, "
"чи є фактична категорія попередження повідомлення підкласом зазначеної "
"категорії попередження."

#: ../../using/cmdline.rst:472
msgid ""
"The *module* field matches the (fully qualified) module name; this match is "
"case-sensitive."
msgstr ""

#: ../../using/cmdline.rst:475
msgid ""
"The *lineno* field matches the line number, where zero matches all line "
"numbers and is thus equivalent to an omitted line number."
msgstr ""
"Поле *lineno* відповідає номеру рядка, де нуль відповідає всім номерам "
"рядків і, отже, еквівалентний пропущеному номеру рядка."

#: ../../using/cmdline.rst:478
msgid ""
"Multiple :option:`-W` options can be given; when a warning matches more than"
" one option, the action for the last matching option is performed. Invalid "
":option:`-W` options are ignored (though, a warning message is printed about"
" invalid options when the first warning is issued)."
msgstr ""
"Можна надати кілька параметрів :option:`-W`; коли попередження відповідає "
"більш ніж одному параметру, виконується дія для останнього відповідного "
"параметра. Недійсні параметри :option:`-W` ігноруються (проте, коли "
"видається перше попередження, друкується попередження про недійсні "
"параметри)."

#: ../../using/cmdline.rst:483
msgid ""
"Warnings can also be controlled using the :envvar:`PYTHONWARNINGS` "
"environment variable and from within a Python program using the "
":mod:`warnings` module. For example, the :func:`warnings.filterwarnings` "
"function can be used to use a regular expression on the warning message."
msgstr ""
"Попередженнями також можна керувати за допомогою змінної середовища "
":envvar:`PYTHONWARNINGS` і з програми Python за допомогою модуля "
":mod:`warnings`. Наприклад, функцію :func:`warnings.filterwarnings` можна "
"використовувати для використання регулярного виразу в попередженні."

#: ../../using/cmdline.rst:488 ../../using/cmdline.rst:927
msgid ""
"See :ref:`warning-filter` and :ref:`describing-warning-filters` for more "
"details."
msgstr ""
"Перегляньте :ref:`warning-filter` і :ref:`describing-warning-filters` для "
"отримання додаткової інформації."

#: ../../using/cmdline.rst:494
msgid ""
"Skip the first line of the source, allowing use of non-Unix forms of "
"``#!cmd``.  This is intended for a DOS specific hack only."
msgstr ""
"Пропустіть перший рядок джерела, дозволяючи використовувати не-Unix форми "
"``#!cmd``. Це призначено лише для спеціального злому DOS."

#: ../../using/cmdline.rst:500
msgid ""
"Reserved for various implementation-specific options.  CPython currently "
"defines the following possible values:"
msgstr ""
"Зарезервовано для різних варіантів реалізації. Наразі CPython визначає такі "
"можливі значення:"

#: ../../using/cmdline.rst:503
msgid ""
"``-X faulthandler`` to enable :mod:`faulthandler`. See also "
":envvar:`PYTHONFAULTHANDLER`."
msgstr ""

#: ../../using/cmdline.rst:508
msgid ""
"``-X showrefcount`` to output the total reference count and number of used "
"memory blocks when the program finishes or after each statement in the "
"interactive interpreter. This only works on :ref:`debug builds <debug-"
"build>`."
msgstr ""
"``-X showrefcount`` для виведення загальної кількості посилань і кількості "
"використаних блоків пам’яті після завершення програми або після кожного "
"оператора в інтерактивному інтерпретаторі. Це працює лише на :ref:`debug "
"builds <debug-build>`."

#: ../../using/cmdline.rst:515
msgid ""
"``-X tracemalloc`` to start tracing Python memory allocations using the "
":mod:`tracemalloc` module. By default, only the most recent frame is stored "
"in a traceback of a trace. Use ``-X tracemalloc=NFRAME`` to start tracing "
"with a traceback limit of *NFRAME* frames. See :func:`tracemalloc.start` and"
" :envvar:`PYTHONTRACEMALLOC` for more information."
msgstr ""

#: ../../using/cmdline.rst:524
msgid ""
"``-X int_max_str_digits`` configures the :ref:`integer string conversion "
"length limitation <int_max_str_digits>`.  See also "
":envvar:`PYTHONINTMAXSTRDIGITS`."
msgstr ""

#: ../../using/cmdline.rst:530
msgid ""
"``-X importtime`` to show how long each import takes. It shows module name, "
"cumulative time (including nested imports) and self time (excluding nested "
"imports).  Note that its output may be broken in multi-threaded application."
"  Typical usage is ``python3 -X importtime -c 'import asyncio'``.  See also "
":envvar:`PYTHONPROFILEIMPORTTIME`."
msgstr ""
"``-X importtime``, щоб показати, скільки часу займає кожен імпорт. Він "
"показує назву модуля, сукупний час (включно з вкладеним імпортом) і власний "
"час (за винятком вкладеного імпорту). Зверніть увагу, що його вихід може "
"бути порушений у багатопотоковій програмі. Типовим використанням є ``python3"
" -X importtime -c 'import asyncio'``. Дивіться також "
":envvar:`PYTHONPROFILEIMPORTTIME`."

#: ../../using/cmdline.rst:538
msgid ""
"``-X dev``: enable :ref:`Python Development Mode <devmode>`, introducing "
"additional runtime checks that are too expensive to be enabled by default.  "
"See also :envvar:`PYTHONDEVMODE`."
msgstr ""

#: ../../using/cmdline.rst:544
msgid ""
"``-X utf8`` enables the :ref:`Python UTF-8 Mode <utf8-mode>`. ``-X utf8=0`` "
"explicitly disables :ref:`Python UTF-8 Mode <utf8-mode>` (even when it would"
" otherwise activate automatically). See also :envvar:`PYTHONUTF8`."
msgstr ""

#: ../../using/cmdline.rst:551
msgid ""
"``-X pycache_prefix=PATH`` enables writing ``.pyc`` files to a parallel tree"
" rooted at the given directory instead of to the code tree. See also "
":envvar:`PYTHONPYCACHEPREFIX`."
msgstr ""
"``-X pycache_prefix=PATH`` дає змогу записувати файли ``.pyc`` до "
"паралельного дерева з коренем у вказаному каталозі замість дерева коду. "
"Дивіться також :envvar:`PYTHONPYCACHEPREFIX`."

#: ../../using/cmdline.rst:557
msgid ""
"``-X warn_default_encoding`` issues a :class:`EncodingWarning` when the "
"locale-specific default encoding is used for opening files. See also "
":envvar:`PYTHONWARNDEFAULTENCODING`."
msgstr ""
"``-X warn_default_encoding`` видає :class:`EncodingWarning`, коли для "
"відкриття файлів використовується кодування за умовчанням, що залежить від "
"локалі. Дивіться також :envvar:`PYTHONWARNDEFAULTENCODING`."

#: ../../using/cmdline.rst:563
msgid ""
"``-X no_debug_ranges`` disables the inclusion of the tables mapping extra "
"location information (end line, start column offset and end column offset) "
"to every instruction in code objects. This is useful when smaller code "
"objects and pyc files are desired as well as suppressing the extra visual "
"location indicators when the interpreter displays tracebacks. See also "
":envvar:`PYTHONNODEBUGRANGES`."
msgstr ""

#: ../../using/cmdline.rst:572
msgid ""
"``-X frozen_modules`` determines whether or not frozen modules are ignored "
"by the import machinery.  A value of ``on`` means they get imported and "
"``off`` means they are ignored.  The default is ``on`` if this is an "
"installed Python (the normal case).  If it's under development (running from"
" the source tree) then the default is ``off``. Note that the "
":mod:`!importlib_bootstrap` and :mod:`!importlib_bootstrap_external` frozen "
"modules are always used, even if this flag is set to ``off``. See also "
":envvar:`PYTHON_FROZEN_MODULES`."
msgstr ""

#: ../../using/cmdline.rst:583
msgid ""
"``-X perf`` enables support for the Linux ``perf`` profiler. When this "
"option is provided, the ``perf`` profiler will be able to report Python "
"calls. This option is only available on some platforms and will do nothing "
"if is not supported on the current system. The default value is \"off\". See"
" also :envvar:`PYTHONPERFSUPPORT` and :ref:`perf_profiling`."
msgstr ""

#: ../../using/cmdline.rst:591
msgid ""
"``-X perf_jit`` enables support for the Linux ``perf`` profiler with DWARF "
"support. When this option is provided, the ``perf`` profiler will be able to"
" report Python calls using DWARF information. This option is only available "
"on some platforms and will do nothing if is not supported on the current "
"system. The default value is \"off\". See also "
":envvar:`PYTHON_PERF_JIT_SUPPORT` and :ref:`perf_profiling`."
msgstr ""

#: ../../using/cmdline.rst:600
msgid ""
":samp:`-X cpu_count={n}` overrides :func:`os.cpu_count`, "
":func:`os.process_cpu_count`, and :func:`multiprocessing.cpu_count`. *n* "
"must be greater than or equal to 1. This option may be useful for users who "
"need to limit CPU resources of a container system. See also "
":envvar:`PYTHON_CPU_COUNT`. If *n* is ``default``, nothing is overridden."
msgstr ""

#: ../../using/cmdline.rst:609
msgid ""
":samp:`-X presite={package.module}` specifies a module that should be "
"imported before the :mod:`site` module is executed and before the "
":mod:`__main__` module exists.  Therefore, the imported module isn't "
":mod:`__main__`. This can be used to execute code early during Python "
"initialization. Python needs to be :ref:`built in debug mode <debug-build>` "
"for this option to exist.  See also :envvar:`PYTHON_PRESITE`."
msgstr ""

#: ../../using/cmdline.rst:618
msgid ""
":samp:`-X gil={0,1}` forces the GIL to be disabled or enabled, respectively."
" Setting to ``0`` is only available in builds configured with "
":option:`--disable-gil`. See also :envvar:`PYTHON_GIL` and "
":ref:`whatsnew313-free-threaded-cpython`."
msgstr ""

#: ../../using/cmdline.rst:625
msgid ""
"It also allows passing arbitrary values and retrieving them through the "
":data:`sys._xoptions` dictionary."
msgstr ""
"Це також дозволяє передавати довільні значення та отримувати їх через "
"словник :data:`sys._xoptions`."

#: ../../using/cmdline.rst:630
msgid "Removed the ``-X showalloccount`` option."
msgstr ""

#: ../../using/cmdline.rst:633
msgid "Removed the ``-X oldparser`` option."
msgstr ""

#: ../../using/cmdline.rst:639
msgid "Controlling color"
msgstr ""

#: ../../using/cmdline.rst:641
msgid ""
"The Python interpreter is configured by default to use colors to highlight "
"output in certain situations such as when displaying tracebacks. This "
"behavior can be controlled by setting different environment variables."
msgstr ""

#: ../../using/cmdline.rst:645
msgid ""
"Setting the environment variable ``TERM`` to ``dumb`` will disable color."
msgstr ""

#: ../../using/cmdline.rst:647
msgid ""
"If the |FORCE_COLOR|_ environment variable is set, then color will be "
"enabled regardless of the value of TERM. This is useful on CI systems which "
"aren’t terminals but can still display ANSI escape sequences."
msgstr ""

#: ../../using/cmdline.rst:651
msgid ""
"If the |NO_COLOR|_ environment variable is set, Python will disable all "
"color in the output. This takes precedence over ``FORCE_COLOR``."
msgstr ""

#: ../../using/cmdline.rst:654
msgid ""
"All these environment variables are used also by other tools to control "
"color output. To control the color output only in the Python interpreter, "
"the :envvar:`PYTHON_COLORS` environment variable can be used. This variable "
"takes precedence over ``NO_COLOR``, which in turn takes precedence over "
"``FORCE_COLOR``."
msgstr ""

#: ../../using/cmdline.rst:669
msgid "Options you shouldn't use"
msgstr "Параметри, якими не варто користуватися"

#: ../../using/cmdline.rst:673
msgid "Reserved for use by Jython_."
msgstr "Зарезервовано для використання Jython_."

#: ../../using/cmdline.rst:681
msgid "Environment variables"
msgstr "Змінні середовища"

#: ../../using/cmdline.rst:683
msgid ""
"These environment variables influence Python's behavior, they are processed "
"before the command-line switches other than -E or -I.  It is customary that "
"command-line switches override environmental variables where there is a "
"conflict."
msgstr ""
"Ці змінні середовища впливають на поведінку Python, вони обробляються перед "
"перемикачами командного рядка, відмінними від -E або -I. Зазвичай параметри "
"командного рядка перевизначають змінні середовища, де є конфлікт."

#: ../../using/cmdline.rst:690
msgid ""
"Change the location of the standard Python libraries.  By default, the "
"libraries are searched in :file:`{prefix}/lib/python{version}` and "
":file:`{exec_prefix}/lib/python{version}`, where :file:`{prefix}` and "
":file:`{exec_prefix}` are installation-dependent directories, both "
"defaulting to :file:`/usr/local`."
msgstr ""
"Змініть розташування стандартних бібліотек Python. За замовчуванням "
"бібліотеки шукаються в :file:`{prefix}/lib/python{version}` і "
":file:`{exec_prefix}/lib/python{version}`, де :file:`{prefix}` та "
":file:`{exec_prefix}` є каталогами, що залежать від інсталяції, обидва за "
"умовчанням мають :file:`/usr/local`."

#: ../../using/cmdline.rst:696
msgid ""
"When :envvar:`PYTHONHOME` is set to a single directory, its value replaces "
"both :file:`{prefix}` and :file:`{exec_prefix}`.  To specify different "
"values for these, set :envvar:`PYTHONHOME` to "
":file:`{prefix}:{exec_prefix}`."
msgstr ""
"Коли для :envvar:`PYTHONHOME` встановлено один каталог, його значення "
"замінює як :file:`{prefix}`, так і :file:`{exec_prefix}`. Щоб указати різні "
"значення для них, установіть :envvar:`PYTHONHOME` на "
":file:`{prefix}:{exec_prefix}`."

#: ../../using/cmdline.rst:703
msgid ""
"Augment the default search path for module files.  The format is the same as"
" the shell's :envvar:`PATH`: one or more directory pathnames separated by "
":data:`os.pathsep` (e.g. colons on Unix or semicolons on Windows). Non-"
"existent directories are silently ignored."
msgstr ""
"Доповніть шлях пошуку за замовчуванням для файлів модулів. Формат такий "
"самий, як і :envvar:`PATH` оболонки: одне або більше імен шляхів до "
"каталогу, розділених :data:`os.pathsep` (наприклад, двокрапка в Unix або "
"крапка з комою в Windows). Неіснуючі каталоги мовчки ігноруються."

#: ../../using/cmdline.rst:708
msgid ""
"In addition to normal directories, individual :envvar:`PYTHONPATH` entries "
"may refer to zipfiles containing pure Python modules (in either source or "
"compiled form). Extension modules cannot be imported from zipfiles."
msgstr ""
"На додаток до звичайних каталогів, окремі записи :envvar:`PYTHONPATH` можуть"
" посилатися на zip-файли, що містять чисті модулі Python (у початковій або "
"скомпільованій формі). Модулі розширення не можна імпортувати з zip-файлів."

#: ../../using/cmdline.rst:712
msgid ""
"The default search path is installation dependent, but generally begins with"
" :file:`{prefix}/lib/python{version}` (see :envvar:`PYTHONHOME` above).  It "
"is *always* appended to :envvar:`PYTHONPATH`."
msgstr ""
"Шлях пошуку за умовчанням залежить від встановлення, але зазвичай "
"починається з :file:`{prefix}/lib/python{version}` (див. "
":envvar:`PYTHONHOME` вище). Він *завжди* додається до :envvar:`PYTHONPATH`."

#: ../../using/cmdline.rst:716
msgid ""
"An additional directory will be inserted in the search path in front of "
":envvar:`PYTHONPATH` as described above under :ref:`using-on-interface-"
"options`. The search path can be manipulated from within a Python program as"
" the variable :data:`sys.path`."
msgstr ""
"Додатковий каталог буде вставлено в шлях пошуку перед :envvar:`PYTHONPATH`, "
"як описано вище в розділі :ref:`using-on-interface-options`. Шляхом пошуку "
"можна керувати з програми Python за допомогою змінної :data:`sys.path`."

#: ../../using/cmdline.rst:724
msgid ""
"If this is set to a non-empty string, don't prepend a potentially unsafe "
"path to :data:`sys.path`: see the :option:`-P` option for details."
msgstr ""

#: ../../using/cmdline.rst:732
msgid ""
"If this is set to a non-empty string, it overrides the "
":data:`sys.platlibdir` value."
msgstr ""
"Якщо для цього значення встановлено непорожній рядок, воно перевизначає "
"значення :data:`sys.platlibdir`."

#: ../../using/cmdline.rst:740
msgid ""
"If this is the name of a readable file, the Python commands in that file are"
" executed before the first prompt is displayed in interactive mode.  The "
"file is executed in the same namespace where interactive commands are "
"executed so that objects defined or imported in it can be used without "
"qualification in the interactive session.  You can also change the prompts "
":data:`sys.ps1` and :data:`sys.ps2` and the hook "
":data:`sys.__interactivehook__` in this file."
msgstr ""
"Якщо це ім’я файлу, який можна читати, команди Python у цьому файлі "
"виконуються до того, як в інтерактивному режимі відобразиться перше "
"повідомлення. Файл виконується в тому самому просторі імен, де виконуються "
"інтерактивні команди, щоб об’єкти, визначені або імпортовані в ньому, можна "
"було використовувати без застережень в інтерактивному сеансі. Ви також "
"можете змінити підказки :data:`sys.ps1` і :data:`sys.ps2` і хук "
":data:`sys.__interactivehook__` у цьому файлі."

#: ../../using/cmdline.rst:747 ../../using/cmdline.rst:749
msgid ""
"Raises an :ref:`auditing event <auditing>` ``cpython.run_startup`` with the "
"filename as the argument when called on startup."
msgstr ""
"Викликає :ref:`подію аудиту <auditing>` ``cpython.run_startup`` з іменем "
"файлу як аргументом під час виклику під час запуску."

#: ../../using/cmdline.rst:755
msgid ""
"If this is set to a non-empty string it is equivalent to specifying the "
":option:`-O` option.  If set to an integer, it is equivalent to specifying "
":option:`-O` multiple times."
msgstr ""
"Якщо для цього значення встановлено непорожній рядок, це еквівалентно "
"вказівці параметра :option:`-O`. Якщо встановлено ціле число, це "
"еквівалентно вказівці :option:`-O` кілька разів."

#: ../../using/cmdline.rst:762
msgid ""
"If this is set, it names a callable using dotted-path notation.  The module "
"containing the callable will be imported and then the callable will be run "
"by the default implementation of :func:`sys.breakpointhook` which itself is "
"called by built-in :func:`breakpoint`.  If not set, or set to the empty "
"string, it is equivalent to the value \"pdb.set_trace\".  Setting this to "
"the string \"0\" causes the default implementation of "
":func:`sys.breakpointhook` to do nothing but return immediately."
msgstr ""
"Якщо це встановлено, він називає виклик, використовуючи позначення шляху з "
"пунктиром. Модуль, що містить виклик, буде імпортований, а потім виклик "
"запускатиметься реалізацією за замовчуванням :func:`sys.breakpointhook`, яка"
" сама викликається вбудованою :func:`breakpoint`. Якщо не встановлено або "
"встановлено порожній рядок, це еквівалентно значенню \"pdb.set_trace\". "
"Встановлення рядка \"0\" призводить до того, що реалізація за замовчуванням "
":func:`sys.breakpointhook` не робить нічого, крім негайного повернення."

#: ../../using/cmdline.rst:774
msgid ""
"If this is set to a non-empty string it is equivalent to specifying the "
":option:`-d` option.  If set to an integer, it is equivalent to specifying "
":option:`-d` multiple times."
msgstr ""
"Якщо для цього значення встановлено непорожній рядок, це еквівалентно "
"вказівці параметра :option:`-d`. Якщо встановлено ціле число, це "
"еквівалентно вказівці :option:`-d` кілька разів."

#: ../../using/cmdline.rst:778
msgid ""
"This environment variable requires a :ref:`debug build of Python <debug-"
"build>`, otherwise it's ignored."
msgstr ""

#: ../../using/cmdline.rst:784
msgid ""
"If this is set to a non-empty string it is equivalent to specifying the "
":option:`-i` option."
msgstr ""
"Якщо для цього значення встановлено непорожній рядок, це еквівалентно "
"вказуванню параметра :option:`-i`."

#: ../../using/cmdline.rst:787
msgid ""
"This variable can also be modified by Python code using :data:`os.environ` "
"to force inspect mode on program termination."
msgstr ""
"Цю змінну також можна змінити за допомогою коду Python за допомогою "
":data:`os.environ` для примусового режиму перевірки після завершення "
"програми."

#: ../../using/cmdline.rst:792
msgid "(also 3.11.10, 3.10.15, 3.9.20, and 3.8.20) Emits audit events."
msgstr ""

#: ../../using/cmdline.rst:795
msgid ""
"Uses PyREPL if possible, in which case :envvar:`PYTHONSTARTUP` is also "
"executed. Emits audit events."
msgstr ""

#: ../../using/cmdline.rst:802
msgid ""
"If this is set to a non-empty string it is equivalent to specifying the "
":option:`-u` option."
msgstr ""
"Якщо для цього значення встановлено непорожній рядок, це еквівалентно "
"вказівці параметра :option:`-u`."

#: ../../using/cmdline.rst:808
msgid ""
"If this is set to a non-empty string it is equivalent to specifying the "
":option:`-v` option.  If set to an integer, it is equivalent to specifying "
":option:`-v` multiple times."
msgstr ""
"Якщо для цього значення встановлено непорожній рядок, це еквівалентно "
"вказівці параметра :option:`-v`. Якщо встановлено ціле число, це "
"еквівалентно вказівці :option:`-v` кілька разів."

#: ../../using/cmdline.rst:815
msgid ""
"If this is set, Python ignores case in :keyword:`import` statements.  This "
"only works on Windows and macOS."
msgstr ""
"Якщо це встановлено, Python ігнорує регістр у операторах :keyword:`import`. "
"Це працює лише в Windows і macOS."

#: ../../using/cmdline.rst:821
msgid ""
"If this is set to a non-empty string, Python won't try to write ``.pyc`` "
"files on the import of source modules.  This is equivalent to specifying the"
" :option:`-B` option."
msgstr ""
"Якщо для цього значення встановлено непорожній рядок, Python не "
"намагатиметься записати файли ``.pyc`` під час імпорту вихідних модулів. Це "
"еквівалентно вказівці параметра :option:`-B`."

#: ../../using/cmdline.rst:828
msgid ""
"If this is set, Python will write ``.pyc`` files in a mirror directory tree "
"at this path, instead of in ``__pycache__`` directories within the source "
"tree. This is equivalent to specifying the :option:`-X` "
"``pycache_prefix=PATH`` option."
msgstr ""
"Якщо це встановлено, Python записуватиме файли ``.pyc`` у дзеркальному "
"дереві каталогів за цим шляхом, а не в ``__pycache__`` каталогах у вихідному"
" дереві. Це еквівалентно вказівці параметра :option:`-X` "
"``pycache_prefix=PATH``."

#: ../../using/cmdline.rst:838
msgid ""
"If this variable is not set or set to ``random``, a random value is used to "
"seed the hashes of str and bytes objects."
msgstr ""
"Якщо ця змінна не встановлена або має значення ``random``, для заповнення "
"хешів об’єктів str і bytes використовується випадкове значення."

#: ../../using/cmdline.rst:841
msgid ""
"If :envvar:`PYTHONHASHSEED` is set to an integer value, it is used as a "
"fixed seed for generating the hash() of the types covered by the hash "
"randomization."
msgstr ""
"Якщо :envvar:`PYTHONHASHSEED` має ціле значення, воно використовується як "
"фіксоване початкове значення для генерації hash() типів, охоплених "
"рандомізацією хешу."

#: ../../using/cmdline.rst:845
msgid ""
"Its purpose is to allow repeatable hashing, such as for selftests for the "
"interpreter itself, or to allow a cluster of python processes to share hash "
"values."
msgstr ""
"Його мета полягає в тому, щоб дозволити повторюване хешування, наприклад, "
"для самоперевірки для самого інтерпретатора, або дозволити кластеру процесів"
" Python спільно використовувати хеш-значення."

#: ../../using/cmdline.rst:849
msgid ""
"The integer must be a decimal number in the range [0,4294967295].  "
"Specifying the value 0 will disable hash randomization."
msgstr ""
"Ціле число має бути десятковим числом у діапазоні [0,4294967295]. Якщо "
"вказати значення 0, рандомізацію хешу буде вимкнено."

#: ../../using/cmdline.rst:856
msgid ""
"If this variable is set to an integer, it is used to configure the "
"interpreter's global :ref:`integer string conversion length limitation "
"<int_max_str_digits>`."
msgstr ""

#: ../../using/cmdline.rst:864
msgid ""
"If this is set before running the interpreter, it overrides the encoding "
"used for stdin/stdout/stderr, in the syntax ``encodingname:errorhandler``.  "
"Both the ``encodingname`` and the ``:errorhandler`` parts are optional and "
"have the same meaning as in :func:`str.encode`."
msgstr ""
"Якщо це встановлено перед запуском інтерпретатора, воно замінює кодування, "
"що використовується для stdin/stdout/stderr, у синтаксисі "
"``encodingname:errorhandler``. Частини ``encodingname`` і ``:errorhandler`` "
"є необов’язковими та мають те ж значення, що й у :func:`str.encode`."

#: ../../using/cmdline.rst:869
msgid ""
"For stderr, the ``:errorhandler`` part is ignored; the handler will always "
"be ``'backslashreplace'``."
msgstr ""
"Для stderr частина ``:errorhandler`` ігнорується; обробник завжди буде "
"``'backslashreplace'``."

#: ../../using/cmdline.rst:872
msgid "The ``encodingname`` part is now optional."
msgstr "Частина ``назва кодування`` тепер необов'язкова."

#: ../../using/cmdline.rst:875
msgid ""
"On Windows, the encoding specified by this variable is ignored for "
"interactive console buffers unless :envvar:`PYTHONLEGACYWINDOWSSTDIO` is "
"also specified. Files and pipes redirected through the standard streams are "
"not affected."
msgstr ""
"У Windows кодування, визначене цією змінною, ігнорується для інтерактивних "
"буферів консолі, якщо також не вказано :envvar:`PYTHONLEGACYWINDOWSSTDIO`. "
"Файли та канали, переспрямовані через стандартні потоки, не впливають."

#: ../../using/cmdline.rst:882
msgid ""
"If this is set, Python won't add the :data:`user site-packages directory "
"<site.USER_SITE>` to :data:`sys.path`."
msgstr ""
"Якщо це встановлено, Python не додаватиме каталог :data:`user site-packages "
"<site.USER_SITE>` до :data:`sys.path`."

#: ../../using/cmdline.rst:892
msgid ""
"Defines the :data:`user base directory <site.USER_BASE>`, which is used to "
"compute the path of the :data:`user site-packages directory "
"<site.USER_SITE>` and :ref:`installation paths <sysconfig-user-scheme>` for "
"``python -m pip install --user``."
msgstr ""

#: ../../using/cmdline.rst:904
msgid ""
"If this environment variable is set, ``sys.argv[0]`` will be set to its "
"value instead of the value got through the C runtime.  Only works on macOS."
msgstr ""
"Якщо цю змінну середовища встановлено, ``sys.argv[0]`` буде встановлено її "
"значення замість значення, отриманого через середовище виконання C. Працює "
"лише на macOS."

#: ../../using/cmdline.rst:910
msgid ""
"This is equivalent to the :option:`-W` option. If set to a comma separated "
"string, it is equivalent to specifying :option:`-W` multiple times, with "
"filters later in the list taking precedence over those earlier in the list."
msgstr ""
"Це еквівалентно параметру :option:`-W`. Якщо встановлено рядок, розділений "
"комами, це еквівалентно вказівці :option:`-W` кілька разів, причому фільтри,"
" розташовані далі в списку, матимуть перевагу над тими, які є раніше в "
"списку."

#: ../../using/cmdline.rst:919
msgid ""
"PYTHONWARNINGS=default  # Warn once per call location\n"
"PYTHONWARNINGS=error    # Convert to exceptions\n"
"PYTHONWARNINGS=always   # Warn every time\n"
"PYTHONWARNINGS=all      # Same as PYTHONWARNINGS=always\n"
"PYTHONWARNINGS=module   # Warn once per calling module\n"
"PYTHONWARNINGS=once     # Warn once per Python process\n"
"PYTHONWARNINGS=ignore   # Never warn"
msgstr ""

#: ../../using/cmdline.rst:933
msgid ""
"If this environment variable is set to a non-empty string, "
":func:`faulthandler.enable` is called at startup: install a handler for "
":const:`~signal.SIGSEGV`, :const:`~signal.SIGFPE`, :const:`~signal.SIGABRT`,"
" :const:`~signal.SIGBUS` and :const:`~signal.SIGILL` signals to dump the "
"Python traceback. This is equivalent to :option:`-X` ``faulthandler`` "
"option."
msgstr ""

#: ../../using/cmdline.rst:945
msgid ""
"If this environment variable is set to a non-empty string, start tracing "
"Python memory allocations using the :mod:`tracemalloc` module. The value of "
"the variable is the maximum number of frames stored in a traceback of a "
"trace. For example, ``PYTHONTRACEMALLOC=1`` stores only the most recent "
"frame. See the :func:`tracemalloc.start` function for more information. This"
" is equivalent to setting the :option:`-X` ``tracemalloc`` option."
msgstr ""

#: ../../using/cmdline.rst:958
msgid ""
"If this environment variable is set to a non-empty string, Python will show "
"how long each import takes. This is equivalent to setting the :option:`-X` "
"``importtime`` option."
msgstr ""

#: ../../using/cmdline.rst:967
msgid ""
"If this environment variable is set to a non-empty string, enable the "
":ref:`debug mode <asyncio-debug-mode>` of the :mod:`asyncio` module."
msgstr ""
"Якщо для цієї змінної середовища встановлено непорожній рядок, увімкніть "
":ref:`режим налагодження <asyncio-debug-mode>` модуля :mod:`asyncio`."

#: ../../using/cmdline.rst:975
msgid "Set the Python memory allocators and/or install debug hooks."
msgstr ""
"Налаштуйте розподільники пам’яті Python та/або встановіть хуки налагодження."

#: ../../using/cmdline.rst:977
msgid "Set the family of memory allocators used by Python:"
msgstr "Встановіть сімейство розподільників пам’яті, яке використовує Python:"

#: ../../using/cmdline.rst:979
msgid ""
"``default``: use the :ref:`default memory allocators <default-memory-"
"allocators>`."
msgstr ""
"``за замовчуванням``: використовуйте :ref:`розподільники пам'яті за "
"замовчуванням <default-memory-allocators>`."

#: ../../using/cmdline.rst:981
msgid ""
"``malloc``: use the :c:func:`malloc` function of the C library for all "
"domains (:c:macro:`PYMEM_DOMAIN_RAW`, :c:macro:`PYMEM_DOMAIN_MEM`, "
":c:macro:`PYMEM_DOMAIN_OBJ`)."
msgstr ""

#: ../../using/cmdline.rst:984
msgid ""
"``pymalloc``: use the :ref:`pymalloc allocator <pymalloc>` for "
":c:macro:`PYMEM_DOMAIN_MEM` and :c:macro:`PYMEM_DOMAIN_OBJ` domains and use "
"the :c:func:`malloc` function for the :c:macro:`PYMEM_DOMAIN_RAW` domain."
msgstr ""

#: ../../using/cmdline.rst:987
msgid ""
"``mimalloc``: use the :ref:`mimalloc allocator <mimalloc>` for "
":c:macro:`PYMEM_DOMAIN_MEM` and :c:macro:`PYMEM_DOMAIN_OBJ` domains and use "
"the :c:func:`malloc` function for the :c:macro:`PYMEM_DOMAIN_RAW` domain."
msgstr ""

#: ../../using/cmdline.rst:991
msgid "Install :ref:`debug hooks <pymem-debug-hooks>`:"
msgstr "Встановити :ref:`debug hooks <pymem-debug-hooks>`:"

#: ../../using/cmdline.rst:993
msgid ""
"``debug``: install debug hooks on top of the :ref:`default memory allocators"
" <default-memory-allocators>`."
msgstr ""
"``debug``: установіть хуки налагодження поверх :ref:`розподілювачів пам'яті "
"за замовчуванням <default-memory-allocators>`."

#: ../../using/cmdline.rst:995
msgid "``malloc_debug``: same as ``malloc`` but also install debug hooks."
msgstr ""
"``malloc_debug``: те саме, що ``malloc``, але також встановлює хуки "
"налагодження."

#: ../../using/cmdline.rst:996
msgid "``pymalloc_debug``: same as ``pymalloc`` but also install debug hooks."
msgstr ""
"``pymalloc_debug``: те саме, що ``pymalloc``, але також встановлює хуки "
"налагодження."

#: ../../using/cmdline.rst:997
msgid "``mimalloc_debug``: same as ``mimalloc`` but also install debug hooks."
msgstr ""

#: ../../using/cmdline.rst:1001
msgid "Added the ``\"default\"`` allocator."
msgstr "Додано розподільник ``\"default\"``."

#: ../../using/cmdline.rst:1007
msgid ""
"If set to a non-empty string, Python will print statistics of the "
":ref:`pymalloc memory allocator <pymalloc>` every time a new pymalloc object"
" arena is created, and on shutdown."
msgstr ""
"Якщо встановлено непорожній рядок, Python друкуватиме статистику "
":ref:`розподільника пам’яті pymalloc <pymalloc>` кожного разу, коли "
"створюється нова арена об’єкта pymalloc, а також після завершення роботи."

#: ../../using/cmdline.rst:1011
msgid ""
"This variable is ignored if the :envvar:`PYTHONMALLOC` environment variable "
"is used to force the :c:func:`malloc` allocator of the C library, or if "
"Python is configured without ``pymalloc`` support."
msgstr ""
"Ця змінна ігнорується, якщо змінна середовища :envvar:`PYTHONMALLOC` "
"використовується для примусового виділення :c:func:`malloc` бібліотеки C, "
"або якщо Python налаштовано без підтримки ``pymalloc``."

#: ../../using/cmdline.rst:1015
msgid ""
"This variable can now also be used on Python compiled in release mode. It "
"now has no effect if set to an empty string."
msgstr ""
"Цю змінну тепер також можна використовувати на Python, скомпільованому в "
"режимі випуску. Тепер це не має ефекту, якщо встановлено порожній рядок."

#: ../../using/cmdline.rst:1022
msgid ""
"If set to a non-empty string, the default :term:`filesystem encoding and "
"error handler` mode will revert to their pre-3.6 values of 'mbcs' and "
"'replace', respectively.  Otherwise, the new defaults 'utf-8' and "
"'surrogatepass' are used."
msgstr ""
"Якщо встановлено непорожній рядок, режим :term:`filesystem encoding and "
"error handler` за замовчуванням повернеться до своїх значень 'mbcs' і "
"'replace', які були раніше 3.6, відповідно. В іншому випадку "
"використовуються нові значення за замовчуванням \"utf-8\" і "
"\"surrogatepass\"."

#: ../../using/cmdline.rst:1027
msgid ""
"This may also be enabled at runtime with "
":func:`sys._enablelegacywindowsfsencoding`."
msgstr ""

#: ../../using/cmdline.rst:1030 ../../using/cmdline.rst:1044
#: ../../using/cmdline.rst:1095
msgid "Availability"
msgstr ""

#: ../../using/cmdline.rst:1032
msgid "See :pep:`529` for more details."
msgstr "Дивіться :pep:`529` для більш детальної інформації."

#: ../../using/cmdline.rst:1037
msgid ""
"If set to a non-empty string, does not use the new console reader and "
"writer. This means that Unicode characters will be encoded according to the "
"active console code page, rather than using utf-8."
msgstr ""
"Якщо встановлено непорожній рядок, новий засіб читання та запису консолі не "
"використовується. Це означає, що символи Unicode кодуватимуться відповідно "
"до активної кодової сторінки консолі, а не за допомогою utf-8."

#: ../../using/cmdline.rst:1041
msgid ""
"This variable is ignored if the standard streams are redirected (to files or"
" pipes) rather than referring to console buffers."
msgstr ""
"Ця змінна ігнорується, якщо стандартні потоки перенаправляються (до файлів "
"або каналів), а не посилаються на буфери консолі."

#: ../../using/cmdline.rst:1051
msgid ""
"If set to the value ``0``, causes the main Python command line application "
"to skip coercing the legacy ASCII-based C and POSIX locales to a more "
"capable UTF-8 based alternative."
msgstr ""
"Якщо встановлено значення ``0``, основна програма командного рядка Python "
"пропускає приведення застарілих локалей на основі ASCII C і POSIX до більш "
"дієвої альтернативи на основі UTF-8."

#: ../../using/cmdline.rst:1055
msgid ""
"If this variable is *not* set (or is set to a value other than ``0``), the "
"``LC_ALL`` locale override environment variable is also not set, and the "
"current locale reported for the ``LC_CTYPE`` category is either the default "
"``C`` locale, or else the explicitly ASCII-based ``POSIX`` locale, then the "
"Python CLI will attempt to configure the following locales for the "
"``LC_CTYPE`` category in the order listed before loading the interpreter "
"runtime:"
msgstr ""
"Якщо цю змінну *не* встановлено (або встановлено значення, відмінне від "
"``0``), змінна середовища ``LC_ALL``, яка замінює локаль, також не "
"встановлена, і поточна локаль повідомляється для ``LC_CTYPE`` категорія є "
"або локаллю ``C`` за замовчуванням, або явно заснованою на ASCII локаллю "
"``POSIX``, тоді Python CLI спробує налаштувати такі мови для категорії "
"``LC_CTYPE`` у зазначеному порядку перед завантаженням середовища виконання "
"інтерпретатора:"

#: ../../using/cmdline.rst:1063
msgid "``C.UTF-8``"
msgstr "``C.UTF-8``"

#: ../../using/cmdline.rst:1064
msgid "``C.utf8``"
msgstr "``C.utf8``"

#: ../../using/cmdline.rst:1065
msgid "``UTF-8``"
msgstr "``UTF-8``"

#: ../../using/cmdline.rst:1067
msgid ""
"If setting one of these locale categories succeeds, then the ``LC_CTYPE`` "
"environment variable will also be set accordingly in the current process "
"environment before the Python runtime is initialized. This ensures that in "
"addition to being seen by both the interpreter itself and other locale-aware"
" components running in the same process (such as the GNU ``readline`` "
"library), the updated setting is also seen in subprocesses (regardless of "
"whether or not those processes are running a Python interpreter), as well as"
" in operations that query the environment rather than the current C locale "
"(such as Python's own :func:`locale.getdefaultlocale`)."
msgstr ""
"Якщо встановлення однієї з цих категорій локалі вдасться, тоді змінна "
"середовища ``LC_CTYPE`` також буде встановлена відповідним чином у поточному"
" середовищі процесу до ініціалізації середовища виконання Python. Це "
"гарантує, що окрім перегляду як самим інтерпретатором, так і іншими "
"компонентами, що працюють у тому самому процесі (таких як бібліотека GNU "
"``readline``), оновлене налаштування також видно у підпроцесах (незалежно "
"від того, чи не ці процеси запускають інтерпретатор Python), а також в "
"операціях, які запитують середовище, а не поточну локаль C (наприклад, "
"власний :func:`locale.getdefaultlocale` Python)."

#: ../../using/cmdline.rst:1077
msgid ""
"Configuring one of these locales (either explicitly or via the above "
"implicit locale coercion) automatically enables the ``surrogateescape`` "
":ref:`error handler <error-handlers>` for :data:`sys.stdin` and "
":data:`sys.stdout` (:data:`sys.stderr` continues to use ``backslashreplace``"
" as it does in any other locale). This stream handling behavior can be "
"overridden using :envvar:`PYTHONIOENCODING` as usual."
msgstr ""
"Налаштування однієї з цих локалей (явно або за допомогою зазначеного вище "
"неявного примусу до локалі) автоматично вмикає ``surrogateescape`` "
":ref:`обробник помилок <error-handlers>` для :data:`sys.stdin` і "
":data:`sys.stdout` (:data:`sys.stderr` продовжує використовувати "
"``backslashreplace``, як і в будь-якій іншій локалі). Цю поведінку обробки "
"потоку можна змінити за допомогою :envvar:`PYTHONIOENCODING`, як зазвичай."

#: ../../using/cmdline.rst:1084
msgid ""
"For debugging purposes, setting ``PYTHONCOERCECLOCALE=warn`` will cause "
"Python to emit warning messages on ``stderr`` if either the locale coercion "
"activates, or else if a locale that *would* have triggered coercion is still"
" active when the Python runtime is initialized."
msgstr ""
"З метою налагодження налаштування ``PYTHONCOERCECLOCALE=warn`` призведе до "
"того, що Python видаватиме попереджувальні повідомлення на ``stderr``, якщо "
"або активується примусове налаштування локалі, або якщо локаль, яка *могла "
"б* ініціювати примусове налаштування, все ще активна, коли Python час "
"виконання ініціалізовано."

#: ../../using/cmdline.rst:1089
msgid ""
"Also note that even when locale coercion is disabled, or when it fails to "
"find a suitable target locale, :envvar:`PYTHONUTF8` will still activate by "
"default in legacy ASCII-based locales. Both features must be disabled in "
"order to force the interpreter to use ``ASCII`` instead of ``UTF-8`` for "
"system interfaces."
msgstr ""
"Також зауважте, що навіть якщо примусове налаштування локалі вимкнено або "
"якщо йому не вдається знайти відповідну цільову локаль, :envvar:`PYTHONUTF8`"
" усе одно активується за замовчуванням у застарілих локалях на основі ASCII."
" Обидві функції мають бути вимкнені, щоб змусити інтерпретатор "
"використовувати ``ASCII`` замість ``UTF-8`` для системних інтерфейсів."

#: ../../using/cmdline.rst:1097
msgid "See :pep:`538` for more details."
msgstr "Дивіться :pep:`538` для більш детальної інформації."

#: ../../using/cmdline.rst:1103
msgid ""
"If this environment variable is set to a non-empty string, enable "
":ref:`Python Development Mode <devmode>`, introducing additional runtime "
"checks that are too expensive to be enabled by default. This is equivalent "
"to setting the :option:`-X` ``dev`` option."
msgstr ""

#: ../../using/cmdline.rst:1112
msgid "If set to ``1``, enable the :ref:`Python UTF-8 Mode <utf8-mode>`."
msgstr ""
"Якщо встановлено значення ``1``, увімкніть режим :ref:`Python UTF-8 "
"<utf8-mode>`."

#: ../../using/cmdline.rst:1114
msgid "If set to ``0``, disable the :ref:`Python UTF-8 Mode <utf8-mode>`."
msgstr ""
"Якщо встановлено значення ``0``, вимкніть режим :ref:`Python UTF-8 "
"<utf8-mode>`."

#: ../../using/cmdline.rst:1116
msgid ""
"Setting any other non-empty string causes an error during interpreter "
"initialisation."
msgstr ""
"Встановлення будь-якого іншого непорожнього рядка викликає помилку під час "
"ініціалізації інтерпретатора."

#: ../../using/cmdline.rst:1123
msgid ""
"If this environment variable is set to a non-empty string, issue a "
":class:`EncodingWarning` when the locale-specific default encoding is used."
msgstr ""
"Якщо для цієї змінної середовища встановлено значення непорожнього рядка, "
"видайте :class:`EncodingWarning`, коли використовується кодування за "
"замовчуванням для певної мови."

#: ../../using/cmdline.rst:1126
msgid "See :ref:`io-encoding-warning` for details."
msgstr "Дивіться :ref:`io-encoding-warning` для деталей."

#: ../../using/cmdline.rst:1132
msgid ""
"If this variable is set, it disables the inclusion of the tables mapping "
"extra location information (end line, start column offset and end column "
"offset) to every instruction in code objects. This is useful when smaller "
"code objects and pyc files are desired as well as suppressing the extra "
"visual location indicators when the interpreter displays tracebacks."
msgstr ""

#: ../../using/cmdline.rst:1142
msgid ""
"If this variable is set to a nonzero value, it enables support for the Linux"
" ``perf`` profiler so Python calls can be detected by it."
msgstr ""

#: ../../using/cmdline.rst:1145 ../../using/cmdline.rst:1158
msgid "If set to ``0``, disable Linux ``perf`` profiler support."
msgstr ""

#: ../../using/cmdline.rst:1147
msgid ""
"See also the :option:`-X perf <-X>` command-line option and "
":ref:`perf_profiling`."
msgstr ""

#: ../../using/cmdline.rst:1154
msgid ""
"If this variable is set to a nonzero value, it enables support for the Linux"
" ``perf`` profiler so Python calls can be detected by it using DWARF "
"information."
msgstr ""

#: ../../using/cmdline.rst:1160
msgid ""
"See also the :option:`-X perf_jit <-X>` command-line option and "
":ref:`perf_profiling`."
msgstr ""

#: ../../using/cmdline.rst:1169
msgid ""
"If this variable is set to a positive integer, it overrides the return "
"values of :func:`os.cpu_count` and :func:`os.process_cpu_count`."
msgstr ""

#: ../../using/cmdline.rst:1172
msgid "See also the :option:`-X cpu_count <-X>` command-line option."
msgstr ""

#: ../../using/cmdline.rst:1178
msgid ""
"If this variable is set to ``on`` or ``off``, it determines whether or not "
"frozen modules are ignored by the import machinery.  A value of ``on`` means"
" they get imported and ``off`` means they are ignored.  The default is "
"``on`` for non-debug builds (the normal case) and ``off`` for debug builds. "
"Note that the :mod:`!importlib_bootstrap` and "
":mod:`!importlib_bootstrap_external` frozen modules are always used, even if"
" this flag is set to ``off``."
msgstr ""

#: ../../using/cmdline.rst:1186
msgid "See also the :option:`-X frozen_modules <-X>` command-line option."
msgstr ""

#: ../../using/cmdline.rst:1192
msgid ""
"If this variable is set to ``1``, the interpreter will colorize various "
"kinds of output. Setting it to ``0`` deactivates this behavior. See also "
":ref:`using-on-controlling-color`."
msgstr ""

#: ../../using/cmdline.rst:1200
msgid ""
"If this variable is set to ``1``, the interpreter will not attempt to load "
"the Python-based :term:`REPL` that requires :mod:`curses` and "
":mod:`readline`, and will instead use the traditional parser-based "
":term:`REPL`."
msgstr ""

#: ../../using/cmdline.rst:1209
msgid ""
"This environment variable can be used to set the location of a "
"``.python_history`` file (by default, it is ``.python_history`` in the "
"user's home directory)."
msgstr ""

#: ../../using/cmdline.rst:1217
msgid ""
"If this variable is set to ``1``, the global interpreter lock (GIL) will be "
"forced on. Setting it to ``0`` forces the GIL off (needs Python configured "
"with the :option:`--disable-gil` build option)."
msgstr ""

#: ../../using/cmdline.rst:1221
msgid ""
"See also the :option:`-X gil <-X>` command-line option, which takes "
"precedence over this variable, and :ref:`whatsnew313-free-threaded-cpython`."
msgstr ""

#: ../../using/cmdline.rst:1227
msgid "Debug-mode variables"
msgstr "Змінні режиму налагодження"

#: ../../using/cmdline.rst:1231
msgid ""
"If set, Python will dump objects and reference counts still alive after "
"shutting down the interpreter."
msgstr ""
"Якщо встановлено, Python виводитиме об’єкти та лічильники посилань, які ще "
"живі після вимкнення інтерпретатора."

#: ../../using/cmdline.rst:1234 ../../using/cmdline.rst:1242
msgid ""
"Needs Python configured with the :option:`--with-trace-refs` build option."
msgstr ""

#: ../../using/cmdline.rst:1238
msgid ""
"If set, Python will dump objects and reference counts still alive after "
"shutting down the interpreter into a file under the path given as the value "
"to this environment variable."
msgstr ""

#: ../../using/cmdline.rst:1248
msgid ""
"If this variable is set to a module, that module will be imported early in "
"the interpreter lifecycle, before the :mod:`site` module is executed, and "
"before the :mod:`__main__` module is created. Therefore, the imported module"
" is not treated as :mod:`__main__`."
msgstr ""

#: ../../using/cmdline.rst:1253
msgid "This can be used to execute code early during Python initialization."
msgstr ""

#: ../../using/cmdline.rst:1255
msgid ""
"To import a submodule, use ``package.module`` as the value, like in an "
"import statement."
msgstr ""

#: ../../using/cmdline.rst:1258
msgid ""
"See also the :option:`-X presite <-X>` command-line option, which takes "
"precedence over this variable."
msgstr ""

#: ../../using/cmdline.rst:1261
msgid ""
"Needs Python configured with the :option:`--with-pydebug` build option."
msgstr ""
