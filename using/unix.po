# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Dmytro Kazanzhy, 2022
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-11-12 08:36+0000\n"
"PO-Revision-Date: 2021-06-28 01:51+0000\n"
"Last-Translator: Dmytro Kazanzhy, 2022\n"
"Language-Team: Ukrainian (https://app.transifex.com/python-doc/teams/5390/uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != 11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % 100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || (n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

#: ../../using/unix.rst:7
msgid "Using Python on Unix platforms"
msgstr "Використання Python на платформах Unix"

#: ../../using/unix.rst:13
msgid "Getting and installing the latest version of Python"
msgstr "Отримання та встановлення останньої версії Python"

#: ../../using/unix.rst:16
msgid "On Linux"
msgstr "На Linux"

#: ../../using/unix.rst:18
msgid ""
"Python comes preinstalled on most Linux distributions, and is available as a"
" package on all others.  However there are certain features you might want "
"to use that are not available on your distro's package.  You can compile the"
" latest version of Python from source."
msgstr ""

#: ../../using/unix.rst:23
msgid ""
"In the event that the latest version of Python doesn't come preinstalled and"
" isn't in the repositories as well, you can make packages for your own "
"distro.  Have a look at the following links:"
msgstr ""

#: ../../using/unix.rst:29
msgid "https://www.debian.org/doc/manuals/maint-guide/first.en.html"
msgstr "https://www.debian.org/doc/manuals/maint-guide/first.en.html"

#: ../../using/unix.rst:30
msgid "for Debian users"
msgstr "для користувачів Debian"

#: ../../using/unix.rst:31
msgid "https://en.opensuse.org/Portal:Packaging"
msgstr "https://en.opensuse.org/Portal:Packaging"

#: ../../using/unix.rst:32
msgid "for OpenSuse users"
msgstr "для користувачів OpenSuse"

#: ../../using/unix.rst:33
msgid ""
"https://docs.fedoraproject.org/en-US/package-"
"maintainers/Packaging_Tutorial_GNU_Hello/"
msgstr ""

#: ../../using/unix.rst:34
msgid "for Fedora users"
msgstr "для користувачів Fedora"

#: ../../using/unix.rst:35
msgid "https://slackbook.org/html/package-management-making-packages.html"
msgstr ""

#: ../../using/unix.rst:36
msgid "for Slackware users"
msgstr "для користувачів Slackware"

#: ../../using/unix.rst:40
msgid "On FreeBSD and OpenBSD"
msgstr "На FreeBSD і OpenBSD"

#: ../../using/unix.rst:42
msgid "FreeBSD users, to add the package use::"
msgstr "Користувачі FreeBSD, щоб додати пакет, використовуйте::"

#: ../../using/unix.rst:44
msgid "pkg install python3"
msgstr ""

#: ../../using/unix.rst:46
msgid "OpenBSD users, to add the package use::"
msgstr "Користувачі OpenBSD, щоб додати пакет, використовуйте::"

#: ../../using/unix.rst:48
msgid ""
"pkg_add -r python\n"
"\n"
"pkg_add ftp://ftp.openbsd.org/pub/OpenBSD/4.2/packages/<insert your architecture here>/python-<version>.tgz"
msgstr ""

#: ../../using/unix.rst:52
msgid "For example i386 users get the 2.5.1 version of Python using::"
msgstr ""
"Наприклад, користувачі i386 отримують версію Python 2.5.1 за допомогою:"

#: ../../using/unix.rst:54
msgid ""
"pkg_add "
"ftp://ftp.openbsd.org/pub/OpenBSD/4.2/packages/i386/python-2.5.1p2.tgz"
msgstr ""

#: ../../using/unix.rst:60
msgid "Building Python"
msgstr "Створення Python"

#: ../../using/unix.rst:62
msgid ""
"If you want to compile CPython yourself, first thing you should do is get "
"the `source <https://www.python.org/downloads/source/>`_. You can download "
"either the latest release's source or just grab a fresh `clone "
"<https://devguide.python.org/setup/#get-the-source-code>`_.  (If you want to"
" contribute patches, you will need a clone.)"
msgstr ""

#: ../../using/unix.rst:68
msgid "The build process consists of the usual commands::"
msgstr "Процес збирання складається зі звичайних команд:"

#: ../../using/unix.rst:70
msgid ""
"./configure\n"
"make\n"
"make install"
msgstr ""

#: ../../using/unix.rst:74
msgid ""
":ref:`Configuration options <configure-options>` and caveats for specific "
"Unix platforms are extensively documented in the :source:`README.rst` file "
"in the root of the Python source tree."
msgstr ""
":ref:`Параметри конфігурації <configure-options>` і застереження для "
"конкретних платформ Unix детально задокументовані у файлі "
":source:`README.rst` у корені дерева вихідних кодів Python."

#: ../../using/unix.rst:80
msgid ""
"``make install`` can overwrite or masquerade the :file:`python3` binary. "
"``make altinstall`` is therefore recommended instead of ``make install`` "
"since it only installs :file:`{exec_prefix}/bin/python{version}`."
msgstr ""
"``make install`` може перезаписати або маскувати двійковий файл "
":file:`python3`. Таким чином, ``make altinstall`` рекомендується замість "
"``make install``, оскільки він встановлює лише "
":file:`{exec_prefix}/bin/python{version}`."

#: ../../using/unix.rst:86
msgid "Python-related paths and files"
msgstr "Шляхи та файли, пов’язані з Python"

#: ../../using/unix.rst:88
msgid ""
"These are subject to difference depending on local installation conventions;"
" :option:`prefix <--prefix>` and :option:`exec_prefix <--exec-prefix>` are "
"installation-dependent and should be interpreted as for GNU software; they "
"may be the same."
msgstr ""

#: ../../using/unix.rst:93
msgid ""
"For example, on most Linux systems, the default for both is :file:`/usr`."
msgstr "Наприклад, у більшості систем Linux типовим для обох є :file:`/usr`."

#: ../../using/unix.rst:96
msgid "File/directory"
msgstr "Файл/каталог"

#: ../../using/unix.rst:96
msgid "Meaning"
msgstr "Значення"

#: ../../using/unix.rst:98
msgid ":file:`{exec_prefix}/bin/python3`"
msgstr ":file:`{exec_prefix}/bin/python3`"

#: ../../using/unix.rst:98
msgid "Recommended location of the interpreter."
msgstr "Рекомендоване місце розташування перекладача."

#: ../../using/unix.rst:100
msgid ""
":file:`{prefix}/lib/python{version}`, "
":file:`{exec_prefix}/lib/python{version}`"
msgstr ""
":file:`{prefix}/lib/python{version}`, "
":file:`{exec_prefix}/lib/python{version}`"

#: ../../using/unix.rst:100
msgid ""
"Recommended locations of the directories containing the standard modules."
msgstr "Рекомендоване розташування каталогів, що містять стандартні модулі."

#: ../../using/unix.rst:103
msgid ""
":file:`{prefix}/include/python{version}`, "
":file:`{exec_prefix}/include/python{version}`"
msgstr ""
":file:`{prefix}/include/python{version}`, "
":file:`{exec_prefix}/include/python{version}`"

#: ../../using/unix.rst:103
msgid ""
"Recommended locations of the directories containing the include files needed"
" for developing Python extensions and embedding the interpreter."
msgstr ""
"Рекомендовані розташування каталогів, що містять файли включення, необхідні "
"для розробки розширень Python і вбудовування інтерпретатора."

#: ../../using/unix.rst:111
msgid "Miscellaneous"
msgstr "Різне"

#: ../../using/unix.rst:113
msgid ""
"To easily use Python scripts on Unix, you need to make them executable, e.g."
" with"
msgstr ""
"Щоб легко використовувати сценарії Python в Unix, вам потрібно зробити їх "
"виконуваними, напр. з"

#: ../../using/unix.rst:116
msgid "$ chmod +x script"
msgstr ""

#: ../../using/unix.rst:120
msgid ""
"and put an appropriate Shebang line at the top of the script.  A good choice"
" is usually ::"
msgstr ""
"і помістіть відповідний рядок Shebang у верхній частині сценарію. Зазвичай "
"хороший вибір:"

#: ../../using/unix.rst:123
msgid "#!/usr/bin/env python3"
msgstr ""

#: ../../using/unix.rst:125
msgid ""
"which searches for the Python interpreter in the whole :envvar:`PATH`.  "
"However, some Unices may not have the :program:`env` command, so you may "
"need to hardcode ``/usr/bin/python3`` as the interpreter path."
msgstr ""
"який шукає інтерпретатор Python у всьому :envvar:`PATH`. Однак деякі Unix "
"можуть не мати команди :program:`env`, тому вам може знадобитися жорстко "
"закодувати ``/usr/bin/python3`` як шлях інтерпретатора."

#: ../../using/unix.rst:129
msgid ""
"To use shell commands in your Python scripts, look at the :mod:`subprocess` "
"module."
msgstr ""
"Щоб використовувати команди оболонки у ваших сценаріях Python, подивіться на"
" модуль :mod:`subprocess`."

#: ../../using/unix.rst:134
msgid "Custom OpenSSL"
msgstr "Спеціальний OpenSSL"

#: ../../using/unix.rst:136
msgid ""
"To use your vendor's OpenSSL configuration and system trust store, locate "
"the directory with ``openssl.cnf`` file or symlink in ``/etc``. On most "
"distribution the file is either in ``/etc/ssl`` or ``/etc/pki/tls``. The "
"directory should also contain a ``cert.pem`` file and/or a ``certs`` "
"directory."
msgstr ""
"Щоб використовувати конфігурацію OpenSSL і сховище довіри системи вашого "
"постачальника, знайдіть каталог із файлом ``openssl.cnf`` або символічним "
"посиланням у ``/etc``. У більшості дистрибутивів файл знаходиться або в "
"``/etc/ssl``, або ``/etc/pki/tls``. Каталог також має містити файл "
"``cert.pem`` та/або каталог ``certs``."

#: ../../using/unix.rst:142
msgid ""
"$ find /etc/ -name openssl.cnf -printf \"%h\\n\"\n"
"/etc/ssl"
msgstr ""

#: ../../using/unix.rst:147
msgid ""
"Download, build, and install OpenSSL. Make sure you use ``install_sw`` and "
"not ``install``. The ``install_sw`` target does not override "
"``openssl.cnf``."
msgstr ""
"Завантажте, створіть і встановіть OpenSSL. Переконайтеся, що ви "
"використовуєте ``install_sw``, а не ``install``. Ціль ``install_sw`` не "
"перевизначає ``openssl.cnf``."

#: ../../using/unix.rst:151
msgid ""
"$ curl -O https://www.openssl.org/source/openssl-VERSION.tar.gz\n"
"$ tar xzf openssl-VERSION\n"
"$ pushd openssl-VERSION\n"
"$ ./config \\\n"
"    --prefix=/usr/local/custom-openssl \\\n"
"    --libdir=lib \\\n"
"    --openssldir=/etc/ssl\n"
"$ make -j1 depend\n"
"$ make -j8\n"
"$ make install_sw\n"
"$ popd"
msgstr ""

#: ../../using/unix.rst:165
msgid ""
"Build Python with custom OpenSSL (see the configure ``--with-openssl`` and "
"``--with-openssl-rpath`` options)"
msgstr ""

#: ../../using/unix.rst:168
msgid ""
"$ pushd python-3.x.x\n"
"$ ./configure -C \\\n"
"    --with-openssl=/usr/local/custom-openssl \\\n"
"    --with-openssl-rpath=auto \\\n"
"    --prefix=/usr/local/python-3.x.x\n"
"$ make -j8\n"
"$ make altinstall"
msgstr ""

#: ../../using/unix.rst:180
msgid ""
"Patch releases of OpenSSL have a backwards compatible ABI. You don't need to"
" recompile Python to update OpenSSL. It's sufficient to replace the custom "
"OpenSSL installation with a newer version."
msgstr ""
"Патчі OpenSSL мають зворотну сумісність ABI. Вам не потрібно перекомпілювати"
" Python, щоб оновити OpenSSL. Досить замінити спеціальну установку OpenSSL "
"на новішу версію."
