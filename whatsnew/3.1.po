# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Dmytro Kazanzhy, 2022
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-12 16:28+0000\n"
"PO-Revision-Date: 2021-06-29 13:04+0000\n"
"Last-Translator: Dmytro Kazanzhy, 2022\n"
"Language-Team: Ukrainian (https://www.transifex.com/python-doc/teams/5390/"
"uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != "
"11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % "
"100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || "
"(n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

msgid "What's New In Python 3.1"
msgstr "Що нового в Python 3.1"

msgid "Author"
msgstr "Автор"

msgid "Raymond Hettinger"
msgstr "Raymond Hettinger"

msgid ""
"This article explains the new features in Python 3.1, compared to 3.0. "
"Python 3.1 was released on June 27, 2009."
msgstr ""
"У цій статті пояснюється нові функції в Python 3.1 порівняно з 3.0. Python "
"3.1 було випущено 27 червня 2009 року."

msgid "PEP 372: Ordered Dictionaries"
msgstr "PEP 372: Упорядковані словники"

msgid ""
"Regular Python dictionaries iterate over key/value pairs in arbitrary order. "
"Over the years, a number of authors have written alternative implementations "
"that remember the order that the keys were originally inserted.  Based on "
"the experiences from those implementations, a new :class:`collections."
"OrderedDict` class has been introduced."
msgstr ""
"Звичайні словники Python перебирають пари ключ/значення в довільному "
"порядку. Протягом багатьох років кілька авторів написали альтернативні "
"реалізації, які запам’ятовують порядок початкового вставлення ключів. На "
"основі досвіду цих реалізацій було введено новий клас :class:`collections."
"OrderedDict`."

msgid ""
"The OrderedDict API is substantially the same as regular dictionaries but "
"will iterate over keys and values in a guaranteed order depending on when a "
"key was first inserted.  If a new entry overwrites an existing entry, the "
"original insertion position is left unchanged.  Deleting an entry and "
"reinserting it will move it to the end."
msgstr ""
"API OrderedDict практично такий же, як і звичайні словники, але перебиратиме "
"ключі та значення в гарантованому порядку залежно від того, коли ключ було "
"вперше вставлено. Якщо новий запис перезаписує існуючий запис, початкова "
"позиція вставки залишається незмінною. Видалення запису та його повторне "
"вставлення перемістить його в кінець."

msgid ""
"The standard library now supports use of ordered dictionaries in several "
"modules.  The :mod:`configparser` module uses them by default.  This lets "
"configuration files be read, modified, and then written back in their "
"original order.  The *_asdict()* method for :func:`collections.namedtuple` "
"now returns an ordered dictionary with the values appearing in the same "
"order as the underlying tuple indices.  The :mod:`json` module is being "
"built-out with an *object_pairs_hook* to allow OrderedDicts to be built by "
"the decoder. Support was also added for third-party tools like `PyYAML "
"<https://pyyaml.org/>`_."
msgstr ""

msgid ":pep:`372` - Ordered Dictionaries"
msgstr ":pep:`372` - Впорядковані словники"

msgid ""
"PEP written by Armin Ronacher and Raymond Hettinger.  Implementation written "
"by Raymond Hettinger."
msgstr ""
"PEP, автори Армін Роначер і Раймонд Геттінгер. Реалізацію написав Раймонд "
"Хеттінгер."

msgid "PEP 378: Format Specifier for Thousands Separator"
msgstr "PEP 378: Специфікатор формату для розділювача тисяч"

msgid ""
"The built-in :func:`format` function and the :meth:`str.format` method use a "
"mini-language that now includes a simple, non-locale aware way to format a "
"number with a thousands separator.  That provides a way to humanize a "
"program's output, improving its professional appearance and readability::"
msgstr ""
"Вбудована функція :func:`format` і метод :meth:`str.format` використовують "
"міні-мову, яка тепер містить простий спосіб форматування числа з "
"роздільником тисяч, який не залежить від локалі. Це надає спосіб "
"гуманізувати вихідні дані програми, покращуючи її професійний вигляд і "
"читабельність:"

msgid ""
"The supported types are :class:`int`, :class:`float`, :class:`complex` and :"
"class:`decimal.Decimal`."
msgstr ""
"Підтримувані типи: :class:`int`, :class:`float`, :class:`complex` і :class:"
"`decimal.Decimal`."

msgid ""
"Discussions are underway about how to specify alternative separators like "
"dots, spaces, apostrophes, or underscores.  Locale-aware applications should "
"use the existing *n* format specifier which already has some support for "
"thousands separators."
msgstr ""
"Ведуться дискусії про те, як вказати альтернативні роздільники, такі як "
"крапки, пробіли, апострофи або підкреслення. Програми з розпізнаванням "
"локалі повинні використовувати існуючий специфікатор формату *n*, який уже "
"підтримує певну підтримку роздільників тисяч."

msgid ":pep:`378` - Format Specifier for Thousands Separator"
msgstr ":pep:`378` - Специфікатор формату для розділювача тисяч"

msgid ""
"PEP written by Raymond Hettinger and implemented by Eric Smith and Mark "
"Dickinson."
msgstr ""
"PEP, написаний Реймондом Геттінгером і реалізований Еріком Смітом і Марком "
"Дікінсоном."

msgid "Other Language Changes"
msgstr "Інші зміни мови"

msgid "Some smaller changes made to the core Python language are:"
msgstr "Деякі менші зміни, внесені до основної мови Python:"

msgid ""
"Directories and zip archives containing a :file:`__main__.py` file can now "
"be executed directly by passing their name to the interpreter. The directory/"
"zipfile is automatically inserted as the first entry in sys.path.  "
"(Suggestion and initial patch by Andy Chu; revised patch by Phillip J. Eby "
"and Nick Coghlan; :issue:`1739468`.)"
msgstr ""
"Каталоги та zip-архіви, що містять файл :file:`__main__.py`, тепер можна "
"виконувати безпосередньо, передавши їх імена інтерпретатору. Каталог/файл "
"zip автоматично вставляється як перший запис у sys.path. (Пропозиція та "
"початковий патч від Енді Чу; переглянуте патч від Філіпа Дж. Ебі та Ніка "
"Коглана; :issue:`1739468`.)"

msgid ""
"The :func:`int` type gained a ``bit_length`` method that returns the number "
"of bits necessary to represent its argument in binary::"
msgstr ""
"Тип :func:`int` отримав метод ``bit_length``, який повертає кількість бітів, "
"необхідних для представлення свого аргументу в двійковому вигляді::"

msgid ""
"(Contributed by Fredrik Johansson, Victor Stinner, Raymond Hettinger, and "
"Mark Dickinson; :issue:`3439`.)"
msgstr ""
"(Надано Фредріком Йоханссоном, Віктором Стіннером, Реймондом Геттінгером і "
"Марком Дікінсоном; :issue:`3439`.)"

msgid ""
"The fields in :func:`format` strings can now be automatically numbered::"
msgstr ""
"Поля в рядках :func:`format` тепер можуть бути автоматично пронумеровані::"

msgid ""
"Formerly, the string would have required numbered fields such as: ``'Sir {0} "
"of {1}'``."
msgstr ""
"Раніше рядок вимагав пронумерованих полів, таких як: ``'Sir {0} of {1}''``."

msgid "(Contributed by Eric Smith; :issue:`5237`.)"
msgstr "(Надав Ерік Сміт; :issue:`5237`.)"

msgid ""
"The :func:`string.maketrans` function is deprecated and is replaced by new "
"static methods, :meth:`bytes.maketrans` and :meth:`bytearray.maketrans`. "
"This change solves the confusion around which types were supported by the :"
"mod:`string` module. Now, :class:`str`, :class:`bytes`, and :class:"
"`bytearray` each have their own **maketrans** and **translate** methods with "
"intermediate translation tables of the appropriate type."
msgstr ""
"Функція :func:`string.maketrans` є застарілою та замінена новими статичними "
"методами, :meth:`bytes.maketrans` і :meth:`bytearray.maketrans`. Ця зміна "
"вирішує плутанину навколо того, які типи підтримувалися модулем :mod:"
"`string`. Тепер :class:`str`, :class:`bytes` і :class:`bytearray` кожен має "
"власні методи **maketrans** і **translate** із проміжними таблицями "
"перекладу відповідного типу."

msgid "(Contributed by Georg Brandl; :issue:`5675`.)"
msgstr "(Надав Георг Брандл; :issue:`5675`.)"

msgid ""
"The syntax of the :keyword:`with` statement now allows multiple context "
"managers in a single statement::"
msgstr ""
"Синтаксис оператора :keyword:`with` тепер дозволяє використовувати декілька "
"менеджерів контексту в одному операторі:"

msgid ""
"With the new syntax, the :func:`contextlib.nested` function is no longer "
"needed and is now deprecated."
msgstr ""
"З новим синтаксисом функція :func:`contextlib.nested` більше не потрібна, і "
"тепер вона застаріла."

msgid ""
"(Contributed by Georg Brandl and Mattias Brändström; `appspot issue 53094 "
"<https://codereview.appspot.com/53094>`_.)"
msgstr ""
"(Надано Георгом Брандлом і Маттіасом Брендстремом; `appspot issue 53094 "
"<https://codereview.appspot.com/53094>`_.)"

msgid ""
"``round(x, n)`` now returns an integer if *x* is an integer. Previously it "
"returned a float::"
msgstr ""
"``round(x, n)`` тепер повертає ціле число, якщо *x* є цілим числом. Раніше "
"він повертав float::"

msgid "(Contributed by Mark Dickinson; :issue:`4707`.)"
msgstr "(Надав Марк Дікінсон; :issue:`4707`.)"

msgid ""
"Python now uses David Gay's algorithm for finding the shortest floating "
"point representation that doesn't change its value.  This should help "
"mitigate some of the confusion surrounding binary floating point numbers."
msgstr ""
"Тепер Python використовує алгоритм Девіда Гея для пошуку найкоротшого "
"представлення з плаваючою комою, яке не змінює свого значення. Це має "
"допомогти пом’якшити плутанину навколо двійкових чисел з плаваючою комою."

msgid ""
"The significance is easily seen with a number like ``1.1`` which does not "
"have an exact equivalent in binary floating point.  Since there is no exact "
"equivalent, an expression like ``float('1.1')`` evaluates to the nearest "
"representable value which is ``0x1.199999999999ap+0`` in hex or "
"``1.100000000000000088817841970012523233890533447265625`` in decimal. That "
"nearest value was and still is used in subsequent floating point "
"calculations."
msgstr ""
"Значення легко побачити за допомогою числа на зразок ``1,1``, яке не має "
"точного еквівалента в двійковій формі з плаваючою комою. Оскільки немає "
"точного еквівалента, вираз на кшталт ``float('1.1')`` обчислюється до "
"найближчого значення, яке можна представити, яке є ``0x1.199999999999ap+0`` "
"у шістнадцятковому або "
"``1.100000000000000088817841970012523233890533447265625`` в десятковому. Це "
"найближче значення використовувалося і досі використовується в наступних "
"обчисленнях з плаваючою комою."

msgid ""
"What is new is how the number gets displayed.  Formerly, Python used a "
"simple approach.  The value of ``repr(1.1)`` was computed as ``format(1.1, "
"'.17g')`` which evaluated to ``'1.1000000000000001'``. The advantage of "
"using 17 digits was that it relied on IEEE-754 guarantees to assure that "
"``eval(repr(1.1))`` would round-trip exactly to its original value.  The "
"disadvantage is that many people found the output to be confusing (mistaking "
"intrinsic limitations of binary floating point representation as being a "
"problem with Python itself)."
msgstr ""
"Новим є спосіб відображення номера. Раніше Python використовував простий "
"підхід. Значення ``repr(1.1)`` було обчислено як ``format(1.1, '.17g')``, "
"яке оцінювалося як ``'1,1000000000000001''``. Перевага використання 17 цифр "
"полягала в тому, що він покладався на гарантії IEEE-754, щоб гарантувати, що "
"``eval(repr(1.1))`` повертатиме точно до початкового значення. Недоліком є "
"те, що багато людей вважали результат заплутаним (вважаючи, що внутрішні "
"обмеження двійкового представлення з плаваючою комою є проблемою самого "
"Python)."

msgid ""
"The new algorithm for ``repr(1.1)`` is smarter and returns ``'1.1'``. "
"Effectively, it searches all equivalent string representations (ones that "
"get stored with the same underlying float value) and returns the shortest "
"representation."
msgstr ""
"Новий алгоритм для ``repr(1.1)`` розумніший і повертає ``'1.1'``. По суті, "
"він шукає всі еквівалентні представлення рядків (ті, які зберігаються з тим "
"самим базовим значенням з плаваючою точкою) і повертає найкоротше "
"представлення."

msgid ""
"The new algorithm tends to emit cleaner representations when possible, but "
"it does not change the underlying values.  So, it is still the case that "
"``1.1 + 2.2 != 3.3`` even though the representations may suggest otherwise."
msgstr ""
"Новий алгоритм має тенденцію видавати чіткіші представлення, коли це "
"можливо, але він не змінює основні значення. Таким чином, це все ще так, що "
"``1.1 + 2.2 != 3.3``, навіть якщо представлення можуть припускати інше."

msgid ""
"The new algorithm depends on certain features in the underlying floating "
"point implementation.  If the required features are not found, the old "
"algorithm will continue to be used.  Also, the text pickle protocols assure "
"cross-platform portability by using the old algorithm."
msgstr ""
"Новий алгоритм залежить від певних особливостей базової реалізації з "
"плаваючою комою. Якщо потрібні функції не знайдено, продовжуватиме "
"використовуватися старий алгоритм. Крім того, протоколи піклування тексту "
"забезпечують міжплатформну переносимість за допомогою старого алгоритму."

msgid "(Contributed by Eric Smith and Mark Dickinson; :issue:`1580`)"
msgstr "(Надано Еріком Смітом і Марком Дікінсоном; :issue:`1580`)"

msgid "New, Improved, and Deprecated Modules"
msgstr "Нові, покращені та застарілі модулі"

msgid ""
"Added a :class:`collections.Counter` class to support convenient counting of "
"unique items in a sequence or iterable::"
msgstr ""
"Додано клас :class:`collections.Counter` для підтримки зручного підрахунку "
"унікальних елементів у послідовності або ітерації::"

msgid "(Contributed by Raymond Hettinger; :issue:`1696199`.)"
msgstr "(Надав Реймонд Геттінгер; :issue:`1696199`.)"

msgid ""
"Added a new module, :mod:`tkinter.ttk` for access to the Tk themed widget "
"set. The basic idea of ttk is to separate, to the extent possible, the code "
"implementing a widget's behavior from the code implementing its appearance."
msgstr ""
"Додано новий модуль :mod:`tkinter.ttk` для доступу до набору тематичних "
"віджетів Tk. Основна ідея ttk полягає в тому, щоб відокремити, наскільки це "
"можливо, код, що реалізує поведінку віджета, від коду, що реалізує його "
"зовнішній вигляд."

msgid "(Contributed by Guilherme Polo; :issue:`2983`.)"
msgstr "(Надав Гільєрме Поло; :issue:`2983`.)"

msgid ""
"The :class:`gzip.GzipFile` and :class:`bz2.BZ2File` classes now support the "
"context management protocol::"
msgstr ""
"Класи :class:`gzip.GzipFile` і :class:`bz2.BZ2File` тепер підтримують "
"протокол керування контекстом:"

msgid "(Contributed by Antoine Pitrou.)"
msgstr "(Надав Антуан Пітру.)"

msgid ""
"The :mod:`decimal` module now supports methods for creating a decimal object "
"from a binary :class:`float`.  The conversion is exact but can sometimes be "
"surprising::"
msgstr ""
"Модуль :mod:`decimal` тепер підтримує методи для створення десяткового "
"об’єкта з двійкового :class:`float`. Перетворення точне, але іноді може бути "
"несподіваним:"

msgid ""
"The long decimal result shows the actual binary fraction being stored for "
"*1.1*.  The fraction has many digits because *1.1* cannot be exactly "
"represented in binary."
msgstr ""
"Довгий десятковий результат показує фактичний двійковий дріб, який "
"зберігається для *1,1*. Дріб має багато цифр, оскільки *1.1* не може бути "
"точно представлений у двійковому вигляді."

msgid "(Contributed by Raymond Hettinger and Mark Dickinson.)"
msgstr "(Надано Реймондом Геттінгером і Марком Дікінсоном.)"

msgid ""
"The :mod:`itertools` module grew two new functions.  The :func:`itertools."
"combinations_with_replacement` function is one of four for generating "
"combinatorics including permutations and Cartesian products.  The :func:"
"`itertools.compress` function mimics its namesake from APL.  Also, the "
"existing :func:`itertools.count` function now has an optional *step* "
"argument and can accept any type of counting sequence including :class:"
"`fractions.Fraction` and :class:`decimal.Decimal`::"
msgstr ""
"Модуль :mod:`itertools` розширив дві нові функції. Функція :func:`itertools."
"combinations_with_replacement` є однією з чотирьох для створення "
"комбінаторики, включаючи перестановки та декартові добутки. Функція :func:"
"`itertools.compress` імітує свою тезку з APL. Крім того, наявна функція :"
"func:`itertools.count` тепер має додатковий аргумент *step* і може приймати "
"будь-який тип послідовності підрахунку, включаючи :class:`fractions."
"Fraction` і :class:`decimal.Decimal`::"

msgid "(Contributed by Raymond Hettinger.)"
msgstr "(Надав Реймонд Геттінгер.)"

msgid ""
":func:`collections.namedtuple` now supports a keyword argument *rename* "
"which lets invalid fieldnames be automatically converted to positional names "
"in the form _0, _1, etc.  This is useful when the field names are being "
"created by an external source such as a CSV header, SQL field list, or user "
"input::"
msgstr ""
":func:`collections.namedtuple` тепер підтримує аргумент ключового слова "
"*rename*, який дозволяє автоматично перетворювати недійсні назви полів на "
"позиційні імена у формі _0, _1 тощо. Це корисно, коли назви полів "
"створюються зовнішнім джерелом, наприклад як заголовок CSV, список полів SQL "
"або введення користувача::"

msgid "(Contributed by Raymond Hettinger; :issue:`1818`.)"
msgstr "(Надав Раймонд Геттінгер; :issue:`1818`.)"

msgid ""
"The :func:`re.sub`, :func:`re.subn` and :func:`re.split` functions now "
"accept a flags parameter."
msgstr ""
"Функції :func:`re.sub`, :func:`re.subn` і :func:`re.split` тепер приймають "
"параметр flags."

msgid "(Contributed by Gregory Smith.)"
msgstr "(Надав Грегорі Сміт.)"

msgid ""
"The :mod:`logging` module now implements a simple :class:`logging."
"NullHandler` class for applications that are not using logging but are "
"calling library code that does.  Setting-up a null handler will suppress "
"spurious warnings such as \"No handlers could be found for logger foo\"::"
msgstr ""
"Модуль :mod:`logging` тепер реалізує простий клас :class:`logging."
"NullHandler` для програм, які не використовують журналювання, але викликають "
"код бібліотеки, який це робить. Налаштування нульового обробника придушить "
"фальшиві попередження, такі як \"Не вдалося знайти обробників для logger "
"foo\"::"

msgid "(Contributed by Vinay Sajip; :issue:`4384`)."
msgstr "(Надав Віней Саджип; :issue:`4384`)."

msgid ""
"The :mod:`runpy` module which supports the ``-m`` command line switch now "
"supports the execution of packages by looking for and executing a "
"``__main__`` submodule when a package name is supplied."
msgstr ""
"Модуль :mod:`runpy`, який підтримує перемикач командного рядка ``-m``, тепер "
"підтримує виконання пакетів шляхом пошуку та виконання субмодуля "
"``__main__``, коли надається ім’я пакета."

msgid "(Contributed by Andi Vajda; :issue:`4195`.)"
msgstr "(Надав Анді Вайда; :issue:`4195`.)"

msgid ""
"The :mod:`pdb` module can now access and display source code loaded via :mod:"
"`zipimport` (or any other conformant :pep:`302` loader)."
msgstr ""
"Модуль :mod:`pdb` тепер може отримувати доступ і відображати вихідний код, "
"завантажений через :mod:`zipimport` (або будь-який інший відповідний "
"завантажувач :pep:`302`)."

msgid "(Contributed by Alexander Belopolsky; :issue:`4201`.)"
msgstr "(Надав Олександр Бєлопольський; :issue:`4201`.)"

msgid ":class:`functools.partial` objects can now be pickled."
msgstr ":class:`functools.partial` об’єкти тепер можна маринувати."

msgid ""
"(Suggested by Antoine Pitrou and Jesse Noller.  Implemented by Jack "
"Diederich; :issue:`5228`.)"
msgstr ""
"(Запропоновано Антуаном Пітру та Джессі Ноллером. Реалізовано Джеком "
"Дідеріхом; :issue:`5228`.)"

msgid ""
"Add :mod:`pydoc` help topics for symbols so that ``help('@')`` works as "
"expected in the interactive environment."
msgstr ""
"Додайте теми довідки :mod:`pydoc` для символів, щоб ``help('@')`` працював "
"належним чином в інтерактивному середовищі."

msgid "(Contributed by David Laban; :issue:`4739`.)"
msgstr "(Надав Девід Лабан; :issue:`4739`.)"

msgid ""
"The :mod:`unittest` module now supports skipping individual tests or classes "
"of tests. And it supports marking a test as an expected failure, a test that "
"is known to be broken, but shouldn't be counted as a failure on a "
"TestResult::"
msgstr ""
"Модуль :mod:`unittest` тепер підтримує пропуски окремих тестів або класів "
"тестів. І він підтримує позначення тесту як очікуваної невдачі, тесту, який, "
"як відомо, зламаний, але не повинен вважатися невдалим у TestResult::"

msgid ""
"Also, tests for exceptions have been builtout to work with context managers "
"using the :keyword:`with` statement::"
msgstr ""
"Крім того, для роботи з менеджерами контексту за допомогою оператора :"
"keyword:`with`::"

msgid ""
"In addition, several new assertion methods were added including :func:"
"`assertSetEqual`, :func:`assertDictEqual`, :func:"
"`assertDictContainsSubset`, :func:`assertListEqual`, :func:"
"`assertTupleEqual`, :func:`assertSequenceEqual`, :func:"
"`assertRaisesRegexp`, :func:`assertIsNone`, and :func:`assertIsNotNone`."
msgstr ""
"Крім того, було додано кілька нових методів твердження, зокрема :func:"
"`assertSetEqual`, :func:`assertDictEqual`, :func:"
"`assertDictContainsSubset`, :func:`assertListEqual`, :func:"
"`assertTupleEqual`, :func:`assertSequenceEqual`, :func:"
"`assertRaisesRegexp`, :func:`assertIsNone` і :func:`assertIsNotNone`."

msgid "(Contributed by Benjamin Peterson and Antoine Pitrou.)"
msgstr "(Надано Бенджаміном Петерсоном і Антуаном Пітру.)"

msgid ""
"The :mod:`io` module has three new constants for the :meth:`seek` method :"
"data:`SEEK_SET`, :data:`SEEK_CUR`, and :data:`SEEK_END`."
msgstr ""
"Модуль :mod:`io` має три нові константи для методу :meth:`seek` :data:"
"`SEEK_SET`, :data:`SEEK_CUR` і :data:`SEEK_END`."

msgid "The :attr:`sys.version_info` tuple is now a named tuple::"
msgstr "Кортеж :attr:`sys.version_info` тепер є іменованим кортежем::"

msgid "(Contributed by Ross Light; :issue:`4285`.)"
msgstr "(Надав Росс Лайт; :issue:`4285`.)"

msgid "The :mod:`nntplib` and :mod:`imaplib` modules now support IPv6."
msgstr "Модулі :mod:`nntplib` і :mod:`imaplib` тепер підтримують IPv6."

msgid "(Contributed by Derek Morr; :issue:`1655` and :issue:`1664`.)"
msgstr "(Надав Дерек Морр; :issue:`1655` і :issue:`1664`.)"

msgid ""
"The :mod:`pickle` module has been adapted for better interoperability with "
"Python 2.x when used with protocol 2 or lower.  The reorganization of the "
"standard library changed the formal reference for many objects.  For "
"example, ``__builtin__.set`` in Python 2 is called ``builtins.set`` in "
"Python 3. This change confounded efforts to share data between different "
"versions of Python.  But now when protocol 2 or lower is selected, the "
"pickler will automatically use the old Python 2 names for both loading and "
"dumping. This remapping is turned-on by default but can be disabled with the "
"*fix_imports* option::"
msgstr ""
"Модуль :mod:`pickle` було адаптовано для кращої сумісності з Python 2.x при "
"використанні протоколу 2 або нижчого. Реорганізація стандартної бібліотеки "
"змінила формальне посилання для багатьох об'єктів. Наприклад, ``__builtin__."
"set`` у Python 2 називається ``builtins.set`` у Python 3. Ця зміна "
"збентежила спроби обмінюватися даними між різними версіями Python. Але "
"тепер, коли вибрано протокол 2 або нижчий, піклер автоматично "
"використовуватиме старі назви Python 2 як для завантаження, так і для "
"вивантаження. Це перевідображення ввімкнено за замовчуванням, але його можна "
"вимкнути за допомогою опції *fix_imports*::"

msgid ""
"An unfortunate but unavoidable side-effect of this change is that protocol 2 "
"pickles produced by Python 3.1 won't be readable with Python 3.0. The latest "
"pickle protocol, protocol 3, should be used when migrating data between "
"Python 3.x implementations, as it doesn't attempt to remain compatible with "
"Python 2.x."
msgstr ""
"Неприємний, але неминучий побічний ефект цієї зміни полягає в тому, що піклі "
"протоколу 2, створені Python 3.1, не можна буде прочитати з Python 3.0. "
"Найновіший протокол pickle, протокол 3, слід використовувати під час "
"переміщення даних між реалізаціями Python 3.x, оскільки він не намагається "
"зберегти сумісність із Python 2.x."

msgid ""
"(Contributed by Alexandre Vassalotti and Antoine Pitrou, :issue:`6137`.)"
msgstr "(Надано Александром Вассалотті та Антуаном Пітру, :issue:`6137`.)"

msgid ""
"A new module, :mod:`importlib` was added.  It provides a complete, portable, "
"pure Python reference implementation of the :keyword:`import` statement and "
"its counterpart, the :func:`__import__` function.  It represents a "
"substantial step forward in documenting and defining the actions that take "
"place during imports."
msgstr ""
"Додано новий модуль :mod:`importlib`. Він забезпечує повну, портативну, "
"чисту довідкову реалізацію на Python оператора :keyword:`import` і його "
"відповідника, функції :func:`__import__`. Це значний крок вперед у "
"документуванні та визначенні дій, які відбуваються під час імпорту."

msgid "(Contributed by Brett Cannon.)"
msgstr "(Надав Бретт Кеннон.)"

msgid "Optimizations"
msgstr "Оптимізації"

msgid "Major performance enhancements have been added:"
msgstr "Додано основні покращення продуктивності:"

msgid ""
"The new I/O library (as defined in :pep:`3116`) was mostly written in Python "
"and quickly proved to be a problematic bottleneck in Python 3.0. In Python "
"3.1, the I/O library has been entirely rewritten in C and is 2 to 20 times "
"faster depending on the task at hand. The pure Python version is still "
"available for experimentation purposes through the ``_pyio`` module."
msgstr ""
"Нова бібліотека введення-виведення (як визначено в :pep:`3116`) була "
"здебільшого написана на Python і швидко виявилася проблемним вузьким місцем "
"у Python 3.0. У Python 3.1 бібліотеку вводу/виводу було повністю переписано "
"на C і вона працює від 2 до 20 разів швидше залежно від поставленого "
"завдання. Чиста версія Python все ще доступна для експериментальних цілей "
"через модуль ``_pyio``."

msgid "(Contributed by Amaury Forgeot d'Arc and Antoine Pitrou.)"
msgstr "(Надано Аморі Форже д'Арк і Антуаном Пітру.)"

msgid ""
"Added a heuristic so that tuples and dicts containing only untrackable "
"objects are not tracked by the garbage collector. This can reduce the size "
"of collections and therefore the garbage collection overhead on long-running "
"programs, depending on their particular use of datatypes."
msgstr ""
"Додано евристику, щоб кортежі та dicts, що містять лише невідстежувані "
"об’єкти, не відстежувалися збирачем сміття. Це може зменшити розмір колекцій "
"і, отже, накладні витрати на збирання сміття в програмах, що працюють довго, "
"залежно від конкретного використання типів даних."

msgid "(Contributed by Antoine Pitrou, :issue:`4688`.)"
msgstr "(Надав Антуан Пітру, :issue:`4688`.)"

msgid ""
"Enabling a configure option named ``--with-computed-gotos`` on compilers "
"that support it (notably: gcc, SunPro, icc), the bytecode evaluation loop is "
"compiled with a new dispatch mechanism which gives speedups of up to 20%, "
"depending on the system, the compiler, and the benchmark."
msgstr ""
"Увімкнувши параметр конфігурації під назвою ``--with-computed-gotos`` на "
"компіляторах, які його підтримують (зокрема, gcc, SunPro, icc), цикл оцінки "
"байт-коду компілюється з новим механізмом відправки, який забезпечує "
"прискорення до 20% , залежно від системи, компілятора та тесту."

msgid ""
"(Contributed by Antoine Pitrou along with a number of other participants, :"
"issue:`4753`)."
msgstr "(Надано Антуаном Пітру та низкою інших учасників, :issue:`4753`)."

msgid ""
"The decoding of UTF-8, UTF-16 and LATIN-1 is now two to four times faster."
msgstr "Декодування UTF-8, UTF-16 і LATIN-1 тепер у два-чотири рази швидше."

msgid ""
"(Contributed by Antoine Pitrou and Amaury Forgeot d'Arc, :issue:`4868`.)"
msgstr "(Надано Антуаном Пітру та Аморі Форже д'Арк, :issue:`4868`.)"

msgid ""
"The :mod:`json` module now has a C extension to substantially improve its "
"performance.  In addition, the API was modified so that json works only "
"with :class:`str`, not with :class:`bytes`.  That change makes the module "
"closely match the `JSON specification <https://json.org/>`_ which is defined "
"in terms of Unicode."
msgstr ""

msgid ""
"(Contributed by Bob Ippolito and converted to Py3.1 by Antoine Pitrou and "
"Benjamin Peterson; :issue:`4136`.)"
msgstr ""
"(Надано Бобом Іполіто та перетворено на Py3.1 Антуаном Пітру та Бенджаміном "
"Петерсоном; :issue:`4136`.)"

msgid ""
"Unpickling now interns the attribute names of pickled objects.  This saves "
"memory and allows pickles to be smaller."
msgstr ""
"Unpickling тепер інтернує назви атрибутів маринованих об’єктів. Це економить "
"пам’ять і дозволяє зробити солоні огірки меншими."

msgid "(Contributed by Jake McGuire and Antoine Pitrou; :issue:`5084`.)"
msgstr "(Надано Джейком Макгуайром і Антуаном Пітру; :issue:`5084`.)"

msgid "IDLE"
msgstr "ПРОСТОЮЧИЙ"

msgid ""
"IDLE's format menu now provides an option to strip trailing whitespace from "
"a source file."
msgstr ""
"Меню форматування IDLE тепер надає можливість видаляти кінцеві пробіли з "
"вихідного файлу."

msgid "(Contributed by Roger D. Serwy; :issue:`5150`.)"
msgstr "(Надав Роджер Д. Серві; :issue:`5150`.)"

msgid "Build and C API Changes"
msgstr "Зміни збірки та C API"

msgid "Changes to Python's build process and to the C API include:"
msgstr "Зміни в процесі збирання Python і в API C включають:"

msgid ""
"Integers are now stored internally either in base ``2**15`` or in base "
"``2**30``, the base being determined at build time.  Previously, they were "
"always stored in base ``2**15``.  Using base ``2**30`` gives significant "
"performance improvements on 64-bit machines, but benchmark results on 32-bit "
"machines have been mixed.  Therefore, the default is to use base ``2**30`` "
"on 64-bit machines and base ``2**15`` on 32-bit machines; on Unix, there's a "
"new configure option ``--enable-big-digits`` that can be used to override "
"this default."
msgstr ""
"Цілі числа тепер зберігаються внутрішньо або в базі ``2**15``, або в базі "
"``2**30``, причому база визначається під час створення. Раніше вони завжди "
"зберігалися в базі ``2**15``. Використання бази ``2**30`` дає значне "
"покращення продуктивності на 64-розрядних машинах, але результати "
"порівняльного тестування на 32-розрядних машинах були неоднозначними. Тому "
"за замовчуванням на 64-розрядних машинах використовується основа ``2**30`` і "
"основа ``2**15`` на 32-розрядних машинах; в Unix є новий параметр "
"конфігурації ``--enable-big-digits``, який можна використовувати для заміни "
"цього значення за замовчуванням."

msgid ""
"Apart from the performance improvements this change should be invisible to "
"end users, with one exception: for testing and debugging purposes there's a "
"new :attr:`sys.int_info` that provides information about the internal "
"format, giving the number of bits per digit and the size in bytes of the C "
"type used to store each digit::"
msgstr ""
"Окрім підвищення продуктивності, ця зміна має бути непомітною для кінцевих "
"користувачів, за одним винятком: для цілей тестування та налагодження є "
"новий :attr:`sys.int_info`, який надає інформацію про внутрішній формат, "
"надаючи кількість бітів на цифру та розмір у байтах типу C, що "
"використовується для зберігання кожної цифри::"

msgid "(Contributed by Mark Dickinson; :issue:`4258`.)"
msgstr "(Надав Марк Дікінсон; :issue:`4258`.)"

msgid ""
"The :c:func:`PyLong_AsUnsignedLongLong()` function now handles a negative "
"*pylong* by raising :exc:`OverflowError` instead of :exc:`TypeError`."
msgstr ""
"Функція :c:func:`PyLong_AsUnsignedLongLong()` тепер обробляє негативний "
"*pylong*, викликаючи :exc:`OverflowError` замість :exc:`TypeError`."

msgid "(Contributed by Mark Dickinson and Lisandro Dalcrin; :issue:`5175`.)"
msgstr "(Надано Марком Дікінсоном і Лісандро Далкріном; :issue:`5175`.)"

msgid ""
"Deprecated :c:func:`PyNumber_Int`.  Use :c:func:`PyNumber_Long` instead."
msgstr ""
"Застаріле :c:func:`PyNumber_Int`. Натомість використовуйте :c:func:"
"`PyNumber_Long`."

msgid "(Contributed by Mark Dickinson; :issue:`4910`.)"
msgstr "(Надав Марк Дікінсон; :issue:`4910`.)"

msgid ""
"Added a new :c:func:`PyOS_string_to_double` function to replace the "
"deprecated functions :c:func:`PyOS_ascii_strtod` and :c:func:"
"`PyOS_ascii_atof`."
msgstr ""
"Додано нову функцію :c:func:`PyOS_string_to_double` для заміни застарілих "
"функцій :c:func:`PyOS_ascii_strtod` і :c:func:`PyOS_ascii_atof`."

msgid "(Contributed by Mark Dickinson; :issue:`5914`.)"
msgstr "(Надав Марк Дікінсон; :issue:`5914`.)"

msgid ""
"Added :c:type:`PyCapsule` as a replacement for the :c:type:`PyCObject` API. "
"The principal difference is that the new type has a well defined interface "
"for passing typing safety information and a less complicated signature for "
"calling a destructor.  The old type had a problematic API and is now "
"deprecated."
msgstr ""
"Додано :c:type:`PyCapsule` як заміну API :c:type:`PyCObject`. Принципова "
"відмінність полягає в тому, що новий тип має чітко визначений інтерфейс для "
"передачі інформації про безпеку введення та менш складний підпис для виклику "
"деструктора. Старий тип мав проблемний API, і тепер він застарів."

msgid "(Contributed by Larry Hastings; :issue:`5630`.)"
msgstr "(Надав Ларрі Гастінгс; :issue:`5630`.)"

msgid "Porting to Python 3.1"
msgstr "Перенесення на Python 3.1"

msgid ""
"This section lists previously described changes and other bugfixes that may "
"require changes to your code:"
msgstr ""
"У цьому розділі перераховані раніше описані зміни та інші виправлення "
"помилок, які можуть потребувати змін у вашому коді:"

msgid ""
"The new floating point string representations can break existing doctests. "
"For example::"
msgstr ""
"Нові представлення рядків із плаваючою комою можуть порушити існуючі тести "
"документів. Наприклад::"

msgid ""
"The automatic name remapping in the pickle module for protocol 2 or lower "
"can make Python 3.1 pickles unreadable in Python 3.0.  One solution is to "
"use protocol 3.  Another solution is to set the *fix_imports* option to "
"``False``. See the discussion above for more details."
msgstr ""
"Автоматичне перевідображення імен у модулі pickle для протоколу 2 або нижчої "
"версії може зробити pickles Python 3.1 нечитабельними в Python 3.0. Одним із "
"рішень є використання протоколу 3. Іншим рішенням є встановлення опції "
"*fix_imports* на ``False``. Дивіться обговорення вище для отримання "
"додаткової інформації."
