# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Dmytro Kazanzhy, 2022
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-11-19 01:00+0000\n"
"PO-Revision-Date: 2021-06-29 13:04+0000\n"
"Last-Translator: Dmytro Kazanzhy, 2022\n"
"Language-Team: Ukrainian (https://app.transifex.com/python-doc/teams/5390/uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != 11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % 100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || (n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

#: ../../whatsnew/3.1.rst:3
msgid "What's New In Python 3.1"
msgstr "Що нового в Python 3.1"

#: ../../whatsnew/3.1.rst:0
msgid "Author"
msgstr "Автор"

#: ../../whatsnew/3.1.rst:5
msgid "Raymond Hettinger"
msgstr "Raymond Hettinger"

#: ../../whatsnew/3.1.rst:49
msgid ""
"This article explains the new features in Python 3.1, compared to 3.0. "
"Python 3.1 was released on June 27, 2009."
msgstr ""
"У цій статті пояснюється нові функції в Python 3.1 порівняно з 3.0. Python "
"3.1 було випущено 27 червня 2009 року."

#: ../../whatsnew/3.1.rst:54
msgid "PEP 372: Ordered Dictionaries"
msgstr "PEP 372: Упорядковані словники"

#: ../../whatsnew/3.1.rst:56
msgid ""
"Regular Python dictionaries iterate over key/value pairs in arbitrary order."
" Over the years, a number of authors have written alternative "
"implementations that remember the order that the keys were originally "
"inserted.  Based on the experiences from those implementations, a new "
":class:`collections.OrderedDict` class has been introduced."
msgstr ""
"Звичайні словники Python перебирають пари ключ/значення в довільному "
"порядку. Протягом багатьох років кілька авторів написали альтернативні "
"реалізації, які запам’ятовують порядок початкового вставлення ключів. На "
"основі досвіду цих реалізацій було введено новий клас "
":class:`collections.OrderedDict`."

#: ../../whatsnew/3.1.rst:62
msgid ""
"The OrderedDict API is substantially the same as regular dictionaries but "
"will iterate over keys and values in a guaranteed order depending on when a "
"key was first inserted.  If a new entry overwrites an existing entry, the "
"original insertion position is left unchanged.  Deleting an entry and "
"reinserting it will move it to the end."
msgstr ""
"API OrderedDict практично такий же, як і звичайні словники, але перебиратиме"
" ключі та значення в гарантованому порядку залежно від того, коли ключ було "
"вперше вставлено. Якщо новий запис перезаписує існуючий запис, початкова "
"позиція вставки залишається незмінною. Видалення запису та його повторне "
"вставлення перемістить його в кінець."

#: ../../whatsnew/3.1.rst:68
msgid ""
"The standard library now supports use of ordered dictionaries in several "
"modules.  The :mod:`configparser` module uses them by default.  This lets "
"configuration files be read, modified, and then written back in their "
"original order.  The *_asdict()* method for :func:`collections.namedtuple` "
"now returns an ordered dictionary with the values appearing in the same "
"order as the underlying tuple indices.  The :mod:`json` module is being "
"built-out with an *object_pairs_hook* to allow OrderedDicts to be built by "
"the decoder. Support was also added for third-party tools like `PyYAML "
"<https://pyyaml.org/>`_."
msgstr ""

#: ../../whatsnew/3.1.rst:79
msgid ":pep:`372` - Ordered Dictionaries"
msgstr ":pep:`372` - Впорядковані словники"

#: ../../whatsnew/3.1.rst:80
msgid ""
"PEP written by Armin Ronacher and Raymond Hettinger.  Implementation written"
" by Raymond Hettinger."
msgstr ""
"PEP, автори Армін Роначер і Раймонд Геттінгер. Реалізацію написав Раймонд "
"Хеттінгер."

#: ../../whatsnew/3.1.rst:83
msgid ""
"Since an ordered dictionary remembers its insertion order, it can be used in"
" conjunction with sorting to make a sorted dictionary::"
msgstr ""

#: ../../whatsnew/3.1.rst:86
msgid ""
">>> # regular unsorted dictionary\n"
">>> d = {'banana': 3, 'apple':4, 'pear': 1, 'orange': 2}\n"
"\n"
">>> # dictionary sorted by key\n"
">>> OrderedDict(sorted(d.items(), key=lambda t: t[0]))\n"
"OrderedDict([('apple', 4), ('banana', 3), ('orange', 2), ('pear', 1)])\n"
"\n"
">>> # dictionary sorted by value\n"
">>> OrderedDict(sorted(d.items(), key=lambda t: t[1]))\n"
"OrderedDict([('pear', 1), ('orange', 2), ('banana', 3), ('apple', 4)])\n"
"\n"
">>> # dictionary sorted by length of the key string\n"
">>> OrderedDict(sorted(d.items(), key=lambda t: len(t[0])))\n"
"OrderedDict([('pear', 1), ('apple', 4), ('orange', 2), ('banana', 3)])"
msgstr ""

#: ../../whatsnew/3.1.rst:101
msgid ""
"The new sorted dictionaries maintain their sort order when entries are "
"deleted.  But when new keys are added, the keys are appended to the end and "
"the sort is not maintained."
msgstr ""

#: ../../whatsnew/3.1.rst:107
msgid "PEP 378: Format Specifier for Thousands Separator"
msgstr "PEP 378: Специфікатор формату для розділювача тисяч"

#: ../../whatsnew/3.1.rst:109
msgid ""
"The built-in :func:`format` function and the :meth:`str.format` method use a"
" mini-language that now includes a simple, non-locale aware way to format a "
"number with a thousands separator.  That provides a way to humanize a "
"program's output, improving its professional appearance and readability::"
msgstr ""
"Вбудована функція :func:`format` і метод :meth:`str.format` використовують "
"міні-мову, яка тепер містить простий спосіб форматування числа з "
"роздільником тисяч, який не залежить від локалі. Це надає спосіб "
"гуманізувати вихідні дані програми, покращуючи її професійний вигляд і "
"читабельність:"

#: ../../whatsnew/3.1.rst:114
msgid ""
">>> format(1234567, ',d')\n"
"'1,234,567'\n"
">>> format(1234567.89, ',.2f')\n"
"'1,234,567.89'\n"
">>> format(12345.6 + 8901234.12j, ',f')\n"
"'12,345.600000+8,901,234.120000j'\n"
">>> format(Decimal('1234567.89'), ',f')\n"
"'1,234,567.89'"
msgstr ""

#: ../../whatsnew/3.1.rst:123
msgid ""
"The supported types are :class:`int`, :class:`float`, :class:`complex` and "
":class:`decimal.Decimal`."
msgstr ""
"Підтримувані типи: :class:`int`, :class:`float`, :class:`complex` і "
":class:`decimal.Decimal`."

#: ../../whatsnew/3.1.rst:126
msgid ""
"Discussions are underway about how to specify alternative separators like "
"dots, spaces, apostrophes, or underscores.  Locale-aware applications should"
" use the existing *n* format specifier which already has some support for "
"thousands separators."
msgstr ""
"Ведуться дискусії про те, як вказати альтернативні роздільники, такі як "
"крапки, пробіли, апострофи або підкреслення. Програми з розпізнаванням "
"локалі повинні використовувати існуючий специфікатор формату *n*, який уже "
"підтримує певну підтримку роздільників тисяч."

#: ../../whatsnew/3.1.rst:133
msgid ":pep:`378` - Format Specifier for Thousands Separator"
msgstr ":pep:`378` - Специфікатор формату для розділювача тисяч"

#: ../../whatsnew/3.1.rst:134
msgid ""
"PEP written by Raymond Hettinger and implemented by Eric Smith and Mark "
"Dickinson."
msgstr ""
"PEP, написаний Реймондом Геттінгером і реалізований Еріком Смітом і Марком "
"Дікінсоном."

#: ../../whatsnew/3.1.rst:139
msgid "Other Language Changes"
msgstr "Інші зміни мови"

#: ../../whatsnew/3.1.rst:141
msgid "Some smaller changes made to the core Python language are:"
msgstr "Деякі менші зміни, внесені до основної мови Python:"

#: ../../whatsnew/3.1.rst:143
msgid ""
"Directories and zip archives containing a :file:`__main__.py` file can now "
"be executed directly by passing their name to the interpreter. The "
"directory/zipfile is automatically inserted as the first entry in sys.path."
"  (Suggestion and initial patch by Andy Chu; revised patch by Phillip J. Eby"
" and Nick Coghlan; :issue:`1739468`.)"
msgstr ""
"Каталоги та zip-архіви, що містять файл :file:`__main__.py`, тепер можна "
"виконувати безпосередньо, передавши їх імена інтерпретатору. Каталог/файл "
"zip автоматично вставляється як перший запис у sys.path. (Пропозиція та "
"початковий патч від Енді Чу; переглянуте патч від Філіпа Дж. Ебі та Ніка "
"Коглана; :issue:`1739468`.)"

#: ../../whatsnew/3.1.rst:149
msgid ""
"The :func:`int` type gained a ``bit_length`` method that returns the number "
"of bits necessary to represent its argument in binary::"
msgstr ""
"Тип :func:`int` отримав метод ``bit_length``, який повертає кількість бітів,"
" необхідних для представлення свого аргументу в двійковому вигляді::"

#: ../../whatsnew/3.1.rst:152
msgid ""
">>> n = 37\n"
">>> bin(37)\n"
"'0b100101'\n"
">>> n.bit_length()\n"
"6\n"
">>> n = 2**123-1\n"
">>> n.bit_length()\n"
"123\n"
">>> (n+1).bit_length()\n"
"124"
msgstr ""

#: ../../whatsnew/3.1.rst:163
msgid ""
"(Contributed by Fredrik Johansson, Victor Stinner, Raymond Hettinger, and "
"Mark Dickinson; :issue:`3439`.)"
msgstr ""
"(Надано Фредріком Йоханссоном, Віктором Стіннером, Реймондом Геттінгером і "
"Марком Дікінсоном; :issue:`3439`.)"

#: ../../whatsnew/3.1.rst:166
msgid ""
"The fields in :func:`format` strings can now be automatically numbered::"
msgstr ""
"Поля в рядках :func:`format` тепер можуть бути автоматично пронумеровані::"

#: ../../whatsnew/3.1.rst:169
msgid ""
">>> 'Sir {} of {}'.format('Gallahad', 'Camelot')\n"
"'Sir Gallahad of Camelot'"
msgstr ""

#: ../../whatsnew/3.1.rst:172
msgid ""
"Formerly, the string would have required numbered fields such as: ``'Sir {0}"
" of {1}'``."
msgstr ""
"Раніше рядок вимагав пронумерованих полів, таких як: ``'Sir {0} of {1}''``."

#: ../../whatsnew/3.1.rst:175
msgid "(Contributed by Eric Smith; :issue:`5237`.)"
msgstr "(Надав Ерік Сміт; :issue:`5237`.)"

#: ../../whatsnew/3.1.rst:177
msgid ""
"The :func:`!string.maketrans` function is deprecated and is replaced by new "
"static methods, :meth:`bytes.maketrans` and :meth:`bytearray.maketrans`. "
"This change solves the confusion around which types were supported by the "
":mod:`string` module. Now, :class:`str`, :class:`bytes`, and "
":class:`bytearray` each have their own **maketrans** and **translate** "
"methods with intermediate translation tables of the appropriate type."
msgstr ""

#: ../../whatsnew/3.1.rst:184
msgid "(Contributed by Georg Brandl; :issue:`5675`.)"
msgstr "(Надав Георг Брандл; :issue:`5675`.)"

#: ../../whatsnew/3.1.rst:186
msgid ""
"The syntax of the :keyword:`with` statement now allows multiple context "
"managers in a single statement::"
msgstr ""
"Синтаксис оператора :keyword:`with` тепер дозволяє використовувати декілька "
"менеджерів контексту в одному операторі:"

#: ../../whatsnew/3.1.rst:189
msgid ""
">>> with open('mylog.txt') as infile, open('a.out', 'w') as outfile:\n"
"...     for line in infile:\n"
"...         if '<critical>' in line:\n"
"...             outfile.write(line)"
msgstr ""

#: ../../whatsnew/3.1.rst:194
msgid ""
"With the new syntax, the :func:`!contextlib.nested` function is no longer "
"needed and is now deprecated."
msgstr ""

#: ../../whatsnew/3.1.rst:197
msgid ""
"(Contributed by Georg Brandl and Mattias Brändström; `appspot issue 53094 "
"<https://codereview.appspot.com/53094>`_.)"
msgstr ""
"(Надано Георгом Брандлом і Маттіасом Брендстремом; `appspot issue 53094 "
"<https://codereview.appspot.com/53094>`_.)"

#: ../../whatsnew/3.1.rst:200
msgid ""
"``round(x, n)`` now returns an integer if *x* is an integer. Previously it "
"returned a float::"
msgstr ""
"``round(x, n)`` тепер повертає ціле число, якщо *x* є цілим числом. Раніше "
"він повертав float::"

#: ../../whatsnew/3.1.rst:203
msgid ""
">>> round(1123, -2)\n"
"1100"
msgstr ""

#: ../../whatsnew/3.1.rst:206
msgid "(Contributed by Mark Dickinson; :issue:`4707`.)"
msgstr "(Надав Марк Дікінсон; :issue:`4707`.)"

#: ../../whatsnew/3.1.rst:208
msgid ""
"Python now uses David Gay's algorithm for finding the shortest floating-"
"point representation that doesn't change its value.  This should help "
"mitigate some of the confusion surrounding binary floating-point numbers."
msgstr ""

#: ../../whatsnew/3.1.rst:213
msgid ""
"The significance is easily seen with a number like ``1.1`` which does not "
"have an exact equivalent in binary floating point.  Since there is no exact "
"equivalent, an expression like ``float('1.1')`` evaluates to the nearest "
"representable value which is ``0x1.199999999999ap+0`` in hex or "
"``1.100000000000000088817841970012523233890533447265625`` in decimal. That "
"nearest value was and still is used in subsequent floating-point "
"calculations."
msgstr ""

#: ../../whatsnew/3.1.rst:221
msgid ""
"What is new is how the number gets displayed.  Formerly, Python used a "
"simple approach.  The value of ``repr(1.1)`` was computed as ``format(1.1, "
"'.17g')`` which evaluated to ``'1.1000000000000001'``. The advantage of "
"using 17 digits was that it relied on IEEE-754 guarantees to assure that "
"``eval(repr(1.1))`` would round-trip exactly to its original value.  The "
"disadvantage is that many people found the output to be confusing (mistaking"
" intrinsic limitations of binary floating-point representation as being a "
"problem with Python itself)."
msgstr ""

#: ../../whatsnew/3.1.rst:230
msgid ""
"The new algorithm for ``repr(1.1)`` is smarter and returns ``'1.1'``. "
"Effectively, it searches all equivalent string representations (ones that "
"get stored with the same underlying float value) and returns the shortest "
"representation."
msgstr ""
"Новий алгоритм для ``repr(1.1)`` розумніший і повертає ``'1.1'``. По суті, "
"він шукає всі еквівалентні представлення рядків (ті, які зберігаються з тим "
"самим базовим значенням з плаваючою точкою) і повертає найкоротше "
"представлення."

#: ../../whatsnew/3.1.rst:235
msgid ""
"The new algorithm tends to emit cleaner representations when possible, but "
"it does not change the underlying values.  So, it is still the case that "
"``1.1 + 2.2 != 3.3`` even though the representations may suggest otherwise."
msgstr ""
"Новий алгоритм має тенденцію видавати чіткіші представлення, коли це "
"можливо, але він не змінює основні значення. Таким чином, це все ще так, що "
"``1.1 + 2.2 != 3.3``, навіть якщо представлення можуть припускати інше."

#: ../../whatsnew/3.1.rst:239
msgid ""
"The new algorithm depends on certain features in the underlying floating-"
"point implementation.  If the required features are not found, the old "
"algorithm will continue to be used.  Also, the text pickle protocols assure "
"cross-platform portability by using the old algorithm."
msgstr ""

#: ../../whatsnew/3.1.rst:244
msgid "(Contributed by Eric Smith and Mark Dickinson; :issue:`1580`)"
msgstr "(Надано Еріком Смітом і Марком Дікінсоном; :issue:`1580`)"

#: ../../whatsnew/3.1.rst:247
msgid "New, Improved, and Deprecated Modules"
msgstr "Нові, покращені та застарілі модулі"

#: ../../whatsnew/3.1.rst:249
msgid ""
"Added a :class:`collections.Counter` class to support convenient counting of"
" unique items in a sequence or iterable::"
msgstr ""
"Додано клас :class:`collections.Counter` для підтримки зручного підрахунку "
"унікальних елементів у послідовності або ітерації::"

#: ../../whatsnew/3.1.rst:252
msgid ""
">>> Counter(['red', 'blue', 'red', 'green', 'blue', 'blue'])\n"
"Counter({'blue': 3, 'red': 2, 'green': 1})"
msgstr ""

#: ../../whatsnew/3.1.rst:255
msgid "(Contributed by Raymond Hettinger; :issue:`1696199`.)"
msgstr "(Надав Реймонд Геттінгер; :issue:`1696199`.)"

#: ../../whatsnew/3.1.rst:257
msgid ""
"Added a new module, :mod:`tkinter.ttk` for access to the Tk themed widget "
"set. The basic idea of ttk is to separate, to the extent possible, the code "
"implementing a widget's behavior from the code implementing its appearance."
msgstr ""
"Додано новий модуль :mod:`tkinter.ttk` для доступу до набору тематичних "
"віджетів Tk. Основна ідея ttk полягає в тому, щоб відокремити, наскільки це "
"можливо, код, що реалізує поведінку віджета, від коду, що реалізує його "
"зовнішній вигляд."

#: ../../whatsnew/3.1.rst:261
msgid "(Contributed by Guilherme Polo; :issue:`2983`.)"
msgstr "(Надав Гільєрме Поло; :issue:`2983`.)"

#: ../../whatsnew/3.1.rst:263
msgid ""
"The :class:`gzip.GzipFile` and :class:`bz2.BZ2File` classes now support the "
"context management protocol::"
msgstr ""
"Класи :class:`gzip.GzipFile` і :class:`bz2.BZ2File` тепер підтримують "
"протокол керування контекстом:"

#: ../../whatsnew/3.1.rst:266
msgid ""
">>> # Automatically close file after writing\n"
">>> with gzip.GzipFile(filename, \"wb\") as f:\n"
"...     f.write(b\"xxx\")"
msgstr ""

#: ../../whatsnew/3.1.rst:270
msgid "(Contributed by Antoine Pitrou.)"
msgstr "(Надав Антуан Пітру.)"

#: ../../whatsnew/3.1.rst:272
msgid ""
"The :mod:`decimal` module now supports methods for creating a decimal object"
" from a binary :class:`float`.  The conversion is exact but can sometimes be"
" surprising::"
msgstr ""
"Модуль :mod:`decimal` тепер підтримує методи для створення десяткового "
"об’єкта з двійкового :class:`float`. Перетворення точне, але іноді може бути"
" несподіваним:"

#: ../../whatsnew/3.1.rst:276
msgid ""
">>> Decimal.from_float(1.1)\n"
"Decimal('1.100000000000000088817841970012523233890533447265625')"
msgstr ""

#: ../../whatsnew/3.1.rst:279
msgid ""
"The long decimal result shows the actual binary fraction being stored for "
"*1.1*.  The fraction has many digits because *1.1* cannot be exactly "
"represented in binary."
msgstr ""
"Довгий десятковий результат показує фактичний двійковий дріб, який "
"зберігається для *1,1*. Дріб має багато цифр, оскільки *1.1* не може бути "
"точно представлений у двійковому вигляді."

#: ../../whatsnew/3.1.rst:283
msgid "(Contributed by Raymond Hettinger and Mark Dickinson.)"
msgstr "(Надано Реймондом Геттінгером і Марком Дікінсоном.)"

#: ../../whatsnew/3.1.rst:285
msgid ""
"The :mod:`itertools` module grew two new functions.  The "
":func:`itertools.combinations_with_replacement` function is one of four for "
"generating combinatorics including permutations and Cartesian products.  The"
" :func:`itertools.compress` function mimics its namesake from APL.  Also, "
"the existing :func:`itertools.count` function now has an optional *step* "
"argument and can accept any type of counting sequence including "
":class:`fractions.Fraction` and :class:`decimal.Decimal`::"
msgstr ""
"Модуль :mod:`itertools` розширив дві нові функції. Функція "
":func:`itertools.combinations_with_replacement` є однією з чотирьох для "
"створення комбінаторики, включаючи перестановки та декартові добутки. "
"Функція :func:`itertools.compress` імітує свою тезку з APL. Крім того, "
"наявна функція :func:`itertools.count` тепер має додатковий аргумент *step* "
"і може приймати будь-який тип послідовності підрахунку, включаючи "
":class:`fractions.Fraction` і :class:`decimal.Decimal`::"

#: ../../whatsnew/3.1.rst:294
msgid ""
">>> [p+q for p,q in combinations_with_replacement('LOVE', 2)]\n"
"['LL', 'LO', 'LV', 'LE', 'OO', 'OV', 'OE', 'VV', 'VE', 'EE']\n"
"\n"
">>> list(compress(data=range(10), selectors=[0,0,1,1,0,1,0,1,0,0]))\n"
"[2, 3, 5, 7]\n"
"\n"
">>> c = count(start=Fraction(1,2), step=Fraction(1,6))\n"
">>> [next(c), next(c), next(c), next(c)]\n"
"[Fraction(1, 2), Fraction(2, 3), Fraction(5, 6), Fraction(1, 1)]"
msgstr ""

#: ../../whatsnew/3.1.rst:304
msgid "(Contributed by Raymond Hettinger.)"
msgstr "(Надав Реймонд Геттінгер.)"

#: ../../whatsnew/3.1.rst:306
msgid ""
":func:`collections.namedtuple` now supports a keyword argument *rename* "
"which lets invalid fieldnames be automatically converted to positional names"
" in the form _0, _1, etc.  This is useful when the field names are being "
"created by an external source such as a CSV header, SQL field list, or user "
"input::"
msgstr ""
":func:`collections.namedtuple` тепер підтримує аргумент ключового слова "
"*rename*, який дозволяє автоматично перетворювати недійсні назви полів на "
"позиційні імена у формі _0, _1 тощо. Це корисно, коли назви полів "
"створюються зовнішнім джерелом, наприклад як заголовок CSV, список полів SQL"
" або введення користувача::"

#: ../../whatsnew/3.1.rst:312
msgid ""
">>> query = input()\n"
"SELECT region, dept, count(*) FROM main GROUPBY region, dept\n"
"\n"
">>> cursor.execute(query)\n"
">>> query_fields = [desc[0] for desc in cursor.description]\n"
">>> UserQuery = namedtuple('UserQuery', query_fields, rename=True)\n"
">>> pprint.pprint([UserQuery(*row) for row in cursor])\n"
"[UserQuery(region='South', dept='Shipping', _2=185),\n"
" UserQuery(region='North', dept='Accounting', _2=37),\n"
" UserQuery(region='West', dept='Sales', _2=419)]"
msgstr ""

#: ../../whatsnew/3.1.rst:323
msgid "(Contributed by Raymond Hettinger; :issue:`1818`.)"
msgstr "(Надав Раймонд Геттінгер; :issue:`1818`.)"

#: ../../whatsnew/3.1.rst:325
msgid ""
"The :func:`re.sub`, :func:`re.subn` and :func:`re.split` functions now "
"accept a flags parameter."
msgstr ""
"Функції :func:`re.sub`, :func:`re.subn` і :func:`re.split` тепер приймають "
"параметр flags."

#: ../../whatsnew/3.1.rst:328
msgid "(Contributed by Gregory Smith.)"
msgstr "(Надав Грегорі Сміт.)"

#: ../../whatsnew/3.1.rst:330
msgid ""
"The :mod:`logging` module now implements a simple "
":class:`logging.NullHandler` class for applications that are not using "
"logging but are calling library code that does.  Setting-up a null handler "
"will suppress spurious warnings such as \"No handlers could be found for "
"logger foo\"::"
msgstr ""
"Модуль :mod:`logging` тепер реалізує простий клас "
":class:`logging.NullHandler` для програм, які не використовують "
"журналювання, але викликають код бібліотеки, який це робить. Налаштування "
"нульового обробника придушить фальшиві попередження, такі як \"Не вдалося "
"знайти обробників для logger foo\"::"

#: ../../whatsnew/3.1.rst:335
msgid ""
">>> h = logging.NullHandler()\n"
">>> logging.getLogger(\"foo\").addHandler(h)"
msgstr ""

#: ../../whatsnew/3.1.rst:338
msgid "(Contributed by Vinay Sajip; :issue:`4384`)."
msgstr "(Надав Віней Саджип; :issue:`4384`)."

#: ../../whatsnew/3.1.rst:340
msgid ""
"The :mod:`runpy` module which supports the ``-m`` command line switch now "
"supports the execution of packages by looking for and executing a "
"``__main__`` submodule when a package name is supplied."
msgstr ""
"Модуль :mod:`runpy`, який підтримує перемикач командного рядка ``-m``, тепер"
" підтримує виконання пакетів шляхом пошуку та виконання субмодуля "
"``__main__``, коли надається ім’я пакета."

#: ../../whatsnew/3.1.rst:344
msgid "(Contributed by Andi Vajda; :issue:`4195`.)"
msgstr "(Надав Анді Вайда; :issue:`4195`.)"

#: ../../whatsnew/3.1.rst:346
msgid ""
"The :mod:`pdb` module can now access and display source code loaded via "
":mod:`zipimport` (or any other conformant :pep:`302` loader)."
msgstr ""
"Модуль :mod:`pdb` тепер може отримувати доступ і відображати вихідний код, "
"завантажений через :mod:`zipimport` (або будь-який інший відповідний "
"завантажувач :pep:`302`)."

#: ../../whatsnew/3.1.rst:349
msgid "(Contributed by Alexander Belopolsky; :issue:`4201`.)"
msgstr "(Надав Олександр Бєлопольський; :issue:`4201`.)"

#: ../../whatsnew/3.1.rst:351
msgid ":class:`functools.partial` objects can now be pickled."
msgstr ":class:`functools.partial` об’єкти тепер можна маринувати."

#: ../../whatsnew/3.1.rst:353
msgid ""
"(Suggested by Antoine Pitrou and Jesse Noller.  Implemented by Jack "
"Diederich; :issue:`5228`.)"
msgstr ""
"(Запропоновано Антуаном Пітру та Джессі Ноллером. Реалізовано Джеком "
"Дідеріхом; :issue:`5228`.)"

#: ../../whatsnew/3.1.rst:356
msgid ""
"Add :mod:`pydoc` help topics for symbols so that ``help('@')`` works as "
"expected in the interactive environment."
msgstr ""
"Додайте теми довідки :mod:`pydoc` для символів, щоб ``help('@')`` працював "
"належним чином в інтерактивному середовищі."

#: ../../whatsnew/3.1.rst:359
msgid "(Contributed by David Laban; :issue:`4739`.)"
msgstr "(Надав Девід Лабан; :issue:`4739`.)"

#: ../../whatsnew/3.1.rst:361
msgid ""
"The :mod:`unittest` module now supports skipping individual tests or classes"
" of tests. And it supports marking a test as an expected failure, a test "
"that is known to be broken, but shouldn't be counted as a failure on a "
"TestResult::"
msgstr ""
"Модуль :mod:`unittest` тепер підтримує пропуски окремих тестів або класів "
"тестів. І він підтримує позначення тесту як очікуваної невдачі, тесту, який,"
" як відомо, зламаний, але не повинен вважатися невдалим у TestResult::"

#: ../../whatsnew/3.1.rst:366
msgid ""
"class TestGizmo(unittest.TestCase):\n"
"\n"
"    @unittest.skipUnless(sys.platform.startswith(\"win\"), \"requires Windows\")\n"
"    def test_gizmo_on_windows(self):\n"
"        ...\n"
"\n"
"    @unittest.expectedFailure\n"
"    def test_gimzo_without_required_library(self):\n"
"        ..."
msgstr ""

#: ../../whatsnew/3.1.rst:376
msgid ""
"Also, tests for exceptions have been builtout to work with context managers "
"using the :keyword:`with` statement::"
msgstr ""
"Крім того, для роботи з менеджерами контексту за допомогою оператора "
":keyword:`with`::"

#: ../../whatsnew/3.1.rst:379
msgid ""
"def test_division_by_zero(self):\n"
"    with self.assertRaises(ZeroDivisionError):\n"
"        x / 0"
msgstr ""

#: ../../whatsnew/3.1.rst:383
msgid ""
"In addition, several new assertion methods were added including "
":meth:`~unittest.TestCase.assertSetEqual`, "
":meth:`~unittest.TestCase.assertDictEqual`, "
":meth:`!assertDictContainsSubset`, "
":meth:`~unittest.TestCase.assertListEqual`, "
":meth:`~unittest.TestCase.assertTupleEqual`, "
":meth:`~unittest.TestCase.assertSequenceEqual`, :meth:`assertRaisesRegexp() "
"<unittest.TestCase.assertRaisesRegex>`, "
":meth:`~unittest.TestCase.assertIsNone`, and "
":meth:`~unittest.TestCase.assertIsNotNone`."
msgstr ""

#: ../../whatsnew/3.1.rst:394
msgid "(Contributed by Benjamin Peterson and Antoine Pitrou.)"
msgstr "(Надано Бенджаміном Петерсоном і Антуаном Пітру.)"

#: ../../whatsnew/3.1.rst:396
msgid ""
"The :mod:`io` module has three new constants for the :meth:`~io.IOBase.seek`"
" method: :data:`~os.SEEK_SET`, :data:`~os.SEEK_CUR`, and "
":data:`~os.SEEK_END`."
msgstr ""

#: ../../whatsnew/3.1.rst:399
msgid "The :data:`sys.version_info` tuple is now a named tuple::"
msgstr ""

#: ../../whatsnew/3.1.rst:401
msgid ""
">>> sys.version_info\n"
"sys.version_info(major=3, minor=1, micro=0, releaselevel='alpha', serial=2)"
msgstr ""

#: ../../whatsnew/3.1.rst:404
msgid "(Contributed by Ross Light; :issue:`4285`.)"
msgstr "(Надав Росс Лайт; :issue:`4285`.)"

#: ../../whatsnew/3.1.rst:406
msgid "The :mod:`!nntplib` and :mod:`imaplib` modules now support IPv6."
msgstr ""

#: ../../whatsnew/3.1.rst:408
msgid "(Contributed by Derek Morr; :issue:`1655` and :issue:`1664`.)"
msgstr "(Надав Дерек Морр; :issue:`1655` і :issue:`1664`.)"

#: ../../whatsnew/3.1.rst:410
msgid ""
"The :mod:`pickle` module has been adapted for better interoperability with "
"Python 2.x when used with protocol 2 or lower.  The reorganization of the "
"standard library changed the formal reference for many objects.  For "
"example, ``__builtin__.set`` in Python 2 is called ``builtins.set`` in "
"Python 3. This change confounded efforts to share data between different "
"versions of Python.  But now when protocol 2 or lower is selected, the "
"pickler will automatically use the old Python 2 names for both loading and "
"dumping. This remapping is turned-on by default but can be disabled with the"
" *fix_imports* option::"
msgstr ""
"Модуль :mod:`pickle` було адаптовано для кращої сумісності з Python 2.x при "
"використанні протоколу 2 або нижчого. Реорганізація стандартної бібліотеки "
"змінила формальне посилання для багатьох об'єктів. Наприклад, "
"``__builtin__.set`` у Python 2 називається ``builtins.set`` у Python 3. Ця "
"зміна збентежила спроби обмінюватися даними між різними версіями Python. Але"
" тепер, коли вибрано протокол 2 або нижчий, піклер автоматично "
"використовуватиме старі назви Python 2 як для завантаження, так і для "
"вивантаження. Це перевідображення ввімкнено за замовчуванням, але його можна"
" вимкнути за допомогою опції *fix_imports*::"

#: ../../whatsnew/3.1.rst:420
msgid ""
">>> s = {1, 2, 3}\n"
">>> pickle.dumps(s, protocol=0)\n"
"b'c__builtin__\\nset\\np0\\n((lp1\\nL1L\\naL2L\\naL3L\\natp2\\nRp3\\n.'\n"
">>> pickle.dumps(s, protocol=0, fix_imports=False)\n"
"b'cbuiltins\\nset\\np0\\n((lp1\\nL1L\\naL2L\\naL3L\\natp2\\nRp3\\n.'"
msgstr ""

#: ../../whatsnew/3.1.rst:426
msgid ""
"An unfortunate but unavoidable side-effect of this change is that protocol 2"
" pickles produced by Python 3.1 won't be readable with Python 3.0. The "
"latest pickle protocol, protocol 3, should be used when migrating data "
"between Python 3.x implementations, as it doesn't attempt to remain "
"compatible with Python 2.x."
msgstr ""
"Неприємний, але неминучий побічний ефект цієї зміни полягає в тому, що піклі"
" протоколу 2, створені Python 3.1, не можна буде прочитати з Python 3.0. "
"Найновіший протокол pickle, протокол 3, слід використовувати під час "
"переміщення даних між реалізаціями Python 3.x, оскільки він не намагається "
"зберегти сумісність із Python 2.x."

#: ../../whatsnew/3.1.rst:432
msgid ""
"(Contributed by Alexandre Vassalotti and Antoine Pitrou, :issue:`6137`.)"
msgstr "(Надано Александром Вассалотті та Антуаном Пітру, :issue:`6137`.)"

#: ../../whatsnew/3.1.rst:434
msgid ""
"A new module, :mod:`importlib` was added.  It provides a complete, portable,"
" pure Python reference implementation of the :keyword:`import` statement and"
" its counterpart, the :func:`__import__` function.  It represents a "
"substantial step forward in documenting and defining the actions that take "
"place during imports."
msgstr ""
"Додано новий модуль :mod:`importlib`. Він забезпечує повну, портативну, "
"чисту довідкову реалізацію на Python оператора :keyword:`import` і його "
"відповідника, функції :func:`__import__`. Це значний крок вперед у "
"документуванні та визначенні дій, які відбуваються під час імпорту."

#: ../../whatsnew/3.1.rst:440
msgid "(Contributed by Brett Cannon.)"
msgstr "(Надав Бретт Кеннон.)"

#: ../../whatsnew/3.1.rst:443
msgid "Optimizations"
msgstr "Оптимізації"

#: ../../whatsnew/3.1.rst:445
msgid "Major performance enhancements have been added:"
msgstr "Додано основні покращення продуктивності:"

#: ../../whatsnew/3.1.rst:447
msgid ""
"The new I/O library (as defined in :pep:`3116`) was mostly written in Python"
" and quickly proved to be a problematic bottleneck in Python 3.0. In Python "
"3.1, the I/O library has been entirely rewritten in C and is 2 to 20 times "
"faster depending on the task at hand. The pure Python version is still "
"available for experimentation purposes through the ``_pyio`` module."
msgstr ""
"Нова бібліотека введення-виведення (як визначено в :pep:`3116`) була "
"здебільшого написана на Python і швидко виявилася проблемним вузьким місцем "
"у Python 3.0. У Python 3.1 бібліотеку вводу/виводу було повністю переписано "
"на C і вона працює від 2 до 20 разів швидше залежно від поставленого "
"завдання. Чиста версія Python все ще доступна для експериментальних цілей "
"через модуль ``_pyio``."

#: ../../whatsnew/3.1.rst:454
msgid "(Contributed by Amaury Forgeot d'Arc and Antoine Pitrou.)"
msgstr "(Надано Аморі Форже д'Арк і Антуаном Пітру.)"

#: ../../whatsnew/3.1.rst:456
msgid ""
"Added a heuristic so that tuples and dicts containing only untrackable "
"objects are not tracked by the garbage collector. This can reduce the size "
"of collections and therefore the garbage collection overhead on long-running"
" programs, depending on their particular use of datatypes."
msgstr ""
"Додано евристику, щоб кортежі та dicts, що містять лише невідстежувані "
"об’єкти, не відстежувалися збирачем сміття. Це може зменшити розмір колекцій"
" і, отже, накладні витрати на збирання сміття в програмах, що працюють "
"довго, залежно від конкретного використання типів даних."

#: ../../whatsnew/3.1.rst:461
msgid "(Contributed by Antoine Pitrou, :issue:`4688`.)"
msgstr "(Надав Антуан Пітру, :issue:`4688`.)"

#: ../../whatsnew/3.1.rst:463
msgid ""
"Enabling a configure option named ``--with-computed-gotos`` on compilers "
"that support it (notably: gcc, SunPro, icc), the bytecode evaluation loop is"
" compiled with a new dispatch mechanism which gives speedups of up to 20%, "
"depending on the system, the compiler, and the benchmark."
msgstr ""
"Увімкнувши параметр конфігурації під назвою ``--with-computed-gotos`` на "
"компіляторах, які його підтримують (зокрема, gcc, SunPro, icc), цикл оцінки "
"байт-коду компілюється з новим механізмом відправки, який забезпечує "
"прискорення до 20% , залежно від системи, компілятора та тесту."

#: ../../whatsnew/3.1.rst:469
msgid ""
"(Contributed by Antoine Pitrou along with a number of other participants, "
":issue:`4753`)."
msgstr "(Надано Антуаном Пітру та низкою інших учасників, :issue:`4753`)."

#: ../../whatsnew/3.1.rst:472
msgid ""
"The decoding of UTF-8, UTF-16 and LATIN-1 is now two to four times faster."
msgstr "Декодування UTF-8, UTF-16 і LATIN-1 тепер у два-чотири рази швидше."

#: ../../whatsnew/3.1.rst:475
msgid ""
"(Contributed by Antoine Pitrou and Amaury Forgeot d'Arc, :issue:`4868`.)"
msgstr "(Надано Антуаном Пітру та Аморі Форже д'Арк, :issue:`4868`.)"

#: ../../whatsnew/3.1.rst:477
msgid ""
"The :mod:`json` module now has a C extension to substantially improve its "
"performance.  In addition, the API was modified so that json works only with"
" :class:`str`, not with :class:`bytes`.  That change makes the module "
"closely match the `JSON specification <https://json.org/>`_ which is defined"
" in terms of Unicode."
msgstr ""

#: ../../whatsnew/3.1.rst:483
msgid ""
"(Contributed by Bob Ippolito and converted to Py3.1 by Antoine Pitrou and "
"Benjamin Peterson; :issue:`4136`.)"
msgstr ""
"(Надано Бобом Іполіто та перетворено на Py3.1 Антуаном Пітру та Бенджаміном "
"Петерсоном; :issue:`4136`.)"

#: ../../whatsnew/3.1.rst:486
msgid ""
"Unpickling now interns the attribute names of pickled objects.  This saves "
"memory and allows pickles to be smaller."
msgstr ""
"Unpickling тепер інтернує назви атрибутів маринованих об’єктів. Це економить"
" пам’ять і дозволяє зробити солоні огірки меншими."

#: ../../whatsnew/3.1.rst:489
msgid "(Contributed by Jake McGuire and Antoine Pitrou; :issue:`5084`.)"
msgstr "(Надано Джейком Макгуайром і Антуаном Пітру; :issue:`5084`.)"

#: ../../whatsnew/3.1.rst:492
msgid "IDLE"
msgstr "ПРОСТОЮЧИЙ"

#: ../../whatsnew/3.1.rst:494
msgid ""
"IDLE's format menu now provides an option to strip trailing whitespace from "
"a source file."
msgstr ""
"Меню форматування IDLE тепер надає можливість видаляти кінцеві пробіли з "
"вихідного файлу."

#: ../../whatsnew/3.1.rst:497
msgid "(Contributed by Roger D. Serwy; :issue:`5150`.)"
msgstr "(Надав Роджер Д. Серві; :issue:`5150`.)"

#: ../../whatsnew/3.1.rst:500
msgid "Build and C API Changes"
msgstr "Зміни збірки та C API"

#: ../../whatsnew/3.1.rst:502
msgid "Changes to Python's build process and to the C API include:"
msgstr "Зміни в процесі збирання Python і в API C включають:"

#: ../../whatsnew/3.1.rst:504
msgid ""
"Integers are now stored internally either in base ``2**15`` or in base "
"``2**30``, the base being determined at build time.  Previously, they were "
"always stored in base ``2**15``.  Using base ``2**30`` gives significant "
"performance improvements on 64-bit machines, but benchmark results on 32-bit"
" machines have been mixed.  Therefore, the default is to use base ``2**30`` "
"on 64-bit machines and base ``2**15`` on 32-bit machines; on Unix, there's a"
" new configure option ``--enable-big-digits`` that can be used to override "
"this default."
msgstr ""
"Цілі числа тепер зберігаються внутрішньо або в базі ``2**15``, або в базі "
"``2**30``, причому база визначається під час створення. Раніше вони завжди "
"зберігалися в базі ``2**15``. Використання бази ``2**30`` дає значне "
"покращення продуктивності на 64-розрядних машинах, але результати "
"порівняльного тестування на 32-розрядних машинах були неоднозначними. Тому "
"за замовчуванням на 64-розрядних машинах використовується основа ``2**30`` і"
" основа ``2**15`` на 32-розрядних машинах; в Unix є новий параметр "
"конфігурації ``--enable-big-digits``, який можна використовувати для заміни "
"цього значення за замовчуванням."

#: ../../whatsnew/3.1.rst:513
msgid ""
"Apart from the performance improvements this change should be invisible to "
"end users, with one exception: for testing and debugging purposes there's a "
"new :data:`sys.int_info` that provides information about the internal "
"format, giving the number of bits per digit and the size in bytes of the C "
"type used to store each digit::"
msgstr ""

#: ../../whatsnew/3.1.rst:519
msgid ""
">>> import sys\n"
">>> sys.int_info\n"
"sys.int_info(bits_per_digit=30, sizeof_digit=4)"
msgstr ""

#: ../../whatsnew/3.1.rst:523
msgid "(Contributed by Mark Dickinson; :issue:`4258`.)"
msgstr "(Надав Марк Дікінсон; :issue:`4258`.)"

#: ../../whatsnew/3.1.rst:525
msgid ""
"The :c:func:`PyLong_AsUnsignedLongLong()` function now handles a negative "
"*pylong* by raising :exc:`OverflowError` instead of :exc:`TypeError`."
msgstr ""
"Функція :c:func:`PyLong_AsUnsignedLongLong()` тепер обробляє негативний "
"*pylong*, викликаючи :exc:`OverflowError` замість :exc:`TypeError`."

#: ../../whatsnew/3.1.rst:528
msgid "(Contributed by Mark Dickinson and Lisandro Dalcrin; :issue:`5175`.)"
msgstr "(Надано Марком Дікінсоном і Лісандро Далкріном; :issue:`5175`.)"

#: ../../whatsnew/3.1.rst:530
msgid ""
"Deprecated :c:func:`!PyNumber_Int`.  Use :c:func:`PyNumber_Long` instead."
msgstr ""

#: ../../whatsnew/3.1.rst:532
msgid "(Contributed by Mark Dickinson; :issue:`4910`.)"
msgstr "(Надав Марк Дікінсон; :issue:`4910`.)"

#: ../../whatsnew/3.1.rst:534
msgid ""
"Added a new :c:func:`PyOS_string_to_double` function to replace the "
"deprecated functions :c:func:`!PyOS_ascii_strtod` and "
":c:func:`!PyOS_ascii_atof`."
msgstr ""

#: ../../whatsnew/3.1.rst:537
msgid "(Contributed by Mark Dickinson; :issue:`5914`.)"
msgstr "(Надав Марк Дікінсон; :issue:`5914`.)"

#: ../../whatsnew/3.1.rst:539
msgid ""
"Added :c:type:`PyCapsule` as a replacement for the :c:type:`!PyCObject` API."
" The principal difference is that the new type has a well defined interface "
"for passing typing safety information and a less complicated signature for "
"calling a destructor.  The old type had a problematic API and is now "
"deprecated."
msgstr ""

#: ../../whatsnew/3.1.rst:545
msgid "(Contributed by Larry Hastings; :issue:`5630`.)"
msgstr "(Надав Ларрі Гастінгс; :issue:`5630`.)"

#: ../../whatsnew/3.1.rst:548
msgid "Porting to Python 3.1"
msgstr "Перенесення на Python 3.1"

#: ../../whatsnew/3.1.rst:550
msgid ""
"This section lists previously described changes and other bugfixes that may "
"require changes to your code:"
msgstr ""
"У цьому розділі перераховані раніше описані зміни та інші виправлення "
"помилок, які можуть потребувати змін у вашому коді:"

#: ../../whatsnew/3.1.rst:553
msgid ""
"The new floating-point string representations can break existing doctests. "
"For example::"
msgstr ""

#: ../../whatsnew/3.1.rst:556
msgid ""
"def e():\n"
"    '''Compute the base of natural logarithms.\n"
"\n"
"    >>> e()\n"
"    2.7182818284590451\n"
"\n"
"    '''\n"
"    return sum(1/math.factorial(x) for x in reversed(range(30)))\n"
"\n"
"doctest.testmod()\n"
"\n"
"**********************************************************************\n"
"Failed example:\n"
"    e()\n"
"Expected:\n"
"    2.7182818284590451\n"
"Got:\n"
"    2.718281828459045\n"
"**********************************************************************"
msgstr ""

#: ../../whatsnew/3.1.rst:576
msgid ""
"The automatic name remapping in the pickle module for protocol 2 or lower "
"can make Python 3.1 pickles unreadable in Python 3.0.  One solution is to "
"use protocol 3.  Another solution is to set the *fix_imports* option to "
"``False``. See the discussion above for more details."
msgstr ""
"Автоматичне перевідображення імен у модулі pickle для протоколу 2 або нижчої"
" версії може зробити pickles Python 3.1 нечитабельними в Python 3.0. Одним "
"із рішень є використання протоколу 3. Іншим рішенням є встановлення опції "
"*fix_imports* на ``False``. Дивіться обговорення вище для отримання "
"додаткової інформації."
