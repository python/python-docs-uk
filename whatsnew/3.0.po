# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Dmytro Kazanzhy, 2022
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-12 16:28+0000\n"
"PO-Revision-Date: 2021-06-29 13:04+0000\n"
"Last-Translator: Dmytro Kazanzhy, 2022\n"
"Language-Team: Ukrainian (https://www.transifex.com/python-doc/teams/5390/"
"uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != "
"11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % "
"100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || "
"(n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

msgid "What's New In Python 3.0"
msgstr "Що нового в Python 3.0"

msgid "Author"
msgstr "Автор"

msgid "Guido van Rossum"
msgstr "Guido van Rossum"

msgid ""
"This article explains the new features in Python 3.0, compared to 2.6. "
"Python 3.0, also known as \"Python 3000\" or \"Py3K\", is the first ever "
"*intentionally backwards incompatible* Python release. Python 3.0 was "
"released on December 3, 2008. There are more changes than in a typical "
"release, and more that are important for all Python users. Nevertheless, "
"after digesting the changes, you'll find that Python really hasn't changed "
"all that much -- by and large, we're mostly fixing well-known annoyances and "
"warts, and removing a lot of old cruft."
msgstr ""
"У цій статті пояснюється нові функції в Python 3.0 порівняно з 2.6. Python "
"3.0, також відомий як \"Python 3000\" або \"Py3K\", є першим випуском Python "
"*навмисно зворотно несумісним*. Python 3.0 було випущено 3 грудня 2008 року. "
"Є більше змін, ніж у типовому випуску, і більше, що є важливим для всіх "
"користувачів Python. Проте, проаналізувавши зміни, ви побачите, що Python "
"справді не дуже змінився — загалом, ми здебільшого виправляємо добре відомі "
"недоліки та бородавки, а також видаляємо багато старих недоліків."

msgid ""
"This article doesn't attempt to provide a complete specification of all new "
"features, but instead tries to give a convenient overview. For full details, "
"you should refer to the documentation for Python 3.0, and/or the many PEPs "
"referenced in the text. If you want to understand the complete "
"implementation and design rationale for a particular feature, PEPs usually "
"have more details than the regular documentation; but note that PEPs usually "
"are not kept up-to-date once a feature has been fully implemented."
msgstr ""
"Ця стаття не намагається надати повну специфікацію всіх нових функцій, а "
"натомість намагається дати зручний огляд. Щоб отримати повну інформацію, "
"зверніться до документації для Python 3.0 та/або багатьох PEP, на які "
"посилаються в тексті. Якщо ви хочете зрозуміти повну реалізацію та "
"обґрунтування розробки певної функції, PEP зазвичай містять більше деталей, "
"ніж звичайна документація; але зауважте, що PEP зазвичай не оновлюються "
"після повного впровадження функції."

msgid ""
"Due to time constraints this document is not as complete as it should have "
"been.  As always for a new release, the ``Misc/NEWS`` file in the source "
"distribution contains a wealth of detailed information about every small "
"thing that was changed."
msgstr ""
"Через обмеження часу цей документ не такий повний, як мав би бути. Як завжди "
"для нових випусків, файл ``Misc/NEWS`` у вихідному дистрибутиві містить "
"велику кількість детальної інформації про кожну дрібницю, яку було змінено."

msgid "Common Stumbling Blocks"
msgstr "Поширені камені спотикання"

msgid ""
"This section lists those few changes that are most likely to trip you up if "
"you're used to Python 2.5."
msgstr ""
"У цьому розділі перераховано ті кілька змін, які, швидше за все, вас "
"збентежать, якщо ви звикли до Python 2.5."

msgid "Print Is A Function"
msgstr "Друк — це функція"

msgid ""
"The ``print`` statement has been replaced with a :func:`print` function, "
"with keyword arguments to replace most of the special syntax of the old "
"``print`` statement (:pep:`3105`).  Examples::"
msgstr ""
"Інструкцію ``print`` було замінено функцією :func:`print` із ключовими "
"аргументами для заміни більшості спеціального синтаксису старого "
"``інструкції ``print`` (:pep:`3105`). Приклади::"

msgid "You can also customize the separator between items, e.g.::"
msgstr "Ви також можете налаштувати роздільник між елементами, наприклад::"

msgid "which produces:"
msgstr "який виробляє:"

msgid "Note:"
msgstr "Примітка:"

msgid ""
"The :func:`print` function doesn't support the \"softspace\" feature of the "
"old ``print`` statement.  For example, in Python 2.x, ``print \"A\\n\", "
"\"B\"`` would write ``\"A\\nB\\n\"``; but in Python 3.0, ``print(\"A\\n\", "
"\"B\")`` writes ``\"A\\n B\\n\"``."
msgstr ""
"Функція :func:`print` не підтримує функцію \"softspace\" старого оператора "
"``print``. Наприклад, у Python 2.x ``print \"A\\n\", \"B\"`` буде писати "
"``\"A\\nB\\n\"``; але в Python 3.0 ``print(\"A\\n\", \"B\")`` пише ``\"A\\n "
"B\\n\"``."

msgid ""
"Initially, you'll be finding yourself typing the old ``print x`` a lot in "
"interactive mode.  Time to retrain your fingers to type ``print(x)`` instead!"
msgstr ""
"Спочатку вам доведеться часто в інтерактивному режимі вводити старий ``print "
"x``. Час перенавчити свої пальці вводити ``print(x)`` замість цього!"

msgid ""
"When using the ``2to3`` source-to-source conversion tool, all ``print`` "
"statements are automatically converted to :func:`print` function calls, so "
"this is mostly a non-issue for larger projects."
msgstr ""
"Під час використання інструменту перетворення джерела в джерело ``2to3`` усі "
"оператори ``print`` автоматично перетворюються на виклики функцій :func:"
"`print`, тому це здебільшого не є проблемою для великих проектів."

msgid "Views And Iterators Instead Of Lists"
msgstr "Перегляди та ітератори замість списків"

msgid "Some well-known APIs no longer return lists:"
msgstr "Деякі відомі API більше не повертають списки:"

msgid ""
":class:`dict` methods :meth:`dict.keys`, :meth:`dict.items` and :meth:`dict."
"values` return \"views\" instead of lists.  For example, this no longer "
"works: ``k = d.keys(); k.sort()``.  Use ``k = sorted(d)`` instead (this "
"works in Python 2.5 too and is just as efficient)."
msgstr ""
"Методи :class:`dict` :meth:`dict.keys`, :meth:`dict.items` і :meth:`dict."
"values` повертають \"перегляди\" замість списків. Наприклад, це більше не "
"працює: ``k = d.keys(); k.sort()``. Замість цього використовуйте ``k = "
"sorted(d)`` (це також працює в Python 2.5 і є таким же ефективним)."

msgid ""
"Also, the :meth:`dict.iterkeys`, :meth:`dict.iteritems` and :meth:`dict."
"itervalues` methods are no longer supported."
msgstr ""
"Крім того, методи :meth:`dict.iterkeys`, :meth:`dict.iteritems` і :meth:"
"`dict.itervalues` більше не підтримуються."

msgid ""
":func:`map` and :func:`filter` return iterators.  If you really need a list "
"and the input sequences are all of equal length, a quick fix is to wrap :"
"func:`map` in :func:`list`, e.g. ``list(map(...))``, but a better fix is "
"often to use a list comprehension (especially when the original code uses :"
"keyword:`lambda`), or rewriting the code so it doesn't need a list at all.  "
"Particularly tricky is :func:`map` invoked for the side effects of the "
"function; the correct transformation is to use a regular :keyword:`for` loop "
"(since creating a list would just be wasteful)."
msgstr ""
":func:`map` і :func:`filter` повертають ітератори. Якщо вам справді потрібен "
"список і всі вхідні послідовності мають однакову довжину, швидким "
"виправленням є обернути :func:`map` у :func:`list`, наприклад. "
"``list(map(...))``, але кращим виправленням часто є використання розуміння "
"списку (особливо, коли вихідний код використовує :keyword:`lambda`), або "
"переписування коду, щоб він не потребував взагалі список. Особливо складним "
"є виклик :func:`map` для побічних ефектів функції; правильним перетворенням "
"є використання звичайного циклу :keyword:`for` (оскільки створення списку "
"буде марнотратним)."

msgid ""
"If the input sequences are not of equal length, :func:`map` will stop at the "
"termination of the shortest of the sequences. For full compatibility with :"
"func:`map` from Python 2.x, also wrap the sequences in :func:`itertools."
"zip_longest`, e.g. ``map(func, *sequences)`` becomes ``list(map(func, "
"itertools.zip_longest(*sequences)))``."
msgstr ""
"Якщо вхідні послідовності не мають однакову довжину, :func:`map` зупиниться "
"на кінці найкоротшої послідовності. Для повної сумісності з :func:`map` з "
"Python 2.x також оберніть послідовності в :func:`itertools.zip_longest`, "
"наприклад. ``map(func, *sequences)`` стає ``list(map(func, itertools."
"zip_longest(*sequences)))``."

msgid ""
":func:`range` now behaves like :func:`xrange` used to behave, except it "
"works with values of arbitrary size.  The latter no longer exists."
msgstr ""
":func:`range` тепер поводиться як :func:`xrange`, за винятком того, що він "
"працює зі значеннями довільного розміру. Останнього вже не існує."

msgid ":func:`zip` now returns an iterator."
msgstr ":func:`zip` тепер повертає ітератор."

msgid "Ordering Comparisons"
msgstr "Упорядкування порівнянь"

msgid "Python 3.0 has simplified the rules for ordering comparisons:"
msgstr "Python 3.0 спростив правила впорядкування порівнянь:"

msgid ""
"The ordering comparison operators (``<``, ``<=``, ``>=``, ``>``) raise a "
"TypeError exception when the operands don't have a meaningful natural "
"ordering.  Thus, expressions like ``1 < ''``, ``0 > None`` or ``len <= len`` "
"are no longer valid, and e.g. ``None < None`` raises :exc:`TypeError` "
"instead of returning ``False``.  A corollary is that sorting a heterogeneous "
"list no longer makes sense -- all the elements must be comparable to each "
"other.  Note that this does not apply to the ``==`` and ``!=`` operators: "
"objects of different incomparable types always compare unequal to each other."
msgstr ""
"Оператори порівняння порядку (``<``, ``<=``, ``> =``, ``>``) викликають "
"виняток TypeError, коли операнди не мають значущого природного порядку. "
"Таким чином, такі вирази, як ``1 < ''``, ``0 > None`` або ``len <= len`` "
"більше не є дійсними, і, наприклад, ``None < None`` викликає :exc:"
"`TypeError` замість повернення ``False``. Як наслідок, сортування "
"гетерогенного списку більше не має сенсу — усі елементи мають бути "
"порівнюваними між собою. Зауважте, що це не стосується операторів ``==`` і "
"``!=``: об’єкти різних непорівнюваних типів завжди порівнюються нерівномірно."

msgid ""
":meth:`builtin.sorted` and :meth:`list.sort` no longer accept the *cmp* "
"argument providing a comparison function.  Use the *key* argument instead. N."
"B. the *key* and *reverse* arguments are now \"keyword-only\"."
msgstr ""
":meth:`builtin.sorted` і :meth:`list.sort` більше не приймають аргумент "
"*cmp*, що забезпечує функцію порівняння. Замість цього використовуйте "
"аргумент *key*. N.B. аргументи *key* і *reverse* тепер є \"лише ключовими "
"словами\"."

msgid ""
"The :func:`cmp` function should be treated as gone, and the :meth:`__cmp__` "
"special method is no longer supported.  Use :meth:`__lt__` for sorting, :"
"meth:`__eq__` with :meth:`__hash__`, and other rich comparisons as needed. "
"(If you really need the :func:`cmp` functionality, you could use the "
"expression ``(a > b) - (a < b)`` as the equivalent for ``cmp(a, b)``.)"
msgstr ""
"Функцію :func:`cmp` слід розглядати як зниклу, а спеціальний метод :meth:"
"`__cmp__` більше не підтримується. Використовуйте :meth:`__lt__` для "
"сортування, :meth:`__eq__` з :meth:`__hash__` та інші детальні порівняння за "
"потреби. (Якщо вам справді потрібна функція :func:`cmp`, ви можете "
"використати вираз ``(a > b) - (a < b)`` як еквівалент ``cmp(a, b)``.)"

msgid "Integers"
msgstr "Цілі числа"

msgid ""
":pep:`237`: Essentially, :class:`long` renamed to :class:`int`. That is, "
"there is only one built-in integral type, named :class:`int`; but it behaves "
"mostly like the old :class:`long` type."
msgstr ""
":pep:`237`: По суті, :class:`long` перейменовано на :class:`int`. Тобто, "
"існує лише один вбудований інтегральний тип з назвою :class:`int`; але він "
"поводиться здебільшого як старий тип :class:`long`."

msgid ""
":pep:`238`: An expression like ``1/2`` returns a float.  Use ``1//2`` to get "
"the truncating behavior.  (The latter syntax has existed for years, at least "
"since Python 2.2.)"
msgstr ""
":pep:`238`: Вираз на кшталт ``1/2`` повертає число з плаваючою точкою. "
"Використовуйте ``1//2``, щоб отримати режим скорочення. (Останній синтаксис "
"існував роками, принаймні з Python 2.2.)"

msgid ""
"The :data:`sys.maxint` constant was removed, since there is no longer a "
"limit to the value of integers.  However, :data:`sys.maxsize` can be used as "
"an integer larger than any practical list or string index.  It conforms to "
"the implementation's \"natural\" integer size and is typically the same as :"
"data:`sys.maxint` in previous releases on the same platform (assuming the "
"same build options)."
msgstr ""
"Константу :data:`sys.maxint` було видалено, оскільки більше немає обмежень "
"на значення цілих чисел. Однак :data:`sys.maxsize` можна використовувати як "
"ціле число, більше за будь-який практичний список або рядковий індекс. Він "
"відповідає \"природному\" цілочисельному розміру реалізації та зазвичай "
"такий самий, як :data:`sys.maxint` у попередніх випусках на тій самій "
"платформі (припускаючи ті самі параметри збірки)."

msgid ""
"The :func:`repr` of a long integer doesn't include the trailing ``L`` "
"anymore, so code that unconditionally strips that character will chop off "
"the last digit instead.  (Use :func:`str` instead.)"
msgstr ""
":func:`repr` довгого цілого числа більше не включає завершальний ``L``, тому "
"код, який беззастережно видаляє цей символ, замість цього відсікає останню "
"цифру. (Натомість використовуйте :func:`str`.)"

msgid ""
"Octal literals are no longer of the form ``0720``; use ``0o720`` instead."
msgstr ""
"Вісімкові літерали більше не мають форми ``0720``; замість цього "
"використовуйте ``0o720``."

msgid "Text Vs. Data Instead Of Unicode Vs. 8-bit"
msgstr "Текст Vs. Дані замість Unicode Vs. 8-бітний"

msgid ""
"Everything you thought you knew about binary data and Unicode has changed."
msgstr "Усе, що ви думали знати про двійкові дані та Юнікод, змінилося."

msgid ""
"Python 3.0 uses the concepts of *text* and (binary) *data* instead of "
"Unicode strings and 8-bit strings.  All text is Unicode; however *encoded* "
"Unicode is represented as binary data.  The type used to hold text is :class:"
"`str`, the type used to hold data is :class:`bytes`.  The biggest difference "
"with the 2.x situation is that any attempt to mix text and data in Python "
"3.0 raises :exc:`TypeError`, whereas if you were to mix Unicode and 8-bit "
"strings in Python 2.x, it would work if the 8-bit string happened to contain "
"only 7-bit (ASCII) bytes, but you would get :exc:`UnicodeDecodeError` if it "
"contained non-ASCII values.  This value-specific behavior has caused "
"numerous sad faces over the years."
msgstr ""
"Python 3.0 використовує поняття *текст* і (двійкові) *дані* замість рядків "
"Unicode і 8-бітних рядків. Весь текст є Unicode; однак *закодований* Unicode "
"представлений як двійкові дані. Для зберігання тексту використовується тип :"
"class:`str`, а для зберігання даних — :class:`bytes`. Найбільша відмінність "
"із ситуацією 2.x полягає в тому, що будь-яка спроба змішати текст і дані в "
"Python 3.0 викликає :exc:`TypeError`, тоді як якби ви змішали Unicode та 8-"
"бітні рядки в Python 2.x, це спрацювало б якщо 8-бітний рядок містив лише 7-"
"бітні (ASCII) байти, але ви отримаєте :exc:`UnicodeDecodeError`, якщо він "
"містив значення, відмінні від ASCII. Ця ціннісна поведінка викликала багато "
"сумних облич протягом багатьох років."

msgid ""
"As a consequence of this change in philosophy, pretty much all code that "
"uses Unicode, encodings or binary data most likely has to change.  The "
"change is for the better, as in the 2.x world there were numerous bugs "
"having to do with mixing encoded and unencoded text.  To be prepared in "
"Python 2.x, start using :class:`unicode` for all unencoded text, and :class:"
"`str` for binary or encoded data only.  Then the ``2to3`` tool will do most "
"of the work for you."
msgstr ""
"Як наслідок цієї зміни у філософії, майже весь код, який використовує "
"Unicode, кодування або двійкові дані, швидше за все, має змінитися. Зміна на "
"краще, оскільки у світі 2.x було багато помилок, пов’язаних зі змішуванням "
"кодованого та незакодованого тексту. Щоб підготуватися до Python 2.x, "
"почніть використовувати :class:`unicode` для всього незакодованого тексту "
"та :class:`str` лише для двійкових або закодованих даних. Тоді інструмент "
"``2to3`` зробить більшу частину роботи за вас."

msgid ""
"You can no longer use ``u\"...\"`` literals for Unicode text. However, you "
"must use ``b\"...\"`` literals for binary data."
msgstr ""
"Ви більше не можете використовувати літерали ``u\"...\"`` для тексту "
"Unicode. Однак ви повинні використовувати літерали ``b\"...\"`` для "
"двійкових даних."

msgid ""
"As the :class:`str` and :class:`bytes` types cannot be mixed, you must "
"always explicitly convert between them.  Use :meth:`str.encode` to go from :"
"class:`str` to :class:`bytes`, and :meth:`bytes.decode` to go from :class:"
"`bytes` to :class:`str`.  You can also use ``bytes(s, encoding=...)`` and "
"``str(b, encoding=...)``, respectively."
msgstr ""
"Оскільки типи :class:`str` і :class:`bytes` не можна змішувати, ви завжди "
"повинні явно конвертувати між ними. Використовуйте :meth:`str.encode` для "
"переходу від :class:`str` до :class:`bytes` і :meth:`bytes.decode` для "
"переходу від :class:`bytes` до :class:`str`. Ви також можете використовувати "
"``bytes(s, encoding=...)`` та ``str(b, encoding=...)`` відповідно."

msgid ""
"Like :class:`str`, the :class:`bytes` type is immutable.  There is a "
"separate *mutable* type to hold buffered binary data, :class:`bytearray`.  "
"Nearly all APIs that accept :class:`bytes` also accept :class:`bytearray`.  "
"The mutable API is based on :class:`collections.MutableSequence`."
msgstr ""
"Як і :class:`str`, тип :class:`bytes` є незмінним. Існує окремий *змінний* "
"тип для зберігання буферизованих двійкових даних, :class:`bytearray`. Майже "
"всі API, які приймають :class:`bytes`, також приймають :class:`bytearray`. "
"Змінний API заснований на :class:`collections.MutableSequence`."

msgid ""
"All backslashes in raw string literals are interpreted literally. This means "
"that ``'\\U'`` and ``'\\u'`` escapes in raw strings are not treated "
"specially.  For example, ``r'\\u20ac'`` is a string of 6 characters in "
"Python 3.0, whereas in 2.6, ``ur'\\u20ac'`` was the single \"euro\" "
"character.  (Of course, this change only affects raw string literals; the "
"euro character is ``'\\u20ac'`` in Python 3.0.)"
msgstr ""
"Усі зворотні косі риски в необроблених рядкових літералах інтерпретуються "
"буквально. Це означає, що екранування ``'\\U'`` і ``'\\u'`` у необроблених "
"рядках не обробляються спеціально. Наприклад, ``r'\\u20ac`` — це рядок із 6 "
"символів у Python 3.0, тоді як у 2.6 ``ur'\\u20ac`` був одним символом "
"\"євро\". (Звичайно, ця зміна стосується лише необроблених рядкових "
"літералів; у Python 3.0 символом євро є ``'\\u20ac'``.)"

msgid ""
"The built-in :class:`basestring` abstract type was removed.  Use :class:"
"`str` instead.  The :class:`str` and :class:`bytes` types don't have "
"functionality enough in common to warrant a shared base class.  The ``2to3`` "
"tool (see below) replaces every occurrence of :class:`basestring` with :"
"class:`str`."
msgstr ""
"Вбудований :class:`basestring` абстрактний тип було видалено. Замість цього "
"використовуйте :class:`str`. Типи :class:`str` і :class:`bytes` не мають "
"достатньо спільних функціональних можливостей, щоб гарантувати спільний "
"базовий клас. Інструмент ``2to3`` (див. нижче) замінює кожне входження :"
"class:`basestring` на :class:`str`."

msgid ""
"Files opened as text files (still the default mode for :func:`open`) always "
"use an encoding to map between strings (in memory) and bytes (on disk).  "
"Binary files (opened with a ``b`` in the mode argument) always use bytes in "
"memory.  This means that if a file is opened using an incorrect mode or "
"encoding, I/O will likely fail loudly, instead of silently producing "
"incorrect data.  It also means that even Unix users will have to specify the "
"correct mode (text or binary) when opening a file.  There is a platform-"
"dependent default encoding, which on Unixy platforms can be set with the "
"``LANG`` environment variable (and sometimes also with some other platform-"
"specific locale-related environment variables).  In many cases, but not all, "
"the system default is UTF-8; you should never count on this default.  Any "
"application reading or writing more than pure ASCII text should probably "
"have a way to override the encoding. There is no longer any need for using "
"the encoding-aware streams in the :mod:`codecs` module."
msgstr ""
"Файли, відкриті як текстові файли (досі стандартний режим для :func:`open`), "
"завжди використовують кодування для відображення між рядками (у пам’яті) та "
"байтами (на диску). Двійкові файли (відкриті за допомогою ``b`` в аргументі "
"mode) завжди використовують байти в пам’яті. Це означає, що якщо файл "
"відкрито з використанням неправильного режиму або кодування, введення-"
"виведення, ймовірно, голосно завершиться помилкою, замість того, щоб мовчки "
"видати неправильні дані. Це також означає, що навіть користувачі Unix "
"повинні будуть вказати правильний режим (текстовий або двійковий) під час "
"відкриття файлу. Існує залежне від платформи кодування за замовчуванням, яке "
"на платформах Unixy можна встановити за допомогою змінної середовища "
"``LANG`` (і іноді також за допомогою деяких інших змінних середовища, "
"пов’язаних із місцевими стандартами). У багатьох випадках, але не у всіх, "
"системою за замовчуванням є UTF-8; ви ніколи не повинні розраховувати на це "
"замовчування. Будь-яка програма, яка читає або записує більше ніж чистий "
"текст ASCII, ймовірно, повинна мати спосіб заміни кодування. Більше немає "
"необхідності використовувати потоки з урахуванням кодування в модулі :mod:"
"`codecs`."

msgid ""
"The initial values of :data:`sys.stdin`, :data:`sys.stdout` and :data:`sys."
"stderr` are now unicode-only text files (i.e., they are instances of :class:"
"`io.TextIOBase`).  To read and write bytes data with these streams, you need "
"to use their :data:`io.TextIOBase.buffer` attribute."
msgstr ""
"Початкові значення :data:`sys.stdin`, :data:`sys.stdout` і :data:`sys."
"stderr` тепер є текстовими файлами лише у кодуванні Юнікод (тобто вони є "
"екземплярами :class:`io. TextIOBase`). Щоб читати та записувати дані байтів "
"за допомогою цих потоків, вам потрібно використовувати їхній атрибут :data:"
"`io.TextIOBase.buffer`."

msgid ""
"Filenames are passed to and returned from APIs as (Unicode) strings. This "
"can present platform-specific problems because on some platforms filenames "
"are arbitrary byte strings.  (On the other hand, on Windows filenames are "
"natively stored as Unicode.)  As a work-around, most APIs (e.g. :func:`open` "
"and many functions in the :mod:`os` module) that take filenames accept :"
"class:`bytes` objects as well as strings, and a few APIs have a way to ask "
"for a :class:`bytes` return value.  Thus, :func:`os.listdir` returns a list "
"of :class:`bytes` instances if the argument is a :class:`bytes` instance, "
"and :func:`os.getcwdb` returns the current working directory as a :class:"
"`bytes` instance.  Note that when :func:`os.listdir` returns a list of "
"strings, filenames that cannot be decoded properly are omitted rather than "
"raising :exc:`UnicodeError`."
msgstr ""
"Імена файлів передаються та повертаються з API як рядки (Unicode). Це може "
"спричинити проблеми, пов’язані з певною платформою, оскільки на деяких "
"платформах імена файлів є довільними рядками байтів. (З іншого боку, у "
"Windows імена файлів зберігаються у форматі Юнікод.) Як обхідний шлях, "
"більшість API (наприклад, :func:`open` і багато функцій у модулі :mod:`os`), "
"які приймають імена файлів, приймають: об’єкти :class:`bytes`, а також "
"рядки, а кілька API мають спосіб запитувати значення, що повертається :class:"
"`bytes`. Таким чином, :func:`os.listdir` повертає список екземплярів :class:"
"`bytes`, якщо аргумент є екземпляром :class:`bytes`, а :func:`os.getcwdb` "
"повертає поточний робочий каталог як екземпляр :class:`bytes`. Зауважте, що "
"коли :func:`os.listdir` повертає список рядків, імена файлів, які не можна "
"правильно розшифрувати, пропускаються, а не викликають :exc:`UnicodeError`."

msgid ""
"Some system APIs like :data:`os.environ` and :data:`sys.argv` can also "
"present problems when the bytes made available by the system is not "
"interpretable using the default encoding.  Setting the ``LANG`` variable and "
"rerunning the program is probably the best approach."
msgstr ""
"Деякі системні API, як-от :data:`os.environ` і :data:`sys.argv`, також "
"можуть створювати проблеми, коли байти, доступні системою, не можна "
"інтерпретувати за допомогою стандартного кодування. Встановлення змінної "
"``LANG`` і повторний запуск програми є, ймовірно, найкращим підходом."

msgid ""
":pep:`3138`: The :func:`repr` of a string no longer escapes non-ASCII "
"characters.  It still escapes control characters and code points with non-"
"printable status in the Unicode standard, however."
msgstr ""
":pep:`3138`: :func:`repr` рядка більше не екранує символи, відмінні від "
"ASCII. Однак у стандарті Юнікод він все ще уникає контрольних символів і "
"кодових точок зі статусом \"недрукований\"."

msgid ":pep:`3120`: The default source encoding is now UTF-8."
msgstr ":pep:`3120`: Стандартне кодування джерела тепер UTF-8."

msgid ""
":pep:`3131`: Non-ASCII letters are now allowed in identifiers. (However, the "
"standard library remains ASCII-only with the exception of contributor names "
"in comments.)"
msgstr ""
":pep:`3131`: Літери, відмінні від ASCII, тепер дозволені в ідентифікаторах. "
"(Однак стандартна бібліотека залишається лише ASCII, за винятком імен "
"учасників у коментарях.)"

msgid ""
"The :mod:`StringIO` and :mod:`cStringIO` modules are gone.  Instead, import "
"the :mod:`io` module and use :class:`io.StringIO` or :class:`io.BytesIO` for "
"text and data respectively."
msgstr ""
"Модулі :mod:`StringIO` і :mod:`cStringIO` зникли. Натомість імпортуйте "
"модуль :mod:`io` і використовуйте :class:`io.StringIO` або :class:`io."
"BytesIO` для тексту та даних відповідно."

msgid "See also the :ref:`unicode-howto`, which was updated for Python 3.0."
msgstr ""
"Дивіться також :ref:`unicode-howto`, який було оновлено для Python 3.0."

msgid "Overview Of Syntax Changes"
msgstr "Огляд змін синтаксису"

msgid ""
"This section gives a brief overview of every *syntactic* change in Python "
"3.0."
msgstr ""
"У цьому розділі подано короткий огляд усіх *синтаксичних* змін у Python 3.0."

msgid "New Syntax"
msgstr "Новий синтаксис"

msgid ""
":pep:`3107`: Function argument and return value annotations.  This provides "
"a standardized way of annotating a function's parameters and return value.  "
"There are no semantics attached to such annotations except that they can be "
"introspected at runtime using the :attr:`__annotations__` attribute.  The "
"intent is to encourage experimentation through metaclasses, decorators or "
"frameworks."
msgstr ""
":pep:`3107`: Аргумент функції та анотації значення, що повертається. Це "
"забезпечує стандартизований спосіб анотування параметрів функції та "
"значення, що повертається. Немає жодної семантики, пов’язаної з такими "
"анотаціями, за винятком того, що їх можна перевірити під час виконання за "
"допомогою атрибута :attr:`__annotations__`. Мета полягає в тому, щоб "
"заохотити експериментувати за допомогою метакласів, декораторів або "
"фреймворків."

msgid ""
":pep:`3102`: Keyword-only arguments.  Named parameters occurring after "
"``*args`` in the parameter list *must* be specified using keyword syntax in "
"the call.  You can also use a bare ``*`` in the parameter list to indicate "
"that you don't accept a variable-length argument list, but you do have "
"keyword-only arguments."
msgstr ""
":pep:`3102`: аргументи лише для ключових слів. Іменовані параметри, що "
"виникають після ``*args`` у списку параметрів *повинні* вказуватися за "
"допомогою синтаксису ключового слова під час виклику. Ви також можете "
"використовувати голий ``*`` у списку параметрів, щоб вказати, що ви не "
"приймаєте список аргументів змінної довжини, але у вас є аргументи лише для "
"ключових слів."

msgid ""
"Keyword arguments are allowed after the list of base classes in a class "
"definition.  This is used by the new convention for specifying a metaclass "
"(see next section), but can be used for other purposes as well, as long as "
"the metaclass supports it."
msgstr ""
"Аргументи ключових слів дозволені після списку базових класів у визначенні "
"класу. Це використовується новою конвенцією для визначення метакласу (див. "
"наступний розділ), але також може використовуватися для інших цілей, якщо "
"метаклас це підтримує."

msgid ""
":pep:`3104`: :keyword:`nonlocal` statement.  Using ``nonlocal x`` you can "
"now assign directly to a variable in an outer (but non-global) scope.  :"
"keyword:`!nonlocal` is a new reserved word."
msgstr ""
":pep:`3104`: :keyword:`nonlocal` оператор. Використовуючи ``nonlocal x``, "
"тепер ви можете призначати безпосередньо змінній у зовнішній (але не "
"глобальній) області. :keyword:`!nonlocal` — нове зарезервоване слово."

msgid ""
":pep:`3132`: Extended Iterable Unpacking.  You can now write things like "
"``a, b, *rest = some_sequence``.  And even ``*rest, a = stuff``.  The "
"``rest`` object is always a (possibly empty) list; the right-hand side may "
"be any iterable.  Example::"
msgstr ""
":pep:`3132`: Розширене ітераційне розпакування. Тепер ви можете писати такі "
"речі, як ``a, b, *rest = some_sequence``. І навіть ``*rest, a = stuff``. "
"Об'єкт ``rest`` завжди є (можливо, порожнім) списком; права частина може "
"бути будь-якою ітерованою. Приклад::"

msgid "This sets *a* to ``0``, *b* to ``4``, and *rest* to ``[1, 2, 3]``."
msgstr "Це встановлює *a* на ``0``, *b* на ``4``, а *rest* на ``[1, 2, 3]``."

msgid ""
"Dictionary comprehensions: ``{k: v for k, v in stuff}`` means the same thing "
"as ``dict(stuff)`` but is more flexible.  (This is :pep:`274` vindicated. :-)"
msgstr ""
"Розуміння словника: ``{k: v for k, v in stuff}`` означає те саме, що "
"``dict(stuff)``, але є більш гнучким. (Це :pep:`274` підтверджено. :-)"

msgid ""
"Set literals, e.g. ``{1, 2}``.  Note that ``{}`` is an empty dictionary; use "
"``set()`` for an empty set.  Set comprehensions are also supported; e.g., "
"``{x for x in stuff}`` means the same thing as ``set(stuff)`` but is more "
"flexible."
msgstr ""
"Встановіть літерали, напр. ``{1, 2}``. Зауважте, що ``{}`` є порожнім "
"словником; використовуйте ``set()`` для порожнього набору. Також "
"підтримується розуміння набору; наприклад, ``{x for x in stuff}`` означає те "
"саме, що ``set(stuff)``, але є більш гнучким."

msgid ""
"New octal literals, e.g. ``0o720`` (already in 2.6).  The old octal literals "
"(``0720``) are gone."
msgstr ""
"Нові вісімкові літерали, напр. ``0o720`` (вже у 2.6). Старі вісімкові "
"літерали (``0720``) зникли."

msgid ""
"New binary literals, e.g. ``0b1010`` (already in 2.6), and there is a new "
"corresponding built-in function, :func:`bin`."
msgstr ""
"Нові бінарні літерали, напр. ``0b1010`` (вже у 2.6), і є нова відповідна "
"вбудована функція, :func:`bin`."

msgid ""
"Bytes literals are introduced with a leading ``b`` or ``B``, and there is a "
"new corresponding built-in function, :func:`bytes`."
msgstr ""
"Байтові літерали представлено з ``b`` або ``B`` на початку, і є нова "
"відповідна вбудована функція, :func:`bytes`."

msgid "Changed Syntax"
msgstr "Змінений синтаксис"

msgid ""
":pep:`3109` and :pep:`3134`: new :keyword:`raise` statement syntax: :samp:"
"`raise [{expr} [from {expr}]]`.  See below."
msgstr ""
":pep:`3109` і :pep:`3134`: новий синтаксис оператора :keyword:`raise`: :samp:"
"`raise [{expr} [з {expr}]]`. Дивіться нижче."

msgid ""
":keyword:`!as` and :keyword:`with` are now reserved words.  (Since 2.6, "
"actually.)"
msgstr ""
":keyword:`!as` і :keyword:`with` тепер зарезервовані слова. (Насправді з "
"2.6.)"

msgid ""
"``True``, ``False``, and ``None`` are reserved words.  (2.6 partially "
"enforced the restrictions on ``None`` already.)"
msgstr ""
"``True``, ``False`` і ``None`` є зарезервованими словами. (2.6 вже частково "
"застосував обмеження на ``None``.)"

msgid ""
"Change from :keyword:`except` *exc*, *var* to :keyword:`!except` *exc* :"
"keyword:`!as` *var*.  See :pep:`3110`."
msgstr ""
"Змінити з :keyword:`except` *exc*, *var* на :keyword:`!except` *exc* :"
"keyword:`!as` *var*. Дивіться :pep:`3110`."

msgid ":pep:`3115`: New Metaclass Syntax.  Instead of::"
msgstr ":pep:`3115`: Новий синтаксис метакласу. Замість::"

msgid "you must now use::"
msgstr "тепер ви повинні використовувати::"

msgid ""
"The module-global :data:`__metaclass__` variable is no longer supported.  "
"(It was a crutch to make it easier to default to new-style classes without "
"deriving every class from :class:`object`.)"
msgstr ""
"Змінна module-global :data:`__metaclass__` більше не підтримується. (Це була "
"милиця, щоб полегшити за замовчуванням класи нового стилю без отримання "
"кожного класу від :class:`object`.)"

msgid ""
"List comprehensions no longer support the syntactic form :samp:`[... for "
"{var} in {item1}, {item2}, ...]`.  Use :samp:`[... for {var} in ({item1}, "
"{item2}, ...)]` instead. Also note that list comprehensions have different "
"semantics: they are closer to syntactic sugar for a generator expression "
"inside a :func:`list` constructor, and in particular the loop control "
"variables are no longer leaked into the surrounding scope."
msgstr ""
"Розуміння списків більше не підтримує синтаксичну форму :samp:`[... для "
"{var} в {item1}, {item2}, ...]`. Замість цього використовуйте :samp:`[... "
"для {var} в ({item1}, {item2}, ...)]`. Також зауважте, що розуміння списків "
"має іншу семантику: вони ближчі до синтаксичного цукру для виразу генератора "
"всередині конструктора :func:`list`, і, зокрема, керуючі змінні циклу більше "
"не просочуються в навколишню область."

msgid ""
"The *ellipsis* (``...``) can be used as an atomic expression anywhere.  "
"(Previously it was only allowed in slices.)  Also, it *must* now be spelled "
"as ``...``.  (Previously it could also be spelled as ``. . .``, by a mere "
"accident of the grammar.)"
msgstr ""
"*Еліпсис* (``...``) можна використовувати як атомарний вираз будь-де. "
"(Раніше це було дозволено лише у фрагментах.) Крім того, тепер *потрібно* "
"писати як ``...``. (Раніше це також могло бути написане як ``...``, просто "
"через випадковість граматики.)"

msgid "Removed Syntax"
msgstr "Видалений синтаксис"

msgid ""
":pep:`3113`: Tuple parameter unpacking removed.  You can no longer write "
"``def foo(a, (b, c)): ...``. Use ``def foo(a, b_c): b, c = b_c`` instead."
msgstr ""
":pep:`3113`: вилучено розпакування параметрів кортежу. Ви більше не можете "
"писати ``def foo(a, (b, c)): ...``. Замість цього використовуйте ``def "
"foo(a, b_c): b, c = b_c``."

msgid "Removed backticks (use :func:`repr` instead)."
msgstr "Видалено зворотні галочки (замість цього використовуйте :func:`repr`)."

msgid "Removed ``<>`` (use ``!=`` instead)."
msgstr "Видалено ``<>`` (замість цього використовуйте ``!=``)."

msgid ""
"Removed keyword: :func:`exec` is no longer a keyword; it remains as a "
"function.  (Fortunately the function syntax was also accepted in 2.x.)  Also "
"note that :func:`exec` no longer takes a stream argument; instead of "
"``exec(f)`` you can use ``exec(f.read())``."
msgstr ""
"Видалено ключове слово: :func:`exec` більше не є ключовим словом; воно "
"залишається як функція. (На щастя, синтаксис функції також був прийнятий у 2."
"x.) Також зауважте, що :func:`exec` більше не приймає аргумент потоку; "
"замість ``exec(f)`` ви можете використовувати ``exec(f.read())``."

msgid "Integer literals no longer support a trailing ``l`` or ``L``."
msgstr "Цілі літерали більше не підтримують кінцеві ``l`` або ``L``."

msgid "String literals no longer support a leading ``u`` or ``U``."
msgstr "Рядкові літерали більше не підтримують початок ``u`` або ``U``."

msgid ""
"The :keyword:`from` *module* :keyword:`import` ``*`` syntax is only allowed "
"at the module level, no longer inside functions."
msgstr ""
"Синтаксис :keyword:`from` *module* :keyword:`import` ``*`` дозволений лише "
"на рівні модуля, більше не всередині функцій."

msgid ""
"The only acceptable syntax for relative imports is :samp:`from .[{module}] "
"import {name}`.  All :keyword:`import` forms not starting with ``.`` are "
"interpreted as absolute imports.  (:pep:`328`)"
msgstr ""
"Єдиним прийнятним синтаксисом для відносного імпорту є :samp:`from ."
"[{module}] import {name}`. Усі форми :keyword:`import`, які не починаються з "
"``.``, інтерпретуються як абсолютні імпорти. (:pep:`328`)"

msgid "Classic classes are gone."
msgstr "Класичні заняття зникли."

msgid "Changes Already Present In Python 2.6"
msgstr "Зміни вже присутні в Python 2.6"

msgid ""
"Since many users presumably make the jump straight from Python 2.5 to Python "
"3.0, this section reminds the reader of new features that were originally "
"designed for Python 3.0 but that were back-ported to Python 2.6.  The "
"corresponding sections in :ref:`whats-new-in-2.6` should be consulted for "
"longer descriptions."
msgstr ""
"Оскільки багато користувачів, ймовірно, переходять прямо з Python 2.5 на "
"Python 3.0, цей розділ нагадує читачеві про нові функції, які спочатку були "
"розроблені для Python 3.0, але які були перенесені на Python 2.6. Додаткові "
"описи можна знайти у відповідних розділах :ref:`whats-new-in-2.6`."

msgid ""
":ref:`pep-0343`.  The :keyword:`with` statement is now a standard feature "
"and no longer needs to be imported from the :mod:`__future__`. Also check "
"out :ref:`new-26-context-managers` and :ref:`new-module-contextlib`."
msgstr ""
":ref:`pep-0343`. Оператор :keyword:`with` тепер є стандартною функцією, і "
"його більше не потрібно імпортувати з :mod:`__future__`. Також перегляньте :"
"ref:`new-26-context-managers` і :ref:`new-module-contextlib`."

msgid ""
":ref:`pep-0366`.  This enhances the usefulness of the :option:`-m` option "
"when the referenced module lives in a package."
msgstr ""
":ref:`pep-0366`. Це підвищує корисність опції :option:`-m`, коли модуль, на "
"який посилається, живе в пакеті."

msgid ":ref:`pep-0370`."
msgstr ":ref:`pep-0370`."

msgid ":ref:`pep-0371`."
msgstr ":ref:`pep-0371`."

msgid ""
":ref:`pep-3101`.  Note: the 2.6 description mentions the :meth:`format` "
"method for both 8-bit and Unicode strings.  In 3.0, only the :class:`str` "
"type (text strings with Unicode support) supports this method; the :class:"
"`bytes` type does not.  The plan is to eventually make this the only API for "
"string formatting, and to start deprecating the ``%`` operator in Python 3.1."
msgstr ""
":ref:`pep-3101`. Примітка: в описі 2.6 згадується метод :meth:`format` як "
"для 8-бітних рядків, так і для рядків Unicode. У версії 3.0 тільки тип :"
"class:`str` (текстові рядки з підтримкою Unicode) підтримує цей метод; тип :"
"class:`bytes` не має. План полягає в тому, щоб згодом зробити це єдиним API "
"для форматування рядків і почати не підтримувати оператор ``%`` у Python 3.1."

msgid ""
":ref:`pep-3105`.  This is now a standard feature and no longer needs to be "
"imported from :mod:`__future__`.  More details were given above."
msgstr ""
":ref:`pep-3105`. Тепер це стандартна функція, і її більше не потрібно "
"імпортувати з :mod:`__future__`. Детальніше було наведено вище."

msgid ""
":ref:`pep-3110`.  The :keyword:`except` *exc* :keyword:`!as` *var* syntax is "
"now standard and :keyword:`!except` *exc*, *var* is no longer supported.  "
"(Of course, the :keyword:`!as` *var* part is still optional.)"
msgstr ""
":ref:`pep-3110`. Синтаксис :keyword:`except` *exc* :keyword:`!as` *var* "
"тепер є стандартним, а :keyword:`!except` *exc*, *var* більше не "
"підтримується. (Звичайно, частина :keyword:`!as` *var* все ще необов’язкова.)"

msgid ""
":ref:`pep-3112`.  The ``b\"...\"`` string literal notation (and its variants "
"like ``b'...'``, ``b\"\"\"...\"\"\"``, and ``br\"...\"``) now produces a "
"literal of type :class:`bytes`."
msgstr ""
":ref:`pep-3112`. Нотація рядкового літералу ``b\"...\"`` (і його варіанти, "
"такі як ``b'...'``, ``b\"\"\"...\"\"\"`` і ``br\" ...\"``) тепер створює "
"літерал типу :class:`bytes`."

msgid ""
":ref:`pep-3116`.  The :mod:`io` module is now the standard way of doing file "
"I/O.  The built-in :func:`open` function is now an alias for :func:`io.open` "
"and has additional keyword arguments *encoding*, *errors*, *newline* and "
"*closefd*.  Also note that an invalid *mode* argument now raises :exc:"
"`ValueError`, not :exc:`IOError`.  The binary file object underlying a text "
"file object can be accessed as :attr:`f.buffer` (but beware that the text "
"object maintains a buffer of itself in order to speed up the encoding and "
"decoding operations)."
msgstr ""
":ref:`pep-3116`. Модуль :mod:`io` тепер є стандартним способом здійснення "
"файлового введення/виведення. Вбудована функція :func:`open` тепер є "
"псевдонімом для :func:`io.open` і має додаткові ключові аргументи "
"*encoding*, *errors*, *newline* і *closefd*. Також зауважте, що недійсний "
"аргумент *mode* тепер викликає :exc:`ValueError`, а не :exc:`IOError`. До "
"бінарного файлового об’єкта, що лежить в основі текстового файлового "
"об’єкта, можна отримати доступ як :attr:`f.buffer` (але пам’ятайте, що "
"текстовий об’єкт підтримує сам буфер, щоб пришвидшити операції кодування та "
"декодування)."

msgid ""
":ref:`pep-3118`.  The old builtin :func:`buffer` is now really gone; the new "
"builtin :func:`memoryview` provides (mostly) similar functionality."
msgstr ""
":ref:`pep-3118`. Старий вбудований :func:`buffer` тепер справді зник; новий "
"вбудований :func:`memoryview` забезпечує (в основному) подібну "
"функціональність."

msgid ""
":ref:`pep-3119`.  The :mod:`abc` module and the ABCs defined in the :mod:"
"`collections` module plays a somewhat more prominent role in the language "
"now, and built-in collection types like :class:`dict` and :class:`list` "
"conform to the :class:`collections.MutableMapping` and :class:`collections."
"MutableSequence` ABCs, respectively."
msgstr ""
":ref:`pep-3119`. Модуль :mod:`abc` і ABC, визначені в модулі :mod:"
"`collections`, тепер відіграють дещо помітнішу роль у мові, а також такі "
"вбудовані типи колекцій, як :class:`dict` і :class:`list` відповідає ABC :"
"class:`collections.MutableMapping` і :class:`collections.MutableSequence` "
"відповідно."

msgid ""
":ref:`pep-3127`.  As mentioned above, the new octal literal notation is the "
"only one supported, and binary literals have been added."
msgstr ""
":ref:`pep-3127`. Як згадувалося вище, нова нотація вісімкових літералів є "
"єдиною, що підтримується, і додано двійкові літерали."

msgid ":ref:`pep-3129`."
msgstr ":ref:`pep-3129`."

msgid ""
":ref:`pep-3141`.  The :mod:`numbers` module is another new use of ABCs, "
"defining Python's \"numeric tower\".  Also note the new :mod:`fractions` "
"module which implements :class:`numbers.Rational`."
msgstr ""
":ref:`pep-3141`. Модуль :mod:`numbers` є ще одним новим використанням ABC, "
"що визначає \"числову вежу\" Python. Також зверніть увагу на новий модуль :"
"mod:`fractions`, який реалізує :class:`numbers.Rational`."

msgid "Library Changes"
msgstr "Зміни бібліотеки"

msgid ""
"Due to time constraints, this document does not exhaustively cover the very "
"extensive changes to the standard library.  :pep:`3108` is the reference for "
"the major changes to the library.  Here's a capsule review:"
msgstr ""
"Через обмеження часу цей документ не вичерпно охоплює дуже великі зміни "
"стандартної бібліотеки. :pep:`3108` є посиланням на основні зміни в "
"бібліотеці. Ось огляд капсули:"

msgid ""
"Many old modules were removed.  Some, like :mod:`gopherlib` (no longer used) "
"and :mod:`md5` (replaced by :mod:`hashlib`), were already deprecated by :pep:"
"`4`.  Others were removed as a result of the removal of support for various "
"platforms such as Irix, BeOS and Mac OS 9 (see :pep:`11`).  Some modules "
"were also selected for removal in Python 3.0 due to lack of use or because a "
"better replacement exists.  See :pep:`3108` for an exhaustive list."
msgstr ""
"Багато старих модулів було видалено. Деякі, як-от :mod:`gopherlib` (більше "
"не використовується) і :mod:`md5` (замінений на :mod:`hashlib`), вже були "
"застарілими :pep:`4`. Інші були видалені в результаті припинення підтримки "
"різних платформ, таких як Irix, BeOS і Mac OS 9 (див. :pep:`11`). Деякі "
"модулі також було вибрано для видалення в Python 3.0 через відсутність "
"використання або через те, що існує краща заміна. Перегляньте :pep:`3108` "
"для вичерпного списку."

msgid ""
"The :mod:`bsddb3` package was removed because its presence in the core "
"standard library has proved over time to be a particular burden for the core "
"developers due to testing instability and Berkeley DB's release schedule.  "
"However, the package is alive and well, externally maintained at https://www."
"jcea.es/programacion/pybsddb.htm."
msgstr ""
"Пакет :mod:`bsddb3` було вилучено, оскільки його присутність у базовій "
"стандартній бібліотеці з часом виявилася особливим тягарем для розробників "
"ядра через нестабільність тестування та графік випуску Berkeley DB. Однак "
"пакет живий і здоровий, підтримується зовні за адресою https://www.jcea.es/"
"programacion/pybsddb.htm."

msgid ""
"Some modules were renamed because their old name disobeyed :pep:`8`, or for "
"various other reasons.  Here's the list:"
msgstr ""
"Деякі модулі були перейменовані через те, що їхня стара назва не "
"відповідала :pep:`8`, або з інших причин. Ось список:"

msgid "Old Name"
msgstr "Стара назва"

msgid "New Name"
msgstr "Нова назва"

msgid "_winreg"
msgstr "_winreg"

msgid "winreg"
msgstr "winreg"

msgid "ConfigParser"
msgstr "ConfigParser"

msgid "configparser"
msgstr "аналізатор конфігурації"

msgid "copy_reg"
msgstr "copy_reg"

msgid "copyreg"
msgstr "copyreg"

msgid "Queue"
msgstr "Чергу"

msgid "queue"
msgstr "чергу"

msgid "SocketServer"
msgstr "SocketServer"

msgid "socketserver"
msgstr "сокетсервер"

msgid "markupbase"
msgstr "база розмітки"

msgid "_markupbase"
msgstr "_markupbase"

msgid "repr"
msgstr "репр"

msgid "reprlib"
msgstr "reprlib"

msgid "test.test_support"
msgstr "test.test_support"

msgid "test.support"
msgstr "test.support"

msgid ""
"A common pattern in Python 2.x is to have one version of a module "
"implemented in pure Python, with an optional accelerated version implemented "
"as a C extension; for example, :mod:`pickle` and :mod:`cPickle`.  This "
"places the burden of importing the accelerated version and falling back on "
"the pure Python version on each user of these modules.  In Python 3.0, the "
"accelerated versions are considered implementation details of the pure "
"Python versions. Users should always import the standard version, which "
"attempts to import the accelerated version and falls back to the pure Python "
"version.  The :mod:`pickle` / :mod:`cPickle` pair received this treatment.  "
"The :mod:`profile` module is on the list for 3.1.  The :mod:`StringIO` "
"module has been turned into a class in the :mod:`io` module."
msgstr ""
"Загальним шаблоном у Python 2.x є одна версія модуля, реалізована на чистому "
"Python, з додатковою прискореною версією, реалізованою як розширення C; "
"наприклад, :mod:`pickle` і :mod:`cPickle`. Це покладає тягар імпортування "
"прискореної версії та повернення до чистої версії Python на кожного "
"користувача цих модулів. У Python 3.0 прискорені версії вважаються деталями "
"реалізації чистих версій Python. Користувачам слід завжди імпортувати "
"стандартну версію, яка намагається імпортувати прискорену версію та "
"повертається до чистої версії Python. Пара :mod:`pickle` / :mod:`cPickle` "
"отримала таку обробку. Модуль :mod:`profile` є в списку для 3.1. Модуль :mod:"
"`StringIO` було перетворено на клас у модулі :mod:`io`."

msgid ""
"Some related modules have been grouped into packages, and usually the "
"submodule names have been simplified.  The resulting new packages are:"
msgstr ""
"Деякі пов’язані модулі були згруповані в пакети, і зазвичай назви підмодулів "
"були спрощені. Отримані нові пакети:"

msgid ""
":mod:`dbm` (:mod:`anydbm`, :mod:`dbhash`, :mod:`dbm`, :mod:`dumbdbm`, :mod:"
"`gdbm`, :mod:`whichdb`)."
msgstr ""
":mod:`dbm` (:mod:`anydbm`, :mod:`dbhash`, :mod:`dbm`, :mod:`dumbdbm`, :mod:"
"`gdbm`, :mod:`whichdb`)."

msgid ":mod:`html` (:mod:`HTMLParser`, :mod:`htmlentitydefs`)."
msgstr ":mod:`html` (:mod:`HTMLParser`, :mod:`htmlentitydefs`)."

msgid ""
":mod:`http` (:mod:`httplib`, :mod:`BaseHTTPServer`, :mod:`CGIHTTPServer`, :"
"mod:`SimpleHTTPServer`, :mod:`Cookie`, :mod:`cookielib`)."
msgstr ""
":mod:`http` (:mod:`httplib`, :mod:`BaseHTTPServer`, :mod:`CGIHTTPServer`, :"
"mod:`SimpleHTTPServer`, :mod:`Cookie`, :mod:`cookielib`)."

msgid ""
":mod:`tkinter` (all :mod:`Tkinter`-related modules except :mod:`turtle`).  "
"The target audience of :mod:`turtle` doesn't really care about :mod:"
"`tkinter`.  Also note that as of Python 2.6, the functionality of :mod:"
"`turtle` has been greatly enhanced."
msgstr ""
":mod:`tkinter` (усі пов’язані з :mod:`Tkinter` модулі, крім :mod:`turtle`). "
"Цільова аудиторія :mod:`turtle` не дуже дбає про :mod:`tkinter`. Також "
"зауважте, що починаючи з Python 2.6, функціональність :mod:`turtle` була "
"значно розширена."

msgid ""
":mod:`urllib` (:mod:`urllib`, :mod:`urllib2`, :mod:`urlparse`, :mod:"
"`robotparse`)."
msgstr ""
":mod:`urllib` (:mod:`urllib`, :mod:`urllib2`, :mod:`urlparse`, :mod:"
"`robotparse`)."

msgid ""
":mod:`xmlrpc` (:mod:`xmlrpclib`, :mod:`DocXMLRPCServer`, :mod:"
"`SimpleXMLRPCServer`)."
msgstr ""
":mod:`xmlrpc` (:mod:`xmlrpclib`, :mod:`DocXMLRPCServer`, :mod:"
"`SimpleXMLRPCServer`)."

msgid ""
"Some other changes to standard library modules, not covered by :pep:`3108`:"
msgstr ""
"Деякі інші зміни до модулів стандартної бібліотеки, не охоплені :pep:`3108`:"

msgid "Killed :mod:`sets`.  Use the built-in :func:`set` class."
msgstr "Убитий :mod:`sets`. Використовуйте вбудований клас :func:`set`."

msgid ""
"Cleanup of the :mod:`sys` module: removed :func:`sys.exitfunc`, :func:`sys."
"exc_clear`, :data:`sys.exc_type`, :data:`sys.exc_value`, :data:`sys."
"exc_traceback`.  (Note that :data:`sys.last_type` etc. remain.)"
msgstr ""
"Очищення модуля :mod:`sys`: видалено :func:`sys.exitfunc`, :func:`sys."
"exc_clear`, :data:`sys.exc_type`, :data:`sys.exc_value`, :data:`sys."
"exc_traceback`. (Зверніть увагу, що :data:`sys.last_type` тощо залишаються.)"

msgid ""
"Cleanup of the :class:`array.array` type: the :meth:`read` and :meth:`write` "
"methods are gone; use :meth:`fromfile` and :meth:`tofile` instead.  Also, "
"the ``'c'`` typecode for array is gone -- use either ``'b'`` for bytes or "
"``'u'`` for Unicode characters."
msgstr ""
"Очищення типу :class:`array.array`: методи :meth:`read` і :meth:`write` "
"зникли; замість цього використовуйте :meth:`fromfile` і :meth:`tofile`. Крім "
"того, код типу ``'c'`` для масиву зник — використовуйте ``'b'`` для байтів "
"або ``'u'`` для символів Unicode."

msgid ""
"Cleanup of the :mod:`operator` module: removed :func:`sequenceIncludes` and :"
"func:`isCallable`."
msgstr ""
"Очищення модуля :mod:`operator`: видалено :func:`sequenceIncludes` і :func:"
"`isCallable`."

msgid ""
"Cleanup of the :mod:`thread` module: :func:`acquire_lock` and :func:"
"`release_lock` are gone; use :func:`acquire` and :func:`release` instead."
msgstr ""
"Очищення модуля :mod:`thread`: :func:`acquire_lock` і :func:`release_lock` "
"зникли; замість цього використовуйте :func:`acquire` і :func:`release`."

msgid "Cleanup of the :mod:`random` module: removed the :func:`jumpahead` API."
msgstr "Очищення модуля :mod:`random`: видалено API :func:`jumpahead`."

msgid "The :mod:`new` module is gone."
msgstr "Модуль :mod:`new` зник."

msgid ""
"The functions :func:`os.tmpnam`, :func:`os.tempnam` and :func:`os.tmpfile` "
"have been removed in favor of the :mod:`tempfile` module."
msgstr ""
"Функції :func:`os.tmpnam`, :func:`os.tempnam` і :func:`os.tmpfile` було "
"видалено на користь модуля :mod:`tempfile`."

msgid ""
"The :mod:`tokenize` module has been changed to work with bytes.  The main "
"entry point is now :func:`tokenize.tokenize`, instead of generate_tokens."
msgstr ""
"Модуль :mod:`tokenize` змінено для роботи з байтами. Головною точкою входу "
"тепер є :func:`tokenize.tokenize` замість generate_tokens."

msgid ""
":data:`string.letters` and its friends (:data:`string.lowercase` and :data:"
"`string.uppercase`) are gone.  Use :data:`string.ascii_letters` etc. "
"instead.  (The reason for the removal is that :data:`string.letters` and "
"friends had locale-specific behavior, which is a bad idea for such "
"attractively named global \"constants\".)"
msgstr ""

msgid ""
"Renamed module :mod:`__builtin__` to :mod:`builtins` (removing the "
"underscores, adding an 's').  The :data:`__builtins__` variable found in "
"most global namespaces is unchanged.  To modify a builtin, you should use :"
"mod:`builtins`, not :data:`__builtins__`!"
msgstr ""
"Змінено назву модуля :mod:`__builtin__` на :mod:`builtins` (видалення "
"підкреслення, додавання 's'). Змінна :data:`__builtins__`, що міститься в "
"більшості глобальних просторів імен, не змінюється. Щоб змінити вбудований "
"модуль, ви повинні використовувати :mod:`builtins`, а не :data:"
"`__builtins__`!"

msgid ":pep:`3101`: A New Approach To String Formatting"
msgstr ":pep:`3101`: Новий підхід до форматування рядків"

msgid ""
"A new system for  built-in string formatting operations replaces the ``%`` "
"string  formatting operator.   (However, the ``%``  operator is still "
"supported;  it will  be deprecated in  Python 3.1  and removed from the "
"language at some later time.)  Read :pep:`3101` for the full scoop."
msgstr ""
"Нова система для вбудованих операцій форматування рядка замінює оператор "
"форматування рядка ``%``. (Однак оператор ``%`` все ще підтримується; він "
"буде застарілим у Python 3.1 і пізніше буде видалено з мови.) Прочитайте :"
"pep:`3101`, щоб отримати повну інформацію."

msgid "Changes To Exceptions"
msgstr "Зміни винятків"

msgid ""
"The APIs for raising and catching exception have been cleaned up and new "
"powerful features added:"
msgstr ""
"Було очищено API для виклику та перехоплення винятків і додано нові потужні "
"функції:"

msgid ""
":pep:`352`: All exceptions must be derived (directly or indirectly) from :"
"exc:`BaseException`.  This is the root of the exception hierarchy.  This is "
"not new as a recommendation, but the *requirement* to inherit from :exc:"
"`BaseException` is new.  (Python 2.6 still allowed classic classes to be "
"raised, and placed no restriction on what you can catch.)  As a consequence, "
"string exceptions are finally truly and utterly dead."
msgstr ""
":pep:`352`: усі винятки мають бути отримані (прямо чи опосередковано) з :exc:"
"`BaseException`. Це корінь ієрархії винятків. Це не нова рекомендація, але "
"*вимога* для успадкування від :exc:`BaseException` є новою. (Python 2.6 все "
"ще дозволяв створювати класичні класи та не накладав обмежень на те, що ви "
"можете перехопити.) Як наслідок, виключення рядків остаточно по-справжньому "
"й повністю мертві."

msgid ""
"Almost all exceptions should actually derive from :exc:`Exception`; :exc:"
"`BaseException` should only be used as a base class for exceptions that "
"should only be handled at the top level, such as :exc:`SystemExit` or :exc:"
"`KeyboardInterrupt`.  The recommended idiom for handling all exceptions "
"except for this latter category is to use :keyword:`except` :exc:`Exception`."
msgstr ""
"Майже всі винятки насправді мають походити від :exc:`Exception`; :exc:"
"`BaseException` слід використовувати лише як базовий клас для винятків, які "
"слід обробляти лише на верхньому рівні, наприклад :exc:`SystemExit` або :exc:"
"`KeyboardInterrupt`. Рекомендована ідіома для обробки всіх винятків, крім "
"цієї останньої категорії, полягає в використанні :keyword:`except` :exc:"
"`Exception`."

msgid ":exc:`StandardError` was removed."
msgstr ":exc:`StandardError` видалено."

msgid ""
"Exceptions no longer behave as sequences.  Use the :attr:`args` attribute "
"instead."
msgstr ""
"Винятки більше не діють як послідовності. Натомість використовуйте атрибут :"
"attr:`args`."

msgid ""
":pep:`3109`: Raising exceptions.  You must now use :samp:`raise {Exception}"
"({args})` instead of :samp:`raise {Exception}, {args}`. Additionally, you "
"can no longer explicitly specify a traceback; instead, if you *have* to do "
"this, you can assign directly to the :attr:`__traceback__` attribute (see "
"below)."
msgstr ""
":pep:`3109`: Створення винятків. Тепер ви повинні використовувати :samp:"
"`raise {Exception}({args})` замість :samp:`raise {Exception}, {args}`. Крім "
"того, ви більше не можете явно вказати відстеження; натомість, якщо вам "
"*потрібно* це зробити, ви можете призначити безпосередньо атрибуту :attr:"
"`__traceback__` (див. нижче)."

msgid ""
":pep:`3110`: Catching exceptions.  You must now use :samp:`except "
"{SomeException} as {variable}` instead of :samp:`except {SomeException}, "
"{variable}`.  Moreover, the *variable* is explicitly deleted when the :"
"keyword:`except` block is left."
msgstr ""
":pep:`3110`: Перехоплення винятків. Тепер ви повинні використовувати :samp:"
"`крім {SomeException} як {variable}` замість :samp:`крім {SomeException}, "
"{variable}`. Крім того, *змінна* явно видаляється, коли залишається блок :"
"keyword:`except`."

msgid ""
":pep:`3134`: Exception chaining.  There are two cases: implicit chaining and "
"explicit chaining.  Implicit chaining happens when an exception is raised in "
"an :keyword:`except` or :keyword:`finally` handler block.  This usually "
"happens due to a bug in the handler block; we call this a *secondary* "
"exception.  In this case, the original exception (that was being handled) is "
"saved as the :attr:`__context__` attribute of the secondary exception. "
"Explicit chaining is invoked with this syntax::"
msgstr ""
":pep:`3134`: ланцюжок винятків. Є два випадки: неявне з’єднання та явне "
"з’єднання. Неявне з’єднання відбувається, коли виникає виняток у блоці "
"обробки :keyword:`except` або :keyword:`finally`. Зазвичай це відбувається "
"через помилку в блоці обробки; ми називаємо це *вторинним* винятком. У цьому "
"випадку вихідний виняток (який оброблявся) зберігається як атрибут :attr:"
"`__context__` вторинного виключення. Явне ланцюжок викликається з таким "
"синтаксисом::"

msgid ""
"(where *primary_exception* is any expression that produces an exception "
"object, probably an exception that was previously caught). In this case, the "
"primary exception is stored on the :attr:`__cause__` attribute of the "
"secondary exception.  The traceback printed when an unhandled exception "
"occurs walks the chain of :attr:`__cause__` and :attr:`__context__` "
"attributes and prints a separate traceback for each component of the chain, "
"with the primary exception at the top.  (Java users may recognize this "
"behavior.)"
msgstr ""
"(де *primary_exception* — це будь-який вираз, який створює об’єкт винятку, "
"ймовірно, виняток, який був раніше перехоплений). У цьому випадку первинний "
"виняток зберігається в атрибуті :attr:`__cause__` вторинного виключення. "
"Зворотне відстеження, яке друкується, коли виникає необроблена виняткова "
"ситуація, проходить по ланцюжку атрибутів :attr:`__cause__` і :attr:"
"`__context__` і друкує окреме відстеження для кожного компонента ланцюжка з "
"основним винятком у верхній частині. (Користувачі Java можуть розпізнати цю "
"поведінку.)"

msgid ""
":pep:`3134`: Exception objects now store their traceback as the :attr:"
"`__traceback__` attribute.  This means that an exception object now contains "
"all the information pertaining to an exception, and there are fewer reasons "
"to use :func:`sys.exc_info` (though the latter is not removed)."
msgstr ""
":pep:`3134`: Об’єкти винятків тепер зберігають свою трасування як атрибут :"
"attr:`__traceback__`. Це означає, що об’єкт винятку тепер містить всю "
"інформацію, що стосується винятку, і є менше причин для використання :func:"
"`sys.exc_info` (хоча останній не видаляється)."

msgid ""
"A few exception messages are improved when Windows fails to load an "
"extension module.  For example, ``error code 193`` is now ``%1 is not a "
"valid Win32 application``.  Strings now deal with non-English locales."
msgstr ""
"Покращено кілька повідомлень про винятки, коли Windows не вдається "
"завантажити модуль розширення. Наприклад, ``код помилки 193`` тепер ``%1 не "
"є дійсною програмою Win32``. Рядки тепер мають справу з неанглійськими "
"локалями."

msgid "Miscellaneous Other Changes"
msgstr "Інші інші зміни"

msgid "Operators And Special Methods"
msgstr "Оператори та спеціальні методи"

msgid ""
"``!=`` now returns the opposite of ``==``, unless ``==`` returns :data:"
"`NotImplemented`."
msgstr ""
"``!=`` тепер повертає протилежність ``==``, якщо ``==`` не повертає :data:"
"`NotImplemented`."

msgid ""
"The concept of \"unbound methods\" has been removed from the language. When "
"referencing a method as a class attribute, you now get a plain function "
"object."
msgstr ""
"Поняття \"незв'язаних методів\" було видалено з мови. Посилаючись на метод "
"як на атрибут класу, тепер ви отримуєте звичайний об’єкт функції."

msgid ""
":meth:`__getslice__`, :meth:`__setslice__` and :meth:`__delslice__` were "
"killed.  The syntax ``a[i:j]`` now translates to ``a.__getitem__(slice(i, "
"j))`` (or :meth:`__setitem__` or :meth:`__delitem__`, when used as an "
"assignment or deletion target, respectively)."
msgstr ""
":meth:`__getslice__`, :meth:`__setslice__` і :meth:`__delslice__` були "
"вбиті. Синтаксис ``a[i:j]`` тепер перекладається на ``a.__getitem__(slice(i, "
"j))`` (або :meth:`__setitem__` або :meth:`__delitem__`, коли "
"використовується як ціль призначення або видалення відповідно)."

msgid ""
":pep:`3114`: the standard :meth:`next` method has been renamed to :meth:"
"`~iterator.__next__`."
msgstr ""
":pep:`3114`: стандартний метод :meth:`next` було перейменовано на :meth:"
"`~iterator.__next__`."

msgid ""
"The :meth:`__oct__` and :meth:`__hex__` special methods are removed -- :func:"
"`oct` and :func:`hex` use :meth:`__index__` now to convert the argument to "
"an integer."
msgstr ""
"Спеціальні методи :meth:`__oct__` і :meth:`__hex__` видалено -- :func:`oct` "
"і :func:`hex` тепер використовують :meth:`__index__` для перетворення "
"аргументу в ціле число."

msgid "Removed support for :attr:`__members__` and :attr:`__methods__`."
msgstr "Видалено підтримку :attr:`__members__` і :attr:`__methods__`."

msgid ""
"The function attributes named :attr:`func_X` have been renamed to use the :"
"data:`__X__` form, freeing up these names in the function attribute "
"namespace for user-defined attributes.  To wit, :attr:`func_closure`, :attr:"
"`func_code`, :attr:`func_defaults`, :attr:`func_dict`, :attr:`func_doc`, :"
"attr:`func_globals`, :attr:`func_name` were renamed to :attr:`__closure__`, :"
"attr:`__code__`, :attr:`__defaults__`, :attr:`~object.__dict__`, :attr:"
"`__doc__`, :attr:`__globals__`, :attr:`~definition.__name__`, respectively."
msgstr ""
"Атрибути функції з назвою :attr:`func_X` було перейменовано, щоб "
"використовувати форму :data:`__X__`, звільнивши ці імена в просторі імен "
"атрибутів функції для атрибутів, визначених користувачем. Зокрема, :attr:"
"`func_closure`, :attr:`func_code`, :attr:`func_defaults`, :attr:"
"`func_dict`, :attr:`func_doc`, :attr:`func_globals`, :attr:`func_name` були "
"перейменовані на :attr:`__closure__`, :attr:`__code__`, :attr:"
"`__defaults__`, :attr:`~object.__dict__`, :attr:`__doc__`, :attr:"
"`__globals__`,  :attr:`~definition.__name__` відповідно."

msgid ":meth:`__nonzero__` is now :meth:`__bool__`."
msgstr ":meth:`__nonzero__` тепер :meth:`__bool__`."

msgid "Builtins"
msgstr "Вбудовані"

msgid ""
":pep:`3135`: New :func:`super`.  You can now invoke :func:`super` without "
"arguments and (assuming this is in a regular instance method defined inside "
"a :keyword:`class` statement) the right class and instance will "
"automatically be chosen.  With arguments, the behavior of :func:`super` is "
"unchanged."
msgstr ""
":pep:`3135`: Нове :func:`super`. Тепер ви можете викликати :func:`super` без "
"аргументів і (припускаючи, що це в звичайному методі екземпляра, визначеному "
"всередині оператора :keyword:`class`) правильний клас і екземпляр будуть "
"вибрані автоматично. З аргументами поведінка :func:`super` не змінюється."

msgid ""
":pep:`3111`: :func:`raw_input` was renamed to :func:`input`.  That is, the "
"new :func:`input` function reads a line from :data:`sys.stdin` and returns "
"it with the trailing newline stripped. It raises :exc:`EOFError` if the "
"input is terminated prematurely. To get the old behavior of :func:`input`, "
"use ``eval(input())``."
msgstr ""
":pep:`3111`: :func:`raw_input` було перейменовано на :func:`input`. Тобто "
"нова функція :func:`input` зчитує рядок із :data:`sys.stdin` і повертає його "
"без кінцевого символу нового рядка. Він викликає :exc:`EOFError`, якщо "
"введення завершується передчасно. Щоб отримати стару поведінку :func:"
"`input`, використовуйте ``eval(input())``."

msgid ""
"A new built-in function :func:`next` was added to call the :meth:`~iterator."
"__next__` method on an object."
msgstr ""
"Додано нову вбудовану функцію :func:`next` для виклику методу :meth:"
"`~iterator.__next__` для об’єкта."

msgid ""
"The :func:`round` function rounding strategy and return type have changed.  "
"Exact halfway cases are now rounded to the nearest even result instead of "
"away from zero.  (For example, ``round(2.5)`` now returns ``2`` rather than "
"``3``.)  ``round(x[, n])`` now delegates to ``x.__round__([n])`` instead of "
"always returning a float.  It generally returns an integer when called with "
"a single argument and a value of the same type as ``x`` when called with two "
"arguments."
msgstr ""
"Змінено стратегію округлення функції :func:`round` і тип повернення. Точні "
"половинні випадки тепер округлюються до найближчого парного результату "
"замість нуля. (Наприклад, ``round(2.5)`` тепер повертає ``2``, а не ``3``.) "
"``round(x[, n])`` тепер делегує ``x.__round__([ n])`` замість того, щоб "
"завжди повертати число з плаваючою точкою. Зазвичай він повертає ціле число, "
"якщо викликається з одним аргументом, і значення того самого типу, що й "
"``x``, коли викликається з двома аргументами."

msgid "Moved :func:`intern` to :func:`sys.intern`."
msgstr "Переміщено :func:`intern` до :func:`sys.intern`."

msgid ""
"Removed: :func:`apply`.  Instead of ``apply(f, args)`` use ``f(*args)``."
msgstr ""
"Видалено: :func:`apply`. Замість ``apply(f, args)`` використовуйте "
"``f(*args)``."

msgid ""
"Removed :func:`callable`.  Instead of ``callable(f)`` you can use "
"``isinstance(f, collections.Callable)``.  The :func:`operator.isCallable` "
"function is also gone."
msgstr ""
"Видалено :func:`callable`. Замість ``callable(f)`` ви можете використовувати "
"``isinstance(f, collections.Callable)``. Функція :func:`operator.isCallable` "
"також зникла."

msgid ""
"Removed :func:`coerce`.  This function no longer serves a purpose now that "
"classic classes are gone."
msgstr ""
"Видалено :func:`coerce`. Ця функція більше не служить меті, оскільки "
"класичні класи зникли."

msgid ""
"Removed :func:`execfile`.  Instead of ``execfile(fn)`` use ``exec(open(fn)."
"read())``."
msgstr ""
"Видалено :func:`execfile`. Замість ``execfile(fn)`` використовуйте "
"``exec(open(fn).read())``."

msgid ""
"Removed the :class:`file` type.  Use :func:`open`.  There are now several "
"different kinds of streams that open can return in the :mod:`io` module."
msgstr ""
"Видалено тип :class:`file`. Використовуйте :func:`open`. Зараз існує кілька "
"різних типів потоків, які відкриваються і можуть повертатися в модулі :mod:"
"`io`."

msgid ""
"Removed :func:`reduce`.  Use :func:`functools.reduce` if you really need it; "
"however, 99 percent of the time an explicit :keyword:`for` loop is more "
"readable."
msgstr ""
"Видалено :func:`reduce`. Використовуйте :func:`functools.reduce`, якщо вам "
"це дійсно потрібно; однак у 99% випадків явний цикл :keyword:`for` "
"читабельніший."

msgid "Removed :func:`reload`.  Use :func:`imp.reload`."
msgstr "Видалено :func:`reload`. Використовуйте :func:`imp.reload`."

msgid ""
"Removed. :meth:`dict.has_key` -- use the :keyword:`in` operator instead."
msgstr ""
"Видалено. :meth:`dict.has_key` -- замість цього використовуйте оператор :"
"keyword:`in`."

msgid "Build and C API Changes"
msgstr "Зміни збірки та C API"

msgid ""
"Due to time constraints, here is a *very* incomplete list of changes to the "
"C API."
msgstr "Через обмеження часу ось *дуже* неповний список змін до C API."

msgid ""
"Support for several platforms was dropped, including but not limited to Mac "
"OS 9, BeOS, RISCOS, Irix, and Tru64."
msgstr ""
"Було припинено підтримку кількох платформ, зокрема Mac OS 9, BeOS, RISCOS, "
"Irix і Tru64."

msgid ":pep:`3118`: New Buffer API."
msgstr ":pep:`3118`: Новий API буфера."

msgid ":pep:`3121`: Extension Module Initialization & Finalization."
msgstr ":pep:`3121`: Ініціалізація та завершення модуля розширення."

msgid ":pep:`3123`: Making :c:macro:`PyObject_HEAD` conform to standard C."
msgstr ":pep:`3123`: Приведення :c:macro:`PyObject_HEAD` до стандарту C."

msgid "No more C API support for restricted execution."
msgstr "Більше немає підтримки C API для обмеженого виконання."

msgid ""
":c:func:`PyNumber_Coerce`, :c:func:`PyNumber_CoerceEx`, :c:func:"
"`PyMember_Get`, and :c:func:`PyMember_Set` C APIs are removed."
msgstr ""
":c:func:`PyNumber_Coerce`, :c:func:`PyNumber_CoerceEx`, :c:func:"
"`PyMember_Get` і :c:func:`PyMember_Set` API C видалено."

msgid ""
"New C API :c:func:`PyImport_ImportModuleNoBlock`, works like :c:func:"
"`PyImport_ImportModule` but won't block on the import lock (returning an "
"error instead)."
msgstr ""
"Новий C API :c:func:`PyImport_ImportModuleNoBlock`, працює як :c:func:"
"`PyImport_ImportModule`, але не блокує блокування імпорту (натомість "
"повертає помилку)."

msgid ""
"Renamed the boolean conversion C-level slot and method: ``nb_nonzero`` is "
"now ``nb_bool``."
msgstr ""
"Перейменовано слот і метод логічного перетворення C-рівня: ``nb_nonzero`` "
"тепер ``nb_bool``."

msgid ""
"Removed :c:macro:`METH_OLDARGS` and :c:macro:`WITH_CYCLE_GC` from the C API."
msgstr "Видалено :c:macro:`METH_OLDARGS` і :c:macro:`WITH_CYCLE_GC` з C API."

msgid "Performance"
msgstr "Продуктивність"

msgid ""
"The net result of the 3.0 generalizations is that Python 3.0 runs the "
"pystone benchmark around 10% slower than Python 2.5.  Most likely the "
"biggest cause is the removal of special-casing for small integers. There's "
"room for improvement, but it will happen after 3.0 is released!"
msgstr ""
"Кінцевим результатом узагальнень 3.0 є те, що Python 3.0 виконує тест "
"pystone приблизно на 10% повільніше, ніж Python 2.5. Швидше за все, "
"найбільшою причиною є видалення спеціального регістра для малих цілих чисел. "
"Є місце для вдосконалення, але це станеться після випуску 3.0!"

msgid "Porting To Python 3.0"
msgstr "Перенесення на Python 3.0"

msgid ""
"For porting existing Python 2.5 or 2.6 source code to Python 3.0, the best "
"strategy is the following:"
msgstr ""
"Для перенесення існуючого вихідного коду Python 2.5 або 2.6 на Python 3.0 "
"найкраща стратегія така:"

msgid "(Prerequisite:) Start with excellent test coverage."
msgstr "(Обов’язкова умова:) Почніть із чудового тестового покриття."

msgid ""
"Port to Python 2.6.  This should be no more work than the average port from "
"Python 2.x to Python 2.(x+1).  Make sure all your tests pass."
msgstr ""
"Порт на Python 2.6. Це повинно бути не більше роботи, ніж середнє "
"перенесення з Python 2.x на Python 2. (x+1). Переконайтеся, що всі ваші "
"тести пройдені."

msgid ""
"(Still using 2.6:) Turn on the :option:`!-3` command line switch. This "
"enables warnings about features that will be removed (or change) in 3.0.  "
"Run your test suite again, and fix code that you get warnings about until "
"there are no warnings left, and all your tests still pass."
msgstr ""
"(Досі використовується 2.6:) Увімкніть перемикач командного рядка :option:"
"`!-3`. Це вмикає попередження про функції, які буде видалено (або змінено) у "
"версії 3.0. Знову запустіть набір тестів і виправте код, про який ви "
"отримуєте попередження, доки попередження не зникнуть, і всі ваші тести все "
"одно пройдуть."

msgid ""
"Run the ``2to3`` source-to-source translator over your source code tree.  "
"(See :ref:`2to3-reference` for more on this tool.)  Run the result of the "
"translation under Python 3.0.  Manually fix up any remaining issues, fixing "
"problems until all tests pass again."
msgstr ""
"Запустіть перекладач ``2to3`` з джерела в джерело над вашим деревом "
"вихідного коду. (Див. :ref:`2to3-reference`, щоб дізнатися більше про цей "
"інструмент.) Запустіть результат перекладу під Python 3.0. Вручну вирішуйте "
"проблеми, що залишилися, виправляючи проблеми, доки всі тести не пройдуть "
"знову."

msgid ""
"It is not recommended to try to write source code that runs unchanged under "
"both Python 2.6 and 3.0; you'd have to use a very contorted coding style, e."
"g. avoiding ``print`` statements, metaclasses, and much more.  If you are "
"maintaining a library that needs to support both Python 2.6 and Python 3.0, "
"the best approach is to modify step 3 above by editing the 2.6 version of "
"the source code and running the ``2to3`` translator again, rather than "
"editing the 3.0 version of the source code."
msgstr ""
"Не рекомендується намагатися написати вихідний код, який працює без змін під "
"Python 2.6 і 3.0; вам доведеться використовувати дуже спотворений стиль "
"кодування, напр. уникнення операторів ``print``, метакласів і багато іншого. "
"Якщо ви підтримуєте бібліотеку, яка має підтримувати як Python 2.6, так і "
"Python 3.0, найкращим підходом є змінити крок 3 вище, відредагувавши версію "
"вихідного коду 2.6 і знову запустивши перекладач ``2to3`` замість "
"редагування Версія вихідного коду 3.0."

msgid ""
"For porting C extensions to Python 3.0, please see :ref:`cporting-howto`."
msgstr "Для перенесення розширень C на Python 3.0 див. :ref:`cporting-howto`."
