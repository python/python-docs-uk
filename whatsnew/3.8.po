# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Dmytro Kazanzhy, 2022
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-12 16:28+0000\n"
"PO-Revision-Date: 2021-06-29 13:04+0000\n"
"Last-Translator: Dmytro Kazanzhy, 2022\n"
"Language-Team: Ukrainian (https://www.transifex.com/python-doc/teams/5390/"
"uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != "
"11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % "
"100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || "
"(n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

msgid "What's New In Python 3.8"
msgstr "Що нового в Python 3.8"

msgid "Editor"
msgstr "Редактор"

msgid "Raymond Hettinger"
msgstr "Raymond Hettinger"

msgid ""
"This article explains the new features in Python 3.8, compared to 3.7. "
"Python 3.8 was released on October 14, 2019. For full details, see the :ref:"
"`changelog <changelog>`."
msgstr ""
"У цій статті пояснюється нові функції в Python 3.8 порівняно з 3.7. Python "
"3.8 було випущено 14 жовтня 2019 року. Щоб отримати повну інформацію, "
"перегляньте :ref:`журнал змін <changelog>`."

msgid "Summary -- Release highlights"
msgstr "Підсумок – основні моменти випуску"

msgid "New Features"
msgstr "Нові можливості"

msgid "Assignment expressions"
msgstr "Вирази присвоєння"

msgid ""
"There is new syntax ``:=`` that assigns values to variables as part of a "
"larger expression. It is affectionately known as \"the walrus operator\" due "
"to its resemblance to `the eyes and tusks of a walrus <https://en.wikipedia."
"org/wiki/Walrus#/media/File:Pacific_Walrus_-_Bull_(8247646168).jpg>`_."
msgstr ""
"Існує новий синтаксис ``:=``, який призначає значення змінним як частину "
"більшого виразу. Його ласкаво називають \"оператором моржа\" через його "
"схожість з `очима та бивнями моржа <https://en.wikipedia.org/wiki/Walrus#/"
"media/File:Pacific_Walrus_-_Bull_(8247646168).jpg>`."

msgid ""
"In this example, the assignment expression helps avoid calling :func:`len` "
"twice::"
msgstr ""
"У цьому прикладі вираз присвоєння допомагає уникнути виклику :func:`len` "
"двічі::"

msgid ""
"A similar benefit arises during regular expression matching where match "
"objects are needed twice, once to test whether a match occurred and another "
"to extract a subgroup::"
msgstr ""
"Подібна перевага виникає під час зіставлення регулярних виразів, коли "
"об’єкти збігу потрібні двічі: один раз, щоб перевірити, чи відбувся збіг, а "
"другий – щоб отримати підгрупу::"

msgid ""
"The operator is also useful with while-loops that compute a value to test "
"loop termination and then need that same value again in the body of the "
"loop::"
msgstr ""
"Оператор також корисний у циклах while, які обчислюють значення для "
"перевірки завершення циклу, а потім знову потребують того самого значення в "
"тілі циклу::"

msgid ""
"Another motivating use case arises in list comprehensions where a value "
"computed in a filtering condition is also needed in the expression body::"
msgstr ""
"Інший спонукальний випадок використання виникає під час розуміння списку, де "
"значення, обчислене в умові фільтрації, також потрібне в тілі виразу::"

msgid ""
"Try to limit use of the walrus operator to clean cases that reduce "
"complexity and improve readability."
msgstr ""
"Спробуйте обмежити використання оператора Walrus для очищення випадків, що "
"зменшує складність і покращує читабельність."

msgid "See :pep:`572` for a full description."
msgstr "Дивіться :pep:`572` для повного опису."

msgid "(Contributed by Emily Morehouse in :issue:`35224`.)"
msgstr "(Надано Емілі Морхаус у :issue:`35224`.)"

msgid "Positional-only parameters"
msgstr "Лише позиційні параметри"

msgid ""
"There is a new function parameter syntax ``/`` to indicate that some "
"function parameters must be specified positionally and cannot be used as "
"keyword arguments.  This is the same notation shown by ``help()`` for C "
"functions annotated with Larry Hastings' :ref:`Argument Clinic <howto-"
"clinic>` tool."
msgstr ""

msgid ""
"In the following example, parameters *a* and *b* are positional-only, while "
"*c* or *d* can be positional or keyword, and *e* or *f* are required to be "
"keywords::"
msgstr ""
"У наступному прикладі параметри *a* і *b* є лише позиційними, тоді як *c* "
"або *d* можуть бути позиційними або ключовими словами, а *e* або *f* мають "
"бути ключовими словами::"

msgid "The following is a valid call::"
msgstr "Нижче наведено дійсний виклик:"

msgid "However, these are invalid calls::"
msgstr "Однак це недійсні виклики::"

msgid ""
"One use case for this notation is that it allows pure Python functions to "
"fully emulate behaviors of existing C coded functions.  For example, the "
"built-in :func:`divmod` function does not accept keyword arguments::"
msgstr ""
"Одним із випадків використання цієї нотації є те, що вона дозволяє чистим "
"функціям Python повністю емулювати поведінку існуючих функцій, закодованих "
"на C. Наприклад, вбудована функція :func:`divmod` не приймає ключові "
"аргументи::"

msgid ""
"Another use case is to preclude keyword arguments when the parameter name is "
"not helpful.  For example, the builtin :func:`len` function has the "
"signature ``len(obj, /)``.  This precludes awkward calls such as::"
msgstr ""
"Іншим випадком використання є виключення аргументів ключового слова, коли "
"назва параметра не є корисною. Наприклад, вбудована функція :func:`len` має "
"підпис ``len(obj, /)``. Це виключає незручні виклики, такі як::"

msgid ""
"A further benefit of marking a parameter as positional-only is that it "
"allows the parameter name to be changed in the future without risk of "
"breaking client code.  For example, in the :mod:`statistics` module, the "
"parameter name *dist* may be changed in the future.  This was made possible "
"with the following function specification::"
msgstr ""
"Додаткова перевага позначення параметра як лише позиційного полягає в тому, "
"що це дозволяє змінювати ім’я параметра в майбутньому без ризику зламати код "
"клієнта. Наприклад, у модулі :mod:`statistic` назва параметра *dist* може "
"бути змінена в майбутньому. Це стало можливим завдяки наступній специфікації "
"функції:"

msgid ""
"Since the parameters to the left of ``/`` are not exposed as possible "
"keywords, the parameters names remain available for use in ``**kwargs``::"
msgstr ""
"Оскільки параметри ліворуч від ``/`` не представлені як можливі ключові "
"слова, назви параметрів залишаються доступними для використання в "
"``**kwargs``::"

msgid ""
"This greatly simplifies the implementation of functions and methods that "
"need to accept arbitrary keyword arguments.  For example, here is an excerpt "
"from code in the :mod:`collections` module::"
msgstr ""
"Це значно спрощує реалізацію функцій і методів, які повинні приймати "
"довільні аргументи ключового слова. Наприклад, ось фрагмент коду в модулі :"
"mod:`collections`::"

msgid "See :pep:`570` for a full description."
msgstr "Дивіться :pep:`570` для повного опису."

msgid "(Contributed by Pablo Galindo in :issue:`36540`.)"
msgstr "(Надав Pablo Galindo в :issue:`36540`.)"

msgid "Parallel filesystem cache for compiled bytecode files"
msgstr "Паралельний кеш файлової системи для скомпільованих файлів байт-коду"

msgid ""
"The new :envvar:`PYTHONPYCACHEPREFIX` setting (also available as :option:`-"
"X` ``pycache_prefix``) configures the implicit bytecode cache to use a "
"separate parallel filesystem tree, rather than the default ``__pycache__`` "
"subdirectories within each source directory."
msgstr ""
"Нове налаштування :envvar:`PYTHONPYCACHEPREFIX` (також доступне як :option:`-"
"X` ``pycache_prefix``) налаштовує неявний кеш байт-коду на використання "
"окремого паралельного дерева файлової системи, а не стандартних підкаталогів "
"``__pycache__`` всередині кожен вихідний каталог."

msgid ""
"The location of the cache is reported in :data:`sys.pycache_prefix` (:const:"
"`None` indicates the default location in ``__pycache__`` subdirectories)."
msgstr ""
"Розташування кешу повідомляється в :data:`sys.pycache_prefix` (:const:`None` "
"вказує на розташування за умовчанням у підкаталогах ``__pycache__``)."

msgid "(Contributed by Carl Meyer in :issue:`33499`.)"
msgstr "(Надано Карлом Майєром у :issue:`33499`.)"

msgid "Debug build uses the same ABI as release build"
msgstr "Збірка налагодження використовує той самий ABI, що й збірка випуску"

msgid ""
"Python now uses the same ABI whether it's built in release or debug mode. On "
"Unix, when Python is built in debug mode, it is now possible to load C "
"extensions built in release mode and C extensions built using the stable ABI."
msgstr ""
"Тепер Python використовує той самий ABI, незалежно від того, чи створено "
"його в режимі випуску чи налагодження. У Unix, коли Python створено в режимі "
"налагодження, тепер можна завантажувати розширення C, створені в режимі "
"випуску, і розширення C, створені за допомогою стабільного ABI."

msgid ""
"Release builds and :ref:`debug builds <debug-build>` are now ABI compatible: "
"defining the ``Py_DEBUG`` macro no longer implies the ``Py_TRACE_REFS`` "
"macro, which introduces the only ABI incompatibility. The ``Py_TRACE_REFS`` "
"macro, which adds the :func:`sys.getobjects` function and the :envvar:"
"`PYTHONDUMPREFS` environment variable, can be set using the new :option:`./"
"configure --with-trace-refs <--with-trace-refs>` build option. (Contributed "
"by Victor Stinner in :issue:`36465`.)"
msgstr ""
"Випускні збірки та :ref:`налагоджувальні збірки <debug-build>` тепер сумісні "
"з ABI: визначення макросу ``Py_DEBUG`` більше не означає макрос "
"``Py_TRACE_REFS``, який створює єдину несумісність ABI. Макрос "
"``Py_TRACE_REFS``, який додає функцію :func:`sys.getobjects` і змінну "
"середовища :envvar:`PYTHONDUMPREFS`, можна встановити за допомогою нового :"
"option:`./configure --with-trace- refs <--with-trace-refs>` параметр збірки. "
"(Надав Віктор Стіннер у :issue:`36465`.)"

msgid ""
"On Unix, C extensions are no longer linked to libpython except on Android "
"and Cygwin. It is now possible for a statically linked Python to load a C "
"extension built using a shared library Python. (Contributed by Victor "
"Stinner in :issue:`21536`.)"
msgstr ""
"В Unix розширення C більше не пов’язані з libpython, за винятком Android і "
"Cygwin. Статично зв’язаний Python тепер може завантажувати розширення C, "
"створене за допомогою спільної бібліотеки Python. (Надав Віктор Стіннер у :"
"issue:`21536`.)"

msgid ""
"On Unix, when Python is built in debug mode, import now also looks for C "
"extensions compiled in release mode and for C extensions compiled with the "
"stable ABI. (Contributed by Victor Stinner in :issue:`36722`.)"
msgstr ""
"У Unix, коли Python створено в режимі налагодження, імпорт тепер також шукає "
"розширення C, скомпільовані в режимі випуску, і розширення C, скомпільовані "
"зі стабільним ABI. (Надав Віктор Стіннер у :issue:`36722`.)"

msgid ""
"To embed Python into an application, a new ``--embed`` option must be passed "
"to ``python3-config --libs --embed`` to get ``-lpython3.8`` (link the "
"application to libpython). To support both 3.8 and older, try ``python3-"
"config --libs --embed`` first and fallback to ``python3-config --libs`` "
"(without ``--embed``) if the previous command fails."
msgstr ""
"Щоб вставити Python у програму, нову опцію ``--embed`` потрібно передати в "
"``python3-config --libs --embed``, щоб отримати ``-lpython3.8`` (пов’язати "
"програму з libpython ). Щоб підтримувати як 3.8, так і старіші, спробуйте "
"спочатку ``python3-config --libs --embed`` і поверніться до ``python3-config "
"--libs`` (без ``--embed``), якщо попередня команда не вдається ."

msgid ""
"Add a pkg-config ``python-3.8-embed`` module to embed Python into an "
"application: ``pkg-config python-3.8-embed --libs`` includes ``-"
"lpython3.8``. To support both 3.8 and older, try ``pkg-config python-X.Y-"
"embed --libs`` first and fallback to ``pkg-config python-X.Y --libs`` "
"(without ``--embed``) if the previous command fails (replace ``X.Y`` with "
"the Python version)."
msgstr ""
"Додайте модуль pkg-config ``python-3.8-embed``, щоб вставити Python у "
"програму: ``pkg-config python-3.8-embed --libs`` включає ``-lpython3.8``. "
"Щоб підтримувати версії 3.8 і старіші, спочатку спробуйте ``pkg-config "
"python-X.Y-embed --libs`` і поверніться до ``pkg-config python-X.Y --libs`` "
"(без ``--embed``). якщо попередня команда не виконується (замініть ``X.Y`` "
"версією Python)."

msgid ""
"On the other hand, ``pkg-config python3.8 --libs`` no longer contains ``-"
"lpython3.8``. C extensions must not be linked to libpython (except on "
"Android and Cygwin, whose cases are handled by the script); this change is "
"backward incompatible on purpose. (Contributed by Victor Stinner in :issue:"
"`36721`.)"
msgstr ""
"З іншого боку, ``pkg-config python3.8 --libs`` більше не містить ``-"
"lpython3.8``. Розширення C не повинні бути пов’язані з libpython (за "
"винятком Android і Cygwin, випадки яких обробляються скриптом); ця зміна "
"навмисно зворотно несумісна. (Надав Віктор Стіннер у :issue:`36721`.)"

msgid "f-strings support ``=`` for self-documenting expressions and debugging"
msgstr ""
"f-рядки підтримують ``=`` для самодокументованих виразів і налагодження"

msgid ""
"Added an ``=`` specifier to :term:`f-string`\\s. An f-string such as "
"``f'{expr=}'`` will expand to the text of the expression, an equal sign, "
"then the representation of the evaluated expression.  For example:"
msgstr ""
"Додано специфікатор ``=`` до :term:`f-string`\\s. Рядок f, такий як "
"``f'{expr=}''`` розгорнеться до тексту виразу, знака рівності, а потім "
"представлення обчисленого виразу. Наприклад:"

msgid ""
"The usual :ref:`f-string format specifiers <f-strings>` allow more control "
"over how the result of the expression is displayed::"
msgstr ""
"Звичайні специфікатори формату :ref:`f-string <f-strings>` дозволяють краще "
"контролювати відображення результату виразу:"

msgid ""
"The ``=`` specifier will display the whole expression so that calculations "
"can be shown::"
msgstr ""
"Специфікатор ``=`` відобразить весь вираз, щоб можна було показати "
"обчислення::"

msgid "(Contributed by Eric V. Smith and Larry Hastings in :issue:`36817`.)"
msgstr "(Надано Еріком В. Смітом і Ларрі Гастінгсом у :issue:`36817`.)"

msgid "PEP 578: Python Runtime Audit Hooks"
msgstr "PEP 578: Перехоплювачі аудиту виконання Python"

msgid ""
"The PEP adds an Audit Hook and Verified Open Hook. Both are available from "
"Python and native code, allowing applications and frameworks written in pure "
"Python code to take advantage of extra notifications, while also allowing "
"embedders or system administrators to deploy builds of Python where auditing "
"is always enabled."
msgstr ""
"PEP додає Audit Hook і Verified Open Hook. Обидва доступні з Python і "
"рідного коду, що дозволяє програмам і фреймворкам, написаним на чистому коді "
"Python, використовувати додаткові сповіщення, а також дозволяючи розробникам "
"і системним адміністраторам розгортати збірки Python, де аудит завжди "
"ввімкнено."

msgid "See :pep:`578` for full details."
msgstr "Дивіться :pep:`578` для повної інформації."

msgid "PEP 587: Python Initialization Configuration"
msgstr "PEP 587: Конфігурація ініціалізації Python"

msgid ""
"The :pep:`587` adds a new C API to configure the Python Initialization "
"providing finer control on the whole configuration and better error "
"reporting."
msgstr ""
":pep:`587` додає новий C API для налаштування ініціалізації Python, "
"забезпечуючи точніший контроль над усією конфігурацією та кращі звіти про "
"помилки."

msgid "New structures:"
msgstr "Нові структури:"

msgid ":c:type:`PyConfig`"
msgstr ":c:type:`PyConfig`"

msgid ":c:type:`PyPreConfig`"
msgstr ":c:type:`PyPreConfig`"

msgid ":c:type:`PyStatus`"
msgstr ":c:type:`PyStatus`"

msgid ":c:type:`PyWideStringList`"
msgstr ":c:type:`PyWideStringList`"

msgid "New functions:"
msgstr "Нові функції:"

msgid ":c:func:`PyConfig_Clear`"
msgstr ":c:func:`PyConfig_Clear`"

msgid ":c:func:`PyConfig_InitIsolatedConfig`"
msgstr ":c:func:`PyConfig_InitIsolatedConfig`"

msgid ":c:func:`PyConfig_InitPythonConfig`"
msgstr ":c:func:`PyConfig_InitPythonConfig`"

msgid ":c:func:`PyConfig_Read`"
msgstr ":c:func:`PyConfig_Read`"

msgid ":c:func:`PyConfig_SetArgv`"
msgstr ":c:func:`PyConfig_SetArgv`"

msgid ":c:func:`PyConfig_SetBytesArgv`"
msgstr ":c:func:`PyConfig_SetBytesArgv`"

msgid ":c:func:`PyConfig_SetBytesString`"
msgstr ":c:func:`PyConfig_SetBytesString`"

msgid ":c:func:`PyConfig_SetString`"
msgstr ":c:func:`PyConfig_SetString`"

msgid ":c:func:`PyPreConfig_InitIsolatedConfig`"
msgstr ":c:func:`PyPreConfig_InitIsolatedConfig`"

msgid ":c:func:`PyPreConfig_InitPythonConfig`"
msgstr ":c:func:`PyPreConfig_InitPythonConfig`"

msgid ":c:func:`PyStatus_Error`"
msgstr ":c:func:`PyStatus_Error`"

msgid ":c:func:`PyStatus_Exception`"
msgstr ":c:func:`PyStatus_Exception`"

msgid ":c:func:`PyStatus_Exit`"
msgstr ":c:func:`PyStatus_Exit`"

msgid ":c:func:`PyStatus_IsError`"
msgstr ":c:func:`PyStatus_IsError`"

msgid ":c:func:`PyStatus_IsExit`"
msgstr ":c:func:`PyStatus_IsExit`"

msgid ":c:func:`PyStatus_NoMemory`"
msgstr ":c:func:`PyStatus_NoMemory`"

msgid ":c:func:`PyStatus_Ok`"
msgstr ":c:func:`PyStatus_Ok`"

msgid ":c:func:`PyWideStringList_Append`"
msgstr ":c:func:`PyWideStringList_Append`"

msgid ":c:func:`PyWideStringList_Insert`"
msgstr ":c:func:`PyWideStringList_Insert`"

msgid ":c:func:`Py_BytesMain`"
msgstr ":c:func:`Py_BytesMain`"

msgid ":c:func:`Py_ExitStatusException`"
msgstr ":c:func:`Py_ExitStatusException`"

msgid ":c:func:`Py_InitializeFromConfig`"
msgstr ":c:func:`Py_InitializeFromConfig`"

msgid ":c:func:`Py_PreInitialize`"
msgstr ":c:func:`Py_PreInitialize`"

msgid ":c:func:`Py_PreInitializeFromArgs`"
msgstr ":c:func:`Py_PreInitializeFromArgs`"

msgid ":c:func:`Py_PreInitializeFromBytesArgs`"
msgstr ":c:func:`Py_PreInitializeFromBytesArgs`"

msgid ":c:func:`Py_RunMain`"
msgstr ":c:func:`Py_RunMain`"

msgid ""
"This PEP also adds ``_PyRuntimeState.preconfig`` (:c:type:`PyPreConfig` "
"type) and ``PyInterpreterState.config`` (:c:type:`PyConfig` type) fields to "
"these internal structures. ``PyInterpreterState.config`` becomes the new "
"reference configuration, replacing global configuration variables and other "
"private variables."
msgstr ""
"Цей PEP також додає до цих внутрішніх структур поля ``_PyRuntimeState."
"preconfig`` (:c:type:`PyPreConfig` тип) і ``PyInterpreterState.config`` (:c:"
"type:`PyConfig` тип). ``PyInterpreterState.config`` стає новою еталонною "
"конфігурацією, замінюючи глобальні змінні конфігурації та інші приватні "
"змінні."

msgid ""
"See :ref:`Python Initialization Configuration <init-config>` for the "
"documentation."
msgstr ""
"Перегляньте :ref:`Налаштування ініціалізації Python <init-config>` для "
"документації."

msgid "See :pep:`587` for a full description."
msgstr "Дивіться :pep:`587` для повного опису."

msgid "(Contributed by Victor Stinner in :issue:`36763`.)"
msgstr "(Надав Віктор Стіннер у :issue:`36763`.)"

msgid "PEP 590: Vectorcall: a fast calling protocol for CPython"
msgstr "PEP 590: Vectorcall: швидкий протокол виклику для CPython"

msgid ""
":ref:`vectorcall` is added to the Python/C API. It is meant to formalize "
"existing optimizations which were already done for various classes. Any :ref:"
"`static type <static-types>` implementing a callable can use this protocol."
msgstr ""
":ref:`vectorcall` додано до API Python/C. Він призначений для формалізації "
"існуючих оптимізацій, які вже були зроблені для різних класів. Будь-який :"
"ref:`static type <static-types>`, що реалізує виклик, може використовувати "
"цей протокол."

msgid ""
"This is currently provisional. The aim is to make it fully public in Python "
"3.9."
msgstr ""
"Наразі це тимчасово. Мета полягає в тому, щоб зробити його повністю "
"публічним у Python 3.9."

msgid "See :pep:`590` for a full description."
msgstr "Дивіться :pep:`590` для повного опису."

msgid ""
"(Contributed by Jeroen Demeyer, Mark Shannon and Petr Viktorin in :issue:"
"`36974`.)"
msgstr ""
"(Надано Йероном Демейєром, Марком Шенноном і Петром Вікторіном у :issue:"
"`36974`.)"

msgid "Pickle protocol 5 with out-of-band data buffers"
msgstr "Протокол Pickle 5 із позасмуговими буферами даних"

msgid ""
"When :mod:`pickle` is used to transfer large data between Python processes "
"in order to take advantage of multi-core or multi-machine processing, it is "
"important to optimize the transfer by reducing memory copies, and possibly "
"by applying custom techniques such as data-dependent compression."
msgstr ""
"Коли :mod:`pickle` використовується для передачі великих даних між процесами "
"Python, щоб скористатися перевагами багатоядерної або багатомашинної "
"обробки, важливо оптимізувати передачу, зменшивши копії в пам’яті та, "
"можливо, застосувавши спеціальні методи, наприклад як залежне від даних "
"стиснення."

msgid ""
"The :mod:`pickle` protocol 5 introduces support for out-of-band buffers "
"where :pep:`3118`-compatible data can be transmitted separately from the "
"main pickle stream, at the discretion of the communication layer."
msgstr ""
"Протокол :mod:`pickle` 5 вводить підтримку позасмугових буферів, де :pep:"
"`3118`-сумісні дані можуть передаватись окремо від основного потоку pickle, "
"на розсуд рівня зв’язку."

msgid "See :pep:`574` for a full description."
msgstr "Дивіться :pep:`574` для повного опису."

msgid "(Contributed by Antoine Pitrou in :issue:`36785`.)"
msgstr "(Надав Антуан Пітру в :issue:`36785`.)"

msgid "Other Language Changes"
msgstr "Інші зміни мови"

msgid ""
"A :keyword:`continue` statement was illegal in the :keyword:`finally` clause "
"due to a problem with the implementation.  In Python 3.8 this restriction "
"was lifted. (Contributed by Serhiy Storchaka in :issue:`32489`.)"
msgstr ""
"Оператор :keyword:`continue` був незаконним у пункті :keyword:`finally` "
"через проблему з реалізацією. У Python 3.8 це обмеження було знято. (Надав "
"Сергій Сторчака в :issue:`32489`.)"

msgid ""
"The :class:`bool`, :class:`int`, and :class:`fractions.Fraction` types now "
"have an :meth:`~int.as_integer_ratio` method like that found in :class:"
"`float` and :class:`decimal.Decimal`.  This minor API extension makes it "
"possible to write ``numerator, denominator = x.as_integer_ratio()`` and have "
"it work across multiple numeric types. (Contributed by Lisa Roach in :issue:"
"`33073` and Raymond Hettinger in :issue:`37819`.)"
msgstr ""
"Типи :class:`bool`, :class:`int` і :class:`fractions.Fraction` тепер мають "
"метод :meth:`~int.as_integer_ratio`, подібний до того, що є в :class:`float` "
"і :class:`decimal.Decimal`. Це другорядне розширення API дає змогу написати "
"``чисельник, знаменник = x.as_integer_ratio()`` і налаштувати його роботу з "
"кількома числовими типами. (Надано Лізою Роуч у :issue:`33073` та Реймондом "
"Геттінгером у :issue:`37819`.)"

msgid ""
"Constructors of :class:`int`, :class:`float` and :class:`complex` will now "
"use the :meth:`~object.__index__` special method, if available and the "
"corresponding method :meth:`~object.__int__`, :meth:`~object.__float__` or :"
"meth:`~object.__complex__` is not available. (Contributed by Serhiy "
"Storchaka in :issue:`20092`.)"
msgstr ""
"Конструктори :class:`int`, :class:`float` і :class:`complex` тепер "
"використовуватимуть спеціальний метод :meth:`~object.__index__`, якщо він "
"доступний, і відповідний метод :meth:`~object .__int__`, :meth:`~object."
"__float__` або :meth:`~object.__complex__` недоступні. (Надав Сергій "
"Сторчака у :issue:`20092`.)"

msgid ""
"Added support of ``\\N{name}`` escapes in :mod:`regular expressions <re>`::"
msgstr ""
"Додано підтримку ``\\N{name}`` екранування в :mod:`регулярних виразах <re>`::"

msgid ""
"(Contributed by Jonathan Eunice and Serhiy Storchaka in :issue:`30688`.)"
msgstr "(Надано Джонатаном Юнісом і Сергієм Сторчакою в :issue:`30688`.)"

msgid ""
"Dict and dictviews are now iterable in reversed insertion order using :func:"
"`reversed`. (Contributed by Rémi Lapeyre in :issue:`33462`.)"
msgstr ""
"Dict і dictviews тепер можна повторювати у зворотному порядку вставки за "
"допомогою :func:`reversed`. (Надав Ремі Лапейр у :issue:`33462`.)"

msgid ""
"The syntax allowed for keyword names in function calls was further "
"restricted. In particular, ``f((keyword)=arg)`` is no longer allowed. It was "
"never intended to permit more than a bare name on the left-hand side of a "
"keyword argument assignment term. (Contributed by Benjamin Peterson in :"
"issue:`34641`.)"
msgstr ""
"Синтаксис, дозволений для імен ключових слів у викликах функцій, був "
"додатково обмежений. Зокрема, ``f((keyword)=arg)`` більше не дозволяється. "
"Він ніколи не мав на меті дозволити більше, ніж голе ім’я в лівій частині "
"терміна призначення аргументу ключового слова. (Надав Бенджамін Петерсон у :"
"issue:`34641`.)"

msgid ""
"Generalized iterable unpacking in :keyword:`yield` and :keyword:`return` "
"statements no longer requires enclosing parentheses. This brings the *yield* "
"and *return* syntax into better agreement with normal assignment syntax::"
msgstr ""
"Узагальнене ітераційне розпакування в операторах :keyword:`yield` і :keyword:"
"`return` більше не потребує включення дужок. Завдяки цьому синтаксис *yield* "
"і *return* краще узгоджується зі звичайним синтаксисом призначення:"

msgid "(Contributed by David Cuthbert and Jordan Chapman in :issue:`32117`.)"
msgstr "(Надано Девідом Катбертом і Джорданом Чепменом у :issue:`32117`.)"

msgid ""
"When a comma is missed in code such as ``[(10, 20) (30, 40)]``, the compiler "
"displays a :exc:`SyntaxWarning` with a helpful suggestion. This improves on "
"just having a :exc:`TypeError` indicating that the first tuple was not "
"callable.  (Contributed by Serhiy Storchaka in :issue:`15248`.)"
msgstr ""
"Якщо в коді пропущена кома, як-от ``[(10, 20) (30, 40)]``, компілятор "
"відображає :exc:`SyntaxWarning` з корисною пропозицією. Це покращує "
"наявність лише :exc:`TypeError`, яка вказує, що перший кортеж не можна "
"викликати. (Надав Сергій Сторчака в :issue:`15248`.)"

msgid ""
"Arithmetic operations between subclasses of :class:`datetime.date` or :class:"
"`datetime.datetime` and :class:`datetime.timedelta` objects now return an "
"instance of the subclass, rather than the base class. This also affects the "
"return type of operations whose implementation (directly or indirectly) "
"uses :class:`datetime.timedelta` arithmetic, such as :meth:`~datetime."
"datetime.astimezone`. (Contributed by Paul Ganssle in :issue:`32417`.)"
msgstr ""
"Арифметичні операції між підкласами об’єктів :class:`datetime.date` або :"
"class:`datetime.datetime` і :class:`datetime.timedelta` тепер повертають "
"екземпляр підкласу, а не базового класу. Це також впливає на тип повернення "
"операцій, реалізація яких (прямо чи опосередковано) використовує арифметику :"
"class:`datetime.timedelta`, наприклад :meth:`~datetime.datetime.astimezone`. "
"(Надав Пол Ганссле в :issue:`32417`.)"

msgid ""
"When the Python interpreter is interrupted by Ctrl-C (SIGINT) and the "
"resulting :exc:`KeyboardInterrupt` exception is not caught, the Python "
"process now exits via a SIGINT signal or with the correct exit code such "
"that the calling process can detect that it died due to a Ctrl-C.  Shells on "
"POSIX and Windows use this to properly terminate scripts in interactive "
"sessions. (Contributed by Google via Gregory P. Smith in :issue:`1054041`.)"
msgstr ""
"Коли інтерпретатор Python переривається Ctrl-C (SIGINT) і результуючий "
"виняток :exc:`KeyboardInterrupt` не перехоплюється, процес Python тепер "
"завершує роботу через сигнал SIGINT або з правильним кодом виходу, щоб "
"процес виклику міг виявити це він помер через Ctrl-C. Оболонки в POSIX і "
"Windows використовують це для належного завершення сценаріїв під час "
"інтерактивних сеансів. (Надано Google через Грегорі П. Сміта в :issue:"
"`1054041`.)"

msgid ""
"Some advanced styles of programming require updating the :class:`types."
"CodeType` object for an existing function.  Since code objects are "
"immutable, a new code object needs to be created, one that is modeled on the "
"existing code object.  With 19 parameters, this was somewhat tedious.  Now, "
"the new ``replace()`` method makes it possible to create a clone with a few "
"altered parameters."
msgstr ""
"Деякі просунуті стилі програмування вимагають оновлення об’єкта :class:"
"`types.CodeType` для наявної функції. Оскільки кодові об’єкти є незмінними, "
"необхідно створити новий кодовий об’єкт, змодельований на основі існуючого "
"кодового об’єкта. З 19 параметрами це було дещо втомливо. Тепер новий метод "
"``replace()`` дозволяє створити клон із декількома зміненими параметрами."

msgid ""
"Here's an example that alters the :func:`statistics.mean` function to "
"prevent the *data* parameter from being used as a keyword argument::"
msgstr ""
"Ось приклад, який змінює функцію :func:`statistics.mean`, щоб запобігти "
"використанню параметра *data* як аргументу ключового слова:"

msgid "(Contributed by Victor Stinner in :issue:`37032`.)"
msgstr "(Надав Віктор Стіннер у :issue:`37032`.)"

msgid ""
"For integers, the three-argument form of the :func:`pow` function now "
"permits the exponent to be negative in the case where the base is relatively "
"prime to the modulus. It then computes a modular inverse to the base when "
"the exponent is ``-1``, and a suitable power of that inverse for other "
"negative exponents.  For example, to compute the `modular multiplicative "
"inverse <https://en.wikipedia.org/wiki/Modular_multiplicative_inverse>`_ of "
"38 modulo 137, write::"
msgstr ""
"Для цілих чисел форма функції :func:`pow` із трьома аргументами тепер "
"дозволяє показнику степеня бути від’ємним у випадку, коли основа взаємно "
"проста до модуля. Потім він обчислює модульну величину, обернену до основи, "
"коли експонента дорівнює ``-1``, і відповідний ступінь цієї оберненої "
"величини для інших від’ємних показників степеня. Наприклад, щоб обчислити "
"`модульний мультиплікативний обернений <https://en.wikipedia.org/wiki/"
"Modular_multiplicative_inverse>`_ 38 за модулем 137, напишіть::"

msgid ""
"Modular inverses arise in the solution of `linear Diophantine equations "
"<https://en.wikipedia.org/wiki/Diophantine_equation>`_. For example, to find "
"integer solutions for ``4258𝑥 + 147𝑦 = 369``, first rewrite as ``4258𝑥 ≡ 369 "
"(mod 147)`` then solve:"
msgstr ""
"Модульні обернені виникають при розв’язуванні \"лінійних діофантових рівнянь "
"<https://en.wikipedia.org/wiki/Diophantine_equation>\" _. Наприклад, щоб "
"знайти цілочисельні розв’язки для ``4258𝑥 + 147𝑦 = 369``, спочатку "
"перепишіть як ``4258𝑥 ≡ 369 (mod 147)``, а потім розв’яжіть:"

msgid "(Contributed by Mark Dickinson in :issue:`36027`.)"
msgstr "(Надав Марк Дікінсон у :issue:`36027`.)"

msgid ""
"Dict comprehensions have been synced-up with dict literals so that the key "
"is computed first and the value second::"
msgstr ""
"Розуміння Dict було синхронізовано з літералами Dict, так що спочатку "
"обчислюється ключ, а потім значення::"

msgid ""
"The guaranteed execution order is helpful with assignment expressions "
"because variables assigned in the key expression will be available in the "
"value expression::"
msgstr ""
"Гарантований порядок виконання корисний у виразах призначення, оскільки "
"змінні, призначені у ключовому виразі, будуть доступні у виразі значення::"

msgid "(Contributed by Jörn Heissler in :issue:`35224`.)"
msgstr "(Надав Йорн Гайслер у :issue:`35224`.)"

msgid ""
"The :meth:`object.__reduce__` method can now return a tuple from two to six "
"elements long. Formerly, five was the limit.  The new, optional sixth "
"element is a callable with a ``(obj, state)`` signature.  This allows the "
"direct control over the state-updating behavior of a specific object.  If "
"not *None*, this callable will have priority over the object's :meth:"
"`~__setstate__` method. (Contributed by Pierre Glaser and Olivier Grisel in :"
"issue:`35900`.)"
msgstr ""
"Метод :meth:`object.__reduce__` тепер може повертати кортеж довжиною від "
"двох до шести елементів. Раніше обмеженням було п’ять. Новий необов’язковий "
"шостий елемент – це виклик із сигнатурою ``(obj, state)``. Це дозволяє "
"безпосередньо контролювати поведінку певного об’єкта при оновленні стану. "
"Якщо не *None*, цей виклик матиме пріоритет над методом :meth:"
"`~__setstate__` об’єкта. (Надано П’єром Глейзером і Олів’є Грізелем у :issue:"
"`35900`.)"

msgid "New Modules"
msgstr "Нові модулі"

msgid ""
"The new :mod:`importlib.metadata` module provides (provisional) support for "
"reading metadata from third-party packages.  For example, it can extract an "
"installed package's version number, list of entry points, and more::"
msgstr ""
"Новий модуль :mod:`importlib.metadata` забезпечує (тимчасову) підтримку "
"читання метаданих зі сторонніх пакетів. Наприклад, він може отримати номер "
"версії встановленого пакета, список точок входу тощо:"

msgid "(Contributed by Barry Warsaw and Jason R. Coombs in :issue:`34632`.)"
msgstr "(Надано Баррі Варшау та Джейсоном Р. Кумбсом у :issue:`34632`.)"

msgid "Improved Modules"
msgstr "Покращені модулі"

msgid "ast"
msgstr "аст"

msgid ""
"AST nodes now have ``end_lineno`` and ``end_col_offset`` attributes, which "
"give the precise location of the end of the node.  (This only applies to "
"nodes that have ``lineno`` and ``col_offset`` attributes.)"
msgstr ""
"Вузли AST тепер мають атрибути ``end_lineno`` і ``end_col_offset``, які "
"дають точне розташування кінця вузла. (Це стосується лише вузлів, які мають "
"атрибути ``lineno`` і ``col_offset``.)"

msgid ""
"New function :func:`ast.get_source_segment` returns the source code for a "
"specific AST node."
msgstr ""
"Нова функція :func:`ast.get_source_segment` повертає вихідний код для "
"певного вузла AST."

msgid "(Contributed by Ivan Levkivskyi in :issue:`33416`.)"
msgstr "(Надав Іван Левківський у :issue:`33416`.)"

msgid "The :func:`ast.parse` function has some new flags:"
msgstr "Функція :func:`ast.parse` має кілька нових позначок:"

msgid ""
"``type_comments=True`` causes it to return the text of :pep:`484` and :pep:"
"`526` type comments associated with certain AST nodes;"
msgstr ""
"``type_comments=True`` змушує повертати текст коментарів типу :pep:`484` і :"
"pep:`526`, пов’язаних із певними вузлами AST;"

msgid ""
"``mode='func_type'`` can be used to parse :pep:`484` \"signature type "
"comments\" (returned for function definition AST nodes);"
msgstr ""
"``mode='func_type'`` можна використовувати для аналізу :pep:`484` "
"\"коментарів типу підпису\" (повертається для вузлів AST визначення функції);"

msgid ""
"``feature_version=(3, N)`` allows specifying an earlier Python 3 version.  "
"For example, ``feature_version=(3, 4)`` will treat :keyword:`async` and :"
"keyword:`await` as non-reserved words."
msgstr ""
"``feature_version=(3, N)`` дозволяє вказати попередню версію Python 3. "
"Наприклад, ``feature_version=(3, 4)`` розглядатиме :keyword:`async` і :"
"keyword:`await` як незарезервовані слова."

msgid "(Contributed by Guido van Rossum in :issue:`35766`.)"
msgstr "(Надав Гвідо ван Россум у :issue:`35766`.)"

msgid "asyncio"
msgstr "asyncio"

msgid ""
":func:`asyncio.run` has graduated from the provisional to stable API. This "
"function can be used to execute a :term:`coroutine` and return the result "
"while automatically managing the event loop. For example::"
msgstr ""
":func:`asyncio.run` перейшов від попереднього до стабільного API. Цю функцію "
"можна використовувати для виконання :term:`coroutine` і повернення "
"результату під час автоматичного керування циклом подій. Наприклад::"

msgid "This is *roughly* equivalent to::"
msgstr "Це *приблизно* еквівалентно::"

msgid ""
"The actual implementation is significantly more complex. Thus, :func:"
"`asyncio.run` should be the preferred way of running asyncio programs."
msgstr ""
"Фактична реалізація значно складніша. Таким чином, :func:`asyncio.run` має "
"бути кращим способом запуску асинхронних програм."

msgid "(Contributed by Yury Selivanov in :issue:`32314`.)"
msgstr "(Надав Юрій Селіванов у :issue:`32314`.)"

msgid ""
"Running ``python -m asyncio`` launches a natively async REPL.  This allows "
"rapid experimentation with code that has a top-level :keyword:`await`.  "
"There is no longer a need to directly call ``asyncio.run()`` which would "
"spawn a new event loop on every invocation:"
msgstr ""
"Запуск ``python -m asyncio`` запускає нативний асинхронний REPL. Це дозволяє "
"швидко експериментувати з кодом, який має :keyword:`await` верхнього рівня. "
"Більше немає потреби безпосередньо викликати ``asyncio.run()``, який "
"породжував би новий цикл подій під час кожного виклику:"

msgid "(Contributed by Yury Selivanov in :issue:`37028`.)"
msgstr "(Надав Юрій Селіванов у :issue:`37028`.)"

msgid ""
"The exception :class:`asyncio.CancelledError` now inherits from :class:"
"`BaseException` rather than :class:`Exception` and no longer inherits from :"
"class:`concurrent.futures.CancelledError`. (Contributed by Yury Selivanov "
"in :issue:`32528`.)"
msgstr ""
"Виняток :class:`asyncio.CancelledError` тепер успадковується від :class:"
"`BaseException`, а не від :class:`Exception` і більше не успадковується від :"
"class:`concurrent.futures.CancelledError`. (Надав Юрій Селіванов у :issue:"
"`32528`.)"

msgid ""
"On Windows, the default event loop is now :class:`~asyncio."
"ProactorEventLoop`. (Contributed by Victor Stinner in :issue:`34687`.)"
msgstr ""
"У Windows типовим циклом подій тепер є :class:`~asyncio.ProactorEventLoop`. "
"(Надав Віктор Стіннер у :issue:`34687`.)"

msgid ""
":class:`~asyncio.ProactorEventLoop` now also supports UDP. (Contributed by "
"Adam Meily and Andrew Svetlov in :issue:`29883`.)"
msgstr ""
":class:`~asyncio.ProactorEventLoop` тепер також підтримує UDP. (Надано "
"Адамом Мейлі та Ендрю Свєтловим у :issue:`29883`.)"

msgid ""
":class:`~asyncio.ProactorEventLoop` can now be interrupted by :exc:"
"`KeyboardInterrupt` (\"CTRL+C\"). (Contributed by Vladimir Matveev in :issue:"
"`23057`.)"
msgstr ""
":class:`~asyncio.ProactorEventLoop` тепер можна переривати :exc:"
"`KeyboardInterrupt` (\"CTRL+C\"). (Надав Володимир Матвєєв у :issue:`23057`.)"

msgid ""
"Added :meth:`asyncio.Task.get_coro` for getting the wrapped coroutine within "
"an :class:`asyncio.Task`. (Contributed by Alex Grönholm in :issue:`36999`.)"
msgstr ""
"Додано :meth:`asyncio.Task.get_coro` для отримання загорнутої співпрограми "
"в :class:`asyncio.Task`. (Надав Алекс Грьонхольм у :issue:`36999`.)"

msgid ""
"Asyncio tasks can now be named, either by passing the ``name`` keyword "
"argument to :func:`asyncio.create_task` or the :meth:`~asyncio.loop."
"create_task` event loop method, or by calling the :meth:`~asyncio.Task."
"set_name` method on the task object. The task name is visible in the "
"``repr()`` output of :class:`asyncio.Task` and can also be retrieved using "
"the :meth:`~asyncio.Task.get_name` method. (Contributed by Alex Grönholm in :"
"issue:`34270`.)"
msgstr ""
"Асинхронним завданням тепер можна присвоювати назви, передавши аргумент "
"ключового слова ``name`` до :func:`asyncio.create_task` або методу циклу "
"подій :meth:`~asyncio.loop.create_task`, або викликавши :meth:`~asyncio.Task."
"set_name` метод об’єкта завдання. Ім’я завдання відображається у виведенні "
"``repr()`` :class:`asyncio.Task` і також може бути отримано за допомогою "
"методу :meth:`~asyncio.Task.get_name`. (Надав Алекс Грьонхольм у :issue:"
"`34270`.)"

msgid ""
"Added support for `Happy Eyeballs <https://en.wikipedia.org/wiki/"
"Happy_Eyeballs>`_ to :func:`asyncio.loop.create_connection`. To specify the "
"behavior, two new parameters have been added: *happy_eyeballs_delay* and "
"*interleave*. The Happy Eyeballs algorithm improves responsiveness in "
"applications that support IPv4 and IPv6 by attempting to simultaneously "
"connect using both. (Contributed by twisteroid ambassador in :issue:`33530`.)"
msgstr ""
"Додано підтримку `Happy Eyeballs <https://en.wikipedia.org/wiki/"
"Happy_Eyeballs>`_ до :func:`asyncio.loop.create_connection`. Щоб визначити "
"поведінку, було додано два нові параметри: *happy_eyeballs_delay* і "
"*interleave*. Алгоритм Happy Eyeballs покращує швидкість реагування в "
"програмах, які підтримують IPv4 та IPv6, намагаючись одночасно підключитися "
"за допомогою обох. (Надано twisteroid ambassador у :issue:`33530`.)"

msgid "builtins"
msgstr "вбудовані елементи"

msgid ""
"The :func:`compile` built-in has been improved to accept the ``ast."
"PyCF_ALLOW_TOP_LEVEL_AWAIT`` flag. With this new flag passed, :func:"
"`compile` will allow top-level ``await``, ``async for`` and ``async with`` "
"constructs that are usually considered invalid syntax. Asynchronous code "
"object marked with the ``CO_COROUTINE`` flag may then be returned. "
"(Contributed by Matthias Bussonnier in :issue:`34616`)"
msgstr ""
"Вбудований :func:`compile` був покращений, щоб приймати прапорець ``ast."
"PyCF_ALLOW_TOP_LEVEL_AWAIT``. Після передачі цього нового прапора :func:"
"`compile` дозволить використовувати конструкції верхнього рівня ``await``, "
"``async for`` і ``async with``, які зазвичай вважаються недійсними "
"синтаксисом. Після цього можна повернути об’єкт асинхронного коду, "
"позначений прапором ``CO_COROUTINE``. (Надав Матіас Бюссонньє в :issue:"
"`34616`)"

msgid "collections"
msgstr "колекції"

msgid ""
"The :meth:`~collections.somenamedtuple._asdict` method for :func:"
"`collections.namedtuple` now returns a :class:`dict` instead of a :class:"
"`collections.OrderedDict`. This works because regular dicts have guaranteed "
"ordering since Python 3.7. If the extra features of :class:`OrderedDict` are "
"required, the suggested remediation is to cast the result to the desired "
"type: ``OrderedDict(nt._asdict())``. (Contributed by Raymond Hettinger in :"
"issue:`35864`.)"
msgstr ""
"Метод :meth:`~collections.somenamedtuple._asdict` для :func:`collections."
"namedtuple` тепер повертає :class:`dict` замість :class:`collections."
"OrderedDict`. Це працює, оскільки звичайні dicts мають гарантоване "
"впорядкування, починаючи з Python 3.7. Якщо потрібні додаткові функції :"
"class:`OrderedDict`, запропонованим виправленням є приведення результату до "
"потрібного типу: ``OrderedDict(nt._asdict())``. (Надав Реймонд Геттінгер у :"
"issue:`35864`.)"

msgid "cProfile"
msgstr "cProfile"

msgid ""
"The :class:`cProfile.Profile <profile.Profile>` class can now be used as a "
"context manager. Profile a block of code by running::"
msgstr ""
"Клас :class:`cProfile.Profile <profile.Profile>` тепер можна використовувати "
"як контекстний менеджер. Профілюйте блок коду, виконавши::"

msgid "(Contributed by Scott Sanderson in :issue:`29235`.)"
msgstr "(Надав Скотт Сандерсон у :issue:`29235`.)"

msgid "csv"
msgstr "csv"

msgid ""
"The :class:`csv.DictReader` now returns instances of :class:`dict` instead "
"of a :class:`collections.OrderedDict`.  The tool is now faster and uses less "
"memory while still preserving the field order. (Contributed by Michael Selik "
"in :issue:`34003`.)"
msgstr ""
":class:`csv.DictReader` тепер повертає екземпляри :class:`dict` замість :"
"class:`collections.OrderedDict`. Інструмент тепер працює швидше та "
"використовує менше пам’яті, але зберігає порядок полів. (Надав Майкл Селік "
"у :issue:`34003`.)"

msgid "curses"
msgstr "прокльони"

msgid ""
"Added a new variable holding structured version information for the "
"underlying ncurses library: :data:`~curses.ncurses_version`. (Contributed by "
"Serhiy Storchaka in :issue:`31680`.)"
msgstr ""
"Додано нову змінну, яка містить структуровану інформацію про версію базової "
"бібліотеки ncurses: :data:`~curses.ncurses_version`. (Надав Сергій Сторчака "
"в :issue:`31680`.)"

msgid "ctypes"
msgstr "ctypes"

msgid ""
"On Windows, :class:`~ctypes.CDLL` and subclasses now accept a *winmode* "
"parameter to specify flags for the underlying ``LoadLibraryEx`` call. The "
"default flags are set to only load DLL dependencies from trusted locations, "
"including the path where the DLL is stored (if a full or partial path is "
"used to load the initial DLL) and paths added by :func:`~os."
"add_dll_directory`. (Contributed by Steve Dower in :issue:`36085`.)"
msgstr ""
"У Windows :class:`~ctypes.CDLL` і підкласи тепер приймають параметр "
"*winmode* для визначення прапорів для основного виклику ``LoadLibraryEx``. "
"Прапорці за замовчуванням встановлено лише для завантаження залежностей DLL "
"із надійних місць, включаючи шлях, де зберігається DLL (якщо повний або "
"частковий шлях використовується для завантаження початкової DLL), і шляхи, "
"додані :func:`~os.add_dll_directory` . (Надав Стів Дауер у :issue:`36085`.)"

msgid "datetime"
msgstr "дата, час"

msgid ""
"Added new alternate constructors :meth:`datetime.date.fromisocalendar` and :"
"meth:`datetime.datetime.fromisocalendar`, which construct :class:`date` and :"
"class:`datetime` objects respectively from ISO year, week number, and "
"weekday; these are the inverse of each class's ``isocalendar`` method. "
"(Contributed by Paul Ganssle in :issue:`36004`.)"
msgstr ""
"Додано нові альтернативні конструктори :meth:`datetime.date.fromisocalendar` "
"і :meth:`datetime.datetime.fromisocalendar`, які створюють об’єкти :class:"
"`date` і :class:`datetime` відповідно з року ISO, номера тижня, і будній "
"день; вони є зворотними до методу ``isocalendar`` кожного класу. (Надав Пол "
"Ганссле в :issue:`36004`.)"

msgid "functools"
msgstr "functools"

msgid ""
":func:`functools.lru_cache` can now be used as a straight decorator rather "
"than as a function returning a decorator.  So both of these are now "
"supported::"
msgstr ""
":func:`functools.lru_cache` тепер можна використовувати як прямий декоратор, "
"а не як функцію, що повертає декоратор. Тож тепер підтримуються обидва:"

msgid "(Contributed by Raymond Hettinger in :issue:`36772`.)"
msgstr "(Надав Реймонд Геттінгер у :issue:`36772`.)"

msgid ""
"Added a new :func:`functools.cached_property` decorator, for computed "
"properties cached for the life of the instance. ::"
msgstr ""
"Додано новий декоратор :func:`functools.cached_property` для обчислених "
"властивостей, кешованих протягом життя примірника. ::"

msgid "(Contributed by Carl Meyer in :issue:`21145`)"
msgstr "(Надано Карлом Майєром у :issue:`21145`)"

msgid ""
"Added a new :func:`functools.singledispatchmethod` decorator that converts "
"methods into :term:`generic functions <generic function>` using :term:"
"`single dispatch`::"
msgstr ""
"Додано новий декоратор :func:`functools.singledispatchmethod`, який "
"перетворює методи на :term:`загальні функції <generic function>` за "
"допомогою :term:`single dispatch`::"

msgid "(Contributed by Ethan Smith in :issue:`32380`)"
msgstr "(Надав Ітан Сміт у :issue:`32380`)"

msgid "gc"
msgstr "gc"

msgid ""
":func:`~gc.get_objects` can now receive an optional *generation* parameter "
"indicating a generation to get objects from. (Contributed by Pablo Galindo "
"in :issue:`36016`.)"
msgstr ""
":func:`~gc.get_objects` тепер може отримувати додатковий параметр "
"*generation*, що вказує на покоління, з якого потрібно отримати об’єкти. "
"(Надав Пабло Галіндо в :issue:`36016`.)"

msgid "gettext"
msgstr "gettext"

msgid ""
"Added :func:`~gettext.pgettext` and its variants. (Contributed by Franz "
"Glasner, Éric Araujo, and Cheryl Sabella in :issue:`2504`.)"
msgstr ""
"Додано :func:`~gettext.pgettext` та його варіанти. (Надано Францом "
"Гласнером, Еріком Араужо та Шеріл Сабеллою в :issue:`2504`.)"

msgid "gzip"
msgstr "gzip"

msgid ""
"Added the *mtime* parameter to :func:`gzip.compress` for reproducible "
"output. (Contributed by Guo Ci Teo in :issue:`34898`.)"
msgstr ""
"Додано параметр *mtime* до :func:`gzip.compress` для відтворюваного "
"виведення. (Надав Guo Ci Teo в :issue:`34898`.)"

msgid ""
"A :exc:`~gzip.BadGzipFile` exception is now raised instead of :exc:`OSError` "
"for certain types of invalid or corrupt gzip files. (Contributed by Filip "
"Gruszczyński, Michele Orrù, and Zackery Spytz in :issue:`6584`.)"
msgstr ""
"Виняток :exc:`~gzip.BadGzipFile` тепер викликається замість :exc:`OSError` "
"для певних типів недійсних або пошкоджених файлів gzip. (Надано Філіпом "
"Грущинським, Мікеле Орру та Закері Шпітцем у :issue:`6584`.)"

msgid "IDLE and idlelib"
msgstr "IDLE і idlelib"

msgid ""
"Output over N lines (50 by default) is squeezed down to a button. N can be "
"changed in the PyShell section of the General page of the Settings dialog.  "
"Fewer, but possibly extra long, lines can be squeezed by right clicking on "
"the output.  Squeezed output can be expanded in place by double-clicking the "
"button or into the clipboard or a separate window by right-clicking the "
"button.  (Contributed by Tal Einat in :issue:`1529353`.)"
msgstr ""
"Виведення в N рядків (50 за замовчуванням) стиснуто до кнопки. N можна "
"змінити в розділі PyShell на сторінці \"Загальні\" діалогового вікна "
"\"Параметри\". Менше, але, можливо, наддовгих рядків можна стиснути, "
"клацнувши правою кнопкою миші на виводі. Стиснутий вихід можна розгорнути на "
"місці, подвійним клацанням кнопки або в буфер обміну чи окреме вікно, "
"клацнувши кнопку правою кнопкою миші. (Надав Тал Ейнат у :issue:`1529353`.)"

msgid ""
"Add \"Run Customized\" to the Run menu to run a module with customized "
"settings. Any command line arguments entered are added to sys.argv. They "
"also re-appear in the box for the next customized run.  One can also "
"suppress the normal Shell main module restart.  (Contributed by Cheryl "
"Sabella, Terry Jan Reedy, and others in :issue:`5680` and :issue:`37627`.)"
msgstr ""
"Додайте \"Run Customized\" до меню \"Run\", щоб запустити модуль із "
"налаштованими налаштуваннями. Будь-які введені аргументи командного рядка "
"додаються до sys.argv. Вони також знову з’являються в полі для наступного "
"налаштованого запуску. Можна також придушити звичайний перезапуск основного "
"модуля Shell. (Надано Шеріл Сабелла, Террі Ян Ріді та іншими в :issue:`5680` "
"і :issue:`37627`.)"

msgid ""
"Added optional line numbers for IDLE editor windows. Windows open without "
"line numbers unless set otherwise in the General tab of the configuration "
"dialog.  Line numbers for an existing window are shown and hidden in the "
"Options menu. (Contributed by Tal Einat and Saimadhav Heblikar in :issue:"
"`17535`.)"
msgstr ""
"Додано додаткові номери рядків для вікон редактора IDLE. Вікна відкриваються "
"без номерів рядків, якщо не встановлено інше на вкладці \"Загальні\" "
"діалогового вікна налаштування. Номери рядків для існуючого вікна "
"відображаються та ховаються в меню \"Параметри\". (Надано Тал Ейнат і "
"Саймадхав Геблікар у :issue:`17535`.)"

msgid ""
"OS native encoding is now used for converting between Python strings and Tcl "
"objects. This allows IDLE to work with emoji and other non-BMP characters. "
"These characters can be displayed or copied and pasted to or from the "
"clipboard.  Converting strings from Tcl to Python and back now never fails. "
"(Many people worked on this for eight years but the problem was finally "
"solved by Serhiy Storchaka in :issue:`13153`.)"
msgstr ""
"Власне кодування ОС тепер використовується для перетворення між рядками "
"Python і об’єктами Tcl. Це дозволяє IDLE працювати з емодзі та іншими "
"символами, відмінними від BMP. Ці символи можна відобразити або скопіювати "
"та вставити в буфер обміну або з нього. Перетворення рядків із Tcl на Python "
"і назад тепер ніколи не дає збою. (Багато людей працювали над цим вісім "
"років, але нарешті проблему вирішив Сергій Сторчака в :issue:`13153`.)"

msgid "New in 3.8.1:"
msgstr "Нове в 3.8.1:"

msgid ""
"Add option to toggle cursor blink off.  (Contributed by Zackery Spytz in :"
"issue:`4603`.)"
msgstr ""
"Додайте опцію для вимкнення блимання курсору. (Надав Закері Шпітц у :issue:"
"`4603`.)"

msgid ""
"Escape key now closes IDLE completion windows.  (Contributed by Johnny "
"Najera in :issue:`38944`.)"
msgstr ""
"Клавіша Escape тепер закриває вікна завершення IDLE. (Надав Джонні Наджера "
"в :issue:`38944`.)"

msgid "The changes above have been backported to 3.7 maintenance releases."
msgstr "Зазначені вище зміни було перенесено до випусків обслуговування 3.7."

msgid ""
"Add keywords to module name completion list.  (Contributed by Terry J. Reedy "
"in :issue:`37765`.)"
msgstr ""
"Додайте ключові слова до списку завершення імен модуля. (Надано Террі Дж. "
"Ріді в :issue:`37765`.)"

msgid "inspect"
msgstr "оглядати"

msgid ""
"The :func:`inspect.getdoc` function can now find docstrings for "
"``__slots__`` if that attribute is a :class:`dict` where the values are "
"docstrings. This provides documentation options similar to what we already "
"have for :func:`property`, :func:`classmethod`, and :func:`staticmethod`::"
msgstr ""
"Функція :func:`inspect.getdoc` тепер може знаходити рядки документів для "
"``__slots__``, якщо цей атрибут є :class:`dict`, де значення є рядками "
"документів. Це надає параметри документації, подібні до тих, які ми вже "
"маємо для :func:`property`, :func:`classmethod` і :func:`staticmethod`::"

msgid "(Contributed by Raymond Hettinger in :issue:`36326`.)"
msgstr "(Надав Реймонд Геттінгер у :issue:`36326`.)"

msgid "io"
msgstr "io"

msgid ""
"In development mode (:option:`-X` ``env``) and in :ref:`debug build <debug-"
"build>`, the :class:`io.IOBase` finalizer now logs the exception if the "
"``close()`` method fails. The exception is ignored silently by default in "
"release build. (Contributed by Victor Stinner in :issue:`18748`.)"
msgstr ""
"У режимі розробки (:option:`-X` ``env``) і в :ref:`debug build <debug-"
"build>` фіналізатор :class:`io.IOBase` тепер реєструє виняток, якщо "
"``close()`` метод не вдається. Виняток ігнорується за умовчанням у збірці "
"випуску. (Надав Віктор Стіннер у :issue:`18748`.)"

msgid "itertools"
msgstr "itertools"

msgid ""
"The :func:`itertools.accumulate` function added an option *initial* keyword "
"argument to specify an initial value::"
msgstr ""
"Функція :func:`itertools.accumulate` додала опцію *initial* аргумент "
"ключового слова для визначення початкового значення::"

msgid "(Contributed by Lisa Roach in :issue:`34659`.)"
msgstr "(Надано Лізою Роуч у :issue:`34659`.)"

msgid "json.tool"
msgstr "json.tool"

msgid ""
"Add option ``--json-lines`` to parse every input line as a separate JSON "
"object. (Contributed by Weipeng Hong in :issue:`31553`.)"
msgstr ""
"Додайте опцію ``--json-lines``, щоб аналізувати кожен рядок введення як "
"окремий об’єкт JSON. (Надано Weipeng Hong у :issue:`31553`.)"

msgid "logging"
msgstr "лісозаготівля"

msgid ""
"Added a *force* keyword argument to :func:`logging.basicConfig()` When set "
"to true, any existing handlers attached to the root logger are removed and "
"closed before carrying out the configuration specified by the other "
"arguments."
msgstr ""
"Додано аргумент ключового слова *force* до :func:`logging.basicConfig()` "
"Якщо встановлено значення true, усі існуючі обробники, приєднані до "
"кореневого реєстратора, видаляються та закриваються перед виконанням "
"конфігурації, визначеної іншими аргументами."

msgid ""
"This solves a long-standing problem.  Once a logger or *basicConfig()* had "
"been called, subsequent calls to *basicConfig()* were silently ignored. This "
"made it difficult to update, experiment with, or teach the various logging "
"configuration options using the interactive prompt or a Jupyter notebook."
msgstr ""
"Це вирішує давню проблему. Після виклику реєстратора або *basicConfig()* "
"наступні виклики *basicConfig()* мовчки ігнорувалися. Через це було складно "
"оновлювати, експериментувати з різними параметрами конфігурації журналу або "
"навчати їх за допомогою інтерактивної підказки або блокнота Jupyter."

msgid ""
"(Suggested by Raymond Hettinger, implemented by Dong-hee Na, and reviewed by "
"Vinay Sajip in :issue:`33897`.)"
msgstr ""
"(Запропоновано Raymond Hettinger, реалізовано Dong-hee Na та переглянуто "
"Vinay Sajip у :issue:`33897`.)"

msgid "math"
msgstr "математика"

msgid ""
"Added new function :func:`math.dist` for computing Euclidean distance "
"between two points.  (Contributed by Raymond Hettinger in :issue:`33089`.)"
msgstr ""
"Додано нову функцію :func:`math.dist` для обчислення евклідової відстані між "
"двома точками. (Надав Реймонд Геттінгер у :issue:`33089`.)"

msgid ""
"Expanded the :func:`math.hypot` function to handle multiple dimensions. "
"Formerly, it only supported the 2-D case. (Contributed by Raymond Hettinger "
"in :issue:`33089`.)"
msgstr ""
"Розширено функцію :func:`math.hypot` для обробки кількох вимірів. Раніше він "
"підтримував лише двовимірний випадок. (Надав Реймонд Геттінгер у :issue:"
"`33089`.)"

msgid ""
"Added new function, :func:`math.prod`, as analogous function to :func:`sum` "
"that returns the product of a 'start' value (default: 1) times an iterable "
"of numbers::"
msgstr ""
"Додано нову функцію, :func:`math.prod`, як функцію, аналогічну функції :func:"
"`sum`, яка повертає добуток початкового значення (за замовчуванням: 1), "
"помноженого на ітерацію чисел::"

msgid "(Contributed by Pablo Galindo in :issue:`35606`.)"
msgstr "(Надав Пабло Галіндо в :issue:`35606`.)"

msgid ""
"Added two new combinatoric functions :func:`math.perm` and :func:`math."
"comb`::"
msgstr ""
"Додано дві нові комбінаторні функції :func:`math.perm` і :func:`math.comb`::"

msgid ""
"(Contributed by Yash Aggarwal, Keller Fuchs, Serhiy Storchaka, and Raymond "
"Hettinger in :issue:`37128`, :issue:`37178`, and :issue:`35431`.)"
msgstr ""
"(Надано Yash Aggarwal, Keller Fuchs, Serhiy Storchaka та Raymond Hettinger "
"у :issue:`37128`, :issue:`37178` та :issue:`35431`.)"

msgid ""
"Added a new function :func:`math.isqrt` for computing accurate integer "
"square roots without conversion to floating point.  The new function "
"supports arbitrarily large integers.  It is faster than ``floor(sqrt(n))`` "
"but slower than :func:`math.sqrt`::"
msgstr ""
"Додано нову функцію :func:`math.isqrt` для обчислення точних цілих "
"квадратних коренів без перетворення до числа з плаваючою комою. Нова функція "
"підтримує довільні цілі числа. Це швидше, ніж ``floor(sqrt(n))``, але "
"повільніше, ніж :func:`math.sqrt`::"

msgid "(Contributed by Mark Dickinson in :issue:`36887`.)"
msgstr "(Надав Марк Дікінсон у :issue:`36887`.)"

msgid ""
"The function :func:`math.factorial` no longer accepts arguments that are not "
"int-like. (Contributed by Pablo Galindo in :issue:`33083`.)"
msgstr ""
"Функція :func:`math.factorial` більше не приймає аргументи, які не є int-"
"подібними. (Надав Пабло Галіндо в :issue:`33083`.)"

msgid "mmap"
msgstr "mmap"

msgid ""
"The :class:`mmap.mmap` class now has an :meth:`~mmap.mmap.madvise` method to "
"access the ``madvise()`` system call. (Contributed by Zackery Spytz in :"
"issue:`32941`.)"
msgstr ""
"Клас :class:`mmap.mmap` тепер має метод :meth:`~mmap.mmap.madvise` для "
"доступу до системного виклику ``madvise()``. (Надав Закері Шпітц у :issue:"
"`32941`.)"

msgid "multiprocessing"
msgstr "багатопроцесорність"

msgid ""
"Added new :mod:`multiprocessing.shared_memory` module. (Contributed by Davin "
"Potts in :issue:`35813`.)"
msgstr ""
"Додано новий модуль :mod:`multiprocessing.shared_memory`. (Надав Девін Поттс "
"у :issue:`35813`.)"

msgid ""
"On macOS, the *spawn* start method is now used by default. (Contributed by "
"Victor Stinner in :issue:`33725`.)"
msgstr ""
"У macOS метод запуску *spawn* тепер використовується за замовчуванням. "
"(Надав Віктор Стіннер у :issue:`33725`.)"

msgid "os"
msgstr "ос"

msgid ""
"Added new function :func:`~os.add_dll_directory` on Windows for providing "
"additional search paths for native dependencies when importing extension "
"modules or loading DLLs using :mod:`ctypes`. (Contributed by Steve Dower in :"
"issue:`36085`.)"
msgstr ""
"Додано нову функцію :func:`~os.add_dll_directory` у Windows для надання "
"додаткових шляхів пошуку для власних залежностей під час імпорту модулів "
"розширення або завантаження DLL за допомогою :mod:`ctypes`. (Надав Стів "
"Дауер у :issue:`36085`.)"

msgid ""
"A new :func:`os.memfd_create` function was added to wrap the "
"``memfd_create()`` syscall. (Contributed by Zackery Spytz and Christian "
"Heimes in :issue:`26836`.)"
msgstr ""
"Було додано нову функцію :func:`os.memfd_create` для обгортання системного "
"виклику ``memfd_create()``. (Надано Zackery Spytz і Christian Heimes у :"
"issue:`26836`.)"

msgid ""
"On Windows, much of the manual logic for handling reparse points (including "
"symlinks and directory junctions) has been delegated to the operating "
"system. Specifically, :func:`os.stat` will now traverse anything supported "
"by the operating system, while :func:`os.lstat` will only open reparse "
"points that identify as \"name surrogates\" while others are opened as for :"
"func:`os.stat`. In all cases, :attr:`stat_result.st_mode` will only have "
"``S_IFLNK`` set for symbolic links and not other kinds of reparse points. To "
"identify other kinds of reparse point, check the new :attr:`stat_result."
"st_reparse_tag` attribute."
msgstr ""
"У Windows велика частина ручної логіки для обробки точок повторного аналізу "
"(включаючи символічні посилання та з’єднання каталогів) була делегована "
"операційній системі. Зокрема, :func:`os.stat` тепер переглядатиме все, що "
"підтримується операційною системою, тоді як :func:`os.lstat` відкриватиме "
"лише точки повторного аналізу, які ідентифікуються як \"сурогати імен\", "
"тоді як інші відкриваються як для :func:`os.stat`. У всіх випадках у :attr:"
"`stat_result.st_mode` буде встановлено лише ``S_IFLNK`` для символічних "
"посилань, а не для інших типів точок повторного аналізу. Щоб визначити інші "
"типи точок повторного аналізу, перевірте новий атрибут :attr:`stat_result."
"st_reparse_tag`."

msgid ""
"On Windows, :func:`os.readlink` is now able to read directory junctions. "
"Note that :func:`~os.path.islink` will return ``False`` for directory "
"junctions, and so code that checks ``islink`` first will continue to treat "
"junctions as directories, while code that handles errors from :func:`os."
"readlink` may now treat junctions as links."
msgstr ""
"У Windows :func:`os.readlink` тепер може читати з’єднання каталогів. "
"Зауважте, що :func:`~os.path.islink` поверне ``False`` для з’єднань "
"каталогів, тому код, який спочатку перевіряє ``islink``, продовжуватиме "
"розглядати з’єднання як каталоги, тоді як код, який обробляє помилки з :func:"
"`os.readlink` тепер може розглядати перехрестя як посилання."

msgid "(Contributed by Steve Dower in :issue:`37834`.)"
msgstr "(Надав Стів Дауер у :issue:`37834`.)"

msgid "os.path"
msgstr "os.path"

msgid ""
":mod:`os.path` functions that return a boolean result like :func:`~os.path."
"exists`, :func:`~os.path.lexists`, :func:`~os.path.isdir`, :func:`~os.path."
"isfile`, :func:`~os.path.islink`, and :func:`~os.path.ismount` now return "
"``False`` instead of raising :exc:`ValueError` or its subclasses :exc:"
"`UnicodeEncodeError` and :exc:`UnicodeDecodeError` for paths that contain "
"characters or bytes unrepresentable at the OS level. (Contributed by Serhiy "
"Storchaka in :issue:`33721`.)"
msgstr ""
":mod:`os.path` функції, які повертають логічний результат, наприклад :func:"
"`~os.path.exists`, :func:`~os.path.lexists`, :func:`~os.path.isdir` , :func:"
"`~os.path.isfile`, :func:`~os.path.islink` і :func:`~os.path.ismount` тепер "
"повертають ``False`` замість підвищення :exc:`ValueError` або його підкласи :"
"exc:`UnicodeEncodeError` і :exc:`UnicodeDecodeError` для шляхів, які містять "
"символи або байти, які неможливо відобразити на рівні ОС. (Надав Сергій "
"Сторчака в :issue:`33721`.)"

msgid ""
":func:`~os.path.expanduser` on Windows now prefers the :envvar:`USERPROFILE` "
"environment variable and does not use :envvar:`HOME`, which is not normally "
"set for regular user accounts. (Contributed by Anthony Sottile in :issue:"
"`36264`.)"
msgstr ""
":func:`~os.path.expanduser` у Windows тепер надає перевагу змінній "
"середовища :envvar:`USERPROFILE` і не використовує :envvar:`HOME`, яка "
"зазвичай не встановлюється для звичайних облікових записів користувачів. "
"(Надав Ентоні Соттіле в :issue:`36264`.)"

msgid ""
":func:`~os.path.isdir` on Windows no longer returns ``True`` for a link to a "
"non-existent directory."
msgstr ""
":func:`~os.path.isdir` у Windows більше не повертає ``True`` для посилання "
"на неіснуючий каталог."

msgid ""
":func:`~os.path.realpath` on Windows now resolves reparse points, including "
"symlinks and directory junctions."
msgstr ""
":func:`~os.path.realpath` у Windows тепер розпізнає точки повторного "
"аналізу, включаючи символічні посилання та з’єднання каталогів."

msgid "pathlib"
msgstr "pathlib"

msgid ""
":mod:`pathlib.Path` methods that return a boolean result like :meth:"
"`~pathlib.Path.exists()`, :meth:`~pathlib.Path.is_dir()`, :meth:`~pathlib."
"Path.is_file()`, :meth:`~pathlib.Path.is_mount()`, :meth:`~pathlib.Path."
"is_symlink()`, :meth:`~pathlib.Path.is_block_device()`, :meth:`~pathlib.Path."
"is_char_device()`, :meth:`~pathlib.Path.is_fifo()`, :meth:`~pathlib.Path."
"is_socket()` now return ``False`` instead of raising :exc:`ValueError` or "
"its subclass :exc:`UnicodeEncodeError` for paths that contain characters "
"unrepresentable at the OS level. (Contributed by Serhiy Storchaka in :issue:"
"`33721`.)"
msgstr ""
":mod:`pathlib.Path` методи, які повертають логічний результат, наприклад :"
"meth:`~pathlib.Path.exists()`, :meth:`~pathlib.Path.is_dir()`, :meth:"
"`~pathlib. Path.is_file()`, :meth:`~pathlib.Path.is_mount()`, :meth:"
"`~pathlib.Path.is_symlink()`, :meth:`~pathlib.Path.is_block_device()`, :meth:"
"`~pathlib.Path.is_char_device()`, :meth:`~pathlib.Path.is_fifo()`, :meth:"
"`~pathlib.Path.is_socket()` тепер повертає ``False`` замість підвищення :exc:"
"`ValueError` або його підклас :exc:`UnicodeEncodeError` для шляхів, які "
"містять символи, які неможливо відобразити на рівні ОС. (Надав Сергій "
"Сторчака в :issue:`33721`.)"

msgid ""
"Added :meth:`pathlib.Path.link_to()` which creates a hard link pointing to a "
"path. (Contributed by Joannah Nanjekye in :issue:`26978`)"
msgstr ""
"Додано :meth:`pathlib.Path.link_to()`, який створює жорстке посилання, що "
"вказує на шлях. (Надано Joannah Nanjekye у :issue:`26978`)"

msgid "pickle"
msgstr "маринований огірок"

msgid ""
":mod:`pickle` extensions subclassing the C-optimized :class:`~pickle."
"Pickler` can now override the pickling logic of functions and classes by "
"defining the special :meth:`~pickle.Pickler.reducer_override` method. "
"(Contributed by Pierre Glaser and Olivier Grisel in :issue:`35900`.)"
msgstr ""
"Розширення :mod:`pickle`, що створюють субкласи оптимізованого для C :class:"
"`~pickle.Pickler`, тепер можуть перевизначати логіку маринування функцій і "
"класів, визначаючи спеціальний метод :meth:`~pickle.Pickler."
"reducer_override`. (Надано П’єром Глейзером і Олів’є Грізелем у :issue:"
"`35900`.)"

msgid "plistlib"
msgstr "plistlib"

msgid ""
"Added new :class:`plistlib.UID` and enabled support for reading and writing "
"NSKeyedArchiver-encoded binary plists. (Contributed by Jon Janzen in :issue:"
"`26707`.)"
msgstr ""
"Додано новий :class:`plistlib.UID` і ввімкнено підтримку для читання та "
"запису бінарних списків у кодуванні NSKeyedArchiver. (Надав Джон Янзен у :"
"issue:`26707`.)"

msgid "pprint"
msgstr "pprint"

msgid ""
"The :mod:`pprint` module added a *sort_dicts* parameter to several "
"functions. By default, those functions continue to sort dictionaries before "
"rendering or printing.  However, if *sort_dicts* is set to false, the "
"dictionaries retain the order that keys were inserted.  This can be useful "
"for comparison to JSON inputs during debugging."
msgstr ""
"Модуль :mod:`pprint` додав параметр *sort_dicts* до кількох функцій. За "
"замовчуванням ці функції продовжують сортувати словники перед рендерингом "
"або друком. Однак якщо *sort_dicts* має значення false, словники зберігають "
"порядок вставлення ключів. Це може бути корисним для порівняння з вхідними "
"даними JSON під час налагодження."

msgid ""
"In addition, there is a convenience new function, :func:`pprint.pp` that is "
"like :func:`pprint.pprint` but with *sort_dicts* defaulting to ``False``::"
msgstr ""
"Крім того, є нова зручна функція :func:`pprint.pp`, яка схожа на :func:"
"`pprint.pprint`, але з *sort_dicts* за замовчуванням ``False``::"

msgid "(Contributed by Rémi Lapeyre in :issue:`30670`.)"
msgstr "(Надав Ремі Лапейр у :issue:`30670`.)"

msgid "py_compile"
msgstr "py_compile"

msgid ""
":func:`py_compile.compile` now supports silent mode. (Contributed by Joannah "
"Nanjekye in :issue:`22640`.)"
msgstr ""
":func:`py_compile.compile` тепер підтримує тихий режим. (Надано Joannah "
"Nanjekye у :issue:`22640`.)"

msgid "shlex"
msgstr "шлекс"

msgid ""
"The new :func:`shlex.join` function acts as the inverse of :func:`shlex."
"split`. (Contributed by Bo Bayles in :issue:`32102`.)"
msgstr ""
"Нова функція :func:`shlex.join` діє як зворотна функція :func:`shlex.split`. "
"(Надав Бо Бейлс у :issue:`32102`.)"

msgid "shutil"
msgstr "шутил"

msgid ""
":func:`shutil.copytree` now accepts a new ``dirs_exist_ok`` keyword "
"argument. (Contributed by Josh Bronson in :issue:`20849`.)"
msgstr ""
":func:`shutil.copytree` тепер приймає новий аргумент ключового слова "
"``dirs_exist_ok``. (Надав Джош Бронсон у :issue:`20849`.)"

msgid ""
":func:`shutil.make_archive` now defaults to the modern pax (POSIX.1-2001) "
"format for new archives to improve portability and standards conformance, "
"inherited from the corresponding change to the :mod:`tarfile` module. "
"(Contributed by C.A.M. Gerlach in :issue:`30661`.)"
msgstr ""
":func:`shutil.make_archive` тепер за замовчуванням використовує сучасний "
"формат pax (POSIX.1-2001) для нових архівів для покращення переносимості та "
"відповідності стандартам, успадкованому від відповідних змін у модулі :mod:"
"`tarfile`. (Надано C.A.M. Gerlach у :issue:`30661`.)"

msgid ""
":func:`shutil.rmtree` on Windows now removes directory junctions without "
"recursively removing their contents first. (Contributed by Steve Dower in :"
"issue:`37834`.)"
msgstr ""
":func:`shutil.rmtree` у Windows тепер видаляє з’єднання каталогів без "
"попереднього рекурсивного видалення їх вмісту. (Надав Стів Дауер у :issue:"
"`37834`.)"

msgid "socket"
msgstr "гніздо"

msgid ""
"Added :meth:`~socket.create_server()` and :meth:`~socket."
"has_dualstack_ipv6()` convenience functions to automate the necessary tasks "
"usually involved when creating a server socket, including accepting both "
"IPv4 and IPv6 connections on the same socket.  (Contributed by Giampaolo "
"Rodolà in :issue:`17561`.)"
msgstr ""
"Додано зручні функції :meth:`~sockete.create_server()` і :meth:`~socket."
"has_dualstack_ipv6()` для автоматизації необхідних завдань, які зазвичай "
"виконуються під час створення серверного сокета, включаючи прийняття "
"з’єднань IPv4 і IPv6 в одному сокеті. . (Надав Джампаоло Родола в :issue:"
"`17561`.)"

msgid ""
"The :func:`socket.if_nameindex()`, :func:`socket.if_nametoindex()`, and :"
"func:`socket.if_indextoname()` functions have been implemented on Windows. "
"(Contributed by Zackery Spytz in :issue:`37007`.)"
msgstr ""
"Функції :func:`socket.if_nameindex()`, :func:`socket.if_nametoindex()` і :"
"func:`socket.if_indextoname()` реалізовано у Windows. (Надав Закері Шпітц у :"
"issue:`37007`.)"

msgid "ssl"
msgstr "ssl"

msgid ""
"Added :attr:`~ssl.SSLContext.post_handshake_auth` to enable and :meth:`~ssl."
"SSLSocket.verify_client_post_handshake` to initiate TLS 1.3 post-handshake "
"authentication. (Contributed by Christian Heimes in :issue:`34670`.)"
msgstr ""
"Додано :attr:`~ssl.SSLContext.post_handshake_auth` для ввімкнення та :meth:"
"`~ssl.SSLSocket.verify_client_post_handshake` для ініціювання автентифікації "
"TLS 1.3 після рукостискання. (Надав Крістіан Хеймс у :issue:`34670`.)"

msgid "statistics"
msgstr "статистика"

msgid ""
"Added :func:`statistics.fmean` as a faster, floating point variant of :func:"
"`statistics.mean()`.  (Contributed by Raymond Hettinger and Steven D'Aprano "
"in :issue:`35904`.)"
msgstr ""
"Додано :func:`statistics.fmean` як швидший варіант :func:`statistics.mean()` "
"з плаваючою комою. (Надано Реймондом Геттінгером і Стівеном Д'Апрано в :"
"issue:`35904`.)"

msgid ""
"Added :func:`statistics.geometric_mean()` (Contributed by Raymond Hettinger "
"in :issue:`27181`.)"
msgstr ""
"Додано :func:`statistics.geometric_mean()` (надано Реймондом Хеттінгером у :"
"issue:`27181`.)"

msgid ""
"Added :func:`statistics.multimode` that returns a list of the most common "
"values. (Contributed by Raymond Hettinger in :issue:`35892`.)"
msgstr ""
"Додано :func:`statistics.multimode`, який повертає список найпоширеніших "
"значень. (Надав Реймонд Геттінгер у :issue:`35892`.)"

msgid ""
"Added :func:`statistics.quantiles` that divides data or a distribution in to "
"equiprobable intervals (e.g. quartiles, deciles, or percentiles). "
"(Contributed by Raymond Hettinger in :issue:`36546`.)"
msgstr ""
"Додано :func:`statistics.quantiles`, який ділить дані або розподіл на "
"рівноімовірні інтервали (наприклад, квартилі, децилі або процентилі). (Надав "
"Реймонд Геттінгер у :issue:`36546`.)"

msgid ""
"Added :class:`statistics.NormalDist`, a tool for creating and manipulating "
"normal distributions of a random variable. (Contributed by Raymond Hettinger "
"in :issue:`36018`.)"
msgstr ""
"Додано :class:`statistics.NormalDist`, інструмент для створення та керування "
"нормальним розподілом випадкової величини. (Надав Реймонд Геттінгер у :issue:"
"`36018`.)"

msgid "sys"
msgstr "система"

msgid ""
"Add new :func:`sys.unraisablehook` function which can be overridden to "
"control how \"unraisable exceptions\" are handled. It is called when an "
"exception has occurred but there is no way for Python to handle it. For "
"example, when a destructor raises an exception or during garbage collection "
"(:func:`gc.collect`). (Contributed by Victor Stinner in :issue:`36829`.)"
msgstr ""
"Додайте нову функцію :func:`sys.unraisablehook`, яку можна перевизначати, "
"щоб керувати обробкою \"виключних ситуацій, які не можна викликати\". Він "
"викликається, коли сталася виняткова ситуація, але Python не може її "
"впоратися. Наприклад, коли деструктор викликає виняток або під час збирання "
"сміття (:func:`gc.collect`). (Надав Віктор Стіннер у :issue:`36829`.)"

msgid "tarfile"
msgstr "tarfile"

msgid ""
"The :mod:`tarfile` module now defaults to the modern pax (POSIX.1-2001) "
"format for new archives, instead of the previous GNU-specific one. This "
"improves cross-platform portability with a consistent encoding (UTF-8) in a "
"standardized and extensible format, and offers several other benefits. "
"(Contributed by C.A.M. Gerlach in :issue:`36268`.)"
msgstr ""
"Модуль :mod:`tarfile` тепер за замовчуванням використовує сучасний формат "
"pax (POSIX.1-2001) для нових архівів замість попереднього, специфічного для "
"GNU. Це покращує міжплатформенну переносимість завдяки узгодженому кодуванню "
"(UTF-8) у стандартизованому та розширюваному форматі та пропонує кілька "
"інших переваг. (Надано C.A.M. Gerlach у :issue:`36268`.)"

msgid "threading"
msgstr "різьблення"

msgid ""
"Add a new :func:`threading.excepthook` function which handles uncaught :meth:"
"`threading.Thread.run` exception. It can be overridden to control how "
"uncaught :meth:`threading.Thread.run` exceptions are handled. (Contributed "
"by Victor Stinner in :issue:`1230540`.)"
msgstr ""
"Додайте нову функцію :func:`threading.excepthook`, яка обробляє "
"неперехоплені винятки :meth:`threading.Thread.run`. Його можна змінити, щоб "
"керувати обробкою неперехоплених винятків :meth:`threading.Thread.run`. "
"(Надав Віктор Стіннер у :issue:`1230540`.)"

msgid ""
"Add a new :func:`threading.get_native_id` function and a :data:`~threading."
"Thread.native_id` attribute to the :class:`threading.Thread` class. These "
"return the native integral Thread ID of the current thread assigned by the "
"kernel. This feature is only available on certain platforms, see :func:"
"`get_native_id <threading.get_native_id>` for more information. (Contributed "
"by Jake Tesler in :issue:`36084`.)"
msgstr ""
"Додайте нову функцію :func:`threading.get_native_id` і атрибут :data:"
"`~threading.Thread.native_id` до класу :class:`threading.Thread`. Вони "
"повертають власний інтегральний ідентифікатор потоку поточного потоку, "
"призначений ядром. Ця функція доступна лише на певних платформах, див. :func:"
"`get_native_id <threading.get_native_id>` для отримання додаткової "
"інформації. (Надав Джейк Теслер у :issue:`36084`.)"

msgid "tokenize"
msgstr "токенізувати"

msgid ""
"The :mod:`tokenize` module now implicitly emits a ``NEWLINE`` token when "
"provided with input that does not have a trailing new line.  This behavior "
"now matches what the C tokenizer does internally. (Contributed by Ammar "
"Askar in :issue:`33899`.)"
msgstr ""
"Модуль :mod:`tokenize` тепер неявно випромінює маркер ``NEWLINE``, якщо "
"надається вхідні дані, які не мають кінцевого нового рядка. Ця поведінка "
"тепер відповідає внутрішнім функціям C tokenizer. (Надав Аммар Аскар у :"
"issue:`33899`.)"

msgid "tkinter"
msgstr "tkinter"

msgid ""
"Added methods :meth:`~tkinter.Spinbox.selection_from`, :meth:`~tkinter."
"Spinbox.selection_present`, :meth:`~tkinter.Spinbox.selection_range` and :"
"meth:`~tkinter.Spinbox.selection_to` in the :class:`tkinter.Spinbox` class. "
"(Contributed by Juliette Monsel in :issue:`34829`.)"
msgstr ""
"Додано методи :meth:`~tkinter.Spinbox.selection_from`, :meth:`~tkinter."
"Spinbox.selection_present`, :meth:`~tkinter.Spinbox.selection_range` та :"
"meth:`~tkinter.Spinbox.selection_to` у клас :class:`tkinter.Spinbox`. "
"(Надано Juliette Monsel у :issue:`34829`.)"

msgid ""
"Added method :meth:`~tkinter.Canvas.moveto` in the :class:`tkinter.Canvas` "
"class. (Contributed by Juliette Monsel in :issue:`23831`.)"
msgstr ""
"Додано метод :meth:`~tkinter.Canvas.moveto` в клас :class:`tkinter.Canvas`. "
"(Надано Джульєтт Монсел у :issue:`23831`.)"

msgid ""
"The :class:`tkinter.PhotoImage` class now has :meth:`~tkinter.PhotoImage."
"transparency_get` and :meth:`~tkinter.PhotoImage.transparency_set` methods.  "
"(Contributed by Zackery Spytz in :issue:`25451`.)"
msgstr ""
"Клас :class:`tkinter.PhotoImage` тепер має методи :meth:`~tkinter.PhotoImage."
"transparency_get` і :meth:`~tkinter.PhotoImage.transparency_set`. (Надав "
"Закері Шпітц у :issue:`25451`.)"

msgid "time"
msgstr "час"

msgid ""
"Added new clock :data:`~time.CLOCK_UPTIME_RAW` for macOS 10.12. (Contributed "
"by Joannah Nanjekye in :issue:`35702`.)"
msgstr ""
"Додано новий годинник :data:`~time.CLOCK_UPTIME_RAW` для macOS 10.12. "
"(Надано Joannah Nanjekye у :issue:`35702`.)"

msgid "typing"
msgstr "введення тексту"

msgid "The :mod:`typing` module incorporates several new features:"
msgstr "Модуль :mod:`typing` містить кілька нових функцій:"

msgid ""
"A dictionary type with per-key types.  See :pep:`589` and :class:`typing."
"TypedDict`. TypedDict uses only string keys.  By default, every key is "
"required to be present. Specify \"total=False\" to allow keys to be "
"optional::"
msgstr ""
"Тип словника з типами по ключу. Перегляньте :pep:`589` і :class:`typing."
"TypedDict`. TypedDict використовує лише рядкові ключі. За замовчуванням "
"кожен ключ повинен бути присутнім. Укажіть \"total=False\", щоб дозволити "
"ключам бути необов'язковими::"

msgid ""
"Literal types.  See :pep:`586` and :class:`typing.Literal`. Literal types "
"indicate that a parameter or return value is constrained to one or more "
"specific literal values::"
msgstr ""
"Літеральні типи. Перегляньте :pep:`586` і :class:`typing.Literal`. "
"Літеральні типи вказують на те, що параметр або значення, що повертається, "
"обмежено одним або кількома конкретними літеральними значеннями:"

msgid ""
"\"Final\" variables, functions, methods and classes.  See :pep:`591`, :class:"
"`typing.Final` and :func:`typing.final`. The final qualifier instructs a "
"static type checker to restrict subclassing, overriding, or reassignment::"
msgstr ""
"\"Кінцеві\" змінні, функції, методи та класи. Перегляньте :pep:`591`, :class:"
"`typing.Final` і :func:`typing.final`. Остаточний кваліфікатор наказує "
"статичному засобу перевірки типів обмежити створення підкласів, "
"перевизначення чи перепризначення:"

msgid ""
"Protocol definitions.  See :pep:`544`, :class:`typing.Protocol` and :func:"
"`typing.runtime_checkable`.  Simple ABCs like :class:`typing.SupportsInt` "
"are now ``Protocol`` subclasses."
msgstr ""
"Визначення протоколу. Перегляньте :pep:`544`, :class:`typing.Protocol` і :"
"func:`typing.runtime_checkable`. Прості азбуки, такі як :class:`typing."
"SupportsInt` тепер є підкласами ``Protocol``."

msgid "New protocol class :class:`typing.SupportsIndex`."
msgstr "Новий клас протоколу :class:`typing.SupportsIndex`."

msgid "New functions :func:`typing.get_origin` and :func:`typing.get_args`."
msgstr "Нові функції :func:`typing.get_origin` і :func:`typing.get_args`."

msgid "unicodedata"
msgstr "unicodedata"

msgid ""
"The :mod:`unicodedata` module has been upgraded to use the `Unicode 12.1.0 "
"<https://blog.unicode.org/2019/05/unicode-12-1-en.html>`_ release."
msgstr ""

msgid ""
"New function :func:`~unicodedata.is_normalized` can be used to verify a "
"string is in a specific normal form, often much faster than by actually "
"normalizing the string.  (Contributed by Max Belanger, David Euresti, and "
"Greg Price in :issue:`32285` and :issue:`37966`)."
msgstr ""
"Нова функція :func:`~unicodedata.is_normalized` може бути використана для "
"перевірки того, що рядок знаходиться в певній нормальній формі, часто "
"набагато швидше, ніж шляхом фактичної нормалізації рядка. (Надано Максом "
"Беланджером, Девідом Юресті та Грегом Прайсом у :issue:`32285` та :issue:"
"`37966`)."

msgid "unittest"
msgstr "unittest"

msgid ""
"Added :class:`~unittest.mock.AsyncMock` to support an asynchronous version "
"of :class:`~unittest.mock.Mock`.  Appropriate new assert functions for "
"testing have been added as well. (Contributed by Lisa Roach in :issue:"
"`26467`)."
msgstr ""
"Додано :class:`~unittest.mock.AsyncMock` для підтримки асинхронної версії :"
"class:`~unittest.mock.Mock`. Також додано відповідні нові функції assert для "
"тестування. (Надано Лізою Роуч у :issue:`26467`)."

msgid ""
"Added :func:`~unittest.addModuleCleanup()` and :meth:`~unittest.TestCase."
"addClassCleanup()` to unittest to support cleanups for :func:`~unittest."
"setUpModule()` and :meth:`~unittest.TestCase.setUpClass()`. (Contributed by "
"Lisa Roach in :issue:`24412`.)"
msgstr ""
"Додано :func:`~unittest.addModuleCleanup()` і :meth:`~unittest.TestCase."
"addClassCleanup()` до unittest для підтримки очищення для :func:`~unittest."
"setUpModule()` і :meth:`~unittest .TestCase.setUpClass()`. (Надано Лізою "
"Роуч у :issue:`24412`.)"

msgid ""
"Several mock assert functions now also print a list of actual calls upon "
"failure. (Contributed by Petter Strandmark in :issue:`35047`.)"
msgstr ""
"Кілька імітаційних функцій підтвердження тепер також друкують список "
"фактичних викликів у разі невдачі. (Надано Петтером Страндмарком у :issue:"
"`35047`.)"

msgid ""
":mod:`unittest` module gained support for coroutines to be used as test "
"cases with :class:`unittest.IsolatedAsyncioTestCase`. (Contributed by Andrew "
"Svetlov in :issue:`32972`.)"
msgstr ""
"Модуль :mod:`unittest` отримав підтримку співпрограм для використання як "
"тестових випадків із :class:`unittest.IsolatedAsyncioTestCase`. (Надав Ендрю "
"Свєтлов у :issue:`32972`.)"

msgid "Example::"
msgstr "Приклад::"

msgid "venv"
msgstr "venv"

msgid ""
":mod:`venv` now includes an ``Activate.ps1`` script on all platforms for "
"activating virtual environments under PowerShell Core 6.1. (Contributed by "
"Brett Cannon in :issue:`32718`.)"
msgstr ""
":mod:`venv` тепер містить сценарій ``Activate.ps1`` на всіх платформах для "
"активації віртуальних середовищ у PowerShell Core 6.1. (Надано Бреттом "
"Кенноном у :issue:`32718`.)"

msgid "weakref"
msgstr "слабкий реф"

msgid ""
"The proxy objects returned by :func:`weakref.proxy` now support the matrix "
"multiplication operators ``@`` and ``@=`` in addition to the other numeric "
"operators. (Contributed by Mark Dickinson in :issue:`36669`.)"
msgstr ""
"Проксі-об’єкти, які повертає :func:`weakref.proxy`, тепер підтримують "
"оператори множення матриці ``@`` і ``@=`` на додаток до інших числових "
"операторів. (Надав Марк Дікінсон у :issue:`36669`.)"

msgid "xml"
msgstr "xml"

msgid ""
"As mitigation against DTD and external entity retrieval, the :mod:`xml.dom."
"minidom` and :mod:`xml.sax` modules no longer process external entities by "
"default. (Contributed by Christian Heimes in :issue:`17239`.)"
msgstr ""
"Щоб пом’якшити DTD і пошук зовнішніх об’єктів, модулі :mod:`xml.dom.minidom` "
"і :mod:`xml.sax` більше не обробляють зовнішні об’єкти за замовчуванням. "
"(Надав Крістіан Хеймс у :issue:`17239`.)"

msgid ""
"The ``.find*()`` methods in the :mod:`xml.etree.ElementTree` module support "
"wildcard searches like ``{*}tag`` which ignores the namespace and "
"``{namespace}*`` which returns all tags in the given namespace. (Contributed "
"by Stefan Behnel in :issue:`28238`.)"
msgstr ""
"Методи ``.find*()`` у модулі :mod:`xml.etree.ElementTree` підтримують пошук "
"за символами узагальнення, наприклад ``{*}tag``, який ігнорує простір імен, "
"і ``{namespace}*``, який повертає всі теги у вказаному просторі імен. (Надав "
"Стефан Бенель у :issue:`28238`.)"

msgid ""
"The :mod:`xml.etree.ElementTree` module provides a new function :func:`–xml."
"etree.ElementTree.canonicalize()` that implements C14N 2.0. (Contributed by "
"Stefan Behnel in :issue:`13611`.)"
msgstr ""
"Модуль :mod:`xml.etree.ElementTree` надає нову функцію :func:`–xml.etree."
"ElementTree.canonicalize()`, яка реалізує C14N 2.0. (Надав Стефан Бенель у :"
"issue:`13611`.)"

msgid ""
"The target object of :class:`xml.etree.ElementTree.XMLParser` can receive "
"namespace declaration events through the new callback methods ``start_ns()`` "
"and ``end_ns()``.  Additionally, the :class:`xml.etree.ElementTree."
"TreeBuilder` target can be configured to process events about comments and "
"processing instructions to include them in the generated tree. (Contributed "
"by Stefan Behnel in :issue:`36676` and :issue:`36673`.)"
msgstr ""
"Цільовий об’єкт :class:`xml.etree.ElementTree.XMLParser` може отримувати "
"події оголошення простору імен через нові методи зворотного виклику "
"``start_ns()`` і ``end_ns()``. Крім того, ціль :class:`xml.etree.ElementTree."
"TreeBuilder` можна налаштувати на обробку подій щодо коментарів та "
"інструкцій з обробки, щоб включити їх у згенероване дерево. (Надав Стефан "
"Бенель у :issue:`36676` і :issue:`36673`.)"

msgid "xmlrpc"
msgstr "xmlrpc"

msgid ""
":class:`xmlrpc.client.ServerProxy` now supports an optional *headers* "
"keyword argument for a sequence of HTTP headers to be sent with each "
"request.  Among other things, this makes it possible to upgrade from default "
"basic authentication to faster session authentication. (Contributed by "
"Cédric Krier in :issue:`35153`.)"
msgstr ""
":class:`xmlrpc.client.ServerProxy` тепер підтримує необов’язковий аргумент "
"ключового слова *headers* для послідовності заголовків HTTP, які "
"надсилаються з кожним запитом. Серед іншого, це дає змогу оновити стандартну "
"базову автентифікацію до швидшої сеансової автентифікації. (Надав Седрик "
"Крієр у :issue:`35153`.)"

msgid "Optimizations"
msgstr "Оптимізації"

msgid ""
"The :mod:`subprocess` module can now use the :func:`os.posix_spawn` function "
"in some cases for better performance. Currently, it is only used on macOS "
"and Linux (using glibc 2.24 or newer) if all these conditions are met:"
msgstr ""
"Модуль :mod:`subprocess` тепер може використовувати функцію :func:`os."
"posix_spawn` у деяких випадках для кращої продуктивності. Наразі він "
"використовується лише в macOS і Linux (з використанням glibc 2.24 або "
"новішої версії), якщо виконуються всі ці умови:"

msgid "*close_fds* is false;"
msgstr "*close_fds* є помилковим;"

msgid ""
"*preexec_fn*, *pass_fds*, *cwd* and *start_new_session* parameters are not "
"set;"
msgstr ""
"Параметри *preexec_fn*, *pass_fds*, *cwd* і *start_new_session* не "
"встановлені;"

msgid "the *executable* path contains a directory."
msgstr "*виконуваний* шлях містить каталог."

msgid "(Contributed by Joannah Nanjekye and Victor Stinner in :issue:`35537`.)"
msgstr "(Надано Джоанною Нанджекі та Віктором Стіннером у :issue:`35537`.)"

msgid ""
":func:`shutil.copyfile`, :func:`shutil.copy`, :func:`shutil.copy2`, :func:"
"`shutil.copytree` and :func:`shutil.move` use platform-specific \"fast-"
"copy\" syscalls on Linux and macOS in order to copy the file more "
"efficiently. \"fast-copy\" means that the copying operation occurs within "
"the kernel, avoiding the use of userspace buffers in Python as in \"``outfd."
"write(infd.read())``\". On Windows :func:`shutil.copyfile` uses a bigger "
"default buffer size (1 MiB instead of 16 KiB) and a :func:`memoryview`-based "
"variant of :func:`shutil.copyfileobj` is used. The speedup for copying a 512 "
"MiB file within the same partition is about +26% on Linux, +50% on macOS and "
"+40% on Windows. Also, much less CPU cycles are consumed. See :ref:`shutil-"
"platform-dependent-efficient-copy-operations` section. (Contributed by "
"Giampaolo Rodolà in :issue:`33671`.)"
msgstr ""
":func:`shutil.copyfile`, :func:`shutil.copy`, :func:`shutil.copy2`, :func:"
"`shutil.copytree` і :func:`shutil.move` використовують спеціальну для "
"платформи \"швидку -copy\" системні виклики в Linux і macOS для більш "
"ефективного копіювання файлу. \"швидке копіювання\" означає, що операція "
"копіювання відбувається всередині ядра, уникаючи використання буферів "
"простору користувача в Python, як у \"``outfd.write(infd.read())``\". У "
"Windows :func:`shutil.copyfile` використовує більший розмір буфера за "
"замовчуванням (1 МіБ замість 16 КіБ) і використовується варіант :func:"
"`memoryview` на основі :func:`shutil.copyfileobj`. Прискорення копіювання "
"файлу розміром 512 МіБ в межах одного розділу становить приблизно +26% у "
"Linux, +50% у macOS і +40% у Windows. Крім того, споживається набагато менше "
"циклів ЦП. Перегляньте розділ :ref:`shutil-platform-dependent-efficient-copy-"
"operations`. (Надав Джампаоло Родола в :issue:`33671`.)"

msgid ""
":func:`shutil.copytree` uses :func:`os.scandir` function and all copy "
"functions depending from it use cached :func:`os.stat` values. The speedup "
"for copying a directory with 8000 files is around +9% on Linux, +20% on "
"Windows and +30% on a Windows SMB share. Also the number of :func:`os.stat` "
"syscalls is reduced by 38% making :func:`shutil.copytree` especially faster "
"on network filesystems. (Contributed by Giampaolo Rodolà in :issue:`33695`.)"
msgstr ""
":func:`shutil.copytree` використовує функцію :func:`os.scandir`, а всі "
"залежні від неї функції копіювання використовують кешовані значення :func:"
"`os.stat`. Прискорення для копіювання каталогу з 8000 файлами становить "
"приблизно +9% у Linux, +20% у Windows і +30% у Windows SMB. Також кількість "
"системних викликів :func:`os.stat` зменшено на 38%, що робить :func:`shutil."
"copytree` особливо швидшим у мережевих файлових системах. (Надав Джампаоло "
"Родола в :issue:`33695`.)"

msgid ""
"The default protocol in the :mod:`pickle` module is now Protocol 4, first "
"introduced in Python 3.4.  It offers better performance and smaller size "
"compared to Protocol 3 available since Python 3.0."
msgstr ""
"Протоколом за замовчуванням у модулі :mod:`pickle` тепер є протокол 4, "
"вперше представлений у Python 3.4. Він пропонує кращу продуктивність і "
"менший розмір порівняно з протоколом 3, доступним з Python 3.0."

msgid ""
"Removed one :c:type:`Py_ssize_t` member from ``PyGC_Head``.  All GC tracked "
"objects (e.g. tuple, list, dict) size is reduced 4 or 8 bytes. (Contributed "
"by Inada Naoki in :issue:`33597`.)"
msgstr ""
"Видалено один член :c:type:`Py_ssize_t` з ``PyGC_Head``. Розмір усіх "
"об’єктів, що відстежуються GC (наприклад, кортеж, список, dict), зменшено на "
"4 або 8 байт. (Надано Інадою Наокі в :issue:`33597`.)"

msgid ""
":class:`uuid.UUID` now uses ``__slots__`` to reduce its memory footprint. "
"(Contributed by Wouter Bolsterlee and Tal Einat in :issue:`30977`)"
msgstr ""
":class:`uuid.UUID` тепер використовує ``__slots__``, щоб зменшити обсяг "
"пам’яті. (Надано Wouter Bolsterlee і Tal Einat у :issue:`30977`)"

msgid ""
"Improved performance of :func:`operator.itemgetter` by 33%.  Optimized "
"argument handling and added a fast path for the common case of a single non-"
"negative integer index into a tuple (which is the typical use case in the "
"standard library).  (Contributed by Raymond Hettinger in :issue:`35664`.)"
msgstr ""
"Покращена продуктивність :func:`operator.itemgetter` на 33%. Оптимізовано "
"обробку аргументів і додано швидкий шлях для звичайного випадку одного "
"невід’ємного цілого індексу в кортежі (що є типовим випадком використання в "
"стандартній бібліотеці). (Надав Реймонд Геттінгер у :issue:`35664`.)"

msgid ""
"Sped-up field lookups in :func:`collections.namedtuple`.  They are now more "
"than two times faster, making them the fastest form of instance variable "
"lookup in Python. (Contributed by Raymond Hettinger, Pablo Galindo, and Joe "
"Jevnik, Serhiy Storchaka in :issue:`32492`.)"
msgstr ""
"Прискорений пошук полів у :func:`collections.namedtuple`. Тепер вони більш "
"ніж у два рази швидші, що робить їх найшвидшою формою пошуку змінних "
"екземплярів у Python. (Надано Реймондом Геттінгером, Пабло Галіндо та Джо "
"Джевником, Сергієм Сторчакою в :issue:`32492`.)"

msgid ""
"The :class:`list` constructor does not overallocate the internal item buffer "
"if the input iterable has a known length (the input implements ``__len__``). "
"This makes the created list 12% smaller on average. (Contributed by Raymond "
"Hettinger and Pablo Galindo in :issue:`33234`.)"
msgstr ""
"Конструктор :class:`list` не розподіляє внутрішній буфер елементів, якщо "
"ітерація введення має відому довжину (введення реалізує ``__len__``). Це "
"робить створений список у середньому на 12% меншим. (Надано Реймондом "
"Геттінгером і Пабло Галіндо в :issue:`33234`.)"

msgid ""
"Doubled the speed of class variable writes.  When a non-dunder attribute was "
"updated, there was an unnecessary call to update slots. (Contributed by "
"Stefan Behnel, Pablo Galindo Salgado, Raymond Hettinger, Neil Schemenauer, "
"and Serhiy Storchaka in :issue:`36012`.)"
msgstr ""
"Подвоєна швидкість запису змінних класу. Коли атрибут не-dunder оновлювався, "
"виникав непотрібний виклик для оновлення слотів. (Надано Стефаном Бенелем, "
"Пабло Галіндо Сальгадо, Раймондом Геттінгером, Нілом Шеменауером і Сергієм "
"Сторчакою в :issue:`36012`.)"

msgid ""
"Reduced an overhead of converting arguments passed to many builtin functions "
"and methods.  This sped up calling some simple builtin functions and methods "
"up to 20--50%.  (Contributed by Serhiy Storchaka in :issue:`23867`, :issue:"
"`35582` and :issue:`36127`.)"
msgstr ""
"Зменшено накладні витрати на перетворення аргументів, які передаються "
"багатьом вбудованим функціям і методам. Це прискорило виклик деяких простих "
"вбудованих функцій і методів на 20--50%. (Надав Сергій Сторчака в :issue:"
"`23867`, :issue:`35582` та :issue:`36127`.)"

msgid ""
"``LOAD_GLOBAL`` instruction now uses new \"per opcode cache\" mechanism. It "
"is about 40% faster now.  (Contributed by Yury Selivanov and Inada Naoki in :"
"issue:`26219`.)"
msgstr ""
"Інструкція ``LOAD_GLOBAL`` тепер використовує новий механізм \"кешу кожного "
"коду операції\". Зараз це приблизно на 40% швидше. (Надано Юрієм Селівановим "
"та Інадою Наокі в :issue:`26219`.)"

msgid "Build and C API Changes"
msgstr "Зміни збірки та C API"

msgid ""
"Default :data:`sys.abiflags` became an empty string: the ``m`` flag for "
"pymalloc became useless (builds with and without pymalloc are ABI "
"compatible) and so has been removed. (Contributed by Victor Stinner in :"
"issue:`36707`.)"
msgstr ""
"За замовчуванням :data:`sys.abiflags` став порожнім рядком: прапорець ``m`` "
"для pymalloc став марним (збірки з pymalloc і без нього сумісні з ABI), тому "
"його було видалено. (Надав Віктор Стіннер у :issue:`36707`.)"

msgid "Example of changes:"
msgstr "Приклад змін:"

msgid ""
"Only ``python3.8`` program is installed, ``python3.8m`` program is gone."
msgstr ""
"Встановлено лише програму ``python3.8``, програми ``python3.8m`` немає."

msgid ""
"Only ``python3.8-config`` script is installed, ``python3.8m-config`` script "
"is gone."
msgstr ""
"Встановлено лише сценарій ``python3.8-config``, сценарій ``python3.8m-"
"config`` зник."

msgid ""
"The ``m`` flag has been removed from the suffix of dynamic library "
"filenames: extension modules in the standard library as well as those "
"produced and installed by third-party packages, like those downloaded from "
"PyPI. On Linux, for example, the Python 3.7 suffix ``.cpython-37m-x86_64-"
"linux-gnu.so`` became ``.cpython-38-x86_64-linux-gnu.so`` in Python 3.8."
msgstr ""
"Прапор ``m`` було видалено з суфікса назв файлів динамічної бібліотеки: "
"модулі розширення в стандартній бібліотеці, а також модулі, створені та "
"встановлені пакетами сторонніх розробників, як-от завантажені з PyPI. У "
"Linux, наприклад, суфікс Python 3.7 ``.cpython-37m-x86_64-linux-gnu.so`` "
"став ``.cpython-38-x86_64-linux-gnu.so`` у Python 3.8."

msgid ""
"The header files have been reorganized to better separate the different "
"kinds of APIs:"
msgstr "Файли заголовків реорганізовано, щоб краще розділити різні типи API:"

msgid "``Include/*.h`` should be the portable public stable C API."
msgstr ""
"``Include/*.h`` має бути портативним загальнодоступним стабільним C API."

msgid ""
"``Include/cpython/*.h`` should be the unstable C API specific to CPython; "
"public API, with some private API prefixed by ``_Py`` or ``_PY``."
msgstr ""
"``Include/cpython/*.h`` має бути нестабільним C API, специфічним для "
"CPython; публічний API, з деякими приватними API з префіксом ``_Py`` або "
"``_PY``."

msgid ""
"``Include/internal/*.h`` is the private internal C API very specific to "
"CPython. This API comes with no backward compatibility warranty and should "
"not be used outside CPython. It is only exposed for very specific needs like "
"debuggers and profiles which has to access to CPython internals without "
"calling functions. This API is now installed by ``make install``."
msgstr ""
"``Include/internal/*.h`` — це приватний внутрішній API C, специфічний для "
"CPython. Цей API не має гарантії зворотної сумісності, тому його не слід "
"використовувати поза CPython. Він доступний лише для дуже специфічних "
"потреб, таких як налагоджувачі та профілі, які мають доступ до внутрішніх "
"елементів CPython без виклику функцій. Цей API тепер встановлено за "
"допомогою ``make install``."

msgid ""
"(Contributed by Victor Stinner in :issue:`35134` and :issue:`35081`, work "
"initiated by Eric Snow in Python 3.7.)"
msgstr ""
"(Надано Віктором Стіннером у :issue:`35134` та :issue:`35081`, робота, "
"розпочата Еріком Сноу над Python 3.7.)"

msgid ""
"Some macros have been converted to static inline functions: parameter types "
"and return type are well defined, they don't have issues specific to macros, "
"variables have a local scopes. Examples:"
msgstr ""
"Деякі макроси було перетворено на статичні вбудовані функції: типи "
"параметрів і тип повернення добре визначені, вони не мають проблем, "
"характерних для макросів, змінні мають локальні області видимості. приклади:"

msgid ":c:func:`Py_INCREF`, :c:func:`Py_DECREF`"
msgstr ":c:func:`Py_INCREF`, :c:func:`Py_DECREF`"

msgid ":c:func:`Py_XINCREF`, :c:func:`Py_XDECREF`"
msgstr ":c:func:`Py_XINCREF`, :c:func:`Py_XDECREF`"

msgid ":c:func:`PyObject_INIT`, :c:func:`PyObject_INIT_VAR`"
msgstr ":c:func:`PyObject_INIT`, :c:func:`PyObject_INIT_VAR`"

msgid ""
"Private functions: :c:func:`_PyObject_GC_TRACK`, :c:func:"
"`_PyObject_GC_UNTRACK`, :c:func:`_Py_Dealloc`"
msgstr ""
"Приватні функції: :c:func:`_PyObject_GC_TRACK`, :c:func:"
"`_PyObject_GC_UNTRACK`, :c:func:`_Py_Dealloc`"

msgid "(Contributed by Victor Stinner in :issue:`35059`.)"
msgstr "(Надав Віктор Стіннер у :issue:`35059`.)"

msgid ""
"The :c:func:`PyByteArray_Init` and :c:func:`PyByteArray_Fini` functions have "
"been removed. They did nothing since Python 2.7.4 and Python 3.2.0, were "
"excluded from the limited API (stable ABI), and were not documented. "
"(Contributed by Victor Stinner in :issue:`35713`.)"
msgstr ""
"Функції :c:func:`PyByteArray_Init` і :c:func:`PyByteArray_Fini` видалено. "
"Вони нічого не зробили з Python 2.7.4 і Python 3.2.0, були виключені з "
"обмеженого API (стабільний ABI) і не були задокументовані. (Надав Віктор "
"Стіннер у :issue:`35713`.)"

msgid ""
"The result of :c:func:`PyExceptionClass_Name` is now of type ``const char "
"*`` rather of ``char *``. (Contributed by Serhiy Storchaka in :issue:"
"`33818`.)"
msgstr ""
"Результат :c:func:`PyExceptionClass_Name` тепер має тип ``const char *``, а "
"не ``char *``. (Надав Сергій Сторчака в :issue:`33818`.)"

msgid ""
"The duality of ``Modules/Setup.dist`` and ``Modules/Setup`` has been "
"removed.  Previously, when updating the CPython source tree, one had to "
"manually copy ``Modules/Setup.dist`` (inside the source tree) to ``Modules/"
"Setup`` (inside the build tree) in order to reflect any changes upstream.  "
"This was of a small benefit to packagers at the expense of a frequent "
"annoyance to developers following CPython development, as forgetting to copy "
"the file could produce build failures."
msgstr ""
"Подвійність ``Modules/Setup.dist`` і ``Modules/Setup`` було видалено. "
"Раніше, оновлюючи дерево вихідних кодів CPython, потрібно було вручну "
"скопіювати ``Modules/Setup.dist`` (усередині дерева вихідних кодів) до "
"``Modules/Setup`` (усередині дерева збірки), щоб відобразити будь-які зміни "
"вгорі . Це було невеликою перевагою для пакувальників за рахунок частого "
"роздратування розробників після розробки CPython, оскільки забуття "
"скопіювати файл могло призвести до помилок збірки."

msgid ""
"Now the build system always reads from ``Modules/Setup`` inside the source "
"tree.  People who want to customize that file are encouraged to maintain "
"their changes in a git fork of CPython or as patch files, as they would do "
"for any other change to the source tree."
msgstr ""
"Тепер система збирання завжди читає з ``Modules/Setup`` у дереві вихідних "
"кодів. Людям, які хочуть налаштувати цей файл, рекомендується зберігати свої "
"зміни в git-форку CPython або як файли виправлень, як вони робили б для будь-"
"яких інших змін у вихідному дереві."

msgid "(Contributed by Antoine Pitrou in :issue:`32430`.)"
msgstr "(Надав Антуан Пітру в :issue:`32430`.)"

msgid ""
"Functions that convert Python number to C integer like :c:func:"
"`PyLong_AsLong` and argument parsing functions like :c:func:"
"`PyArg_ParseTuple` with integer converting format units like ``'i'`` will "
"now use the :meth:`~object.__index__` special method instead of :meth:"
"`~object.__int__`, if available.  The deprecation warning will be emitted "
"for objects with the ``__int__()`` method but without the ``__index__()`` "
"method (like :class:`~decimal.Decimal` and :class:`~fractions.Fraction`).  :"
"c:func:`PyNumber_Check` will now return ``1`` for objects implementing "
"``__index__()``. :c:func:`PyNumber_Long`, :c:func:`PyNumber_Float` and :c:"
"func:`PyFloat_AsDouble` also now use the ``__index__()`` method if "
"available. (Contributed by Serhiy Storchaka in :issue:`36048` and :issue:"
"`20092`.)"
msgstr ""
"Функції, які перетворюють число Python на ціле число C, як-от :c:func:"
"`PyLong_AsLong`, і функції аналізу аргументів, як-от :c:func:"
"`PyArg_ParseTuple` з одиницями формату перетворення цілих чисел, як-от "
"``'i'`` тепер використовуватимуть Спеціальний метод :meth:`~object."
"__index__` замість :meth:`~object.__int__`, якщо доступний. Попередження про "
"припинення використання буде випущено для об’єктів із методом ``__int__()``, "
"але без ``__index__()`` (наприклад, :class:`~decimal.Decimal` і :class:"
"`~fractions.Fraction` ). :c:func:`PyNumber_Check` тепер повертатиме ``1`` "
"для об’єктів, що реалізують ``__index__()``. :c:func:`PyNumber_Long`, :c:"
"func:`PyNumber_Float` і :c:func:`PyFloat_AsDouble` тепер також "
"використовують метод ``__index__()``, якщо він доступний. (Надав Сергій "
"Сторчака в :issue:`36048` і :issue:`20092`.)"

msgid ""
"Heap-allocated type objects will now increase their reference count in :c:"
"func:`PyObject_Init` (and its parallel macro ``PyObject_INIT``) instead of "
"in :c:func:`PyType_GenericAlloc`. Types that modify instance allocation or "
"deallocation may need to be adjusted. (Contributed by Eddie Elizondo in :"
"issue:`35810`.)"
msgstr ""
"Об’єкти типу, розподіленого за допомогою динамічної пам’яті, тепер "
"збільшуватимуть кількість посилань у :c:func:`PyObject_Init` (і його "
"паралельному макросі ``PyObject_INIT``), а не в :c:func:"
"`PyType_GenericAlloc`. Типи, які змінюють виділення або звільнення "
"екземплярів, можливо, потребують коригування. (Надав Едді Елізондо в :issue:"
"`35810`.)"

msgid ""
"The new function :c:func:`PyCode_NewWithPosOnlyArgs` allows to create code "
"objects like :c:func:`PyCode_New`, but with an extra *posonlyargcount* "
"parameter for indicating the number of positional-only arguments. "
"(Contributed by Pablo Galindo in :issue:`37221`.)"
msgstr ""
"Нова функція :c:func:`PyCode_NewWithPosOnlyArgs` дозволяє створювати об’єкти "
"коду, такі як :c:func:`PyCode_New`, але з додатковим параметром "
"*posonlyargcount* для вказівки кількості лише позиційних аргументів. (Надав "
"Пабло Галіндо в :issue:`37221`.)"

msgid ""
":c:func:`Py_SetPath` now sets :data:`sys.executable` to the program full "
"path (:c:func:`Py_GetProgramFullPath`) rather than to the program name (:c:"
"func:`Py_GetProgramName`). (Contributed by Victor Stinner in :issue:`38234`.)"
msgstr ""
":c:func:`Py_SetPath` тепер встановлює :data:`sys.executable` повний шлях до "
"програми (:c:func:`Py_GetProgramFullPath`), а не назву програми (:c:func:"
"`Py_GetProgramName`). (Надав Віктор Стіннер у :issue:`38234`.)"

msgid "Deprecated"
msgstr "Застаріле"

msgid ""
"The distutils ``bdist_wininst`` command is now deprecated, use "
"``bdist_wheel`` (wheel packages) instead. (Contributed by Victor Stinner in :"
"issue:`37481`.)"
msgstr ""
"Команда distutils ``bdist_wininst`` тепер застаріла, замість неї "
"використовуйте ``bdist_wheel`` (пакети колеса). (Надав Віктор Стіннер у :"
"issue:`37481`.)"

msgid ""
"Deprecated methods ``getchildren()`` and ``getiterator()`` in the :mod:`~xml."
"etree.ElementTree` module now emit a :exc:`DeprecationWarning` instead of :"
"exc:`PendingDeprecationWarning`. They will be removed in Python 3.9. "
"(Contributed by Serhiy Storchaka in :issue:`29209`.)"
msgstr ""
"Застарілі методи ``getchildren()`` і ``getiterator()`` у модулі :mod:`~xml."
"etree.ElementTree` тепер видають :exc:`DeprecationWarning` замість :exc:"
"`PendingDeprecationWarning`. Їх буде видалено в Python 3.9. (Надав Сергій "
"Сторчака в :issue:`29209`.)"

msgid ""
"Passing an object that is not an instance of :class:`concurrent.futures."
"ThreadPoolExecutor` to :meth:`loop.set_default_executor() <asyncio.loop."
"set_default_executor>` is deprecated and will be prohibited in Python 3.9. "
"(Contributed by Elvis Pranskevichus in :issue:`34075`.)"
msgstr ""
"Передача об’єкта, який не є екземпляром :class:`concurrent.futures."
"ThreadPoolExecutor`, у :meth:`loop.set_default_executor() <asyncio.loop."
"set_default_executor>` застаріла та буде заборонена в Python 3.9. (Надав "
"Елвіс Пранскявічус у :issue:`34075`.)"

msgid ""
"The :meth:`__getitem__` methods of :class:`xml.dom.pulldom.DOMEventStream`, :"
"class:`wsgiref.util.FileWrapper` and :class:`fileinput.FileInput` have been "
"deprecated."
msgstr ""
"Методи :meth:`__getitem__` :class:`xml.dom.pulldom.DOMEventStream`, :class:"
"`wsgiref.util.FileWrapper` і :class:`fileinput.FileInput` стали застарілими."

msgid ""
"Implementations of these methods have been ignoring their *index* parameter, "
"and returning the next item instead. (Contributed by Berker Peksag in :issue:"
"`9372`.)"
msgstr ""
"Реалізації цих методів ігнорували параметр *index* і замість нього повертали "
"наступний елемент. (Надано Berker Peksag у :issue:`9372`.)"

msgid ""
"The :class:`typing.NamedTuple` class has deprecated the ``_field_types`` "
"attribute in favor of the ``__annotations__`` attribute which has the same "
"information. (Contributed by Raymond Hettinger in :issue:`36320`.)"
msgstr ""
"Клас :class:`typing.NamedTuple` відмовився від атрибута ``_field_types`` на "
"користь атрибута ``__annotations__``, який містить ту саму інформацію. "
"(Надав Реймонд Геттінгер у :issue:`36320`.)"

msgid ""
":mod:`ast` classes ``Num``, ``Str``, ``Bytes``, ``NameConstant`` and "
"``Ellipsis`` are considered deprecated and will be removed in future Python "
"versions. :class:`~ast.Constant` should be used instead. (Contributed by "
"Serhiy Storchaka in :issue:`32892`.)"
msgstr ""
":mod:`ast` класи ``Num``, ``Str``, ``Bytes``, ``NameConstant`` і "
"``Ellipsis`` вважаються застарілими та будуть видалені в майбутніх версіях "
"Python. Замість цього слід використовувати :class:`~ast.Constant`. (Надав "
"Сергій Сторчака в :issue:`32892`.)"

msgid ""
":class:`ast.NodeVisitor` methods ``visit_Num()``, ``visit_Str()``, "
"``visit_Bytes()``, ``visit_NameConstant()`` and ``visit_Ellipsis()`` are "
"deprecated now and will not be called in future Python versions. Add the :"
"meth:`~ast.NodeVisitor.visit_Constant` method to handle all constant nodes. "
"(Contributed by Serhiy Storchaka in :issue:`36917`.)"
msgstr ""
":class:`ast.NodeVisitor` методи ``visit_Num()``, ``visit_Str()``, "
"``visit_Bytes()``, ``visit_NameConstant()`` та ``visit_Ellipsis()`` "
"застаріли тепер і не буде викликатися в майбутніх версіях Python. Додайте "
"метод :meth:`~ast.NodeVisitor.visit_Constant` для обробки всіх постійних "
"вузлів. (Надав Сергій Сторчака в :issue:`36917`.)"

msgid ""
"The :func:`asyncio.coroutine` :term:`decorator` is deprecated and will be "
"removed in version 3.10.  Instead of ``@asyncio.coroutine``, use :keyword:"
"`async def` instead. (Contributed by Andrew Svetlov in :issue:`36921`.)"
msgstr ""
":func:`asyncio.coroutine` :term:`decorator` застаріло та буде видалено у "
"версії 3.10. Замість ``@asyncio.coroutine`` використовуйте :keyword:`async "
"def`. (Надав Ендрю Свєтлов у :issue:`36921`.)"

msgid ""
"In :mod:`asyncio`, the explicit passing of a *loop* argument has been "
"deprecated and will be removed in version 3.10 for the following: :func:"
"`asyncio.sleep`, :func:`asyncio.gather`, :func:`asyncio.shield`, :func:"
"`asyncio.wait_for`, :func:`asyncio.wait`, :func:`asyncio.as_completed`, :"
"class:`asyncio.Task`, :class:`asyncio.Lock`, :class:`asyncio.Event`, :class:"
"`asyncio.Condition`, :class:`asyncio.Semaphore`, :class:`asyncio."
"BoundedSemaphore`, :class:`asyncio.Queue`, :func:`asyncio."
"create_subprocess_exec`, and :func:`asyncio.create_subprocess_shell`."
msgstr ""
"У :mod:`asyncio` явна передача аргументу *loop* застаріла та буде видалена у "
"версії 3.10 для наступних: :func:`asyncio.sleep`, :func:`asyncio.gather`, :"
"func:`asyncio.shield`, :func:`asyncio.wait_for`, :func:`asyncio.wait`, :func:"
"`asyncio.as_completed`, :class:`asyncio.Task`, :class:`asyncio. Lock`, :"
"class:`asyncio.Event`, :class:`asyncio.Condition`, :class:`asyncio."
"Semaphore`, :class:`asyncio.BoundedSemaphore`, :class:`asyncio.Queue`, :func:"
"`asyncio.create_subprocess_exec` і :func:`asyncio.create_subprocess_shell`."

msgid ""
"The explicit passing of coroutine objects to :func:`asyncio.wait` has been "
"deprecated and will be removed in version 3.11. (Contributed by Yury "
"Selivanov in :issue:`34790`.)"
msgstr ""
"Явне передавання об’єктів співпрограми до :func:`asyncio.wait` застаріло та "
"буде видалено у версії 3.11. (Надав Юрій Селіванов у :issue:`34790`.)"

msgid ""
"The following functions and methods are deprecated in the :mod:`gettext` "
"module: :func:`~gettext.lgettext`, :func:`~gettext.ldgettext`, :func:"
"`~gettext.lngettext` and :func:`~gettext.ldngettext`. They return encoded "
"bytes, and it's possible that you will get unexpected Unicode-related "
"exceptions if there are encoding problems with the translated strings. It's "
"much better to use alternatives which return Unicode strings in Python 3. "
"These functions have been broken for a long time."
msgstr ""
"Наступні функції та методи застаріли в модулі :mod:`gettext`: :func:"
"`~gettext.lgettext`, :func:`~gettext.ldgettext`, :func:`~gettext.lngettext` "
"і :func:`~gettext.ldngettext`. Вони повертають закодовані байти, і можливо, "
"ви отримаєте несподівані винятки, пов’язані з Unicode, якщо є проблеми з "
"кодуванням перекладених рядків. Набагато краще використовувати альтернативи, "
"які повертають рядки Unicode в Python 3. Ці функції давно не працюють."

msgid ""
"Function :func:`~gettext.bind_textdomain_codeset`, methods :meth:`~gettext."
"NullTranslations.output_charset` and :meth:`~gettext.NullTranslations."
"set_output_charset`, and the *codeset* parameter of functions :func:"
"`~gettext.translation` and :func:`~gettext.install` are also deprecated, "
"since they are only used for the ``l*gettext()`` functions. (Contributed by "
"Serhiy Storchaka in :issue:`33710`.)"
msgstr ""
"Функція :func:`~gettext.bind_textdomain_codeset`, методи :meth:`~gettext."
"NullTranslations.output_charset` і :meth:`~gettext.NullTranslations."
"set_output_charset`, а також параметр *codeset* функцій :func:`~gettext ."
"translation` і :func:`~gettext.install` також застаріли, оскільки вони "
"використовуються лише для функцій ``l*gettext()``. (Надав Сергій Сторчака в :"
"issue:`33710`.)"

msgid ""
"The :meth:`~threading.Thread.isAlive()` method of :class:`threading.Thread` "
"has been deprecated. (Contributed by Dong-hee Na in :issue:`35283`.)"
msgstr ""
"Метод :meth:`~threading.Thread.isAlive()` для :class:`threading.Thread` "
"визнано застарілим. (Надав Dong-hee Na у :issue:`35283`.)"

msgid ""
"Many builtin and extension functions that take integer arguments will now "
"emit a deprecation warning for :class:`~decimal.Decimal`\\ s, :class:"
"`~fractions.Fraction`\\ s and any other objects that can be converted to "
"integers only with a loss (e.g. that have the :meth:`~object.__int__` method "
"but do not have the :meth:`~object.__index__` method).  In future version "
"they will be errors. (Contributed by Serhiy Storchaka in :issue:`36048`.)"
msgstr ""
"Багато вбудованих функцій і функцій розширення, які приймають цілі "
"аргументи, тепер видаватимуть попередження про застаріленість для :class:"
"`~decimal.Decimal`\\ s, :class:`~fractions.Fraction`\\ s та будь-яких інших "
"об’єктів, які можна перетворити лише на цілі числа із втратою (наприклад, "
"які мають метод :meth:`~object.__int__`, але не мають методу :meth:`~object."
"__index__`). У наступній версії вони будуть помилками. (Надав Сергій "
"Сторчака в :issue:`36048`.)"

msgid "Deprecated passing the following arguments as keyword arguments:"
msgstr "Застаріло передавати такі аргументи як аргументи ключового слова:"

msgid ""
"*func* in :func:`functools.partialmethod`, :func:`weakref.finalize`, :meth:"
"`profile.Profile.runcall`, :meth:`cProfile.Profile.runcall`, :meth:`bdb.Bdb."
"runcall`, :meth:`trace.Trace.runfunc` and :func:`curses.wrapper`."
msgstr ""
"*func* у :func:`functools.partialmethod`, :func:`weakref.finalize`, :meth:"
"`profile.Profile.runcall`, :meth:`cProfile.Profile.runcall`, :meth:`bdb. Bdb."
"runcall`, :meth:`trace.Trace.runfunc` і :func:`curses.wrapper`."

msgid "*function* in :meth:`unittest.TestCase.addCleanup`."
msgstr "*функція* в :meth:`unittest.TestCase.addCleanup`."

msgid ""
"*fn* in the :meth:`~concurrent.futures.Executor.submit` method of :class:"
"`concurrent.futures.ThreadPoolExecutor` and :class:`concurrent.futures."
"ProcessPoolExecutor`."
msgstr ""
"*fn* у методі :meth:`~concurrent.futures.Executor.submit` :class:`concurrent."
"futures.ThreadPoolExecutor` і :class:`concurrent.futures."
"ProcessPoolExecutor`."

msgid ""
"*callback* in :meth:`contextlib.ExitStack.callback`, :meth:`contextlib."
"AsyncExitStack.callback` and :meth:`contextlib.AsyncExitStack."
"push_async_callback`."
msgstr ""
"*зворотний виклик* у :meth:`contextlib.ExitStack.callback`, :meth:"
"`contextlib.AsyncExitStack.callback` і :meth:`contextlib.AsyncExitStack."
"push_async_callback`."

msgid ""
"*c* and *typeid* in the :meth:`~multiprocessing.managers.Server.create` "
"method of :class:`multiprocessing.managers.Server` and :class:"
"`multiprocessing.managers.SharedMemoryServer`."
msgstr ""
"*c* і *typeid* у методі :meth:`~multiprocessing.managers.Server.create` :"
"class:`multiprocessing.managers.Server` і :class:`multiprocessing.managers."
"SharedMemoryServer`."

msgid "*obj* in :func:`weakref.finalize`."
msgstr "*obj* у :func:`weakref.finalize`."

msgid ""
"In future releases of Python, they will be :ref:`positional-only <positional-"
"only_parameter>`. (Contributed by Serhiy Storchaka in :issue:`36492`.)"
msgstr ""
"У майбутніх випусках Python вони будуть :ref:`позиційними лише <positional-"
"only_parameter>`. (Надав Сергій Сторчака в :issue:`36492`.)"

msgid "API and Feature Removals"
msgstr "Видалення API та функцій"

msgid "The following features and APIs have been removed from Python 3.8:"
msgstr "З Python 3.8 видалено наступні функції та API:"

msgid ""
"Starting with Python 3.3, importing ABCs from :mod:`collections` was "
"deprecated, and importing should be done from :mod:`collections.abc`. Being "
"able to import from collections was marked for removal in 3.8, but has been "
"delayed to 3.9. (See :issue:`36952`.)"
msgstr ""
"Починаючи з Python 3.3, імпорт азбуки з :mod:`collections` був застарілим, і "
"імпорт повинен здійснюватися з :mod:`collections.abc`. Можливість "
"імпортувати з колекцій було позначено для видалення у версії 3.8, але "
"відкладено до версії 3.9. (Див. :issue:`36952`.)"

msgid ""
"The :mod:`macpath` module, deprecated in Python 3.7, has been removed. "
"(Contributed by Victor Stinner in :issue:`35471`.)"
msgstr ""
"Модуль :mod:`macpath`, застарілий у Python 3.7, було видалено. (Надав Віктор "
"Стіннер у :issue:`35471`.)"

msgid ""
"The function :func:`platform.popen` has been removed, after having been "
"deprecated since Python 3.3: use :func:`os.popen` instead. (Contributed by "
"Victor Stinner in :issue:`35345`.)"
msgstr ""
"Функцію :func:`platform.popen` було видалено після того, як вона була "
"застарілою з Python 3.3: замість неї використовуйте :func:`os.popen`. (Надав "
"Віктор Стіннер у :issue:`35345`.)"

msgid ""
"The function :func:`time.clock` has been removed, after having been "
"deprecated since Python 3.3: use :func:`time.perf_counter` or :func:`time."
"process_time` instead, depending on your requirements, to have well-defined "
"behavior. (Contributed by Matthias Bussonnier in :issue:`36895`.)"
msgstr ""
"Функцію :func:`time.clock` було видалено після того, як вона була застарілою "
"з Python 3.3: використовуйте замість неї :func:`time.perf_counter` або :func:"
"`time.process_time`, залежно від ваших вимог, щоб добре працювати - "
"визначена поведінка. (Надано Матіасом Бюссонньєром у :issue:`36895`.)"

msgid ""
"The ``pyvenv`` script has been removed in favor of ``python3.8 -m venv`` to "
"help eliminate confusion as to what Python interpreter the ``pyvenv`` script "
"is tied to. (Contributed by Brett Cannon in :issue:`25427`.)"
msgstr ""
"Сценарій ``pyvenv`` було видалено на користь ``python3.8 -m venv``, щоб "
"допомогти усунути плутанину щодо того, до якого інтерпретатора Python "
"прив’язаний сценарій ``pyvenv``. (Надав Бретт Кеннон у :issue:`25427`.)"

msgid ""
"``parse_qs``, ``parse_qsl``, and ``escape`` are removed from the :mod:`cgi` "
"module.  They are deprecated in Python 3.2 or older. They should be imported "
"from the ``urllib.parse`` and ``html`` modules instead."
msgstr ""
"``parse_qs``, ``parse_qsl`` і ``escape`` видаляються з модуля :mod:`cgi`. "
"Вони застаріли в Python 3.2 або старіших версіях. Натомість їх слід "
"імпортувати з модулів ``urllib.parse`` і ``html``."

msgid ""
"``filemode`` function is removed from the :mod:`tarfile` module. It is not "
"documented and deprecated since Python 3.3."
msgstr ""
"Функцію ``filemode`` видалено з модуля :mod:`tarfile`. Він не "
"задокументований і не підтримується, починаючи з Python 3.3."

msgid ""
"The :class:`~xml.etree.ElementTree.XMLParser` constructor no longer accepts "
"the *html* argument.  It never had an effect and was deprecated in Python "
"3.4. All other parameters are now :ref:`keyword-only <keyword-"
"only_parameter>`. (Contributed by Serhiy Storchaka in :issue:`29209`.)"
msgstr ""
"Конструктор :class:`~xml.etree.ElementTree.XMLParser` більше не приймає "
"аргумент *html*. Це ніколи не мало ефекту та було застарілим у Python 3.4. "
"Усі інші параметри тепер :ref:`лише для ключових слів <keyword-"
"only_parameter>`. (Надав Сергій Сторчака в :issue:`29209`.)"

msgid ""
"Removed the ``doctype()`` method of :class:`~xml.etree.ElementTree."
"XMLParser`. (Contributed by Serhiy Storchaka in :issue:`29209`.)"
msgstr ""
"Видалено метод ``doctype()`` :class:`~xml.etree.ElementTree.XMLParser`. "
"(Надав Сергій Сторчака в :issue:`29209`.)"

msgid ""
"\"unicode_internal\" codec is removed. (Contributed by Inada Naoki in :issue:"
"`36297`.)"
msgstr ""
"Кодек \"unicode_internal\" видалено. (Надано Інадою Наокі в :issue:`36297`.)"

msgid ""
"The ``Cache`` and ``Statement`` objects of the :mod:`sqlite3` module are not "
"exposed to the user. (Contributed by Aviv Palivoda in :issue:`30262`.)"
msgstr ""
"Об’єкти ``Cache`` і ``Statement`` модуля :mod:`sqlite3` не доступні для "
"користувача. (Надав Авів Паливода в :issue:`30262`.)"

msgid ""
"The ``bufsize`` keyword argument of :func:`fileinput.input` and :func:"
"`fileinput.FileInput` which was ignored and deprecated since Python 3.6 has "
"been removed. :issue:`36952` (Contributed by Matthias Bussonnier.)"
msgstr ""
"Аргумент ключового слова ``bufsize`` :func:`fileinput.input` і :func:"
"`fileinput.FileInput`, який ігнорувався та не підтримувався з Python 3.6, "
"було видалено. :issue:`36952` (Надав Матіас Бюссонньє.)"

msgid ""
"The functions :func:`sys.set_coroutine_wrapper` and :func:`sys."
"get_coroutine_wrapper` deprecated in Python 3.7 have been removed; :issue:"
"`36933` (Contributed by Matthias Bussonnier.)"
msgstr ""
"Функції :func:`sys.set_coroutine_wrapper` і :func:`sys."
"get_coroutine_wrapper`, які застаріли в Python 3.7, видалено; :issue:`36933` "
"(Надав Матіас Бюссонньє.)"

msgid "Porting to Python 3.8"
msgstr "Перенесення на Python 3.8"

msgid ""
"This section lists previously described changes and other bugfixes that may "
"require changes to your code."
msgstr ""
"У цьому розділі наведено описані раніше зміни та інші виправлення помилок, "
"які можуть потребувати змін у вашому коді."

msgid "Changes in Python behavior"
msgstr "Зміни в поведінці Python"

msgid ""
"Yield expressions (both ``yield`` and ``yield from`` clauses) are now "
"disallowed in comprehensions and generator expressions (aside from the "
"iterable expression in the leftmost :keyword:`!for` clause). (Contributed by "
"Serhiy Storchaka in :issue:`10544`.)"
msgstr ""
"Вирази yield (як ``yield``, так і ``yield from`` пункти тепер заборонені у "
"виразах розуміння та генераторі (окрім ітераційного виразу в крайньому "
"лівому пункті :keyword:`!for`). (Надав Сергій Сторчака в :issue:`10544`.)"

msgid ""
"The compiler now produces a :exc:`SyntaxWarning` when identity checks "
"(``is`` and ``is not``) are used with certain types of literals (e.g. "
"strings, numbers).  These can often work by accident in CPython, but are not "
"guaranteed by the language spec.  The warning advises users to use equality "
"tests (``==`` and ``!=``) instead. (Contributed by Serhiy Storchaka in :"
"issue:`34850`.)"
msgstr ""
"Тепер компілятор створює :exc:`SyntaxWarning`, коли перевірки ідентичності "
"(``is`` і ``is not``) використовуються з певними типами літералів "
"(наприклад, рядки, числа). Вони часто можуть працювати випадково в CPython, "
"але не гарантуються специфікацією мови. Застереження рекомендує користувачам "
"замість цього використовувати тести рівності (``==`` і ``!=``). (Надав "
"Сергій Сторчака в :issue:`34850`.)"

msgid ""
"The CPython interpreter can swallow exceptions in some circumstances. In "
"Python 3.8 this happens in fewer cases.  In particular, exceptions raised "
"when getting the attribute from the type dictionary are no longer ignored. "
"(Contributed by Serhiy Storchaka in :issue:`35459`.)"
msgstr ""
"Інтерпретатор CPython може ковтати винятки за деяких обставин. У Python 3.8 "
"це відбувається в меншій кількості випадків. Зокрема, винятки, викликані під "
"час отримання атрибута зі словника типів, більше не ігноруються. (Надав "
"Сергій Сторчака в :issue:`35459`.)"

msgid ""
"Removed ``__str__`` implementations from builtin types :class:`bool`, :class:"
"`int`, :class:`float`, :class:`complex` and few classes from the standard "
"library.  They now inherit ``__str__()`` from :class:`object`. As result, "
"defining the ``__repr__()`` method in the subclass of these classes will "
"affect their string representation. (Contributed by Serhiy Storchaka in :"
"issue:`36793`.)"
msgstr ""
"Видалено реалізації ``__str__`` із вбудованих типів :class:`bool`, :class:"
"`int`, :class:`float`, :class:`complex` і кількох класів зі стандартної "
"бібліотеки. Тепер вони успадковують ``__str__()`` від :class:`object`. Як "
"наслідок, визначення методу ``__repr__()`` у підкласі цих класів вплине на "
"їхнє представлення рядків. (Надав Сергій Сторчака в :issue:`36793`.)"

msgid ""
"On AIX, :attr:`sys.platform` doesn't contain the major version anymore. It "
"is always ``'aix'``, instead of ``'aix3'`` .. ``'aix7'``.  Since older "
"Python versions include the version number, so it is recommended to always "
"use ``sys.platform.startswith('aix')``. (Contributed by M. Felt in :issue:"
"`36588`.)"
msgstr ""
"В AIX :attr:`sys.platform` більше не містить основної версії. Це завжди "
"``'aix'`` замість ``'aix3''`` .. ``'aix7''``. Оскільки старіші версії Python "
"містять номер версії, тому рекомендується завжди використовувати ``sys."
"platform.startswith('aix')``. (Надав М. Фелт у :issue:`36588`.)"

msgid ""
":c:func:`PyEval_AcquireLock` and :c:func:`PyEval_AcquireThread` now "
"terminate the current thread if called while the interpreter is finalizing, "
"making them consistent with :c:func:`PyEval_RestoreThread`, :c:func:"
"`Py_END_ALLOW_THREADS`, and :c:func:`PyGILState_Ensure`. If this behavior is "
"not desired, guard the call by checking :c:func:`_Py_IsFinalizing` or :c:"
"func:`sys.is_finalizing`. (Contributed by Joannah Nanjekye in :issue:"
"`36475`.)"
msgstr ""
":c:func:`PyEval_AcquireLock` і :c:func:`PyEval_AcquireThread` тепер "
"припиняють поточний потік, якщо викликаються під час завершення "
"інтерпретатора, що робить їх сумісними з :c:func:`PyEval_RestoreThread`, :c:"
"func:`Py_END_ALLOW_THREADS` і :c:func:`PyGILState_Ensure`. Якщо така "
"поведінка небажана, захистіть виклик, позначивши :c:func:`_Py_IsFinalizing` "
"або :c:func:`sys.is_finalizing`. (Надано Joannah Nanjekye у :issue:`36475`.)"

msgid "Changes in the Python API"
msgstr "Зміни в API Python"

msgid ""
"The :func:`os.getcwdb` function now uses the UTF-8 encoding on Windows, "
"rather than the ANSI code page: see :pep:`529` for the rationale. The "
"function is no longer deprecated on Windows. (Contributed by Victor Stinner "
"in :issue:`37412`.)"
msgstr ""
"Функція :func:`os.getcwdb` тепер використовує кодування UTF-8 у Windows, а "
"не кодову сторінку ANSI: див. :pep:`529` для обґрунтування. Ця функція "
"більше не підтримується в Windows. (Надав Віктор Стіннер у :issue:`37412`.)"

msgid ""
":class:`subprocess.Popen` can now use :func:`os.posix_spawn` in some cases "
"for better performance. On Windows Subsystem for Linux and QEMU User "
"Emulation, the :class:`Popen` constructor using :func:`os.posix_spawn` no "
"longer raises an exception on errors like \"missing program\".  Instead the "
"child process fails with a non-zero :attr:`~Popen.returncode`. (Contributed "
"by Joannah Nanjekye and Victor Stinner in :issue:`35537`.)"
msgstr ""
":class:`subprocess.Popen` тепер може використовувати :func:`os.posix_spawn` "
"у деяких випадках для кращої продуктивності. У підсистемі Windows для Linux "
"і емуляції користувача QEMU конструктор :class:`Popen`, що використовує :"
"func:`os.posix_spawn`, більше не створює виняток для таких помилок, як "
"\"відсутня програма\". Натомість дочірній процес завершується помилкою з "
"ненульовим :attr:`~Popen.returncode`. (Надано Джоанною Нанджекі та Віктором "
"Стіннером у :issue:`35537`.)"

msgid ""
"The *preexec_fn* argument of * :class:`subprocess.Popen` is no longer "
"compatible with subinterpreters. The use of the parameter in a "
"subinterpreter now raises :exc:`RuntimeError`. (Contributed by Eric Snow in :"
"issue:`34651`, modified by Christian Heimes in :issue:`37951`.)"
msgstr ""
"Аргумент *preexec_fn* * :class:`subprocess.Popen` більше не сумісний із "
"субінтерпретаторами. Використання параметра у субінтерпретаторі тепер "
"викликає :exc:`RuntimeError`. (Надано Еріком Сноу у :issue:`34651`, змінено "
"Крістіаном Хаймсом у :issue:`37951`.)"

msgid ""
"The :meth:`imap.IMAP4.logout` method no longer silently ignores arbitrary "
"exceptions. (Contributed by Victor Stinner in :issue:`36348`.)"
msgstr ""
"Метод :meth:`imap.IMAP4.logout` більше не ігнорує довільні винятки. (Надав "
"Віктор Стіннер у :issue:`36348`.)"

msgid ""
"The :func:`statistics.mode` function no longer raises an exception when "
"given multimodal data.  Instead, it returns the first mode encountered in "
"the input data.  (Contributed by Raymond Hettinger in :issue:`35892`.)"
msgstr ""
"Функція :func:`statistics.mode` більше не створює виняток, коли їй надаються "
"мультимодальні дані. Натомість він повертає перший режим, який зустрічається "
"у вхідних даних. (Надав Реймонд Геттінгер у :issue:`35892`.)"

msgid ""
"The :meth:`~tkinter.ttk.Treeview.selection` method of the :class:`tkinter."
"ttk.Treeview` class no longer takes arguments.  Using it with arguments for "
"changing the selection was deprecated in Python 3.6.  Use specialized "
"methods like :meth:`~tkinter.ttk.Treeview.selection_set` for changing the "
"selection.  (Contributed by Serhiy Storchaka in :issue:`31508`.)"
msgstr ""
"Метод :meth:`~tkinter.ttk.Treeview.selection` класу :class:`tkinter.ttk."
"Treeview` більше не приймає аргументи. Його використання з аргументами для "
"зміни вибору було застарілим у Python 3.6. Використовуйте спеціалізовані "
"методи, такі як :meth:`~tkinter.ttk.Treeview.selection_set` для зміни "
"вибору. (Надав Сергій Сторчака в :issue:`31508`.)"

msgid ""
"The :meth:`writexml`, :meth:`toxml` and :meth:`toprettyxml` methods of :mod:"
"`xml.dom.minidom`, and the :meth:`write` method of :mod:`xml.etree`, now "
"preserve the attribute order specified by the user. (Contributed by Diego "
"Rojas and Raymond Hettinger in :issue:`34160`.)"
msgstr ""
"Методи :meth:`writexml`, :meth:`toxml` і :meth:`toprettyxml` :mod:`xml.dom."
"minidom` і метод :meth:`write` :mod:`xml. etree`, тепер збереже порядок "
"атрибутів, указаний користувачем. (Надано Дієго Рохасом і Раймондом "
"Геттінгером у :issue:`34160`.)"

msgid ""
"A :mod:`dbm.dumb` database opened with flags ``'r'`` is now read-only. :func:"
"`dbm.dumb.open` with flags ``'r'`` and ``'w'`` no longer creates a database "
"if it does not exist. (Contributed by Serhiy Storchaka in :issue:`32749`.)"
msgstr ""
"База даних :mod:`dbm.dumb`, відкрита з прапорцями ``'r'`` тепер доступна "
"лише для читання. :func:`dbm.dumb.open` з прапорцями ``'r'`` і ``'w'`` "
"більше не створює базу даних, якщо вона не існує. (Надав Сергій Сторчака в :"
"issue:`32749`.)"

msgid ""
"The ``doctype()`` method defined in a subclass of :class:`~xml.etree."
"ElementTree.XMLParser` will no longer be called and will emit a :exc:"
"`RuntimeWarning` instead of a :exc:`DeprecationWarning`. Define the :meth:"
"`doctype() <xml.etree.ElementTree.TreeBuilder.doctype>` method on a target "
"for handling an XML doctype declaration. (Contributed by Serhiy Storchaka "
"in :issue:`29209`.)"
msgstr ""
"Метод ``doctype()``, визначений у підкласі :class:`~xml.etree.ElementTree."
"XMLParser` більше не буде викликатися та видасть :exc:`RuntimeWarning` "
"замість :exc:`DeprecationWarning`. Визначте метод :meth:`doctype() <xml."
"etree.ElementTree.TreeBuilder.doctype>` на цільовому об’єкті для обробки XML-"
"декларації doctype. (Надав Сергій Сторчака в :issue:`29209`.)"

msgid ""
"A :exc:`RuntimeError` is now raised when the custom metaclass doesn't "
"provide the ``__classcell__`` entry in the namespace passed to ``type."
"__new__``.  A :exc:`DeprecationWarning` was emitted in Python 3.6--3.7.  "
"(Contributed by Serhiy Storchaka in :issue:`23722`.)"
msgstr ""
"Помилка :exc:`RuntimeError` тепер виникає, коли спеціальний метаклас не "
"надає запис ``__classcell__`` у просторі імен, переданому в ``type."
"__new__``. :exc:`DeprecationWarning` було видано в Python 3.6--3.7. (Надав "
"Сергій Сторчака в :issue:`23722`.)"

msgid ""
"The :class:`cProfile.Profile` class can now be used as a context manager. "
"(Contributed by Scott Sanderson in :issue:`29235`.)"
msgstr ""
"Клас :class:`cProfile.Profile` тепер можна використовувати як контекстний "
"менеджер. (Надав Скотт Сандерсон у :issue:`29235`.)"

msgid ""
":func:`shutil.copyfile`, :func:`shutil.copy`, :func:`shutil.copy2`, :func:"
"`shutil.copytree` and :func:`shutil.move` use platform-specific \"fast-"
"copy\" syscalls (see :ref:`shutil-platform-dependent-efficient-copy-"
"operations` section)."
msgstr ""
":func:`shutil.copyfile`, :func:`shutil.copy`, :func:`shutil.copy2`, :func:"
"`shutil.copytree` і :func:`shutil.move` використовують спеціальну для "
"платформи \"швидку -copy\" системні виклики (див. розділ :ref:`shutil-"
"platform-dependent-efficient-copy-operations`)."

msgid ""
":func:`shutil.copyfile` default buffer size on Windows was changed from 16 "
"KiB to 1 MiB."
msgstr ""
":func:`shutil.copyfile` розмір буфера за замовчуванням у Windows змінено з "
"16 KiB на 1 MiB."

msgid ""
"The ``PyGC_Head`` struct has changed completely.  All code that touched the "
"struct member should be rewritten.  (See :issue:`33597`.)"
msgstr ""
"Структура ``PyGC_Head`` повністю змінилася. Весь код, який торкався члена "
"структури, слід переписати. (Див. :issue:`33597`.)"

msgid ""
"The :c:type:`PyInterpreterState` struct has been moved into the \"internal\" "
"header files (specifically Include/internal/pycore_pystate.h).  An opaque "
"``PyInterpreterState`` is still available as part of the public API (and "
"stable ABI).  The docs indicate that none of the struct's fields are public, "
"so we hope no one has been using them.  However, if you do rely on one or "
"more of those private fields and have no alternative then please open a BPO "
"issue.  We'll work on helping you adjust (possibly including adding accessor "
"functions to the public API).  (See :issue:`35886`.)"
msgstr ""
"Структуру :c:type:`PyInterpreterState` було переміщено у \"внутрішні\" файли "
"заголовків (зокрема, Include/internal/pycore_pystate.h). Непрозорий "
"``PyInterpreterState`` все ще доступний як частина публічного API (і "
"стабільного ABI). У документах зазначено, що жодне з полів структури не є "
"відкритим, тому ми сподіваємось, що ніхто ними не користувався. Однак, якщо "
"ви покладаєтеся на одне або кілька з цих приватних полів і не маєте "
"альтернативи, будь ласка, відкрийте проблему BPO. Ми допоможемо вам "
"налаштувати (можливо, включаючи додавання функцій доступу до публічного "
"API). (Див. :issue:`35886`.)"

msgid ""
"The :meth:`mmap.flush() <mmap.mmap.flush>` method now returns ``None`` on "
"success and raises an exception on error under all platforms.  Previously, "
"its behavior was platform-dependent: a nonzero value was returned on "
"success; zero was returned on error under Windows.  A zero value was "
"returned on success; an exception was raised on error under Unix. "
"(Contributed by Berker Peksag in :issue:`2122`.)"
msgstr ""
"Метод :meth:`mmap.flush() <mmap.mmap.flush>` тепер повертає ``None`` у разі "
"успіху та викликає виняток у разі помилки на всіх платформах. Раніше його "
"поведінка залежала від платформи: ненульове значення поверталося в разі "
"успіху; нуль було повернуто через помилку під Windows. У разі успіху було "
"повернуто нульове значення; виняток було викликано помилкою під Unix. "
"(Надано Berker Peksag у :issue:`2122`.)"

msgid ""
":mod:`xml.dom.minidom` and :mod:`xml.sax` modules no longer process external "
"entities by default. (Contributed by Christian Heimes in :issue:`17239`.)"
msgstr ""
"Модулі :mod:`xml.dom.minidom` і :mod:`xml.sax` більше не обробляють зовнішні "
"сутності за замовчуванням. (Надав Крістіан Хеймс у :issue:`17239`.)"

msgid ""
"Deleting a key from a read-only :mod:`dbm` database (:mod:`dbm.dumb`, :mod:"
"`dbm.gnu` or :mod:`dbm.ndbm`) raises :attr:`error` (:exc:`dbm.dumb.error`, :"
"exc:`dbm.gnu.error` or :exc:`dbm.ndbm.error`) instead of :exc:`KeyError`. "
"(Contributed by Xiang Zhang in :issue:`33106`.)"
msgstr ""
"Видалення ключа з доступної лише для читання бази даних :mod:`dbm` (:mod:"
"`dbm.dumb`, :mod:`dbm.gnu` або :mod:`dbm.ndbm`) викликає :attr:`error` (:exc:"
"`dbm.dumb.error`, :exc:`dbm.gnu.error` або :exc:`dbm.ndbm.error`) замість :"
"exc:`KeyError`. (Надав Xiang Zhang у :issue:`33106`.)"

msgid ""
"Simplified AST for literals.  All constants will be represented as :class:"
"`ast.Constant` instances.  Instantiating old classes ``Num``, ``Str``, "
"``Bytes``, ``NameConstant`` and ``Ellipsis`` will return an instance of "
"``Constant``. (Contributed by Serhiy Storchaka in :issue:`32892`.)"
msgstr ""
"Спрощений AST для літералів. Усі константи будуть представлені як "
"екземпляри :class:`ast.Constant`. Створення екземплярів старих класів "
"``Num``, ``Str``, ``Bytes``, ``NameConstant`` і ``Ellipsis`` поверне "
"екземпляр ``Constant``. (Надав Сергій Сторчака в :issue:`32892`.)"

msgid ""
"The function :func:`asyncio.wait_for` now correctly waits for cancellation "
"when using an instance of :class:`asyncio.Task`. Previously, upon reaching "
"*timeout*, it was cancelled and immediately returned. (Contributed by Elvis "
"Pranskevichus in :issue:`32751`.)"
msgstr ""
"Функція :func:`asyncio.wait_for` тепер правильно очікує на скасування під "
"час використання екземпляра :class:`asyncio.Task`. Раніше, після досягнення "
"*тайм-ауту*, він скасовувався та негайно повертався. (Надав Елвіс "
"Пранскявічус у :issue:`32751`.)"

msgid ""
"The function :func:`asyncio.BaseTransport.get_extra_info` now returns a safe "
"to use socket object when 'socket' is passed to the *name* parameter. "
"(Contributed by Yury Selivanov in :issue:`37027`.)"
msgstr ""
"Функція :func:`asyncio.BaseTransport.get_extra_info` тепер повертає "
"безпечний для використання об’єкт socket, коли 'socket' передається в "
"параметр *name*. (Надав Юрій Селіванов у :issue:`37027`.)"

msgid ":class:`asyncio.BufferedProtocol` has graduated to the stable API."
msgstr ":class:`asyncio.BufferedProtocol` перейшов на стабільний API."

msgid ""
"DLL dependencies for extension modules and DLLs loaded with :mod:`ctypes` on "
"Windows are now resolved more securely. Only the system paths, the directory "
"containing the DLL or PYD file, and directories added with :func:`~os."
"add_dll_directory` are searched for load-time dependencies. Specifically, :"
"envvar:`PATH` and the current working directory are no longer used, and "
"modifications to these will no longer have any effect on normal DLL "
"resolution. If your application relies on these mechanisms, you should check "
"for :func:`~os.add_dll_directory` and if it exists, use it to add your DLLs "
"directory while loading your library. Note that Windows 7 users will need to "
"ensure that Windows Update KB2533623 has been installed (this is also "
"verified by the installer). (Contributed by Steve Dower in :issue:`36085`.)"
msgstr ""
"Залежності DLL для модулів розширення та DLL, завантажених за допомогою :mod:"
"`ctypes` у Windows, тепер вирішуються більш безпечно. На наявність "
"залежностей під час завантаження шукаються лише системні шляхи, каталог, що "
"містить файл DLL або PYD, і каталоги, додані за допомогою :func:`~os."
"add_dll_directory`. Зокрема, :envvar:`PATH` і поточний робочий каталог "
"більше не використовуються, і їх зміни більше не впливатимуть на нормальну "
"роздільну здатність DLL. Якщо ваша програма покладається на ці механізми, "
"вам слід перевірити :func:`~os.add_dll_directory` і, якщо вона існує, "
"використати її для додавання каталогу DLLs під час завантаження бібліотеки. "
"Зауважте, що користувачам Windows 7 потрібно буде переконатися, що Windows "
"Update KB2533623 інстальовано (це також перевіряє інсталятор). (Надав Стів "
"Дауер у :issue:`36085`.)"

msgid ""
"The header files and functions related to pgen have been removed after its "
"replacement by a pure Python implementation. (Contributed by Pablo Galindo "
"in :issue:`36623`.)"
msgstr ""
"Файли заголовків і функції, пов’язані з pgen, були видалені після заміни на "
"чисту реалізацію Python. (Надав Пабло Галіндо в :issue:`36623`.)"

msgid ""
":class:`types.CodeType` has a new parameter in the second position of the "
"constructor (*posonlyargcount*) to support positional-only arguments defined "
"in :pep:`570`. The first argument (*argcount*) now represents the total "
"number of positional arguments (including positional-only arguments). The "
"new ``replace()`` method of :class:`types.CodeType` can be used to make the "
"code future-proof."
msgstr ""
":class:`types.CodeType` має новий параметр у другій позиції конструктора "
"(*posonlyargcount*) для підтримки лише позиційних аргументів, визначених у :"
"pep:`570`. Перший аргумент (*argcount*) тепер представляє загальну кількість "
"позиційних аргументів (включаючи лише позиційні аргументи). Новий метод "
"``replace()`` :class:`types.CodeType` можна використовувати, щоб зробити код "
"готовим до майбутнього."

msgid ""
"The parameter ``digestmod`` for :func:`hmac.new` no longer uses the MD5 "
"digest by default."
msgstr ""
"Параметр ``digestmod`` для :func:`hmac.new` більше не використовує дайджест "
"MD5 за замовчуванням."

msgid "Changes in the C API"
msgstr "Зміни в C API"

msgid ""
"The :c:struct:`PyCompilerFlags` structure got a new *cf_feature_version* "
"field. It should be initialized to ``PY_MINOR_VERSION``. The field is "
"ignored by default, and is used if and only if ``PyCF_ONLY_AST`` flag is set "
"in *cf_flags*. (Contributed by Guido van Rossum in :issue:`35766`.)"
msgstr ""

msgid ""
"The :c:func:`PyEval_ReInitThreads` function has been removed from the C API. "
"It should not be called explicitly: use :c:func:`PyOS_AfterFork_Child` "
"instead. (Contributed by Victor Stinner in :issue:`36728`.)"
msgstr ""
"Функцію :c:func:`PyEval_ReInitThreads` видалено з C API. Його не слід "
"викликати явно: замість цього використовуйте :c:func:`PyOS_AfterFork_Child`. "
"(Надав Віктор Стіннер у :issue:`36728`.)"

msgid ""
"On Unix, C extensions are no longer linked to libpython except on Android "
"and Cygwin. When Python is embedded, ``libpython`` must not be loaded with "
"``RTLD_LOCAL``, but ``RTLD_GLOBAL`` instead. Previously, using "
"``RTLD_LOCAL``, it was already not possible to load C extensions which were "
"not linked to ``libpython``, like C extensions of the standard library built "
"by the ``*shared*`` section of ``Modules/Setup``. (Contributed by Victor "
"Stinner in :issue:`21536`.)"
msgstr ""
"В Unix розширення C більше не пов’язані з libpython, за винятком Android і "
"Cygwin. Коли Python вбудовано, ``libpython`` має завантажуватися не з "
"``RTLD_LOCAL``, а ``RTLD_GLOBAL``. Раніше за допомогою ``RTLD_LOCAL`` було "
"неможливо завантажити розширення C, які не були пов’язані з ``libpython``, "
"як-от розширення C стандартної бібліотеки, створеної розділом ``*shared*`` "
"``Modules/Setup``. (Надав Віктор Стіннер у :issue:`21536`.)"

msgid ""
"Use of ``#`` variants of formats in parsing or building value (e.g. :c:func:"
"`PyArg_ParseTuple`, :c:func:`Py_BuildValue`, :c:func:"
"`PyObject_CallFunction`, etc.) without ``PY_SSIZE_T_CLEAN`` defined raises "
"``DeprecationWarning`` now. It will be removed in 3.10 or 4.0.  Read :ref:"
"`arg-parsing` for detail. (Contributed by Inada Naoki in :issue:`36381`.)"
msgstr ""
"Використання варіантів форматів ``#`` під час аналізу чи побудови значення "
"(наприклад, :c:func:`PyArg_ParseTuple`, :c:func:`Py_BuildValue`, :c:func:"
"`PyObject_CallFunction` тощо) без Визначений ``PY_SSIZE_T_CLEAN`` тепер "
"викликає ``DeprecationWarning``. Його буде видалено в 3.10 або 4.0. "
"Прочитайте :ref:`arg-parsing` для деталей. (Надано Інадою Наокі в :issue:"
"`36381`.)"

msgid ""
"Instances of heap-allocated types (such as those created with :c:func:"
"`PyType_FromSpec`) hold a reference to their type object. Increasing the "
"reference count of these type objects has been moved from :c:func:"
"`PyType_GenericAlloc` to the more low-level functions, :c:func:"
"`PyObject_Init` and :c:func:`PyObject_INIT`. This makes types created "
"through :c:func:`PyType_FromSpec` behave like other classes in managed code."
msgstr ""
"Екземпляри типів, виділених у купі (наприклад, створених за допомогою :c:"
"func:`PyType_FromSpec`) містять посилання на свій об’єкт типу. Збільшення "
"кількості посилань на ці типи об’єктів було переміщено з :c:func:"
"`PyType_GenericAlloc` до функцій більш низького рівня, :c:func:"
"`PyObject_Init` і :c:func:`PyObject_INIT`. Це змушує типи, створені через :c:"
"func:`PyType_FromSpec`, поводитися як інші класи в керованому коді."

msgid ":ref:`Statically allocated types <static-types>` are not affected."
msgstr ":ref:`Статично виділені типи <static-types>` не впливають."

msgid ""
"For the vast majority of cases, there should be no side effect. However, "
"types that manually increase the reference count after allocating an "
"instance (perhaps to work around the bug) may now become immortal. To avoid "
"this, these classes need to call Py_DECREF on the type object during "
"instance deallocation."
msgstr ""
"У переважній більшості випадків побічних ефектів бути не повинно. Однак "
"типи, які вручну збільшують кількість посилань після виділення екземпляра "
"(можливо, щоб обійти помилку), тепер можуть стати безсмертними. Щоб уникнути "
"цього, ці класи повинні викликати Py_DECREF для об’єкта типу під час "
"звільнення примірника."

msgid ""
"To correctly port these types into 3.8, please apply the following changes:"
msgstr "Щоб правильно перенести ці типи в 3.8, застосуйте такі зміни:"

msgid ""
"Remove :c:macro:`Py_INCREF` on the type object after allocating an instance "
"- if any. This may happen after calling :c:func:`PyObject_New`, :c:func:"
"`PyObject_NewVar`, :c:func:`PyObject_GC_New`, :c:func:`PyObject_GC_NewVar`, "
"or any other custom allocator that uses :c:func:`PyObject_Init` or :c:func:"
"`PyObject_INIT`."
msgstr ""
"Видаліть :c:macro:`Py_INCREF` на об'єкті типу після виділення екземпляра - "
"якщо такий є. Це може статися після виклику :c:func:`PyObject_New`, :c:func:"
"`PyObject_NewVar`, :c:func:`PyObject_GC_New`, :c:func:`PyObject_GC_NewVar` "
"або будь-якого іншого спеціального розподілювача, який використовує :c:func:"
"`PyObject_Init` або :c:func:`PyObject_INIT`."

msgid "Example:"
msgstr "приклад:"

msgid ""
"Ensure that all custom ``tp_dealloc`` functions of heap-allocated types "
"decrease the type's reference count."
msgstr ""
"Переконайтеся, що всі спеціальні функції ``tp_dealloc`` типів, виділених у "
"купі, зменшують кількість посилань на тип."

msgid "(Contributed by Eddie Elizondo in :issue:`35810`.)"
msgstr "(Надав Едді Елізондо в :issue:`35810`.)"

msgid ""
"The :c:macro:`Py_DEPRECATED()` macro has been implemented for MSVC. The "
"macro now must be placed before the symbol name."
msgstr ""
"Для MSVC реалізовано макрос :c:macro:`Py_DEPRECATED()`. Тепер макрос "
"потрібно розмістити перед назвою символу."

msgid "(Contributed by Zackery Spytz in :issue:`33407`.)"
msgstr "(Надав Закері Шпітц у :issue:`33407`.)"

msgid ""
"The interpreter does not pretend to support binary compatibility of "
"extension types across feature releases, anymore.  A :c:type:`PyTypeObject` "
"exported by a third-party extension module is supposed to have all the slots "
"expected in the current Python version, including :c:member:`~PyTypeObject."
"tp_finalize` (:const:`Py_TPFLAGS_HAVE_FINALIZE` is not checked anymore "
"before reading :c:member:`~PyTypeObject.tp_finalize`)."
msgstr ""
"Інтерпретатор більше не претендує на підтримку бінарної сумісності типів "
"розширень у випусках функцій. :c:type:`PyTypeObject`, експортований модулем "
"розширення третьої сторони, повинен мати всі слоти, очікувані в поточній "
"версії Python, включаючи :c:member:`~PyTypeObject.tp_finalize` (:const:"
"`Py_TPFLAGS_HAVE_FINALIZE` більше не перевіряється перед читанням :c:member:"
"`~PyTypeObject.tp_finalize`)."

msgid "(Contributed by Antoine Pitrou in :issue:`32388`.)"
msgstr "(Надав Антуан Пітру в :issue:`32388`.)"

msgid ""
"The functions :c:func:`PyNode_AddChild` and :c:func:`PyParser_AddToken` now "
"accept two additional ``int`` arguments *end_lineno* and *end_col_offset*."
msgstr ""
"Функції :c:func:`PyNode_AddChild` і :c:func:`PyParser_AddToken` тепер "
"приймають два додаткові аргументи ``int`` *end_lineno* і *end_col_offset*."

msgid ""
"The :file:`libpython38.a` file to allow MinGW tools to link directly "
"against :file:`python38.dll` is no longer included in the regular Windows "
"distribution. If you require this file, it may be generated with the "
"``gendef`` and ``dlltool`` tools, which are part of the MinGW binutils "
"package:"
msgstr ""
"Файл :file:`libpython38.a`, який дозволяє інструментам MinGW зв’язуватися "
"безпосередньо з :file:`python38.dll`, більше не входить до звичайного "
"дистрибутива Windows. Якщо вам потрібен цей файл, його можна створити за "
"допомогою інструментів ``gendef`` і ``dlltool``, які є частиною пакету MinGW "
"binutils:"

msgid ""
"The location of an installed :file:`pythonXY.dll` will depend on the "
"installation options and the version and language of Windows. See :ref:"
"`using-on-windows` for more information. The resulting library should be "
"placed in the same directory as :file:`pythonXY.lib`, which is generally "
"the :file:`libs` directory under your Python installation."
msgstr ""
"Розташування встановленого :file:`pythonXY.dll` залежатиме від параметрів "
"встановлення, версії та мови Windows. Перегляньте :ref:`using-on-windows` "
"для отримання додаткової інформації. Отриману бібліотеку слід розмістити в "
"тому самому каталозі, що й :file:`pythonXY.lib`, який зазвичай є каталогом :"
"file:`libs` у вашій установці Python."

msgid "(Contributed by Steve Dower in :issue:`37351`.)"
msgstr "(Надав Стів Дауер у :issue:`37351`.)"

msgid "CPython bytecode changes"
msgstr "Зміни байт-коду CPython"

msgid ""
"The interpreter loop  has been simplified by moving the logic of unrolling "
"the stack of blocks into the compiler.  The compiler emits now explicit "
"instructions for adjusting the stack of values and calling the cleaning-up "
"code for :keyword:`break`, :keyword:`continue` and :keyword:`return`."
msgstr ""
"Цикл інтерпретатора було спрощено шляхом переміщення логіки розгортання "
"стека блоків у компілятор. Тепер компілятор видає чіткі інструкції для "
"налаштування стека значень і виклику коду очищення для :keyword:`break`, :"
"keyword:`continue` і :keyword:`return`."

msgid ""
"Removed opcodes :opcode:`BREAK_LOOP`, :opcode:`CONTINUE_LOOP`, :opcode:"
"`SETUP_LOOP` and :opcode:`SETUP_EXCEPT`.  Added new opcodes :opcode:"
"`ROT_FOUR`, :opcode:`BEGIN_FINALLY`, :opcode:`CALL_FINALLY` and :opcode:"
"`POP_FINALLY`.  Changed the behavior of :opcode:`END_FINALLY` and :opcode:"
"`WITH_CLEANUP_START`."
msgstr ""
"Видалено коди операцій :opcode:`BREAK_LOOP`, :opcode:`CONTINUE_LOOP`, :"
"opcode:`SETUP_LOOP` і :opcode:`SETUP_EXCEPT`. Додано нові коди операцій: :"
"opcode:`ROT_FOUR`, :opcode:`BEGIN_FINALLY`, :opcode:`CALL_FINALLY` і :opcode:"
"`POP_FINALLY`. Змінено поведінку :opcode:`END_FINALLY` і :opcode:"
"`WITH_CLEANUP_START`."

msgid ""
"(Contributed by Mark Shannon, Antoine Pitrou and Serhiy Storchaka in :issue:"
"`17611`.)"
msgstr ""
"(Надано Марком Шенноном, Антуаном Пітру та Сергієм Сторчакою в :issue:"
"`17611`.)"

msgid ""
"Added new opcode :opcode:`END_ASYNC_FOR` for handling exceptions raised when "
"awaiting a next item in an :keyword:`async for` loop. (Contributed by Serhiy "
"Storchaka in :issue:`33041`.)"
msgstr ""
"Додано новий код операції :opcode:`END_ASYNC_FOR` для обробки винятків, які "
"виникають під час очікування наступного елемента в :keyword:`async for` "
"циклі. (Надав Сергій Сторчака в :issue:`33041`.)"

msgid ""
"The :opcode:`MAP_ADD` now expects the value as the first element in the "
"stack and the key as the second element. This change was made so the key is "
"always evaluated before the value in dictionary comprehensions, as proposed "
"by :pep:`572`. (Contributed by Jörn Heissler in :issue:`35224`.)"
msgstr ""
":opcode:`MAP_ADD` тепер очікує значення як перший елемент у стеку та ключ як "
"другий елемент. Цю зміну було внесено, щоб ключ завжди оцінювався перед "
"значенням у словнику, як запропоновано :pep:`572`. (Надав Йорн Гайслер у :"
"issue:`35224`.)"

msgid "Demos and Tools"
msgstr "Демонстрації та інструменти"

msgid ""
"Added a benchmark script for timing various ways to access variables: "
"``Tools/scripts/var_access_benchmark.py``. (Contributed by Raymond Hettinger "
"in :issue:`35884`.)"
msgstr ""
"Додано тестовий сценарій для визначення часу різними способами доступу до "
"змінних: ``Tools/scripts/var_access_benchmark.py``. (Надав Реймонд Геттінгер "
"у :issue:`35884`.)"

msgid "Here's a summary of performance improvements since Python 3.3:"
msgstr "Ось підсумок покращень продуктивності з Python 3.3:"

msgid ""
"The benchmarks were measured on an `Intel® Core™ i7-4960HQ processor "
"<https://ark.intel.com/content/www/us/en/ark/products/76088/intel-core-"
"i7-4960hq-processor-6m-cache-up-to-3-80-ghz.html>`_ running the macOS 64-bit "
"builds found at `python.org <https://www.python.org/downloads/mac-osx/>`_. "
"The benchmark script displays timings in nanoseconds."
msgstr ""
"Контрольні показники вимірювалися на процесорі `Intel® Core™ i7-4960HQ "
"<https://ark.intel.com/content/www/us/en/ark/products/76088/intel-core-"
"i7-4960hq-processor-6m-cache-up-to-3-80-ghz.html>`_ під керуванням 64-"
"розрядних збірок macOS, доступних на `python.org <https://www.python.org/"
"downloads/mac-osx/>`_. Еталонний сценарій відображає таймінги в наносекундах."

msgid "Notable changes in Python 3.8.1"
msgstr "Помітні зміни в Python 3.8.1"

msgid ""
"Due to significant security concerns, the *reuse_address* parameter of :meth:"
"`asyncio.loop.create_datagram_endpoint` is no longer supported. This is "
"because of the behavior of the socket option ``SO_REUSEADDR`` in UDP. For "
"more details, see the documentation for ``loop.create_datagram_endpoint()``. "
"(Contributed by Kyle Stanley, Antoine Pitrou, and Yury Selivanov in :issue:"
"`37228`.)"
msgstr ""
"Через серйозні проблеми безпеки параметр *reuse_address* :meth:`asyncio.loop."
"create_datagram_endpoint` більше не підтримується. Це через поведінку опції "
"сокета ``SO_REUSEADDR`` в UDP. Для отримання додаткової інформації див. "
"документацію для ``loop.create_datagram_endpoint()``. (Надано Кайлом Стенлі, "
"Антуаном Пітру та Юрієм Селівановим у :issue:`37228`.)"

msgid "Notable changes in Python 3.8.8"
msgstr "Помітні зміни в Python 3.8.8"

msgid ""
"Earlier Python versions allowed using both ``;`` and ``&`` as query "
"parameter separators in :func:`urllib.parse.parse_qs` and :func:`urllib."
"parse.parse_qsl`.  Due to security concerns, and to conform with newer W3C "
"recommendations, this has been changed to allow only a single separator key, "
"with ``&`` as the default.  This change also affects :func:`cgi.parse` and :"
"func:`cgi.parse_multipart` as they use the affected functions internally. "
"For more details, please see their respective documentation. (Contributed by "
"Adam Goldschmidt, Senthil Kumaran and Ken Jin in :issue:`42967`.)"
msgstr ""
"Попередні версії Python дозволяли використовувати як ``;``, так і ``&`` як "
"роздільники параметрів запиту в :func:`urllib.parse.parse_qs` і :func:"
"`urllib.parse.parse_qsl`. З міркувань безпеки та для відповідності новим "
"рекомендаціям W3C це було змінено, щоб дозволити лише один роздільний ключ "
"із ``&`` за замовчуванням. Ця зміна також впливає на :func:`cgi.parse` і :"
"func:`cgi.parse_multipart`, оскільки вони використовують уражені функції "
"внутрішньо. Щоб дізнатися більше, перегляньте відповідну документацію. "
"(Надано Адамом Ґолдшмідтом, Сентилом Кумараном і Кеном Джином у :issue:"
"`42967`.)"

msgid "Notable changes in Python 3.8.12"
msgstr "Помітні зміни в Python 3.8.12"

msgid ""
"Starting with Python 3.8.12 the :mod:`ipaddress` module no longer accepts "
"any leading zeros in IPv4 address strings. Leading zeros are ambiguous and "
"interpreted as octal notation by some libraries. For example the legacy "
"function :func:`socket.inet_aton` treats leading zeros as octal notation. "
"glibc implementation of modern :func:`~socket.inet_pton` does not accept any "
"leading zeros."
msgstr ""
"Починаючи з Python 3.8.12, модуль :mod:`ipaddress` більше не приймає жодних "
"початкових нулів у рядках адрес IPv4. Початкові нулі є неоднозначними та "
"інтерпретуються деякими бібліотеками як вісімкове позначення. Наприклад, "
"застаріла функція :func:`socket.inet_aton` розглядає початкові нулі як "
"вісімкове позначення. glibc реалізація сучасного :func:`~socket.inet_pton` "
"не приймає жодних початкових нулів."

msgid ""
"(Originally contributed by Christian Heimes in :issue:`36384`, and "
"backported to 3.8 by Achraf Merzouki.)"
msgstr ""
"(Спочатку надано Крістіаном Хеймсом у :issue:`36384`, а також перенесено до "
"3.8 Ахрафом Мерзукі.)"
