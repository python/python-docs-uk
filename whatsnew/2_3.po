# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Dmytro Kazanzhy, 2023
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-11-22 14:17+0000\n"
"PO-Revision-Date: 2021-06-28 01:51+0000\n"
"Last-Translator: Dmytro Kazanzhy, 2023\n"
"Language-Team: Ukrainian (https://app.transifex.com/python-doc/teams/5390/uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != 11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % 100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || (n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

#: ../../whatsnew/2.3.rst:3
msgid "What's New in Python 2.3"
msgstr "Що нового в Python 2.3"

#: ../../whatsnew/2.3.rst:0
msgid "Author"
msgstr "Автор"

#: ../../whatsnew/2.3.rst:5
msgid "A.M. Kuchling"
msgstr "A.M. Kuchling"

#: ../../whatsnew/2.3.rst:11
msgid ""
"This article explains the new features in Python 2.3.  Python 2.3 was "
"released on July 29, 2003."
msgstr ""
"У цій статті пояснюються нові функції Python 2.3. Python 2.3 був випущений "
"29 липня 2003 року."

#: ../../whatsnew/2.3.rst:14
msgid ""
"The main themes for Python 2.3 are polishing some of the features added in "
"2.2, adding various small but useful enhancements to the core language, and "
"expanding the standard library.  The new object model introduced in the "
"previous version has benefited from 18 months of bugfixes and from "
"optimization efforts that have improved the performance of new-style "
"classes.  A few new built-in functions have been added such as :func:`sum` "
"and :func:`enumerate`.  The :keyword:`in` operator can now be used for "
"substring searches (e.g. ``\"ab\" in \"abc\"`` returns :const:`True`)."
msgstr ""
"Основними темами для Python 2.3 є вдосконалення деяких функцій, доданих у "
"2.2, додавання різних невеликих, але корисних покращень до основної мови та "
"розширення стандартної бібліотеки. Нова об’єктна модель, представлена в "
"попередній версії, отримала переваги від 18 місяців виправлення помилок і "
"зусиль з оптимізації, які покращили продуктивність класів нового стилю. Було"
" додано кілька нових вбудованих функцій, таких як :func:`sum` і "
":func:`enumerate`. Оператор :keyword:`in` тепер можна використовувати для "
"пошуку підрядка (наприклад, ``\"ab\" у \"abc\"`` повертає :const:`True`)."

#: ../../whatsnew/2.3.rst:23
msgid ""
"Some of the many new library features include Boolean, set, heap, and "
"date/time data types, the ability to import modules from ZIP-format "
"archives, metadata support for the long-awaited Python catalog, an updated "
"version of IDLE, and modules for logging messages, wrapping text, parsing "
"CSV files, processing command-line options, using BerkeleyDB databases...  "
"the list of new and enhanced modules is lengthy."
msgstr ""
"Деякі з багатьох нових функцій бібліотеки включають типи даних Boolean, set,"
" heap і date/time, можливість імпортувати модулі з архівів у форматі ZIP, "
"підтримку метаданих для довгоочікуваного каталогу Python, оновлену версію "
"IDLE та модулі. для реєстрації повідомлень, обтікання текстом, аналізу "
"файлів CSV, обробки параметрів командного рядка, використання баз даних "
"BerkeleyDB... список нових і вдосконалених модулів довгий."

#: ../../whatsnew/2.3.rst:30
msgid ""
"This article doesn't attempt to provide a complete specification of the new "
"features, but instead provides a convenient overview.  For full details, you"
" should refer to the documentation for Python 2.3, such as the Python "
"Library Reference and the Python Reference Manual.  If you want to "
"understand the complete implementation and design rationale, refer to the "
"PEP for a particular new feature."
msgstr ""
"Ця стаття не намагається надати повну специфікацію нових функцій, натомість "
"надає зручний огляд. Щоб отримати повну інформацію, зверніться до "
"документації для Python 2.3, такої як Довідник бібліотеки Python і "
"Довідковий посібник Python. Якщо ви хочете зрозуміти повну реалізацію та "
"обґрунтування дизайну, зверніться до PEP для конкретної нової функції."

#: ../../whatsnew/2.3.rst:41
msgid "PEP 218: A Standard Set Datatype"
msgstr "PEP 218: Тип даних стандартного набору"

#: ../../whatsnew/2.3.rst:43
msgid ""
"The new :mod:`!sets` module contains an implementation of a set datatype.  "
"The :class:`Set` class is for mutable sets, sets that can have members added"
" and removed.  The :class:`!ImmutableSet` class is for sets that can't be "
"modified, and instances of :class:`!ImmutableSet` can therefore be used as "
"dictionary keys. Sets are built on top of dictionaries, so the elements "
"within a set must be hashable."
msgstr ""

#: ../../whatsnew/2.3.rst:50
msgid "Here's a simple example::"
msgstr "Ось простий приклад::"

#: ../../whatsnew/2.3.rst:52
msgid ""
">>> import sets\n"
">>> S = sets.Set([1,2,3])\n"
">>> S\n"
"Set([1, 2, 3])\n"
">>> 1 in S\n"
"True\n"
">>> 0 in S\n"
"False\n"
">>> S.add(5)\n"
">>> S.remove(3)\n"
">>> S\n"
"Set([1, 2, 5])\n"
">>>"
msgstr ""

#: ../../whatsnew/2.3.rst:66
msgid ""
"The union and intersection of sets can be computed with the "
":meth:`~frozenset.union` and :meth:`~frozenset.intersection` methods; an "
"alternative notation uses the bitwise operators ``&`` and ``|``. Mutable "
"sets also have in-place versions of these methods, :meth:`!union_update` and"
" :meth:`~frozenset.intersection_update`. ::"
msgstr ""

#: ../../whatsnew/2.3.rst:71
msgid ""
">>> S1 = sets.Set([1,2,3])\n"
">>> S2 = sets.Set([4,5,6])\n"
">>> S1.union(S2)\n"
"Set([1, 2, 3, 4, 5, 6])\n"
">>> S1 | S2                  # Alternative notation\n"
"Set([1, 2, 3, 4, 5, 6])\n"
">>> S1.intersection(S2)\n"
"Set([])\n"
">>> S1 & S2                  # Alternative notation\n"
"Set([])\n"
">>> S1.union_update(S2)\n"
">>> S1\n"
"Set([1, 2, 3, 4, 5, 6])\n"
">>>"
msgstr ""

#: ../../whatsnew/2.3.rst:86
msgid ""
"It's also possible to take the symmetric difference of two sets.  This is "
"the set of all elements in the union that aren't in the intersection.  "
"Another way of putting it is that the symmetric difference contains all "
"elements that are in exactly one set.  Again, there's an alternative "
"notation (``^``), and an in-place version with the ungainly name "
":meth:`~frozenset.symmetric_difference_update`. ::"
msgstr ""

#: ../../whatsnew/2.3.rst:92
msgid ""
">>> S1 = sets.Set([1,2,3,4])\n"
">>> S2 = sets.Set([3,4,5,6])\n"
">>> S1.symmetric_difference(S2)\n"
"Set([1, 2, 5, 6])\n"
">>> S1 ^ S2\n"
"Set([1, 2, 5, 6])\n"
">>>"
msgstr ""

#: ../../whatsnew/2.3.rst:100
msgid ""
"There are also :meth:`!issubset` and :meth:`!issuperset` methods for "
"checking whether one set is a subset or superset of another::"
msgstr ""

#: ../../whatsnew/2.3.rst:103
msgid ""
">>> S1 = sets.Set([1,2,3])\n"
">>> S2 = sets.Set([2,3])\n"
">>> S2.issubset(S1)\n"
"True\n"
">>> S1.issubset(S2)\n"
"False\n"
">>> S1.issuperset(S2)\n"
"True\n"
">>>"
msgstr ""

#: ../../whatsnew/2.3.rst:116
msgid ":pep:`218` - Adding a Built-In Set Object Type"
msgstr ":pep:`218` - Додавання вбудованого типу об'єкта Set"

#: ../../whatsnew/2.3.rst:117
msgid ""
"PEP written by Greg V. Wilson. Implemented by Greg V. Wilson, Alex Martelli,"
" and GvR."
msgstr ""
"PEP, написаний Грегом В. Вілсоном. Реалізовано Грегом В. Вілсоном, Алексом "
"Мартеллі та GvR."

#: ../../whatsnew/2.3.rst:126
msgid "PEP 255: Simple Generators"
msgstr "PEP 255: Прості генератори"

#: ../../whatsnew/2.3.rst:128
msgid ""
"In Python 2.2, generators were added as an optional feature, to be enabled "
"by a ``from __future__ import generators`` directive.  In 2.3 generators no "
"longer need to be specially enabled, and are now always present; this means "
"that :keyword:`yield` is now always a keyword.  The rest of this section is "
"a copy of the description of generators from the \"What's New in Python "
"2.2\" document; if you read it back when Python 2.2 came out, you can skip "
"the rest of this section."
msgstr ""
"У Python 2.2 генератори були додані як необов’язкова функція, яка вмикається"
" директивою ``from __future__ import generators``. У версії 2.3 генератори "
"більше не потребують спеціального вмикання, і тепер вони завжди присутні; це"
" означає, що :keyword:`yield` тепер завжди є ключовим словом. Решта цього "
"розділу є копією опису генераторів із документа \"Що нового в Python 2.2\"; "
"якщо ви читали це ще під час виходу Python 2.2, ви можете пропустити решту "
"цього розділу."

#: ../../whatsnew/2.3.rst:136
msgid ""
"You're doubtless familiar with how function calls work in Python or C. When "
"you call a function, it gets a private namespace where its local variables "
"are created.  When the function reaches a :keyword:`return` statement, the "
"local variables are destroyed and the resulting value is returned to the "
"caller.  A later call to the same function will get a fresh new set of local"
" variables. But, what if the local variables weren't thrown away on exiting "
"a function? What if you could later resume the function where it left off?  "
"This is what generators provide; they can be thought of as resumable "
"functions."
msgstr ""
"Ви, безсумнівно, знайомі з тим, як працюють виклики функцій у Python або C. "
"Коли ви викликаєте функцію, вона отримує приватний простір імен, де "
"створюються її локальні змінні. Коли функція досягає оператора "
":keyword:`return`, локальні змінні знищуються, а отримане значення "
"повертається до викликаючого. Пізніший виклик тієї ж функції отримає новий "
"набір локальних змінних. Але що, якби локальні змінні не були викинуті під "
"час виходу з функції? Що, якби ви могли пізніше відновити функцію, де вона "
"була зупинена? Це те, що забезпечують генератори; їх можна розглядати як "
"відновлювані функції."

#: ../../whatsnew/2.3.rst:145
msgid "Here's the simplest example of a generator function::"
msgstr "Ось найпростіший приклад функції генератора:"

#: ../../whatsnew/2.3.rst:147
msgid ""
"def generate_ints(N):\n"
"    for i in range(N):\n"
"        yield i"
msgstr ""

#: ../../whatsnew/2.3.rst:151
msgid ""
"A new keyword, :keyword:`yield`, was introduced for generators.  Any "
"function containing a :keyword:`!yield` statement is a generator function; "
"this is detected by Python's bytecode compiler which compiles the function "
"specially as a result."
msgstr ""
"Для генераторів було введено нове ключове слово :keyword:`yield`. Будь-яка "
"функція, що містить оператор :keyword:`!yield`, є функцією-генератором; це "
"виявляється компілятором байт-коду Python, який спеціально компілює функцію "
"в результаті."

#: ../../whatsnew/2.3.rst:156
msgid ""
"When you call a generator function, it doesn't return a single value; "
"instead it returns a generator object that supports the iterator protocol.  "
"On executing the :keyword:`yield` statement, the generator outputs the value"
" of ``i``, similar to a :keyword:`return` statement.  The big difference "
"between :keyword:`!yield` and a :keyword:`!return` statement is that on "
"reaching a :keyword:`!yield` the generator's state of execution is suspended"
" and local variables are preserved.  On the next call to the generator's "
"``.next()`` method, the function will resume executing immediately after the"
" :keyword:`!yield` statement.  (For complicated reasons, the "
":keyword:`!yield` statement isn't allowed inside the :keyword:`try` block of"
" a :keyword:`!try`...\\ :keyword:`!finally` statement; read :pep:`255` for a"
" full explanation of the interaction between :keyword:`!yield` and "
"exceptions.)"
msgstr ""
"Коли ви викликаєте функцію генератора, вона не повертає жодного значення; "
"замість цього він повертає об'єкт генератора, який підтримує протокол "
"ітератора. Під час виконання оператора :keyword:`yield` генератор виводить "
"значення ``i``, подібне до оператора :keyword:`return`. Велика різниця між "
":keyword:`!yield` і оператором :keyword:`!return` полягає в тому, що при "
"досягненні :keyword:`!yield` стан виконання генератора призупиняється, а "
"локальні змінні зберігаються. Під час наступного виклику методу ``.next()`` "
"генератора функція відновить виконання відразу після оператора "
":keyword:`!yield`. (Зі складних причин оператор :keyword:`!yield` не "
"дозволяється всередині блоку :keyword:`try` оператора :keyword:`!try`...\\ "
":keyword:`!finally`; читайте :pep:`255` для повного пояснення взаємодії між "
":keyword:`!yield` і винятками.)"

#: ../../whatsnew/2.3.rst:169
msgid "Here's a sample usage of the :func:`!generate_ints` generator::"
msgstr ""

#: ../../whatsnew/2.3.rst:171
msgid ""
">>> gen = generate_ints(3)\n"
">>> gen\n"
"<generator object at 0x8117f90>\n"
">>> gen.next()\n"
"0\n"
">>> gen.next()\n"
"1\n"
">>> gen.next()\n"
"2\n"
">>> gen.next()\n"
"Traceback (most recent call last):\n"
"  File \"stdin\", line 1, in ?\n"
"  File \"stdin\", line 2, in generate_ints\n"
"StopIteration"
msgstr ""

#: ../../whatsnew/2.3.rst:186
msgid ""
"You could equally write ``for i in generate_ints(5)``, or ``a,b,c = "
"generate_ints(3)``."
msgstr ""
"Так само можна написати ``for i in generate_ints(5)`` або ``a,b,c = "
"generate_ints(3)``."

#: ../../whatsnew/2.3.rst:189
msgid ""
"Inside a generator function, the :keyword:`return` statement can only be "
"used without a value, and signals the end of the procession of values; "
"afterwards the generator cannot return any further values. "
":keyword:`!return` with a value, such as ``return 5``, is a syntax error "
"inside a generator function.  The end of the generator's results can also be"
" indicated by raising :exc:`StopIteration` manually, or by just letting the "
"flow of execution fall off the bottom of the function."
msgstr ""
"Усередині функції генератора оператор :keyword:`return` може "
"використовуватися лише без значення та сигналізує про завершення процесії "
"значень; після цього генератор не може повертати жодних додаткових значень. "
":keyword:`!return` зі значенням, таким як ``return 5``, є синтаксичною "
"помилкою у функції генератора. Кінець результатів генератора також можна "
"вказати, піднявши :exc:`StopIteration` вручну, або просто дозволивши потоку "
"виконання впасти з нижньої частини функції."

#: ../../whatsnew/2.3.rst:197
msgid ""
"You could achieve the effect of generators manually by writing your own "
"class and storing all the local variables of the generator as instance "
"variables.  For example, returning a list of integers could be done by "
"setting ``self.count`` to 0, and having the :meth:`next` method increment "
"``self.count`` and return it. However, for a moderately complicated "
"generator, writing a corresponding class would be much messier. "
":file:`Lib/test/test_generators.py` contains a number of more interesting "
"examples.  The simplest one implements an in-order traversal of a tree using"
" generators recursively. ::"
msgstr ""
"Ви можете досягти ефекту генераторів вручну, написавши власний клас і "
"зберігши всі локальні змінні генератора як змінні екземпляра. Наприклад, щоб"
" повернути список цілих чисел, можна встановити ``self.count`` на 0, а метод"
" :meth:`next` збільшити ``self.count`` і повернути його. Однак для помірно "
"складного генератора написання відповідного класу було б набагато "
"складнішим. :file:`Lib/test/test_generators.py` містить ще кілька цікавих "
"прикладів. Найпростіший реалізує рекурсивний обхід дерева за допомогою "
"генераторів. ::"

#: ../../whatsnew/2.3.rst:206
msgid ""
"# A recursive generator that generates Tree leaves in in-order.\n"
"def inorder(t):\n"
"    if t:\n"
"        for x in inorder(t.left):\n"
"            yield x\n"
"        yield t.label\n"
"        for x in inorder(t.right):\n"
"            yield x"
msgstr ""

#: ../../whatsnew/2.3.rst:215
msgid ""
"Two other examples in :file:`Lib/test/test_generators.py` produce solutions "
"for the N-Queens problem (placing $N$ queens on an $NxN$ chess board so that"
" no queen threatens another) and the Knight's Tour (a route that takes a "
"knight to every square of an $NxN$ chessboard without visiting any square "
"twice)."
msgstr ""
"Два інших приклади в :file:`Lib/test/test_generators.py` створюють рішення "
"для проблеми N-Queens (розміщення $N$ ферзів на $NxN$ шахівниці так, щоб "
"жодна королева не загрожувала іншій) і Knight's Tour (a маршрут, який веде "
"лицаря до кожного поля $NxN$ шахівниці, не відвідуючи жодного поля двічі)."

#: ../../whatsnew/2.3.rst:220
msgid ""
"The idea of generators comes from other programming languages, especially "
"Icon (https://www2.cs.arizona.edu/icon/), where the idea of generators is "
"central.  In Icon, every expression and function call behaves like a "
"generator.  One example from \"An Overview of the Icon Programming "
"Language\" at https://www2.cs.arizona.edu/icon/docs/ipd266.htm gives an idea"
" of what this looks like::"
msgstr ""

#: ../../whatsnew/2.3.rst:227
msgid ""
"sentence := \"Store it in the neighboring harbor\"\n"
"if (i := find(\"or\", sentence)) > 5 then write(i)"
msgstr ""

#: ../../whatsnew/2.3.rst:230
msgid ""
"In Icon the :func:`!find` function returns the indexes at which the "
"substring \"or\" is found: 3, 23, 33.  In the :keyword:`if` statement, ``i``"
" is first assigned a value of 3, but 3 is less than 5, so the comparison "
"fails, and Icon retries it with the second value of 23.  23 is greater than "
"5, so the comparison now succeeds, and the code prints the value 23 to the "
"screen."
msgstr ""

#: ../../whatsnew/2.3.rst:236
msgid ""
"Python doesn't go nearly as far as Icon in adopting generators as a central "
"concept.  Generators are considered part of the core Python language, but "
"learning or using them isn't compulsory; if they don't solve any problems "
"that you have, feel free to ignore them. One novel feature of Python's "
"interface as compared to Icon's is that a generator's state is represented "
"as a concrete object (the iterator) that can be passed around to other "
"functions or stored in a data structure."
msgstr ""
"Python не заходить так далеко, як Icon, у прийнятті генераторів як "
"центральної концепції. Генератори вважаються частиною основної мови Python, "
"але їх вивчення або використання не є обов’язковим; якщо вони не вирішують "
"жодних ваших проблем, не соромтеся їх ігнорувати. Однією з нових "
"особливостей інтерфейсу Python порівняно з інтерфейсом Icon є те, що стан "
"генератора представлено як конкретний об’єкт (ітератор), який можна передати"
" іншим функціям або зберегти в структурі даних."

#: ../../whatsnew/2.3.rst:247
msgid ":pep:`255` - Simple Generators"
msgstr ":pep:`255` - Прості генератори"

#: ../../whatsnew/2.3.rst:248
msgid ""
"Written by Neil Schemenauer, Tim Peters, Magnus Lie Hetland.  Implemented "
"mostly by Neil Schemenauer and Tim Peters, with other fixes from the Python "
"Labs crew."
msgstr ""
"Автори: Ніл Шеменауер, Тім Пітерс, Магнус Лі Хетленд. Реалізовано переважно "
"Нілом Шеменауером і Тімом Пітерсом, інші виправлення внесені командою Python"
" Labs."

#: ../../whatsnew/2.3.rst:257
msgid "PEP 263: Source Code Encodings"
msgstr "PEP 263: Кодування вихідного коду"

#: ../../whatsnew/2.3.rst:259
msgid ""
"Python source files can now be declared as being in different character set "
"encodings.  Encodings are declared by including a specially formatted "
"comment in the first or second line of the source file.  For example, a "
"UTF-8 file can be declared with::"
msgstr ""
"Вихідні файли Python тепер можна оголошувати такими, що мають різні "
"кодування набору символів. Кодування оголошується шляхом додавання "
"спеціально відформатованого коментаря в перший або другий рядок вихідного "
"файлу. Наприклад, файл UTF-8 можна оголосити за допомогою::"

#: ../../whatsnew/2.3.rst:264
msgid ""
"#!/usr/bin/env python\n"
"# -*- coding: UTF-8 -*-"
msgstr ""

#: ../../whatsnew/2.3.rst:267
msgid ""
"Without such an encoding declaration, the default encoding used is 7-bit "
"ASCII. Executing or importing modules that contain string literals with "
"8-bit characters and have no encoding declaration will result in a "
":exc:`DeprecationWarning` being signalled by Python 2.3; in 2.4 this will be"
" a syntax error."
msgstr ""
"Без такої декларації кодування за замовчуванням використовується 7-бітне "
"кодування ASCII. Виконання або імпортування модулів, які містять рядкові "
"літерали з 8-бітовими символами та не мають декларації кодування, призведе "
"до того, що Python 2.3 повідомить :exc:`DeprecationWarning`; у 2.4 це буде "
"синтаксична помилка."

#: ../../whatsnew/2.3.rst:273
msgid ""
"The encoding declaration only affects Unicode string literals, which will be"
" converted to Unicode using the specified encoding.  Note that Python "
"identifiers are still restricted to ASCII characters, so you can't have "
"variable names that use characters outside of the usual alphanumerics."
msgstr ""
"Оголошення кодування впливає лише на рядкові літерали Unicode, які буде "
"перетворено на Unicode за допомогою вказаного кодування. Зауважте, що "
"ідентифікатори Python все ще обмежуються символами ASCII, тому ви не можете "
"мати імена змінних, які містять символи, окрім звичайних букв і цифр."

#: ../../whatsnew/2.3.rst:281
msgid ":pep:`263` - Defining Python Source Code Encodings"
msgstr ":pep:`263` - Визначення кодувань вихідного коду Python"

#: ../../whatsnew/2.3.rst:282
msgid ""
"Written by Marc-André Lemburg and Martin von Löwis; implemented by Suzuki "
"Hisao and Martin von Löwis."
msgstr ""
"Автори: Марк-Андре Лембург і Мартін фон Льовіс; реалізовано Сузукі Хісао та "
"Мартіном фон Льовісом."

#: ../../whatsnew/2.3.rst:289
msgid "PEP 273: Importing Modules from ZIP Archives"
msgstr "PEP 273: Імпортування модулів із ZIP-архівів"

#: ../../whatsnew/2.3.rst:291
msgid ""
"The new :mod:`zipimport` module adds support for importing modules from a "
"ZIP-format archive.  You don't need to import the module explicitly; it will"
" be automatically imported if a ZIP archive's filename is added to "
"``sys.path``. For example:"
msgstr ""
"Новий модуль :mod:`zipimport` додає підтримку для імпорту модулів з архіву "
"ZIP-формату. Вам не потрібно явно імпортувати модуль; його буде автоматично "
"імпортовано, якщо назву файлу ZIP-архіву буде додано до ``sys.path``. "
"Наприклад:"

#: ../../whatsnew/2.3.rst:296
msgid ""
"amk@nyman:~/src/python$ unzip -l /tmp/example.zip\n"
"Archive:  /tmp/example.zip\n"
"  Length     Date   Time    Name\n"
" --------    ----   ----    ----\n"
"     8467  11-26-02 22:30   jwzthreading.py\n"
" --------                   -------\n"
"     8467                   1 file\n"
"amk@nyman:~/src/python$ ./python\n"
"Python 2.3 (#1, Aug 1 2003, 19:54:32)\n"
">>> import sys\n"
">>> sys.path.insert(0, '/tmp/example.zip')  # Add .zip file to front of path\n"
">>> import jwzthreading\n"
">>> jwzthreading.__file__\n"
"'/tmp/example.zip/jwzthreading.py'\n"
">>>"
msgstr ""

#: ../../whatsnew/2.3.rst:314
msgid ""
"An entry in ``sys.path`` can now be the filename of a ZIP archive. The ZIP "
"archive can contain any kind of files, but only files named :file:`\\*.py`, "
":file:`\\*.pyc`, or :file:`\\*.pyo` can be imported.  If an archive only "
"contains :file:`\\*.py` files, Python will not attempt to modify the archive"
" by adding the corresponding :file:`\\*.pyc` file, meaning that if a ZIP "
"archive doesn't contain :file:`\\*.pyc` files, importing may be rather slow."
msgstr ""
"Запис у ``sys.path`` тепер може бути назвою файлу ZIP-архіву. ZIP-архів може"
" містити будь-які файли, але можна імпортувати лише файли з назвами "
":file:`\\*.py`, :file:`\\*.pyc` або :file:`\\*.pyo`. Якщо архів містить лише"
" файли :file:`\\*.py`, Python не намагатиметься змінити архів, додавши "
"відповідний файл :file:`\\*.pyc`, тобто якщо архів ZIP не містить "
":file:`\\*.pyc`, імпортування може бути досить повільним."

#: ../../whatsnew/2.3.rst:321
msgid ""
"A path within the archive can also be specified to only import from a "
"subdirectory; for example, the path :file:`/tmp/example.zip/lib/` would only"
" import from the :file:`lib/` subdirectory within the archive."
msgstr ""
"Шлях всередині архіву також можна вказати лише для імпорту з підкаталогу; "
"наприклад, шлях :file:`/tmp/example.zip/lib/` імпортуватиметься лише з "
"підкаталогу :file:`lib/` в архіві."

#: ../../whatsnew/2.3.rst:328
msgid ":pep:`273` - Import Modules from Zip Archives"
msgstr ":pep:`273` - імпортувати модулі з Zip-архівів"

#: ../../whatsnew/2.3.rst:329
msgid ""
"Written by James C. Ahlstrom,  who also provided an implementation. Python "
"2.3 follows the specification in :pep:`273`,  but uses an implementation "
"written by Just van Rossum  that uses the import hooks described in "
":pep:`302`. See section :ref:`section-pep302` for a description of the new "
"import hooks."
msgstr ""
"Написав Джеймс К. Алстром, який також забезпечив реалізацію. Python 2.3 "
"відповідає специфікації в :pep:`273`, але використовує реалізацію, написану "
"Джастом ван Россумом, яка використовує хуки імпорту, описані в :pep:`302`. "
"Перегляньте розділ :ref:`section-pep302` для опису нових хуків імпорту."

#: ../../whatsnew/2.3.rst:338
msgid "PEP 277: Unicode file name support for Windows NT"
msgstr "PEP 277: Підтримка імен файлів Unicode для Windows NT"

#: ../../whatsnew/2.3.rst:340
msgid ""
"On Windows NT, 2000, and XP, the system stores file names as Unicode "
"strings. Traditionally, Python has represented file names as byte strings, "
"which is inadequate because it renders some file names inaccessible."
msgstr ""
"У Windows NT, 2000 і XP система зберігає імена файлів як рядки Unicode. "
"Традиційно Python представляє імена файлів у вигляді байтових рядків, що є "
"неадекватним, оскільки робить деякі імена файлів недоступними."

#: ../../whatsnew/2.3.rst:344
msgid ""
"Python now allows using arbitrary Unicode strings (within the limitations of"
" the file system) for all functions that expect file names, most notably the"
" :func:`open` built-in function. If a Unicode string is passed to "
":func:`os.listdir`, Python now returns a list of Unicode strings.  A new "
"function, :func:`!os.getcwdu`, returns the current directory as a Unicode "
"string."
msgstr ""

#: ../../whatsnew/2.3.rst:350
msgid ""
"Byte strings still work as file names, and on Windows Python will "
"transparently convert them to Unicode using the ``mbcs`` encoding."
msgstr ""
"Байтові рядки все ще працюють як імена файлів, і в Windows Python прозоро "
"перетворює їх у Unicode за допомогою кодування ``mbcs``."

#: ../../whatsnew/2.3.rst:353
msgid ""
"Other systems also allow Unicode strings as file names but convert them to "
"byte strings before passing them to the system, which can cause a "
":exc:`UnicodeError` to be raised. Applications can test whether arbitrary "
"Unicode strings are supported as file names by checking "
":attr:`os.path.supports_unicode_filenames`, a Boolean value."
msgstr ""
"Інші системи також дозволяють рядки Unicode як імена файлів, але "
"перетворюють їх на рядки байтів перед передачею в систему, що може "
"спричинити виникнення :exc:`UnicodeError`. Програми можуть перевірити, чи "
"підтримуються довільні рядки Unicode як імена файлів, перевіривши "
":attr:`os.path.supports_unicode_filenames`, логічне значення."

#: ../../whatsnew/2.3.rst:359
msgid "Under MacOS, :func:`os.listdir` may now return Unicode filenames."
msgstr ""
"У MacOS :func:`os.listdir` тепер може повертати імена файлів у кодуванні "
"Unicode."

#: ../../whatsnew/2.3.rst:364
msgid ":pep:`277` - Unicode file name support for Windows NT"
msgstr ":pep:`277` - Підтримка імен файлів Unicode для Windows NT"

#: ../../whatsnew/2.3.rst:365
msgid ""
"Written by Neil Hodgson; implemented by Neil Hodgson, Martin von Löwis, and "
"Mark Hammond."
msgstr ""
"Автор Ніл Ходжсон; реалізований Нілом Ходжсоном, Мартіном фон Льовісом і "
"Марком Хаммондом."

#: ../../whatsnew/2.3.rst:375
msgid "PEP 278: Universal Newline Support"
msgstr "PEP 278: універсальна підтримка нового рядка"

#: ../../whatsnew/2.3.rst:377
msgid ""
"The three major operating systems used today are Microsoft Windows, Apple's "
"Macintosh OS, and the various Unix derivatives.  A minor irritation of "
"cross-platform work  is that these three platforms all use different "
"characters to mark the ends of lines in text files.  Unix uses the linefeed "
"(ASCII character 10), MacOS uses the carriage return (ASCII character 13), "
"and Windows uses a two-character sequence of a carriage return plus a "
"newline."
msgstr ""
"Сьогодні використовуються три основні операційні системи: Microsoft Windows,"
" Macintosh OS від Apple і різні похідні Unix. Невелике роздратування "
"кросплатформної роботи полягає в тому, що всі ці три платформи "
"використовують різні символи для позначення кінців рядків у текстових "
"файлах. Unix використовує символ переводу рядка (символ ASCII 10), MacOS "
"використовує символ повернення каретки (символ ASCII 13), а Windows "
"використовує двосимвольну послідовність повернення каретки плюс новий рядок."

#: ../../whatsnew/2.3.rst:384
msgid ""
"Python's file objects can now support end of line conventions other than the"
" one followed by the platform on which Python is running. Opening a file "
"with the mode ``'U'`` or ``'rU'`` will open a file for reading in "
":term:`universal newlines` mode.  All three line ending conventions will be "
"translated to a ``'\\n'`` in the strings returned by the various file "
"methods such as :meth:`!read` and :meth:`!readline`."
msgstr ""

#: ../../whatsnew/2.3.rst:391
msgid ""
"Universal newline support is also used when importing modules and when "
"executing a file with the :func:`!execfile` function.  This means that "
"Python modules can be shared between all three operating systems without "
"needing to convert the line-endings."
msgstr ""

#: ../../whatsnew/2.3.rst:396
msgid ""
"This feature can be disabled when compiling Python by specifying the "
":option:`!--without-universal-newlines` switch when running Python's "
":program:`configure` script."
msgstr ""
"Цю функцію можна вимкнути під час компіляції Python, вказавши параметр "
":option:`!--without-universal-newlines` під час виконання сценарію "
":program:`configure` Python."

#: ../../whatsnew/2.3.rst:403
msgid ":pep:`278` - Universal Newline Support"
msgstr ":pep:`278` - Універсальна підтримка нового рядка"

#: ../../whatsnew/2.3.rst:404
msgid "Written and implemented by Jack Jansen."
msgstr "Написаний і реалізований Джеком Янсеном."

#: ../../whatsnew/2.3.rst:412
msgid "PEP 279: enumerate()"
msgstr "PEP 279: enumerate()"

#: ../../whatsnew/2.3.rst:414
msgid ""
"A new built-in function, :func:`enumerate`, will make certain loops a bit "
"clearer.  ``enumerate(thing)``, where *thing* is either an iterator or a "
"sequence, returns an iterator that will return ``(0, thing[0])``, ``(1, "
"thing[1])``, ``(2, thing[2])``, and so forth."
msgstr ""
"Нова вбудована функція, :func:`enumerate`, зробить певні цикли трохи "
"зрозумілішими. ``enumerate(thing)``, де *thing* є ітератором або "
"послідовністю, повертає ітератор, який поверне ``(0, thing[0])``, ``(1, "
"thing[1])``, ``(2, thing[2])`` і так далі."

#: ../../whatsnew/2.3.rst:419
msgid "A common idiom to change every element of a list looks like this::"
msgstr "Загальна ідіома зміни кожного елемента списку виглядає так:"

#: ../../whatsnew/2.3.rst:421
msgid ""
"for i in range(len(L)):\n"
"    item = L[i]\n"
"    # ... compute some result based on item ...\n"
"    L[i] = result"
msgstr ""

#: ../../whatsnew/2.3.rst:426
msgid "This can be rewritten using :func:`enumerate` as::"
msgstr "Це можна переписати за допомогою :func:`enumerate` як::"

#: ../../whatsnew/2.3.rst:428
msgid ""
"for i, item in enumerate(L):\n"
"    # ... compute some result based on item ...\n"
"    L[i] = result"
msgstr ""

#: ../../whatsnew/2.3.rst:435
msgid ":pep:`279` - The enumerate() built-in function"
msgstr ":pep:`279` - Вбудована функція enumerate()."

#: ../../whatsnew/2.3.rst:436
msgid "Written and implemented by Raymond D. Hettinger."
msgstr "Написаний і реалізований Реймондом Д. Хеттінгером."

#: ../../whatsnew/2.3.rst:442
msgid "PEP 282: The logging Package"
msgstr "PEP 282: пакет журналів"

#: ../../whatsnew/2.3.rst:444
msgid ""
"A standard package for writing logs, :mod:`logging`, has been added to "
"Python 2.3.  It provides a powerful and flexible mechanism for generating "
"logging output which can then be filtered and processed in various ways.  A "
"configuration file written in a standard format can be used to control the "
"logging behavior of a program.  Python includes handlers that will write log"
" records to standard error or to a file or socket, send them to the system "
"log, or even e-mail them to a particular address; of course, it's also "
"possible to write your own handler classes."
msgstr ""
"Стандартний пакет для запису журналів, :mod:`logging`, було додано до Python"
" 2.3. Він забезпечує потужний і гнучкий механізм для генерації результатів "
"журналювання, які потім можна фільтрувати та обробляти різними способами. "
"Файл конфігурації, написаний у стандартному форматі, можна використовувати "
"для керування поведінкою програми в журналі. Python включає обробники, які "
"записуватимуть записи журналу до стандартної помилки або до файлу чи сокета,"
" надсилатимуть їх до системного журналу чи навіть електронною поштою на "
"певну адресу; звичайно, також можна написати власні класи обробників."

#: ../../whatsnew/2.3.rst:453
msgid ""
"The :class:`~logging.Logger` class is the primary class. Most application "
"code will deal with one or more :class:`~logging.Logger` objects, each one "
"used by a particular subsystem of the application. Each "
":class:`~logging.Logger` is identified by a name, and names are organized "
"into a hierarchy using ``.``  as the component separator. For example, you "
"might have :class:`~logging.Logger` instances named ``server``, "
"``server.auth`` and ``server.network``.  The latter two instances are below "
"``server`` in the hierarchy.  This means that if you turn up the verbosity "
"for ``server`` or direct ``server`` messages to a different handler, the "
"changes will also apply to records logged to ``server.auth`` and "
"``server.network``. There's also a root :class:`~logging.Logger` that's the "
"parent of all other loggers."
msgstr ""

#: ../../whatsnew/2.3.rst:464
msgid ""
"For simple uses, the :mod:`logging` package contains some convenience "
"functions that always use the root log::"
msgstr ""
"Для простого використання пакет :mod:`logging` містить деякі зручні функції,"
" які завжди використовують кореневий журнал::"

#: ../../whatsnew/2.3.rst:467
msgid ""
"import logging\n"
"\n"
"logging.debug('Debugging information')\n"
"logging.info('Informational message')\n"
"logging.warning('Warning:config file %s not found', 'server.conf')\n"
"logging.error('Error occurred')\n"
"logging.critical('Critical error -- shutting down')"
msgstr ""

#: ../../whatsnew/2.3.rst:475 ../../whatsnew/2.3.rst:500
msgid "This produces the following output::"
msgstr "Це дає такий вихід:"

#: ../../whatsnew/2.3.rst:477
msgid ""
"WARNING:root:Warning:config file server.conf not found\n"
"ERROR:root:Error occurred\n"
"CRITICAL:root:Critical error -- shutting down"
msgstr ""

#: ../../whatsnew/2.3.rst:481
msgid ""
"In the default configuration, informational and debugging messages are "
"suppressed and the output is sent to standard error.  You can enable the "
"display of informational and debugging messages by calling the "
":meth:`~logging.Logger.setLevel` method on the root logger."
msgstr ""

#: ../../whatsnew/2.3.rst:486
msgid ""
"Notice the :func:`~logging.warning` call's use of string formatting "
"operators; all of the functions for logging messages take the arguments "
"``(msg, arg1, arg2, ...)`` and log the string resulting from ``msg % (arg1, "
"arg2, ...)``."
msgstr ""

#: ../../whatsnew/2.3.rst:490
msgid ""
"There's also an :func:`~logging.exception` function that records the most "
"recent traceback.  Any of the other functions will also record the traceback"
" if you specify a true value for the keyword argument *exc_info*. ::"
msgstr ""

#: ../../whatsnew/2.3.rst:494
msgid ""
"def f():\n"
"    try:    1/0\n"
"    except: logging.exception('Problem recorded')\n"
"\n"
"f()"
msgstr ""

#: ../../whatsnew/2.3.rst:502
msgid ""
"ERROR:root:Problem recorded\n"
"Traceback (most recent call last):\n"
"  File \"t.py\", line 6, in f\n"
"    1/0\n"
"ZeroDivisionError: integer division or modulo by zero"
msgstr ""

#: ../../whatsnew/2.3.rst:508
msgid ""
"Slightly more advanced programs will use a logger other than the root "
"logger. The ``getLogger(name)`` function is used to get a particular log, "
"creating it if it doesn't exist yet. ``getLogger(None)`` returns the root "
"logger. ::"
msgstr ""
"Трохи просунутіші програми використовуватимуть інший реєстратор, ніж "
"кореневий реєстратор. Функція ``getLogger(name)`` використовується для "
"отримання певного журналу, створення його, якщо він ще не існує. "
"``getLogger(None)`` повертає кореневий реєстратор. ::"

#: ../../whatsnew/2.3.rst:512
msgid ""
"log = logging.getLogger('server')\n"
" ...\n"
"log.info('Listening on port %i', port)\n"
" ...\n"
"log.critical('Disk full')\n"
" ..."
msgstr ""

#: ../../whatsnew/2.3.rst:519
msgid ""
"Log records are usually propagated up the hierarchy, so a message logged to "
"``server.auth`` is also seen by ``server`` and ``root``, but a "
":class:`~logging.Logger` can prevent this by setting its "
":attr:`~logging.Logger.propagate` attribute to :const:`False`."
msgstr ""

#: ../../whatsnew/2.3.rst:523
msgid ""
"There are more classes provided by the :mod:`logging` package that can be "
"customized.  When a :class:`~logging.Logger` instance is told to log a "
"message, it creates a :class:`~logging.LogRecord` instance that is sent to "
"any number of different :class:`~logging.Handler` instances.  Loggers and "
"handlers can also have an attached list of filters, and each filter can "
"cause the :class:`~logging.LogRecord` to be ignored or can modify the record"
" before passing it along.  When they're finally output, "
":class:`~logging.LogRecord` instances are converted to text by a "
":class:`~logging.Formatter` class.  All of these classes can be replaced by "
"your own specially written classes."
msgstr ""

#: ../../whatsnew/2.3.rst:533
msgid ""
"With all of these features the :mod:`logging` package should provide enough "
"flexibility for even the most complicated applications.  This is only an "
"incomplete overview of its features, so please see the package's reference "
"documentation for all of the details.  Reading :pep:`282` will also be "
"helpful."
msgstr ""
"З усіма цими функціями пакет :mod:`logging` має забезпечити достатню "
"гнучкість навіть для найскладніших програм. Це лише неповний огляд його "
"функцій, тому, будь ласка, перегляньте довідкову документацію пакета, щоб "
"отримати всі деталі. Читання :pep:`282` також буде корисним."

#: ../../whatsnew/2.3.rst:541
msgid ":pep:`282` - A Logging System"
msgstr ":pep:`282` - Система реєстрації"

#: ../../whatsnew/2.3.rst:542
msgid "Written by Vinay Sajip and Trent Mick; implemented by Vinay Sajip."
msgstr "Автори: Віней Саджип і Трент Мік; реалізовано Вінаєм Саджипом."

#: ../../whatsnew/2.3.rst:550
msgid "PEP 285: A Boolean Type"
msgstr "PEP 285: логічний тип"

#: ../../whatsnew/2.3.rst:552
msgid ""
"A Boolean type was added to Python 2.3.  Two new constants were added to the"
" :mod:`!__builtin__` module, :const:`True` and :const:`False`.  "
"(:const:`True` and :const:`False` constants were added to the built-ins in "
"Python 2.2.1, but the 2.2.1 versions are simply set to integer values of 1 "
"and 0 and aren't a different type.)"
msgstr ""

#: ../../whatsnew/2.3.rst:558
msgid ""
"The type object for this new type is named :class:`bool`; the constructor "
"for it takes any Python value and converts it to :const:`True` or "
":const:`False`. ::"
msgstr ""
"Об’єкт типу для цього нового типу називається :class:`bool`; конструктор для"
" нього приймає будь-яке значення Python і перетворює його на :const:`True` "
"або :const:`False`. ::"

#: ../../whatsnew/2.3.rst:561
msgid ""
">>> bool(1)\n"
"True\n"
">>> bool(0)\n"
"False\n"
">>> bool([])\n"
"False\n"
">>> bool( (1,) )\n"
"True"
msgstr ""

#: ../../whatsnew/2.3.rst:570
msgid ""
"Most of the standard library modules and built-in functions have been "
"changed to return Booleans. ::"
msgstr ""
"Більшість стандартних бібліотечних модулів і вбудованих функцій було змінено"
" для повернення логічних значень. ::"

#: ../../whatsnew/2.3.rst:573
msgid ""
">>> obj = []\n"
">>> hasattr(obj, 'append')\n"
"True\n"
">>> isinstance(obj, list)\n"
"True\n"
">>> isinstance(obj, tuple)\n"
"False"
msgstr ""

#: ../../whatsnew/2.3.rst:581
msgid ""
"Python's Booleans were added with the primary goal of making code clearer.  "
"For example, if you're reading a function and encounter the statement "
"``return 1``, you might wonder whether the ``1`` represents a Boolean truth "
"value, an index, or a coefficient that multiplies some other quantity.  If "
"the statement is ``return True``, however, the meaning of the return value "
"is quite clear."
msgstr ""
"Логічні значення Python були додані з головною метою зробити код "
"зрозумілішим. Наприклад, якщо ви читаєте функцію та зустрічаєте оператор "
"``повернути 1``, ви можете запитати, чи ``1`` представляє логічне значення "
"істинності, індекс або коефіцієнт, який множить якусь іншу величину. Однак, "
"якщо оператор ``повернути Істину``, значення значення, що повертається, "
"цілком зрозуміле."

#: ../../whatsnew/2.3.rst:587
msgid ""
"Python's Booleans were *not* added for the sake of strict type-checking.  A "
"very strict language such as Pascal would also prevent you performing "
"arithmetic with Booleans, and would require that the expression in an "
":keyword:`if` statement always evaluate to a Boolean result.  Python is not "
"this strict and never will be, as :pep:`285` explicitly says.  This means "
"you can still use any expression in an :keyword:`!if` statement, even ones "
"that evaluate to a list or tuple or some random object.  The Boolean type is"
" a subclass of the :class:`int` class so that arithmetic using a Boolean "
"still works. ::"
msgstr ""
"Логічні значення Python *не* додано задля суворої перевірки типу. Дуже "
"сувора мова, така як Паскаль, також завадить вам виконувати арифметику з "
"булевими значеннями, і вимагатиме, щоб вираз у операторі :keyword:`if` "
"завжди обчислювався як логічний результат. Python не є таким суворим і "
"ніколи не буде, про що прямо говорить :pep:`285`. Це означає, що ви все ще "
"можете використовувати будь-який вираз у операторі :keyword:`!if`, навіть "
"той, який обчислюється як список, кортеж або якийсь випадковий об’єкт. "
"Логічний тип є підкласом класу :class:`int`, тому арифметика з використанням"
" логічного значення все ще працює. ::"

#: ../../whatsnew/2.3.rst:596
msgid ""
">>> True + 1\n"
"2\n"
">>> False + 1\n"
"1\n"
">>> False * 75\n"
"0\n"
">>> True * 75\n"
"75"
msgstr ""

#: ../../whatsnew/2.3.rst:605
msgid ""
"To sum up :const:`True` and :const:`False` in a sentence: they're "
"alternative ways to spell the integer values 1 and 0, with the single "
"difference that :func:`str` and :func:`repr` return the strings ``'True'`` "
"and ``'False'`` instead of ``'1'`` and ``'0'``."
msgstr ""
"Підводячи підсумок :const:`True` і :const:`False` у реченні: це "
"альтернативні способи написання цілих значень 1 і 0, з тією єдиною різницею,"
" що :func:`str` і :func:`repr` повертає рядки ``'True'`` і ``'False'`` "
"замість ``'1'`` і ``'0'``."

#: ../../whatsnew/2.3.rst:613
msgid ":pep:`285` - Adding a bool type"
msgstr ":pep:`285` - Додавання типу bool"

#: ../../whatsnew/2.3.rst:614
msgid "Written and implemented by GvR."
msgstr "Написано та реалізовано GvR."

#: ../../whatsnew/2.3.rst:620
msgid "PEP 293: Codec Error Handling Callbacks"
msgstr "PEP 293: Зворотні виклики обробки помилок кодека"

#: ../../whatsnew/2.3.rst:622
msgid ""
"When encoding a Unicode string into a byte string, unencodable characters "
"may be encountered.  So far, Python has allowed specifying the error "
"processing as either \"strict\" (raising :exc:`UnicodeError`), \"ignore\" "
"(skipping the character), or \"replace\" (using a question mark in the "
"output string), with \"strict\" being the default behavior. It may be "
"desirable to specify alternative processing of such errors, such as "
"inserting an XML character reference or HTML entity reference into the "
"converted string."
msgstr ""
"Під час кодування рядка Юнікод у рядок байтів можуть зустрітися некодовані "
"символи. Наразі Python дозволяв вказувати обробку помилок як \"строгу\" "
"(викликаючи :exc:`UnicodeError`), \"ігнорувати\" (пропускаючи символ) або "
"\"замінювати\" (використовуючи знак питання у вихідному рядку), з "
"\"суворий\" є поведінкою за замовчуванням. Може бути бажано вказати "
"альтернативну обробку таких помилок, таку як вставка посилання на символ XML"
" або посилання на сутність HTML у перетворений рядок."

#: ../../whatsnew/2.3.rst:630
msgid ""
"Python now has a flexible framework to add different processing strategies."
"  New error handlers can be added with :func:`codecs.register_error`, and "
"codecs then can access the error handler with :func:`codecs.lookup_error`. "
"An equivalent C API has been added for codecs written in C. The error "
"handler gets the necessary state information such as the string being "
"converted, the position in the string where the error was detected, and the "
"target encoding.  The handler can then either raise an exception or return a"
" replacement string."
msgstr ""
"Python тепер має гнучку структуру для додавання різних стратегій обробки. "
"Нові обробники помилок можна додати за допомогою "
":func:`codecs.register_error`, а потім кодеки зможуть отримати доступ до "
"обробника помилок за допомогою :func:`codecs.lookup_error`. Для кодеків, "
"написаних мовою C, додано еквівалентний C API. Обробник помилок отримує "
"необхідну інформацію про стан, таку як рядок, який перетворюється, позиція в"
" рядку, де було виявлено помилку, і цільове кодування. Тоді обробник може "
"викликати виняток або повернути рядок заміни."

#: ../../whatsnew/2.3.rst:638
msgid ""
"Two additional error handlers have been implemented using this framework: "
"\"backslashreplace\" uses Python backslash quoting to represent unencodable "
"characters and \"xmlcharrefreplace\" emits XML character references."
msgstr ""
"За допомогою цього фреймворку було реалізовано два додаткові обробники "
"помилок: \"backslashreplace\" використовує лапки Python для представлення "
"некодованих символів, а \"xmlcharrefreplace\" видає посилання на символи "
"XML."

#: ../../whatsnew/2.3.rst:645
msgid ":pep:`293` - Codec Error Handling Callbacks"
msgstr ":pep:`293` - Помилка кодека при обробці зворотних викликів"

#: ../../whatsnew/2.3.rst:646
msgid "Written and implemented by Walter Dörwald."
msgstr "Написав і реалізував Вальтер Дьорвальд."

#: ../../whatsnew/2.3.rst:654
msgid "PEP 301: Package Index and Metadata for Distutils"
msgstr "PEP 301: Індекс пакетів і метадані для Distutils"

#: ../../whatsnew/2.3.rst:656
msgid ""
"Support for the long-requested Python catalog makes its first appearance in "
"2.3."
msgstr ""
"Підтримка давно запитуваного каталогу Python вперше з’являється у 2.3."

#: ../../whatsnew/2.3.rst:658
msgid ""
"The heart of the catalog is the new Distutils :command:`register` command. "
"Running ``python setup.py register`` will collect the metadata describing a "
"package, such as its name, version, maintainer, description, &c., and send "
"it to a central catalog server.  The resulting catalog is available from "
"https://pypi.org."
msgstr ""
"Серцем каталогу є нова команда Distutils :command:`register`. Запуск "
"``python setup.py register`` збирає метадані, що описують пакунок, наприклад"
" його назву, версію, супроводжуючого, опис тощо, і надсилає їх на "
"центральний сервер каталогу. Отриманий каталог доступний за адресою "
"https://pypi.org."

#: ../../whatsnew/2.3.rst:664
msgid ""
"To make the catalog a bit more useful, a new optional *classifiers* keyword "
"argument has been added to the Distutils :func:`!setup` function.  A list of"
" `Trove <http://catb.org/~esr/trove/>`_-style strings can be supplied to "
"help classify the software."
msgstr ""

#: ../../whatsnew/2.3.rst:669
msgid ""
"Here's an example :file:`setup.py` with classifiers, written to be "
"compatible with older versions of the Distutils::"
msgstr ""
"Ось приклад :file:`setup.py` з класифікаторами, написаними для сумісності зі"
" старішими версіями Distutils::"

#: ../../whatsnew/2.3.rst:672
msgid ""
"from distutils import core\n"
"kw = {'name': \"Quixote\",\n"
"      'version': \"0.5.1\",\n"
"      'description': \"A highly Pythonic Web application framework\",\n"
"      # ...\n"
"      }\n"
"\n"
"if (hasattr(core, 'setup_keywords') and\n"
"    'classifiers' in core.setup_keywords):\n"
"    kw['classifiers'] = \\\n"
"        ['Topic :: Internet :: WWW/HTTP :: Dynamic Content',\n"
"         'Environment :: No Input/Output (Daemon)',\n"
"         'Intended Audience :: Developers'],\n"
"\n"
"core.setup(**kw)"
msgstr ""

#: ../../whatsnew/2.3.rst:688
msgid ""
"The full list of classifiers can be obtained by running  ``python setup.py "
"register --list-classifiers``."
msgstr ""
"Повний список класифікаторів можна отримати, запустивши ``python setup.py "
"register --list-classifiers``."

#: ../../whatsnew/2.3.rst:694
msgid ":pep:`301` - Package Index and Metadata for Distutils"
msgstr ":pep:`301` - Індекс пакета та метадані для Distutils"

#: ../../whatsnew/2.3.rst:695
msgid "Written and implemented by Richard Jones."
msgstr "Написаний і реалізований Річардом Джонсом."

#: ../../whatsnew/2.3.rst:703
msgid "PEP 302: New Import Hooks"
msgstr "PEP 302: нові імпортні гачки"

#: ../../whatsnew/2.3.rst:705
msgid ""
"While it's been possible to write custom import hooks ever since the "
":mod:`!ihooks` module was introduced in Python 1.3, no one has ever been "
"really happy with it because writing new import hooks is difficult and "
"messy.  There have been various proposed alternatives such as the "
":mod:`!imputil` and :mod:`!iu` modules, but none of them has ever gained "
"much acceptance, and none of them were easily usable from C code."
msgstr ""

#: ../../whatsnew/2.3.rst:712
msgid ""
":pep:`302` borrows ideas from its predecessors, especially from Gordon "
"McMillan's :mod:`!iu` module.  Three new items  are added to the :mod:`sys` "
"module:"
msgstr ""

#: ../../whatsnew/2.3.rst:716
msgid ""
"``sys.path_hooks`` is a list of callable objects; most  often they'll be "
"classes.  Each callable takes a string containing a path and either returns "
"an importer object that will handle imports from this path or raises an "
":exc:`ImportError` exception if it can't handle this path."
msgstr ""
"``sys.path_hooks`` - це список викликаних об'єктів; найчастіше це будуть "
"класи. Кожен виклик приймає рядок, що містить шлях, і або повертає об’єкт "
"імпортера, який оброблятиме імпорт із цього шляху, або викликає виняток "
":exc:`ImportError`, якщо він не може обробити цей шлях."

#: ../../whatsnew/2.3.rst:721
msgid ""
"``sys.path_importer_cache`` caches importer objects for each path, so "
"``sys.path_hooks`` will only need to be traversed once for each path."
msgstr ""
"``sys.path_importer_cache`` кешує об’єкти імпортера для кожного шляху, тому "
"``sys.path_hooks`` потрібно буде пройти лише один раз для кожного шляху."

#: ../../whatsnew/2.3.rst:724
msgid ""
"``sys.meta_path`` is a list of importer objects that will be traversed "
"before ``sys.path`` is checked.  This list is initially empty, but user code"
" can add objects to it.  Additional built-in and frozen modules can be "
"imported by an object added to this list."
msgstr ""
"``sys.meta_path`` - це список об’єктів імпортера, які будуть проходити перед"
" перевіркою ``sys.path``. Спочатку цей список порожній, але код користувача "
"може додавати до нього об’єкти. Додаткові вбудовані та заморожені модулі "
"можуть бути імпортовані об’єктом, доданим до цього списку."

#: ../../whatsnew/2.3.rst:729
msgid ""
"Importer objects must have a single method, ``find_module(fullname, "
"path=None)``.  *fullname* will be a module or package name, e.g. ``string`` "
"or ``distutils.core``.  :meth:`!find_module` must return a loader object "
"that has a single method, ``load_module(fullname)``, that creates and "
"returns the corresponding module object."
msgstr ""

#: ../../whatsnew/2.3.rst:735
msgid ""
"Pseudo-code for Python's new import logic, therefore, looks something like "
"this (simplified a bit; see :pep:`302` for the full details)::"
msgstr ""
"Таким чином, псевдокод для нової логіки імпорту Python виглядає приблизно "
"так (трохи спрощено; подробиці див. :pep:`302`):"

#: ../../whatsnew/2.3.rst:738
msgid ""
"for mp in sys.meta_path:\n"
"    loader = mp(fullname)\n"
"    if loader is not None:\n"
"        <module> = loader.load_module(fullname)\n"
"\n"
"for path in sys.path:\n"
"    for hook in sys.path_hooks:\n"
"        try:\n"
"            importer = hook(path)\n"
"        except ImportError:\n"
"            # ImportError, so try the other path hooks\n"
"            pass\n"
"        else:\n"
"            loader = importer.find_module(fullname)\n"
"            <module> = loader.load_module(fullname)\n"
"\n"
"# Not found!\n"
"raise ImportError"
msgstr ""

#: ../../whatsnew/2.3.rst:760
msgid ":pep:`302` - New Import Hooks"
msgstr ":pep:`302` - Нові хуки імпорту"

#: ../../whatsnew/2.3.rst:761
msgid ""
"Written by Just van Rossum and Paul Moore. Implemented by Just van Rossum."
msgstr "Автори: Джаст ван Россум і Пол Мур. Реалізовано Юстом ван Россумом."

#: ../../whatsnew/2.3.rst:769
msgid "PEP 305: Comma-separated Files"
msgstr "PEP 305: Файли, розділені комами"

#: ../../whatsnew/2.3.rst:771
msgid ""
"Comma-separated files are a format frequently used for exporting data from "
"databases and spreadsheets.  Python 2.3 adds a parser for comma-separated "
"files."
msgstr ""
"Файли, розділені комами, — це формат, який часто використовується для "
"експорту даних із баз даних і електронних таблиць. Python 2.3 додає "
"аналізатор для файлів, розділених комами."

#: ../../whatsnew/2.3.rst:774
msgid "Comma-separated format is deceptively simple at first glance::"
msgstr "Формат, розділений комами, на перший погляд оманливо простий:"

#: ../../whatsnew/2.3.rst:776
msgid "Costs,150,200,3.95"
msgstr ""

#: ../../whatsnew/2.3.rst:778
msgid ""
"Read a line and call ``line.split(',')``: what could be simpler? But toss in"
" string data that can contain commas, and things get more complicated::"
msgstr ""
"Прочитати рядок і викликати ``line.split(',')``: що може бути простіше? Але "
"додайте рядкові дані, які можуть містити коми, і все стане складнішим::"

#: ../../whatsnew/2.3.rst:781
msgid "\"Costs\",150,200,3.95,\"Includes taxes, shipping, and sundry items\""
msgstr ""

#: ../../whatsnew/2.3.rst:783
msgid ""
"A big ugly regular expression can parse this, but using the new  :mod:`csv` "
"package is much simpler::"
msgstr ""
"Великий потворний регулярний вираз може проаналізувати це, але використання "
"нового пакета :mod:`csv` набагато простіше:"

#: ../../whatsnew/2.3.rst:786
msgid ""
"import csv\n"
"\n"
"input = open('datafile', 'rb')\n"
"reader = csv.reader(input)\n"
"for line in reader:\n"
"    print line"
msgstr ""

#: ../../whatsnew/2.3.rst:793
msgid ""
"The :func:`~csv.reader` function takes a number of different options. The "
"field separator isn't limited to the comma and can be changed to any "
"character, and so can the quoting and line-ending characters."
msgstr ""

#: ../../whatsnew/2.3.rst:797
msgid ""
"Different dialects of comma-separated files can be defined and registered; "
"currently there are two dialects, both used by Microsoft Excel. A separate "
":class:`csv.writer` class will generate comma-separated files from a "
"succession of tuples or lists, quoting strings that contain the delimiter."
msgstr ""
"Можна визначати та реєструвати різні діалекти файлів, розділених комами; "
"наразі існує два діалекти, обидва використовуються Microsoft Excel. Окремий "
"клас :class:`csv.writer` генеруватиме файли, розділені комами, із "
"послідовності кортежів або списків, цитуючи рядки, які містять роздільник."

#: ../../whatsnew/2.3.rst:805
msgid ":pep:`305` - CSV File API"
msgstr ":pep:`305` - API файлів CSV"

#: ../../whatsnew/2.3.rst:806
msgid ""
"Written and implemented  by Kevin Altis, Dave Cole, Andrew McNamara, Skip "
"Montanaro, Cliff Wells."
msgstr ""
"Написали та реалізували Кевін Алтіс, Дейв Коул, Ендрю Макнамара, Скіп "
"Монтанаро, Кліфф Веллс."

#: ../../whatsnew/2.3.rst:815
msgid "PEP 307: Pickle Enhancements"
msgstr "PEP 307: Поліпшення соління"

#: ../../whatsnew/2.3.rst:817
msgid ""
"The :mod:`pickle` and :mod:`!cPickle` modules received some attention during"
" the 2.3 development cycle.  In 2.2, new-style classes could be pickled "
"without difficulty, but they weren't pickled very compactly; :pep:`307` "
"quotes a trivial example where a new-style class results in a pickled string"
" three times longer than that for a classic class."
msgstr ""

#: ../../whatsnew/2.3.rst:823
msgid ""
"The solution was to invent a new pickle protocol.  The :func:`pickle.dumps` "
"function has supported a text-or-binary flag  for a long time.  In 2.3, this"
" flag is redefined from a Boolean to an integer: 0 is the old text-mode "
"pickle format, 1 is the old binary format, and now 2 is a new 2.3-specific "
"format.  A new constant, :const:`pickle.HIGHEST_PROTOCOL`, can be used to "
"select the fanciest protocol available."
msgstr ""
"Вихід полягав у винаході нового протоколу маринування. Функція "
":func:`pickle.dumps` довгий час підтримувала текстовий або бінарний прапор. "
"У версії 2.3 цей прапорець змінено з логічного значення на ціле: 0 — це "
"старий текстовий формат pickle, 1 — старий двійковий формат, а тепер 2 — це "
"новий формат, специфічний для 2.3. Нову константу, "
":const:`pickle.HIGHEST_PROTOCOL`, можна використовувати для вибору найбільш "
"модного доступного протоколу."

#: ../../whatsnew/2.3.rst:830
msgid ""
"Unpickling is no longer considered a safe operation.  2.2's :mod:`pickle` "
"provided hooks for trying to prevent unsafe classes from being unpickled "
"(specifically, a :attr:`!__safe_for_unpickling__` attribute), but none of "
"this code was ever audited and therefore it's all been ripped out in 2.3.  "
"You should not unpickle untrusted data in any version of Python."
msgstr ""

#: ../../whatsnew/2.3.rst:836
msgid ""
"To reduce the pickling overhead for new-style classes, a new interface for "
"customizing pickling was added using three special methods: "
":meth:`~object.__getstate__`, :meth:`~object.__setstate__`, and "
":meth:`~object.__getnewargs__`.  Consult :pep:`307` for the full semantics  "
"of these methods."
msgstr ""

#: ../../whatsnew/2.3.rst:841
msgid ""
"As a way to compress pickles yet further, it's now possible to use integer "
"codes instead of long strings to identify pickled classes. The Python "
"Software Foundation will maintain a list of standardized codes; there's also"
" a range of codes for private use.  Currently no codes have been specified."
msgstr ""
"Щоб ще більше стиснути pickles, тепер можна використовувати цілі коди "
"замість довгих рядків для ідентифікації маринованих класів. Python Software "
"Foundation підтримуватиме список стандартизованих кодів; також є ряд кодів "
"для приватного використання. Наразі коди не вказано."

#: ../../whatsnew/2.3.rst:849
msgid ":pep:`307` - Extensions to the pickle protocol"
msgstr ":pep:`307` - Розширення протоколу pickle"

#: ../../whatsnew/2.3.rst:850
msgid "Written and implemented  by Guido van Rossum and Tim Peters."
msgstr "Написано та реалізовано Гвідо ван Россумом і Тімом Пітерсом."

#: ../../whatsnew/2.3.rst:858
msgid "Extended Slices"
msgstr "Розширені зрізи"

#: ../../whatsnew/2.3.rst:860
msgid ""
"Ever since Python 1.4, the slicing syntax has supported an optional third "
"\"step\" or \"stride\" argument.  For example, these are all legal Python "
"syntax: ``L[1:10:2]``, ``L[:-1:1]``, ``L[::-1]``.  This was added to Python "
"at the request of the developers of Numerical Python, which uses the third "
"argument extensively.  However, Python's built-in list, tuple, and string "
"sequence types have never supported this feature, raising a :exc:`TypeError`"
" if you tried it. Michael Hudson contributed a patch to fix this "
"shortcoming."
msgstr ""
"Починаючи з Python 1.4, синтаксис нарізки підтримує додатковий третій "
"аргумент \"крок\" або \"крок\". Наприклад, це законний синтаксис Python: "
"``L[1:10:2]``, ``L[:-1:1]``, ``L[::-1]``. Це було додано до Python на "
"прохання розробників Numerical Python, який широко використовує третій "
"аргумент. Однак вбудовані типи списків, кортежів і послідовностей рядків "
"Python ніколи не підтримували цю функцію, викликаючи :exc:`TypeError`, якщо "
"ви спробували її. Майкл Хадсон вніс патч для усунення цього недоліку."

#: ../../whatsnew/2.3.rst:868
msgid ""
"For example, you can now easily extract the elements of a list that have "
"even indexes::"
msgstr ""
"Наприклад, тепер ви можете легко витягти елементи списку, які мають парні "
"індекси::"

#: ../../whatsnew/2.3.rst:871
msgid ""
">>> L = range(10)\n"
">>> L[::2]\n"
"[0, 2, 4, 6, 8]"
msgstr ""

#: ../../whatsnew/2.3.rst:875
msgid ""
"Negative values also work to make a copy of the same list in reverse order::"
msgstr ""
"Від’ємні значення також працюють для створення копії того самого списку у "
"зворотному порядку:"

#: ../../whatsnew/2.3.rst:877
msgid ""
">>> L[::-1]\n"
"[9, 8, 7, 6, 5, 4, 3, 2, 1, 0]"
msgstr ""

#: ../../whatsnew/2.3.rst:880
msgid "This also works for tuples, arrays, and strings::"
msgstr "Це також працює для кортежів, масивів і рядків::"

#: ../../whatsnew/2.3.rst:882
msgid ""
">>> s='abcd'\n"
">>> s[::2]\n"
"'ac'\n"
">>> s[::-1]\n"
"'dcba'"
msgstr ""

#: ../../whatsnew/2.3.rst:888
msgid ""
"If you have a mutable sequence such as a list or an array you can assign to "
"or delete an extended slice, but there are some differences between "
"assignment to extended and regular slices.  Assignment to a regular slice "
"can be used to change the length of the sequence::"
msgstr ""
"Якщо у вас є змінна послідовність, наприклад список або масив, ви можете "
"призначити або видалити розширений фрагмент, але є деякі відмінності між "
"призначенням розширеному та звичайному фрагментам. Призначення звичайному "
"фрагменту можна використовувати для зміни довжини послідовності:"

#: ../../whatsnew/2.3.rst:893
msgid ""
">>> a = range(3)\n"
">>> a\n"
"[0, 1, 2]\n"
">>> a[1:3] = [4, 5, 6]\n"
">>> a\n"
"[0, 4, 5, 6]"
msgstr ""

#: ../../whatsnew/2.3.rst:900
msgid ""
"Extended slices aren't this flexible.  When assigning to an extended slice, "
"the list on the right hand side of the statement must contain the same "
"number of items as the slice it is replacing::"
msgstr ""
"Розширені фрагменти не такі гнучкі. Під час призначення розширеному "
"фрагменту список у правій частині оператора має містити таку ж кількість "
"елементів, як і фрагмент, який він замінює:"

#: ../../whatsnew/2.3.rst:904
msgid ""
">>> a = range(4)\n"
">>> a\n"
"[0, 1, 2, 3]\n"
">>> a[::2]\n"
"[0, 2]\n"
">>> a[::2] = [0, -1]\n"
">>> a\n"
"[0, 1, -1, 3]\n"
">>> a[::2] = [0,1,2]\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in ?\n"
"ValueError: attempt to assign sequence of size 3 to extended slice of size 2"
msgstr ""

#: ../../whatsnew/2.3.rst:917
msgid "Deletion is more straightforward::"
msgstr "Видалення простіше:"

#: ../../whatsnew/2.3.rst:919
msgid ""
">>> a = range(4)\n"
">>> a\n"
"[0, 1, 2, 3]\n"
">>> a[::2]\n"
"[0, 2]\n"
">>> del a[::2]\n"
">>> a\n"
"[1, 3]"
msgstr ""

#: ../../whatsnew/2.3.rst:928
msgid ""
"One can also now pass slice objects to the :meth:`~object.__getitem__` "
"methods of the built-in sequences::"
msgstr ""

#: ../../whatsnew/2.3.rst:931
msgid ""
">>> range(10).__getitem__(slice(0, 5, 2))\n"
"[0, 2, 4]"
msgstr ""

#: ../../whatsnew/2.3.rst:934
msgid "Or use slice objects directly in subscripts::"
msgstr ""
"Або використовуйте об’єкти фрагментів безпосередньо в нижніх індексах::"

#: ../../whatsnew/2.3.rst:936
msgid ""
">>> range(10)[slice(0, 5, 2)]\n"
"[0, 2, 4]"
msgstr ""

#: ../../whatsnew/2.3.rst:939
msgid ""
"To simplify implementing sequences that support extended slicing, slice "
"objects now have a method ``indices(length)`` which, given the length of a "
"sequence, returns a ``(start, stop, step)`` tuple that can be passed "
"directly to :func:`range`. :meth:`!indices` handles omitted and out-of-"
"bounds indices in a manner consistent with regular slices (and this "
"innocuous phrase hides a welter of confusing details!).  The method is "
"intended to be used like this::"
msgstr ""

#: ../../whatsnew/2.3.rst:946
msgid ""
"class FakeSeq:\n"
"    ...\n"
"    def calc_item(self, i):\n"
"        ...\n"
"    def __getitem__(self, item):\n"
"        if isinstance(item, slice):\n"
"            indices = item.indices(len(self))\n"
"            return FakeSeq([self.calc_item(i) for i in range(*indices)])\n"
"        else:\n"
"            return self.calc_item(i)"
msgstr ""

#: ../../whatsnew/2.3.rst:957
msgid ""
"From this example you can also see that the built-in :class:`slice` object "
"is now the type object for the slice type, and is no longer a function.  "
"This is consistent with Python 2.2, where :class:`int`, :class:`str`, etc., "
"underwent the same change."
msgstr ""
"З цього прикладу ви також можете побачити, що вбудований об’єкт "
":class:`slice` тепер є об’єктом типу для типу зрізу, і більше не є функцією."
" Це узгоджується з Python 2.2, де :class:`int`, :class:`str` тощо зазнали "
"тих самих змін."

#: ../../whatsnew/2.3.rst:966
msgid "Other Language Changes"
msgstr "Інші зміни мови"

#: ../../whatsnew/2.3.rst:968
msgid ""
"Here are all of the changes that Python 2.3 makes to the core Python "
"language."
msgstr "Ось усі зміни, внесені Python 2.3 до основної мови Python."

#: ../../whatsnew/2.3.rst:970
msgid ""
"The :keyword:`yield` statement is now always a keyword, as described in "
"section :ref:`section-generators` of this document."
msgstr ""
"Оператор :keyword:`yield` тепер завжди є ключовим словом, як описано в "
"розділі :ref:`section-generators` цього документа."

#: ../../whatsnew/2.3.rst:973
msgid ""
"A new built-in function :func:`enumerate` was added, as described in section"
" :ref:`section-enumerate` of this document."
msgstr ""
"Було додано нову вбудовану функцію :func:`enumerate`, як описано в розділі "
":ref:`section-enumerate` цього документа."

#: ../../whatsnew/2.3.rst:976
msgid ""
"Two new constants, :const:`True` and :const:`False` were added along with "
"the built-in :class:`bool` type, as described in section :ref:`section-bool`"
" of this document."
msgstr ""
"Дві нові константи, :const:`True` і :const:`False` було додано разом із "
"вбудованим типом :class:`bool`, як описано в розділі :ref:`section-bool` "
"цього документа."

#: ../../whatsnew/2.3.rst:980
msgid ""
"The :func:`int` type constructor will now return a long integer instead of "
"raising an :exc:`OverflowError` when a string or floating-point number is "
"too large to fit into an integer.  This can lead to the paradoxical result "
"that ``isinstance(int(expression), int)`` is false, but that seems unlikely "
"to cause problems in practice."
msgstr ""
"Конструктор типу :func:`int` тепер повертатиме довге ціле число замість "
"того, щоб викликати :exc:`OverflowError`, коли рядок або число з плаваючою "
"комою занадто велике, щоб поміститися в ціле число. Це може призвести до "
"парадоксального результату, що ``isinstance(int(expression), int)`` є "
"хибним, але це навряд чи викличе проблеми на практиці."

#: ../../whatsnew/2.3.rst:986
msgid ""
"Built-in types now support the extended slicing syntax, as described in "
"section :ref:`section-slices` of this document."
msgstr ""
"Вбудовані типи тепер підтримують розширений синтаксис нарізки, як описано в "
"розділі :ref:`section-slices` цього документа."

#: ../../whatsnew/2.3.rst:989
msgid ""
"A new built-in function, ``sum(iterable, start=0)``,  adds up the numeric "
"items in the iterable object and returns their sum.  :func:`sum` only "
"accepts numbers, meaning that you can't use it to concatenate a bunch of "
"strings. (Contributed by Alex Martelli.)"
msgstr ""
"Нова вбудована функція, ``sum(iterable, start=0)``, додає числові елементи в"
" ітераційному об’єкті та повертає їхню суму. :func:`sum` приймає лише числа,"
" тобто ви не можете використовувати його для об’єднання рядків. (Надав Алекс"
" Мартеллі.)"

#: ../../whatsnew/2.3.rst:994
msgid ""
"``list.insert(pos, value)`` used to  insert *value* at the front of the list"
" when *pos* was negative.  The behaviour has now been changed to be "
"consistent with slice indexing, so when *pos* is -1 the value will be "
"inserted before the last element, and so forth."
msgstr ""
"``list.insert(pos, value)`` використовувався для вставки *value* на початку "
"списку, коли *pos* було від’ємним. Поведінку тепер змінено для узгодження з "
"індексуванням фрагментів, тому, коли *pos* дорівнює -1, значення буде "
"вставлено перед останнім елементом і так далі."

#: ../../whatsnew/2.3.rst:999
msgid ""
"``list.index(value)``, which searches for *value*  within the list and "
"returns its index, now takes optional  *start* and *stop* arguments to limit"
" the search to  only part of the list."
msgstr ""
"``list.index(value)``, який шукає *value* у списку та повертає його індекс, "
"тепер приймає додаткові аргументи *start* і *stop*, щоб обмежити пошук лише "
"частиною списку."

#: ../../whatsnew/2.3.rst:1003
msgid ""
"Dictionaries have a new method, ``pop(key[, *default*])``, that returns the "
"value corresponding to *key* and removes that key/value pair from the "
"dictionary.  If the requested key isn't present in the dictionary, *default*"
" is returned if it's specified and :exc:`KeyError` raised if it isn't. ::"
msgstr ""
"У словниках є новий метод, ``pop(key[, *default*])``, який повертає "
"значення, що відповідає *key*, і видаляє цю пару ключ/значення зі словника. "
"Якщо потрібний ключ відсутній у словнику, повертається *default*, якщо його "
"вказано, і :exc:`KeyError`, якщо його немає. ::"

#: ../../whatsnew/2.3.rst:1008
msgid ""
">>> d = {1:2}\n"
">>> d\n"
"{1: 2}\n"
">>> d.pop(4)\n"
"Traceback (most recent call last):\n"
"  File \"stdin\", line 1, in ?\n"
"KeyError: 4\n"
">>> d.pop(1)\n"
"2\n"
">>> d.pop(1)\n"
"Traceback (most recent call last):\n"
"  File \"stdin\", line 1, in ?\n"
"KeyError: 'pop(): dictionary is empty'\n"
">>> d\n"
"{}\n"
">>>"
msgstr ""

#: ../../whatsnew/2.3.rst:1025
msgid ""
"There's also a new class method,  ``dict.fromkeys(iterable, value)``, that "
"creates a dictionary with keys taken from the supplied iterator *iterable* "
"and all values set to *value*, defaulting to ``None``."
msgstr ""
"Існує також новий метод класу, ``dict.fromkeys(iterable, value)``, який "
"створює словник із ключами, взятими з наданого ітератора *iterable*, і всіма"
" значеннями, встановленими на *value*, за умовчанням ``None`` ."

#: ../../whatsnew/2.3.rst:1029
msgid "(Patches contributed by Raymond Hettinger.)"
msgstr "(Патчі надав Раймонд Геттінгер.)"

#: ../../whatsnew/2.3.rst:1031
msgid ""
"Also, the :func:`dict` constructor now accepts keyword arguments to simplify"
" creating small dictionaries::"
msgstr ""
"Крім того, конструктор :func:`dict` тепер приймає аргументи ключових слів "
"для спрощення створення невеликих словників::"

#: ../../whatsnew/2.3.rst:1034
msgid ""
">>> dict(red=1, blue=2, green=3, black=4)\n"
"{'blue': 2, 'black': 4, 'green': 3, 'red': 1}"
msgstr ""

#: ../../whatsnew/2.3.rst:1037
msgid "(Contributed by Just van Rossum.)"
msgstr "(Надав Джаст ван Россум.)"

#: ../../whatsnew/2.3.rst:1039
msgid ""
"The :keyword:`assert` statement no longer checks the ``__debug__`` flag, so "
"you can no longer disable assertions by assigning to ``__debug__``. Running "
"Python with the :option:`-O` switch will still generate code that doesn't "
"execute any assertions."
msgstr ""
"Оператор :keyword:`assert` більше не перевіряє прапорець ``__debug__``, тому"
" ви більше не можете вимкнути твердження, призначивши ``__debug__``. Запуск "
"Python із перемикачем :option:`-O` усе одно генеруватиме код, який не "
"виконує жодних тверджень."

#: ../../whatsnew/2.3.rst:1044
msgid ""
"Most type objects are now callable, so you can use them to create new "
"objects such as functions, classes, and modules.  (This means that the "
":mod:`!new` module can be deprecated in a future Python version, because you"
" can now use the type objects available in the :mod:`types` module.) For "
"example, you can create a new module object with the following code:"
msgstr ""

#: ../../whatsnew/2.3.rst:1052
msgid ""
">>> import types\n"
">>> m = types.ModuleType('abc','docstring')\n"
">>> m\n"
"<module 'abc' (built-in)>\n"
">>> m.__doc__\n"
"'docstring'"
msgstr ""

#: ../../whatsnew/2.3.rst:1059
msgid ""
"A new warning, :exc:`PendingDeprecationWarning` was added to indicate "
"features which are in the process of being deprecated.  The warning will "
"*not* be printed by default.  To check for use of features that will be "
"deprecated in the future, supply "
":option:`-Walways::PendingDeprecationWarning:: <-W>` on the command line or "
"use :func:`warnings.filterwarnings`."
msgstr ""
"Було додано нове попередження :exc:`PendingDeprecationWarning`, щоб вказати "
"на функції, які перебувають у процесі припинення підтримки. За замовчуванням"
" попередження *не* друкуватиметься. Щоб перевірити використання функцій, які"
" в майбутньому будуть припинені, укажіть "
":option:`-Walways::PendingDeprecationWarning:: <-W>` у командному рядку або "
"скористайтеся :func:`warnings.filterwarnings`."

#: ../../whatsnew/2.3.rst:1065
msgid ""
"The process of deprecating string-based exceptions, as in ``raise \"Error "
"occurred\"``, has begun.  Raising a string will now trigger "
":exc:`PendingDeprecationWarning`."
msgstr ""
"Процес припинення винятків на основі рядків, як у ``підвищення \"Сталася "
"помилка\"``, розпочато. Підвищення рядка тепер ініціює "
":exc:`PendingDeprecationWarning`."

#: ../../whatsnew/2.3.rst:1069
msgid ""
"Using ``None`` as a variable name will now result in a :exc:`SyntaxWarning` "
"warning.  In a future version of Python, ``None`` may finally become a "
"keyword."
msgstr ""
"Використання ``None`` як назви змінної тепер призведе до попередження "
":exc:`SyntaxWarning`. У майбутній версії Python ``None`` може нарешті стати "
"ключовим словом."

#: ../../whatsnew/2.3.rst:1072
msgid ""
"The :meth:`!xreadlines` method of file objects, introduced in Python 2.1, is"
" no longer necessary because files now behave as their own iterator. "
":meth:`!xreadlines` was originally introduced as a faster way to loop over "
"all the lines in a file, but now you can simply write ``for line in "
"file_obj``. File objects also have a new read-only :attr:`!encoding` "
"attribute that gives the encoding used by the file; Unicode strings written "
"to the file will be automatically  converted to bytes using the given "
"encoding."
msgstr ""

#: ../../whatsnew/2.3.rst:1080
msgid ""
"The method resolution order used by new-style classes has changed, though "
"you'll only notice the difference if you have a really complicated "
"inheritance hierarchy.  Classic classes are unaffected by this change.  "
"Python 2.2 originally used a topological sort of a class's ancestors, but "
"2.3 now uses the C3 algorithm as described in the paper `\"A Monotonic "
"Superclass Linearization for Dylan\" "
"<https://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.19.3910>`_. To "
"understand the motivation for this change,  read Michele Simionato's article"
" :ref:`python_2.3_mro`, or read the thread on python-dev starting with the "
"message at https://mail.python.org/pipermail/python-"
"dev/2002-October/029035.html. Samuele Pedroni first pointed out the problem "
"and also implemented the fix by coding the C3 algorithm."
msgstr ""

#: ../../whatsnew/2.3.rst:1093
msgid ""
"Python runs multithreaded programs by switching between threads after "
"executing N bytecodes.  The default value for N has been increased from 10 "
"to 100 bytecodes, speeding up single-threaded applications by reducing the "
"switching overhead.  Some multithreaded applications may suffer slower "
"response time, but that's easily fixed by setting the limit back to a lower "
"number using ``sys.setcheckinterval(N)``. The limit can be retrieved with "
"the new :func:`!sys.getcheckinterval` function."
msgstr ""

#: ../../whatsnew/2.3.rst:1101
msgid ""
"One minor but far-reaching change is that the names of extension types "
"defined by the modules included with Python now contain the module and a "
"``'.'`` in front of the type name.  For example, in Python 2.2, if you "
"created a socket and printed its :attr:`!__class__`, you'd get this output::"
msgstr ""

#: ../../whatsnew/2.3.rst:1106
msgid ""
">>> s = socket.socket()\n"
">>> s.__class__\n"
"<type 'socket'>"
msgstr ""

#: ../../whatsnew/2.3.rst:1110
msgid "In 2.3, you get this::"
msgstr "У 2.3 ви отримаєте наступне:"

#: ../../whatsnew/2.3.rst:1112
msgid ""
">>> s.__class__\n"
"<type '_socket.socket'>"
msgstr ""

#: ../../whatsnew/2.3.rst:1115
msgid ""
"One of the noted incompatibilities between old- and new-style classes has "
"been removed: you can now assign to the :attr:`~type.__name__` and "
":attr:`~type.__bases__` attributes of new-style classes.  There are some "
"restrictions on what can be assigned to :attr:`!__bases__` along the lines "
"of those relating to assigning to an instance's :attr:`~object.__class__` "
"attribute."
msgstr ""

#: ../../whatsnew/2.3.rst:1125
msgid "String Changes"
msgstr "Зміни рядків"

#: ../../whatsnew/2.3.rst:1127
msgid ""
"The :keyword:`in` operator now works differently for strings. Previously, "
"when evaluating ``X in Y`` where *X* and *Y* are strings, *X* could only be "
"a single character. That's now changed; *X* can be a string of any length, "
"and ``X in Y`` will return :const:`True` if *X* is a substring of *Y*.  If "
"*X* is the empty string, the result is always :const:`True`. ::"
msgstr ""
"Оператор :keyword:`in` тепер працює інакше для рядків. Раніше під час "
"обчислення ``X в Y``, де *X* і *Y* є рядками, *X* міг бути лише одним "
"символом. Тепер це змінилося; *X* може бути рядком будь-якої довжини, і ``X "
"в Y`` поверне :const:`True`, якщо *X* є підрядком *Y*. Якщо *X* є порожнім "
"рядком, результат завжди буде :const:`True`. ::"

#: ../../whatsnew/2.3.rst:1133
msgid ""
">>> 'ab' in 'abcd'\n"
"True\n"
">>> 'ad' in 'abcd'\n"
"False\n"
">>> '' in 'abcd'\n"
"True"
msgstr ""

#: ../../whatsnew/2.3.rst:1140
msgid ""
"Note that this doesn't tell you where the substring starts; if you need that"
" information, use the :meth:`~str.find` string method."
msgstr ""

#: ../../whatsnew/2.3.rst:1143
msgid ""
"The :meth:`~str.strip`, :meth:`~str.lstrip`, and :meth:`~str.rstrip` string "
"methods now have an optional argument for specifying the characters to "
"strip.  The default is still to remove all whitespace characters::"
msgstr ""

#: ../../whatsnew/2.3.rst:1147
msgid ""
">>> '   abc '.strip()\n"
"'abc'\n"
">>> '><><abc<><><>'.strip('<>')\n"
"'abc'\n"
">>> '><><abc<><><>\\n'.strip('<>')\n"
"'abc<><><>\\n'\n"
">>> u'\\u4000\\u4001abc\\u4000'.strip(u'\\u4000')\n"
"u'\\u4001abc'\n"
">>>"
msgstr ""

#: ../../whatsnew/2.3.rst:1157
msgid "(Suggested by Simon Brunning and implemented by Walter Dörwald.)"
msgstr ""
"(Запропоновано Саймоном Бруннінгом і реалізовано Вальтером Дорвальдом.)"

#: ../../whatsnew/2.3.rst:1159
msgid ""
"The :meth:`~str.startswith` and :meth:`~str.endswith` string methods now "
"accept negative numbers for the *start* and *end* parameters."
msgstr ""

#: ../../whatsnew/2.3.rst:1162
msgid ""
"Another new string method is :meth:`~str.zfill`, originally a function in "
"the :mod:`string` module.  :meth:`~str.zfill` pads a numeric string with "
"zeros on the left until it's the specified width. Note that the ``%`` "
"operator is still more flexible and powerful than :meth:`~str.zfill`. ::"
msgstr ""

#: ../../whatsnew/2.3.rst:1167
msgid ""
">>> '45'.zfill(4)\n"
"'0045'\n"
">>> '12345'.zfill(4)\n"
"'12345'\n"
">>> 'goofy'.zfill(6)\n"
"'0goofy'"
msgstr ""

#: ../../whatsnew/2.3.rst:1174
msgid "(Contributed by Walter Dörwald.)"
msgstr "(Надав Вальтер Дьорвальд.)"

#: ../../whatsnew/2.3.rst:1176
msgid ""
"A new type object, :class:`!basestring`, has been added. Both 8-bit strings "
"and Unicode strings inherit from this type, so ``isinstance(obj, "
"basestring)`` will return :const:`True` for either kind of string.  It's a "
"completely abstract type, so you can't create :class:`!basestring` "
"instances."
msgstr ""

#: ../../whatsnew/2.3.rst:1181
msgid ""
"Interned strings are no longer immortal and will now be garbage-collected in"
" the usual way when the only reference to them is from the internal "
"dictionary of interned strings.  (Implemented by Oren Tirosh.)"
msgstr ""
"Внутрішні рядки більше не є безсмертними і тепер збиратимуть сміття у "
"звичайний спосіб, якщо єдине посилання на них міститься у внутрішньому "
"словнику інтернованих рядків. (Реалізовано Ореном Тірошем.)"

#: ../../whatsnew/2.3.rst:1189
msgid "Optimizations"
msgstr "Оптимізації"

#: ../../whatsnew/2.3.rst:1191
msgid ""
"The creation of new-style class instances has been made much faster; they're"
" now faster than classic classes!"
msgstr ""
"Створення екземплярів класу нового стилю стало набагато швидшим; тепер вони "
"швидше, ніж класичні заняття!"

#: ../../whatsnew/2.3.rst:1194
msgid ""
"The :meth:`~list.sort` method of list objects has been extensively rewritten"
" by Tim Peters, and the implementation is significantly faster."
msgstr ""

#: ../../whatsnew/2.3.rst:1197
msgid ""
"Multiplication of large long integers is now much faster thanks to an "
"implementation of Karatsuba multiplication, an algorithm that scales better "
"than the *O*\\ (*n*\\ :sup:`2`) required for the grade-school multiplication"
" algorithm.  (Original patch by Christopher A. Craig, and significantly "
"reworked by Tim Peters.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1202
msgid ""
"The ``SET_LINENO`` opcode is now gone.  This may provide a small speed "
"increase, depending on your compiler's idiosyncrasies. See section "
":ref:`23section-other` for a longer explanation. (Removed by Michael "
"Hudson.)"
msgstr ""
"Код операції ``SET_LINENO`` тепер зник. Це може забезпечити невелике "
"збільшення швидкості, залежно від особливостей вашого компілятора. "
"Перегляньте розділ :ref:`23section-other` для більш детального пояснення. "
"(Вилучено Майклом Хадсоном.)"

#: ../../whatsnew/2.3.rst:1206
msgid ""
":func:`!xrange` objects now have their own iterator, making ``for i in "
"xrange(n)`` slightly faster than ``for i in range(n)``.  (Patch by Raymond "
"Hettinger.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1210
msgid ""
"A number of small rearrangements have been made in various hotspots to "
"improve performance, such as inlining a function or removing some code.  "
"(Implemented mostly by GvR, but lots of people have contributed single "
"changes.)"
msgstr ""
"У різних гарячих точках було зроблено ряд невеликих змін, щоб покращити "
"продуктивність, як-от вбудовування функції або видалення деякого коду. "
"(Реалізовано переважно GvR, але багато людей внесли окремі зміни.)"

#: ../../whatsnew/2.3.rst:1214
msgid ""
"The net result of the 2.3 optimizations is that Python 2.3 runs the  pystone"
" benchmark around 25% faster than Python 2.2."
msgstr ""
"Кінцевим результатом оптимізації 2.3 є те, що Python 2.3 виконує тест "
"pystone приблизно на 25% швидше, ніж Python 2.2."

#: ../../whatsnew/2.3.rst:1221
msgid "New, Improved, and Deprecated Modules"
msgstr "Нові, покращені та застарілі модулі"

#: ../../whatsnew/2.3.rst:1223
msgid ""
"As usual, Python's standard library received a number of enhancements and "
"bug fixes.  Here's a partial list of the most notable changes, sorted "
"alphabetically by module name. Consult the :file:`Misc/NEWS` file in the "
"source tree for a more complete list of changes, or look through the CVS "
"logs for all the details."
msgstr ""
"Як завжди, стандартна бібліотека Python отримала низку вдосконалень і "
"виправлень помилок. Ось неповний список найбільш помітних змін, "
"відсортованих за алфавітом назв модулів. Зверніться до файлу "
":file:`Misc/NEWS` у дереві вихідних кодів, щоб отримати більш повний список "
"змін, або перегляньте журнали CVS, щоб отримати всі деталі."

#: ../../whatsnew/2.3.rst:1228
msgid ""
"The :mod:`array` module now supports arrays of Unicode characters using the "
"``'u'`` format character.  Arrays also now support using the ``+=`` "
"assignment operator to add another array's contents, and the ``*=`` "
"assignment operator to repeat an array. (Contributed by Jason Orendorff.)"
msgstr ""
"Модуль :mod:`array` тепер підтримує масиви символів Unicode з використанням "
"символу формату ``'u'``. Масиви також тепер підтримують використання "
"оператора призначення ``+=`` для додавання вмісту іншого масиву та оператора"
" призначення ``*=`` для повторення масиву. (Надав Джейсон Орендорф.)"

#: ../../whatsnew/2.3.rst:1233
msgid ""
"The :mod:`!bsddb` module has been replaced by version 4.1.6 of the `PyBSDDB "
"<https://pybsddb.sourceforge.net>`_ package, providing a more complete "
"interface to the transactional features of the BerkeleyDB library."
msgstr ""

#: ../../whatsnew/2.3.rst:1237
msgid ""
"The old version of the module has been renamed to  :mod:`!bsddb185` and is "
"no longer built automatically; you'll  have to edit :file:`Modules/Setup` to"
" enable it.  Note that the new :mod:`!bsddb` package is intended to be "
"compatible with the  old module, so be sure to file bugs if you discover any"
" incompatibilities. When upgrading to Python 2.3, if the new interpreter is "
"compiled with a new version of  the underlying BerkeleyDB library, you will "
"almost certainly have to convert your database files to the new version.  "
"You can do this fairly easily with the new scripts :file:`db2pickle.py` and "
":file:`pickle2db.py` which you will find in the distribution's "
":file:`Tools/scripts` directory.  If you've already been using the PyBSDDB "
"package and importing it as :mod:`!bsddb3`, you will have to change your "
"``import`` statements to import it as :mod:`!bsddb`."
msgstr ""

#: ../../whatsnew/2.3.rst:1249
msgid ""
"The new :mod:`bz2` module is an interface to the bz2 data compression "
"library. bz2-compressed data is usually smaller than  corresponding "
":mod:`zlib`\\ -compressed data. (Contributed by Gustavo Niemeyer.)"
msgstr ""
"Новий модуль :mod:`bz2` є інтерфейсом до бібліотеки стиснення даних bz2. "
"bz2-стиснуті дані зазвичай менші за відповідні :mod:`zlib`\\ -стиснуті дані."
" (Надав Густаво Німейєр.)"

#: ../../whatsnew/2.3.rst:1253
msgid ""
"A set of standard date/time types has been added in the new :mod:`datetime` "
"module.  See the following section for more details."
msgstr ""
"У новий модуль :mod:`datetime` додано набір стандартних типів дати/часу. "
"Перегляньте наступний розділ для отримання додаткової інформації."

#: ../../whatsnew/2.3.rst:1256
msgid ""
"The Distutils :class:`!Extension` class now supports an extra constructor "
"argument named *depends* for listing additional source files that an "
"extension depends on.  This lets Distutils recompile the module if any of "
"the dependency files are modified.  For example, if :file:`sampmodule.c` "
"includes the header file :file:`sample.h`, you would create the "
":class:`!Extension` object like this::"
msgstr ""

#: ../../whatsnew/2.3.rst:1263
msgid ""
"ext = Extension(\"samp\",\n"
"                sources=[\"sampmodule.c\"],\n"
"                depends=[\"sample.h\"])"
msgstr ""

#: ../../whatsnew/2.3.rst:1267
msgid ""
"Modifying :file:`sample.h` would then cause the module to be recompiled. "
"(Contributed by Jeremy Hylton.)"
msgstr ""
"Зміна :file:`sample.h` призведе до перекомпіляції модуля. (Надав Джеремі "
"Гілтон.)"

#: ../../whatsnew/2.3.rst:1270
msgid ""
"Other minor changes to Distutils: it now checks for the :envvar:`CC`, "
":envvar:`CFLAGS`, :envvar:`!CPP`, :envvar:`LDFLAGS`, and :envvar:`CPPFLAGS` "
"environment variables, using them to override the settings in Python's "
"configuration (contributed by Robert Weber)."
msgstr ""

#: ../../whatsnew/2.3.rst:1275
msgid ""
"Previously the :mod:`doctest` module would only search the docstrings of "
"public methods and functions for test cases, but it now also examines "
"private ones as well.  The :func:`~doctest.DocTestSuite` function creates a "
":class:`unittest.TestSuite` object from a set of :mod:`doctest` tests."
msgstr ""

#: ../../whatsnew/2.3.rst:1280
msgid ""
"The new ``gc.get_referents(object)`` function returns a list of all the "
"objects referenced by *object*."
msgstr ""
"Нова функція ``gc.get_referents(object)`` повертає список усіх об’єктів, на "
"які посилається *object*."

#: ../../whatsnew/2.3.rst:1283
msgid ""
"The :mod:`getopt` module gained a new function, :func:`~getopt.gnu_getopt`, "
"that supports the same arguments as the existing :func:`~getopt.getopt` "
"function but uses GNU-style scanning mode. The existing "
":func:`~getopt.getopt` stops processing options as soon as a non-option "
"argument is encountered, but in GNU-style mode processing continues, meaning"
" that options and arguments can be mixed.  For example::"
msgstr ""

#: ../../whatsnew/2.3.rst:1289
msgid ""
">>> getopt.getopt(['-f', 'filename', 'output', '-v'], 'f:v')\n"
"([('-f', 'filename')], ['output', '-v'])\n"
">>> getopt.gnu_getopt(['-f', 'filename', 'output', '-v'], 'f:v')\n"
"([('-f', 'filename'), ('-v', '')], ['output'])"
msgstr ""

#: ../../whatsnew/2.3.rst:1294
msgid "(Contributed by Peter Åstrand.)"
msgstr "(Надав Пітер Естранд.)"

#: ../../whatsnew/2.3.rst:1296
msgid ""
"The :mod:`grp`, :mod:`pwd`, and :mod:`resource` modules now return enhanced "
"tuples::"
msgstr ""
"Модулі :mod:`grp`, :mod:`pwd` і :mod:`resource` тепер повертають розширені "
"кортежі::"

#: ../../whatsnew/2.3.rst:1299
msgid ""
">>> import grp\n"
">>> g = grp.getgrnam('amk')\n"
">>> g.gr_name, g.gr_gid\n"
"('amk', 500)"
msgstr ""

#: ../../whatsnew/2.3.rst:1304
msgid "The :mod:`gzip` module can now handle files exceeding 2 GiB."
msgstr "Модуль :mod:`gzip` тепер може обробляти файли розміром понад 2 ГіБ."

#: ../../whatsnew/2.3.rst:1306
msgid ""
"The new :mod:`heapq` module contains an implementation of a heap queue "
"algorithm.  A heap is an array-like data structure that keeps items in a "
"partially sorted order such that, for every index *k*, ``heap[k] <= "
"heap[2*k+1]`` and ``heap[k] <= heap[2*k+2]``.  This makes it quick to remove"
" the smallest item, and inserting a new item while maintaining the heap "
"property is *O*\\ (log *n*).  (See "
"https://xlinux.nist.gov/dads//HTML/priorityque.html for more information "
"about the priority queue data structure.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1314
msgid ""
"The :mod:`heapq` module provides :func:`~heapq.heappush` and "
":func:`~heapq.heappop` functions for adding and removing items while "
"maintaining the heap property on top of some other mutable Python sequence "
"type.  Here's an example that uses a Python list::"
msgstr ""

#: ../../whatsnew/2.3.rst:1318
msgid ""
">>> import heapq\n"
">>> heap = []\n"
">>> for item in [3, 7, 5, 11, 1]:\n"
"...    heapq.heappush(heap, item)\n"
"...\n"
">>> heap\n"
"[1, 3, 5, 11, 7]\n"
">>> heapq.heappop(heap)\n"
"1\n"
">>> heapq.heappop(heap)\n"
"3\n"
">>> heap\n"
"[5, 7, 11]"
msgstr ""

#: ../../whatsnew/2.3.rst:1332
msgid "(Contributed by Kevin O'Connor.)"
msgstr "(Надав Кевін О'Коннор.)"

#: ../../whatsnew/2.3.rst:1334
msgid ""
"The IDLE integrated development environment has been updated using the code "
"from the IDLEfork project (https://idlefork.sourceforge.net).  The most "
"notable feature is that the code being developed is now executed in a "
"subprocess, meaning that there's no longer any need for manual ``reload()`` "
"operations. IDLE's core code has been incorporated into the standard library"
" as the :mod:`idlelib` package."
msgstr ""

#: ../../whatsnew/2.3.rst:1340
msgid ""
"The :mod:`imaplib` module now supports IMAP over SSL. (Contributed by Piers "
"Lauder and Tino Lange.)"
msgstr ""
"Модуль :mod:`imaplib` тепер підтримує IMAP через SSL. (Пірс Лаудер і Тіно "
"Ланге.)"

#: ../../whatsnew/2.3.rst:1343
msgid ""
"The :mod:`itertools` contains a number of useful functions for use with "
"iterators, inspired by various functions provided by the ML and Haskell "
"languages.  For example, ``itertools.ifilter(predicate, iterator)`` returns "
"all elements in the iterator for which the function :func:`!predicate` "
"returns :const:`True`, and ``itertools.repeat(obj, N)`` returns ``obj`` *N* "
"times. There are a number of other functions in the module; see the "
"package's reference documentation for details. (Contributed by Raymond "
"Hettinger.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1352
msgid ""
"Two new functions in the :mod:`math` module, ``degrees(rads)`` and "
"``radians(degs)``, convert between radians and degrees.  Other functions in "
"the :mod:`math` module such as :func:`math.sin` and :func:`math.cos` have "
"always required input values measured in radians.  Also, an optional *base* "
"argument was added to :func:`math.log` to make it easier to compute "
"logarithms for bases other than ``e`` and ``10``.  (Contributed by Raymond "
"Hettinger.)"
msgstr ""
"Дві нові функції в модулі :mod:`math`, ``degrees(rads)`` і "
"``radians(degs)``, конвертують між радіанами та градусами. Інші функції в "
"модулі :mod:`math`, такі як :func:`math.sin` і :func:`math.cos`, завжди "
"вимагали вхідних значень, виміряних у радіанах. Також до :func:`math.log` "
"було додано необов’язковий аргумент *base*, щоб полегшити обчислення "
"логарифмів для основ, відмінних від ``e`` і ``10``. (Надав Реймонд "
"Геттінгер.)"

#: ../../whatsnew/2.3.rst:1359
msgid ""
"Several new POSIX functions (:func:`!getpgid`, :func:`!killpg`, "
":func:`!lchown`, :func:`!loadavg`, :func:`!major`, :func:`!makedev`, "
":func:`!minor`, and :func:`!mknod`) were added to the :mod:`posix` module "
"that underlies the :mod:`os` module. (Contributed by Gustavo Niemeyer, Geert"
" Jansen, and Denis S. Otkidach.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1365
msgid ""
"In the :mod:`os` module, the :func:`!\\*stat` family of functions can now "
"report fractions of a second in a timestamp.  Such time stamps are "
"represented as floats, similar to the value returned by :func:`time.time`."
msgstr ""

#: ../../whatsnew/2.3.rst:1369
msgid ""
"During testing, it was found that some applications will break if time "
"stamps are floats.  For compatibility, when using the tuple interface of the"
" :class:`~os.stat_result` time stamps will be represented as integers. When "
"using named fields (a feature first introduced in Python 2.2), time stamps "
"are still represented as integers, unless :func:`!os.stat_float_times` is "
"invoked to enable float return values::"
msgstr ""

#: ../../whatsnew/2.3.rst:1376
msgid ""
">>> os.stat(\"/tmp\").st_mtime\n"
"1034791200\n"
">>> os.stat_float_times(True)\n"
">>> os.stat(\"/tmp\").st_mtime\n"
"1034791200.6335014"
msgstr ""

#: ../../whatsnew/2.3.rst:1382
msgid "In Python 2.4, the default will change to always returning floats."
msgstr ""
"У Python 2.4 значення за замовчуванням зміниться на завжди повертати числа з"
" плаваючою точкою."

#: ../../whatsnew/2.3.rst:1384
msgid ""
"Application developers should enable this feature only if all their "
"libraries work properly when confronted with floating-point time stamps, or "
"if they use the tuple API. If used, the feature should be activated on an "
"application level instead of trying to enable it on a per-use basis."
msgstr ""

#: ../../whatsnew/2.3.rst:1389
msgid ""
"The :mod:`optparse` module contains a new parser for command-line arguments "
"that can convert option values to a particular Python type  and will "
"automatically generate a usage message.  See the following section for  more"
" details."
msgstr ""
"Модуль :mod:`optparse` містить новий синтаксичний аналізатор аргументів "
"командного рядка, який може конвертувати значення параметрів у певний тип "
"Python і автоматично генеруватиме повідомлення про використання. Перегляньте"
" наступний розділ для отримання додаткової інформації."

#: ../../whatsnew/2.3.rst:1394
msgid ""
"The old and never-documented :mod:`!linuxaudiodev` module has been "
"deprecated, and a new version named :mod:`!ossaudiodev` has been added.  The"
" module was renamed because the OSS sound drivers can be used on platforms "
"other than Linux, and the interface has also been tidied and brought up to "
"date in various ways. (Contributed by Greg Ward and Nicholas FitzRoy-Dale.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1400
msgid ""
"The new :mod:`platform` module contains a number of functions that try to "
"determine various properties of the platform you're running on.  There are "
"functions for getting the architecture, CPU type, the Windows OS version, "
"and even the Linux distribution version. (Contributed by Marc-André "
"Lemburg.)"
msgstr ""
"Новий модуль :mod:`platform` містить ряд функцій, які намагаються визначити "
"різні властивості платформи, на якій ви працюєте. Є функції для отримання "
"архітектури, типу ЦП, версії ОС Windows і навіть версії дистрибутива Linux. "
"(Надав Марк-Андре Лембург.)"

#: ../../whatsnew/2.3.rst:1405
msgid ""
"The parser objects provided by the :mod:`pyexpat <xml.parsers.expat>` module"
" can now optionally buffer character data, resulting in fewer calls to your "
"character data handler and therefore faster performance.  Setting the parser"
" object's :attr:`~xml.parsers.expat.xmlparser.buffer_text` attribute to "
":const:`True` will enable buffering."
msgstr ""

#: ../../whatsnew/2.3.rst:1410
msgid ""
"The ``sample(population, k)`` function was added to the :mod:`random` "
"module.  *population* is a sequence or :class:`!xrange` object containing "
"the elements of a population, and :func:`~random.sample` chooses *k* "
"elements from the population without replacing chosen elements.  *k* can be "
"any value up to ``len(population)``. For example::"
msgstr ""

#: ../../whatsnew/2.3.rst:1416
msgid ""
">>> days = ['Mo', 'Tu', 'We', 'Th', 'Fr', 'St', 'Sn']\n"
">>> random.sample(days, 3)      # Choose 3 elements\n"
"['St', 'Sn', 'Th']\n"
">>> random.sample(days, 7)      # Choose 7 elements\n"
"['Tu', 'Th', 'Mo', 'We', 'St', 'Fr', 'Sn']\n"
">>> random.sample(days, 7)      # Choose 7 again\n"
"['We', 'Mo', 'Sn', 'Fr', 'Tu', 'St', 'Th']\n"
">>> random.sample(days, 8)      # Can't choose eight\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in ?\n"
"  File \"random.py\", line 414, in sample\n"
"      raise ValueError, \"sample larger than population\"\n"
"ValueError: sample larger than population\n"
">>> random.sample(xrange(1,10000,2), 10)   # Choose ten odd nos. under 10000\n"
"[3407, 3805, 1505, 7023, 2401, 2267, 9733, 3151, 8083, 9195]"
msgstr ""

#: ../../whatsnew/2.3.rst:1432
msgid ""
"The :mod:`random` module now uses a new algorithm, the Mersenne Twister, "
"implemented in C.  It's faster and more extensively studied than the "
"previous algorithm."
msgstr ""
"Модуль :mod:`random` тепер використовує новий алгоритм, Mersenne Twister, "
"реалізований у C. Він швидший і детальніше вивчений, ніж попередній "
"алгоритм."

#: ../../whatsnew/2.3.rst:1436
msgid "(All changes contributed by Raymond Hettinger.)"
msgstr "(Усі зміни внесено Реймондом Геттінгером.)"

#: ../../whatsnew/2.3.rst:1438
msgid ""
"The :mod:`readline` module also gained a number of new functions: "
":func:`~readline.get_history_item`, "
":func:`~readline.get_current_history_length`, and "
":func:`~readline.redisplay`."
msgstr ""

#: ../../whatsnew/2.3.rst:1442
msgid ""
"The :mod:`!rexec` and :mod:`!Bastion` modules have been declared dead, and "
"attempts to import them will fail with a :exc:`RuntimeError`.  New-style "
"classes provide new ways to break out of the restricted execution "
"environment provided by :mod:`!rexec`, and no one has interest in fixing "
"them or time to do so.  If you have applications using :mod:`!rexec`, "
"rewrite them to use something else."
msgstr ""

#: ../../whatsnew/2.3.rst:1448
msgid ""
"(Sticking with Python 2.2 or 2.1 will not make your applications any safer "
"because there are known bugs in the :mod:`!rexec` module in those versions."
"  To repeat: if you're using :mod:`!rexec`, stop using it immediately.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1452
msgid ""
"The :mod:`!rotor` module has been deprecated because the  algorithm it uses "
"for encryption is not believed to be secure.  If you need encryption, use "
"one of the several AES Python modules that are available separately."
msgstr ""

#: ../../whatsnew/2.3.rst:1456
msgid ""
"The :mod:`shutil` module gained a ``move(src, dest)`` function that "
"recursively moves a file or directory to a new location."
msgstr ""
"Модуль :mod:`shutil` отримав функцію ``move(src, dest)``, яка рекурсивно "
"переміщує файл або каталог до нового розташування."

#: ../../whatsnew/2.3.rst:1459
msgid ""
"Support for more advanced POSIX signal handling was added to the "
":mod:`signal` but then removed again as it proved impossible to make it work"
" reliably across platforms."
msgstr ""
"Підтримку вдосконаленої обробки сигналів POSIX було додано до :mod:`signal`,"
" але потім знову вилучено, оскільки виявилося неможливим забезпечити його "
"надійну роботу на різних платформах."

#: ../../whatsnew/2.3.rst:1463
msgid ""
"The :mod:`socket` module now supports timeouts.  You can call the "
"``settimeout(t)`` method on a socket object to set a timeout of *t* seconds."
" Subsequent socket operations that take longer than *t* seconds to complete "
"will abort and raise a :exc:`socket.timeout` exception."
msgstr ""
"Модуль :mod:`socket` тепер підтримує тайм-аути. Ви можете викликати метод "
"``settimeout(t)`` для об’єкта сокета, щоб встановити час очікування *t* "
"секунд. Подальші операції з сокетом, які тривають більше *t* секунд, "
"перериваються та викликають виняток :exc:`socket.timeout`."

#: ../../whatsnew/2.3.rst:1468
msgid ""
"The original timeout implementation was by Tim O'Malley.  Michael Gilfix "
"integrated it into the Python :mod:`socket` module and shepherded it through"
" a lengthy review.  After the code was checked in, Guido van Rossum rewrote "
"parts of it.  (This is a good example of a collaborative development process"
" in action.)"
msgstr ""
"Оригінальна реалізація тайм-ауту була створена Тімом О'Меллі. Майкл Гілфікс "
"інтегрував його в модуль Python :mod:`socket` і перевірив його через довгий "
"огляд. Після перевірки коду Гвідо ван Россум переписав його частини. (Це "
"хороший приклад процесу спільної розробки в дії.)"

#: ../../whatsnew/2.3.rst:1474
msgid ""
"On Windows, the :mod:`socket` module now ships with Secure  Sockets Layer "
"(SSL) support."
msgstr ""
"У Windows модуль :mod:`socket` тепер поставляється з підтримкою Secure "
"Sockets Layer (SSL)."

#: ../../whatsnew/2.3.rst:1477
msgid ""
"The value of the C :c:macro:`!PYTHON_API_VERSION` macro is now exposed at "
"the Python level as ``sys.api_version``.  The current exception can be "
"cleared by calling the new :func:`!sys.exc_clear` function."
msgstr ""

#: ../../whatsnew/2.3.rst:1481
msgid ""
"The new :mod:`tarfile` module  allows reading from and writing to "
":program:`tar`\\ -format archive files. (Contributed by Lars Gustäbel.)"
msgstr ""
"Новий модуль :mod:`tarfile` дозволяє читати та записувати в архівні файли у "
"форматі :program:`tar`\\. (Надав Ларс Густебель.)"

#: ../../whatsnew/2.3.rst:1484
msgid ""
"The new :mod:`textwrap` module contains functions for wrapping strings "
"containing paragraphs of text.  The ``wrap(text, width)`` function takes a "
"string and returns a list containing the text split into lines of no more "
"than the chosen width.  The ``fill(text, width)`` function returns a single "
"string, reformatted to fit into lines no longer than the chosen width. (As "
"you can guess, :func:`~textwrap.fill` is built on top of "
":func:`~textwrap.wrap`.  For example::"
msgstr ""

#: ../../whatsnew/2.3.rst:1491
msgid ""
">>> import textwrap\n"
">>> paragraph = \"Not a whit, we defy augury: ... more text ...\"\n"
">>> textwrap.wrap(paragraph, 60)\n"
"[\"Not a whit, we defy augury: there's a special providence in\",\n"
" \"the fall of a sparrow. If it be now, 'tis not to come; if it\",\n"
" ...]\n"
">>> print textwrap.fill(paragraph, 35)\n"
"Not a whit, we defy augury: there's\n"
"a special providence in the fall of\n"
"a sparrow. If it be now, 'tis not\n"
"to come; if it be not to come, it\n"
"will be now; if it be not now, yet\n"
"it will come: the readiness is all.\n"
">>>"
msgstr ""

#: ../../whatsnew/2.3.rst:1506
msgid ""
"The module also contains a :class:`~textwrap.TextWrapper` class that "
"actually implements the text wrapping strategy.   Both the "
":class:`~textwrap.TextWrapper` class and the :func:`~textwrap.wrap` and "
":func:`~textwrap.fill` functions support a number of additional keyword "
"arguments for fine-tuning the formatting; consult the module's documentation"
" for details. (Contributed by Greg Ward.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1512
msgid ""
"The :mod:`!thread` and :mod:`threading` modules now have companion modules, "
":mod:`!dummy_thread` and :mod:`!dummy_threading`, that provide a do-nothing "
"implementation of the :mod:`!thread` module's interface for platforms where "
"threads are not supported.  The intention is to simplify thread-aware "
"modules (ones that *don't* rely on threads to run) by putting the following "
"code at the top::"
msgstr ""

#: ../../whatsnew/2.3.rst:1519
msgid ""
"try:\n"
"    import threading as _threading\n"
"except ImportError:\n"
"    import dummy_threading as _threading"
msgstr ""

#: ../../whatsnew/2.3.rst:1524
msgid ""
"In this example, :mod:`!_threading` is used as the module name to make it "
"clear that the module being used is not necessarily the actual "
":mod:`threading` module. Code can call functions and use classes in "
":mod:`!_threading` whether or not threads are supported, avoiding an "
":keyword:`if` statement and making the code slightly clearer.  This module "
"will not magically make multithreaded code run without threads; code that "
"waits for another thread to return or to do something will simply hang "
"forever."
msgstr ""

#: ../../whatsnew/2.3.rst:1532
msgid ""
"The :mod:`time` module's :func:`~time.strptime` function has long been an "
"annoyance because it uses the platform C library's :func:`~time.strptime` "
"implementation, and different platforms sometimes have odd bugs.  Brett "
"Cannon contributed a portable implementation that's written in pure Python "
"and should behave identically on all platforms."
msgstr ""

#: ../../whatsnew/2.3.rst:1538
msgid ""
"The new :mod:`timeit` module helps measure how long snippets of Python code "
"take to execute.  The :file:`timeit.py` file can be run directly from the "
"command line, or the module's :class:`~timeit.Timer` class can be imported "
"and used directly.  Here's a short example that figures out whether it's "
"faster to convert an 8-bit string to Unicode by appending an empty Unicode "
"string to it or by using the :func:`!unicode` function::"
msgstr ""

#: ../../whatsnew/2.3.rst:1545
msgid ""
"import timeit\n"
"\n"
"timer1 = timeit.Timer('unicode(\"abc\")')\n"
"timer2 = timeit.Timer('\"abc\" + u\"\"')\n"
"\n"
"# Run three trials\n"
"print timer1.repeat(repeat=3, number=100000)\n"
"print timer2.repeat(repeat=3, number=100000)\n"
"\n"
"# On my laptop this outputs:\n"
"# [0.36831796169281006, 0.37441694736480713, 0.35304892063140869]\n"
"# [0.17574405670166016, 0.18193507194519043, 0.17565798759460449]"
msgstr ""

#: ../../whatsnew/2.3.rst:1558
msgid ""
"The :mod:`!Tix` module has received various bug fixes and updates for the "
"current version of the Tix package."
msgstr ""

#: ../../whatsnew/2.3.rst:1561
msgid ""
"The :mod:`!Tkinter` module now works with a thread-enabled  version of Tcl. "
"Tcl's threading model requires that widgets only be accessed from the thread"
" in which they're created; accesses from another thread can cause Tcl to "
"panic.  For certain Tcl interfaces, :mod:`!Tkinter` will now automatically "
"avoid this  when a widget is accessed from a different thread by marshalling"
" a command, passing it to the correct thread, and waiting for the results.  "
"Other interfaces can't be handled automatically but :mod:`!Tkinter` will now"
" raise an exception on such an access so that you can at least find out "
"about the problem.  See https://mail.python.org/pipermail/python-"
"dev/2002-December/031107.html for a more detailed explanation of this "
"change.  (Implemented by Martin von Löwis.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1572
msgid ""
"Calling Tcl methods through :mod:`!_tkinter` no longer  returns only "
"strings. Instead, if Tcl returns other objects those objects are converted "
"to their Python equivalent, if one exists, or wrapped with a "
":class:`!_tkinter.Tcl_Obj` object if no Python equivalent exists. This "
"behavior can be controlled through the :meth:`!wantobjects` method of "
":class:`!tkapp` objects."
msgstr ""

#: ../../whatsnew/2.3.rst:1578
msgid ""
"When using :mod:`!_tkinter` through the :mod:`!Tkinter` module (as most "
"Tkinter applications will), this feature is always activated. It should not "
"cause compatibility problems, since Tkinter would always convert string "
"results to Python types where possible."
msgstr ""

#: ../../whatsnew/2.3.rst:1583
msgid ""
"If any incompatibilities are found, the old behavior can be restored by "
"setting the :attr:`!wantobjects` variable in the :mod:`!Tkinter` module to "
"false before creating the first :class:`!tkapp` object. ::"
msgstr ""

#: ../../whatsnew/2.3.rst:1587
msgid ""
"import Tkinter\n"
"Tkinter.wantobjects = 0"
msgstr ""

#: ../../whatsnew/2.3.rst:1590
msgid "Any breakage caused by this change should be reported as a bug."
msgstr "Будь-яку поломку, спричинену цією зміною, слід повідомити як помилку."

#: ../../whatsnew/2.3.rst:1592
msgid ""
"The :mod:`!UserDict` module has a new :class:`!DictMixin` class which "
"defines all dictionary methods for classes that already have a minimum "
"mapping interface.  This greatly simplifies writing classes that need to be "
"substitutable for dictionaries, such as the classes in  the :mod:`shelve` "
"module."
msgstr ""

#: ../../whatsnew/2.3.rst:1598
msgid ""
"Adding the mix-in as a superclass provides the full dictionary interface "
"whenever the class defines :meth:`~object.__getitem__`, "
":meth:`~object.__setitem__`, :meth:`~object.__delitem__`, and :meth:`!keys`."
" For example::"
msgstr ""

#: ../../whatsnew/2.3.rst:1602
msgid ""
">>> import UserDict\n"
">>> class SeqDict(UserDict.DictMixin):\n"
"...     \"\"\"Dictionary lookalike implemented with lists.\"\"\"\n"
"...     def __init__(self):\n"
"...         self.keylist = []\n"
"...         self.valuelist = []\n"
"...     def __getitem__(self, key):\n"
"...         try:\n"
"...             i = self.keylist.index(key)\n"
"...         except ValueError:\n"
"...             raise KeyError\n"
"...         return self.valuelist[i]\n"
"...     def __setitem__(self, key, value):\n"
"...         try:\n"
"...             i = self.keylist.index(key)\n"
"...             self.valuelist[i] = value\n"
"...         except ValueError:\n"
"...             self.keylist.append(key)\n"
"...             self.valuelist.append(value)\n"
"...     def __delitem__(self, key):\n"
"...         try:\n"
"...             i = self.keylist.index(key)\n"
"...         except ValueError:\n"
"...             raise KeyError\n"
"...         self.keylist.pop(i)\n"
"...         self.valuelist.pop(i)\n"
"...     def keys(self):\n"
"...         return list(self.keylist)\n"
"...\n"
">>> s = SeqDict()\n"
">>> dir(s)      # See that other dictionary methods are implemented\n"
"['__cmp__', '__contains__', '__delitem__', '__doc__', '__getitem__',\n"
" '__init__', '__iter__', '__len__', '__module__', '__repr__',\n"
" '__setitem__', 'clear', 'get', 'has_key', 'items', 'iteritems',\n"
" 'iterkeys', 'itervalues', 'keylist', 'keys', 'pop', 'popitem',\n"
" 'setdefault', 'update', 'valuelist', 'values']"
msgstr ""

#: ../../whatsnew/2.3.rst:1639
msgid "(Contributed by Raymond Hettinger.)"
msgstr "(Надав Реймонд Геттінгер.)"

#: ../../whatsnew/2.3.rst:1641
msgid ""
"The DOM implementation in :mod:`xml.dom.minidom` can now generate XML output"
" in a particular encoding by providing an optional encoding argument to the "
":meth:`~xml.dom.minidom.Node.toxml` and "
":meth:`~xml.dom.minidom.Node.toprettyxml` methods of DOM nodes."
msgstr ""

#: ../../whatsnew/2.3.rst:1645
msgid ""
"The :mod:`!xmlrpclib` module now supports an XML-RPC extension for handling "
"nil data values such as Python's ``None``.  Nil values are always supported "
"on unmarshalling an XML-RPC response.  To generate requests containing "
"``None``, you must supply a true value for the *allow_none* parameter when "
"creating a :class:`!Marshaller` instance."
msgstr ""

#: ../../whatsnew/2.3.rst:1651
msgid ""
"The new :mod:`!DocXMLRPCServer` module allows writing self-documenting XML-"
"RPC servers. Run it in demo mode (as a program) to see it in action.   "
"Pointing the web browser to the RPC server produces pydoc-style "
"documentation; pointing xmlrpclib to the server allows invoking the actual "
"methods. (Contributed by Brian Quinlan.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1657
msgid ""
"Support for internationalized domain names (RFCs 3454, 3490, 3491, and 3492)"
" has been added. The \"idna\" encoding can be used to convert between a "
"Unicode domain name and the ASCII-compatible encoding (ACE) of that name. ::"
msgstr ""
"Додано підтримку інтернаціоналізованих доменних імен (RFC 3454, 3490, 3491 і"
" 3492). Кодування \"idna\" можна використовувати для перетворення між "
"доменним іменем Unicode і ASCII-сумісним кодуванням (ACE) цього імені. ::"

#: ../../whatsnew/2.3.rst:1661
msgid ""
">{}>{}> u\"www.Alliancefrançaise.nu\".encode(\"idna\")\n"
"'www.xn--alliancefranaise-npb.nu'"
msgstr ""

#: ../../whatsnew/2.3.rst:1664
msgid ""
"The :mod:`socket` module has also been extended to transparently convert "
"Unicode hostnames to the ACE version before passing them to the C library. "
"Modules that deal with hostnames such as :mod:`!httplib` and :mod:`ftplib`) "
"also support Unicode host names; :mod:`!httplib` also sends HTTP ``Host`` "
"headers using the ACE version of the domain name.  :mod:`urllib` supports "
"Unicode URLs with non-ASCII host names as long as the ``path`` part of the "
"URL is ASCII only."
msgstr ""

#: ../../whatsnew/2.3.rst:1672
msgid ""
"To implement this change, the :mod:`stringprep` module, the  "
"``mkstringprep`` tool and the ``punycode`` encoding have been added."
msgstr ""
"Для впровадження цієї зміни було додано модуль :mod:`stringprep`, інструмент"
" ``mkstringprep`` і кодування ``punycode``."

#: ../../whatsnew/2.3.rst:1679
msgid "Date/Time Type"
msgstr "Тип дати/часу"

#: ../../whatsnew/2.3.rst:1681
msgid ""
"Date and time types suitable for expressing timestamps were added as the "
":mod:`datetime` module.  The types don't support different calendars or many"
" fancy features, and just stick to the basics of representing time."
msgstr ""
"Типи дати та часу, придатні для вираження позначок часу, були додані як "
"модуль :mod:`datetime`. Типи не підтримують різні календарі чи багато модних"
" функцій і лише дотримуються основ представлення часу."

#: ../../whatsnew/2.3.rst:1685
msgid ""
"The three primary types are: :class:`~datetime.date`, representing a day, "
"month, and year; :class:`~datetime.time`, consisting of hour, minute, and "
"second; and :class:`~datetime.datetime`, which contains all the attributes "
"of both :class:`~datetime.date` and :class:`~datetime.time`. There's also a "
":class:`~datetime.timedelta` class representing differences between two "
"points in time, and time zone logic is implemented by classes inheriting "
"from the abstract :class:`~datetime.tzinfo` class."
msgstr ""

#: ../../whatsnew/2.3.rst:1692
msgid ""
"You can create instances of :class:`~datetime.date` and "
":class:`~datetime.time` by either supplying keyword arguments to the "
"appropriate constructor, e.g. ``datetime.date(year=1972, month=10, "
"day=15)``, or by using one of a number of class methods.  For example, the "
":meth:`~datetime.date.today` class method returns the current local date."
msgstr ""

#: ../../whatsnew/2.3.rst:1698
msgid ""
"Once created, instances of the date/time classes are all immutable. There "
"are a number of methods for producing formatted strings from objects::"
msgstr ""
"Після створення екземпляри класів дати/часу залишаються незмінними. Існує "
"кілька методів створення форматованих рядків з об'єктів:"

#: ../../whatsnew/2.3.rst:1701
msgid ""
">>> import datetime\n"
">>> now = datetime.datetime.now()\n"
">>> now.isoformat()\n"
"'2002-12-30T21:27:03.994956'\n"
">>> now.ctime()  # Only available on date, datetime\n"
"'Mon Dec 30 21:27:03 2002'\n"
">>> now.strftime('%Y %d %b')\n"
"'2002 30 Dec'"
msgstr ""

#: ../../whatsnew/2.3.rst:1710
msgid ""
"The :meth:`~datetime.datetime.replace` method allows modifying one or more "
"fields  of a :class:`~datetime.date` or :class:`~datetime.datetime` "
"instance, returning a new instance::"
msgstr ""

#: ../../whatsnew/2.3.rst:1713
msgid ""
">>> d = datetime.datetime.now()\n"
">>> d\n"
"datetime.datetime(2002, 12, 30, 22, 15, 38, 827738)\n"
">>> d.replace(year=2001, hour = 12)\n"
"datetime.datetime(2001, 12, 30, 12, 15, 38, 827738)\n"
">>>"
msgstr ""

#: ../../whatsnew/2.3.rst:1720
msgid ""
"Instances can be compared, hashed, and converted to strings (the result is "
"the same as that of :meth:`~datetime.datetime.isoformat`).  "
":class:`~datetime.date` and :class:`~datetime.datetime` instances can be "
"subtracted from each other, and added to :class:`~datetime.timedelta` "
"instances.  The largest missing feature is that there's no standard library "
"support for parsing strings and getting back a :class:`~datetime.date` or "
":class:`~datetime.datetime`."
msgstr ""

#: ../../whatsnew/2.3.rst:1727
msgid ""
"For more information, refer to the module's reference documentation. "
"(Contributed by Tim Peters.)"
msgstr ""
"Для отримання додаткової інформації зверніться до довідкової документації "
"модуля. (Надав Тім Пітерс.)"

#: ../../whatsnew/2.3.rst:1734
msgid "The optparse Module"
msgstr "Модуль optparse"

#: ../../whatsnew/2.3.rst:1736
msgid ""
"The :mod:`getopt` module provides simple parsing of command-line arguments."
"  The new :mod:`optparse` module (originally named Optik) provides more "
"elaborate command-line parsing that follows the Unix conventions, "
"automatically creates the output for :option:`!--help`, and can perform "
"different actions for different options."
msgstr ""
"Модуль :mod:`getopt` забезпечує простий аналіз аргументів командного рядка. "
"Новий модуль :mod:`optparse` (початкова назва Optik) забезпечує більш "
"детальний аналіз командного рядка, який відповідає умовам Unix, автоматично "
"створює вихід для :option:`!--help` і може виконувати різні дії для різних "
"параметрів ."

#: ../../whatsnew/2.3.rst:1742
msgid ""
"You start by creating an instance of :class:`~optparse.OptionParser` and "
"telling it what your program's options are. ::"
msgstr ""

#: ../../whatsnew/2.3.rst:1745
msgid ""
"import sys\n"
"from optparse import OptionParser\n"
"\n"
"op = OptionParser()\n"
"op.add_option('-i', '--input',\n"
"              action='store', type='string', dest='input',\n"
"              help='set input filename')\n"
"op.add_option('-l', '--length',\n"
"              action='store', type='int', dest='length',\n"
"              help='set maximum length of output')"
msgstr ""

#: ../../whatsnew/2.3.rst:1756
msgid ""
"Parsing a command line is then done by calling the "
":meth:`~optparse.OptionParser.parse_args` method. ::"
msgstr ""

#: ../../whatsnew/2.3.rst:1758
msgid ""
"options, args = op.parse_args(sys.argv[1:])\n"
"print options\n"
"print args"
msgstr ""

#: ../../whatsnew/2.3.rst:1762
msgid ""
"This returns an object containing all of the option values, and a list of "
"strings containing the remaining arguments."
msgstr ""
"Це повертає об’єкт, що містить усі значення параметрів, і список рядків, що "
"містять решту аргументів."

#: ../../whatsnew/2.3.rst:1765
msgid ""
"Invoking the script with the various arguments now works as you'd expect it "
"to. Note that the length argument is automatically converted to an integer."
msgstr ""
"Виклик сценарію з різними аргументами тепер працює так, як ви очікували. "
"Зауважте, що аргумент довжини автоматично перетворюється на ціле число."

#: ../../whatsnew/2.3.rst:1768
msgid ""
"$ ./python opt.py -i data arg1\n"
"<Values at 0x400cad4c: {'input': 'data', 'length': None}>\n"
"['arg1']\n"
"$ ./python opt.py --input=data --length=4\n"
"<Values at 0x400cad2c: {'input': 'data', 'length': 4}>\n"
"[]\n"
"$"
msgstr ""

#: ../../whatsnew/2.3.rst:1778
msgid "The help message is automatically generated for you:"
msgstr "Довідкове повідомлення генерується для вас автоматично:"

#: ../../whatsnew/2.3.rst:1780
msgid ""
"$ ./python opt.py --help\n"
"usage: opt.py [options]\n"
"\n"
"options:\n"
"  -h, --help            show this help message and exit\n"
"  -iINPUT, --input=INPUT\n"
"                        set input filename\n"
"  -lLENGTH, --length=LENGTH\n"
"                        set maximum length of output\n"
"$"
msgstr ""

#: ../../whatsnew/2.3.rst:1793
msgid "See the module's documentation for more details."
msgstr "Додаткову інформацію дивіться в документації модуля."

#: ../../whatsnew/2.3.rst:1796
msgid ""
"Optik was written by Greg Ward, with suggestions from the readers of the "
"Getopt SIG."
msgstr "Optik був написаний Грегом Уордом із пропозиціями читачів Getopt SIG."

#: ../../whatsnew/2.3.rst:1805
msgid "Pymalloc: A Specialized Object Allocator"
msgstr "Pymalloc: спеціалізований розподільник об’єктів"

#: ../../whatsnew/2.3.rst:1807
msgid ""
"Pymalloc, a specialized object allocator written by Vladimir Marangozov, was"
" a feature added to Python 2.1.  Pymalloc is intended to be faster than the "
"system :c:func:`malloc` and to have less memory overhead for allocation "
"patterns typical of Python programs. The allocator uses C's :c:func:`malloc`"
" function to get large pools of memory and then fulfills smaller memory "
"requests from these pools."
msgstr ""
"Pymalloc, спеціалізований розподільник об’єктів, написаний Володимиром "
"Марангозовим, був функцією, доданою до Python 2.1. Pymalloc має бути швидшим"
" за системний :c:func:`malloc` і мати менше витрат пам’яті для шаблонів "
"розподілу, типових для програм Python. Розподільник використовує функцію C "
":c:func:`malloc`, щоб отримати великі пули пам’яті, а потім виконує менші "
"запити пам’яті з цих пулів."

#: ../../whatsnew/2.3.rst:1813
msgid ""
"In 2.1 and 2.2, pymalloc was an experimental feature and wasn't enabled by "
"default; you had to explicitly enable it when compiling Python by providing "
"the :option:`!--with-pymalloc` option to the :program:`configure` script.  "
"In 2.3, pymalloc has had further enhancements and is now enabled by default;"
" you'll have to supply :option:`!--without-pymalloc` to disable it."
msgstr ""
"У версіях 2.1 і 2.2 pymalloc був експериментальною функцією і не був "
"увімкнений за замовчуванням; ви повинні були явно ввімкнути його під час "
"компіляції Python, надавши опцію :option:`!--with-pymalloc` сценарію "
":program:`configure`. У версії 2.3 pymalloc отримав додаткові вдосконалення,"
" і тепер він увімкнено за замовчуванням; вам доведеться вказати :option:`!--"
"without-pymalloc`, щоб вимкнути його."

#: ../../whatsnew/2.3.rst:1819
msgid ""
"This change is transparent to code written in Python; however, pymalloc may "
"expose bugs in C extensions.  Authors of C extension modules should test "
"their code with pymalloc enabled, because some incorrect code may cause core"
" dumps at runtime."
msgstr ""
"Ця зміна прозора для коду, написаного на Python; однак pymalloc може виявити"
" помилки в розширеннях C. Автори модулів розширення C повинні протестувати "
"свій код із увімкненим pymalloc, оскільки деякий неправильний код може "
"спричинити дамп ядра під час виконання."

#: ../../whatsnew/2.3.rst:1824
msgid ""
"There's one particularly common error that causes problems.  There are a "
"number of memory allocation functions in Python's C API that have previously"
" just been aliases for the C library's :c:func:`malloc` and :c:func:`free`, "
"meaning that if you accidentally called mismatched functions the error "
"wouldn't be noticeable. When the object allocator is enabled, these "
"functions aren't aliases of :c:func:`malloc` and :c:func:`free` any more, "
"and calling the wrong function to free memory may get you a core dump.  For "
"example, if memory was allocated using :c:func:`PyObject_Malloc`, it has to "
"be freed using :c:func:`PyObject_Free`, not :c:func:`free`.  A few modules "
"included with Python fell afoul of this and had to be fixed; doubtless there"
" are more third-party modules that will have the same problem."
msgstr ""
"Є одна особливо поширена помилка, яка викликає проблеми. В API C Python є "
"кілька функцій розподілу пам’яті, які раніше були лише псевдонімами "
":c:func:`malloc` і :c:func:`free` бібліотеки C, тобто якщо ви випадково "
"викликали невідповідні функції, помилка не було б помітно. Коли розподільник"
" об’єктів увімкнено, ці функції більше не є псевдонімами :c:func:`malloc` і "
":c:func:`free`, і виклик неправильної функції для звільнення пам’яті може "
"призвести до створення дампа ядра. Наприклад, якщо пам’ять було виділено за "
"допомогою :c:func:`PyObject_Malloc`, її потрібно звільнити за допомогою "
":c:func:`PyObject_Free`, а не :c:func:`free`. Кілька модулів, що входять до "
"складу Python, вийшли з ладу, і їх потрібно було виправити; безсумнівно, є "
"інші сторонні модулі, які матимуть таку саму проблему."

#: ../../whatsnew/2.3.rst:1836
msgid ""
"As part of this change, the confusing multiple interfaces for allocating "
"memory have been consolidated down into two API families. Memory allocated "
"with one family must not be manipulated with functions from the other "
"family.  There is one family for allocating chunks of memory and another "
"family of functions specifically for allocating Python objects."
msgstr ""
"У рамках цієї зміни незрозумілі кілька інтерфейсів для розподілу пам’яті "
"були об’єднані у дві сімейства API. Пам'яттю, виділеною для одного "
"сімейства, не можна маніпулювати функціями з іншого сімейства. Існує одне "
"сімейство для розподілу фрагментів пам’яті та інше сімейство функцій "
"спеціально для розподілу об’єктів Python."

#: ../../whatsnew/2.3.rst:1842
msgid ""
"To allocate and free an undistinguished chunk of memory use the \"raw "
"memory\" family: :c:func:`PyMem_Malloc`, :c:func:`PyMem_Realloc`, and "
":c:func:`PyMem_Free`."
msgstr ""
"Щоб виділити та звільнити нерозрізнену частину пам’яті, використовуйте "
"сімейство \"необробленої пам’яті\": :c:func:`PyMem_Malloc`, "
":c:func:`PyMem_Realloc` і :c:func:`PyMem_Free`."

#: ../../whatsnew/2.3.rst:1845
msgid ""
"The \"object memory\" family is the interface to the pymalloc facility "
"described above and is biased towards a large number of \"small\" "
"allocations: :c:func:`PyObject_Malloc`, :c:func:`PyObject_Realloc`, and "
":c:func:`PyObject_Free`."
msgstr ""
"Сімейство \"об’єктної пам’яті\" є інтерфейсом до описаного вище засобу "
"pymalloc і спрямоване на велику кількість \"маленьких\" розподілів: "
":c:func:`PyObject_Malloc`, :c:func:`PyObject_Realloc` і "
":c:func:`PyObject_Free`."

#: ../../whatsnew/2.3.rst:1849
msgid ""
"To allocate and free Python objects, use the \"object\" family "
":c:macro:`PyObject_New`, :c:macro:`PyObject_NewVar`, and "
":c:func:`PyObject_Del`."
msgstr ""

#: ../../whatsnew/2.3.rst:1852
msgid ""
"Thanks to lots of work by Tim Peters, pymalloc in 2.3 also provides "
"debugging features to catch memory overwrites and doubled frees in both "
"extension modules and in the interpreter itself.  To enable this support, "
"compile a debugging version of the Python interpreter by running "
":program:`configure` with :option:`!--with-pydebug`."
msgstr ""
"Завдяки великій роботі Тіма Пітерса, pymalloc у версії 2.3 також надає "
"функції налагодження для виявлення перезапису пам’яті та подвійного "
"звільнення в обох модулях розширення та в самому інтерпретаторі. Щоб "
"увімкнути цю підтримку, скомпілюйте версію інтерпретатора Python для "
"налагодження, запустивши :program:`configure` з :option:`!--with-pydebug`."

#: ../../whatsnew/2.3.rst:1858
msgid ""
"To aid extension writers, a header file :file:`Misc/pymemcompat.h` is "
"distributed with the source to Python 2.3 that allows Python extensions to "
"use the 2.3 interfaces to memory allocation while compiling against any "
"version of Python since 1.5.2.  You would copy the file from Python's source"
" distribution and bundle it with the source of your extension."
msgstr ""
"Щоб допомогти розробникам розширень, файл заголовка "
":file:`Misc/pymemcompat.h` поширюється разом із джерелом для Python 2.3, "
"який дозволяє розширенням Python використовувати інтерфейси 2.3 для "
"розподілу пам’яті під час компіляції з будь-якою версією Python, починаючи з"
" 1.5.2. Ви повинні скопіювати файл із вихідного коду Python і об’єднати його"
" з джерелом вашого розширення."

#: ../../whatsnew/2.3.rst:1867
msgid "https://hg.python.org/cpython/file/default/Objects/obmalloc.c"
msgstr "https://hg.python.org/cpython/file/default/Objects/obmalloc.c"

#: ../../whatsnew/2.3.rst:1868
msgid ""
"For the full details of the pymalloc implementation, see the comments at the"
" top of the file :file:`Objects/obmalloc.c` in the Python source code. The "
"above link points to the file within the python.org SVN browser."
msgstr ""
"Щоб отримати повну інформацію про реалізацію pymalloc, перегляньте коментарі"
" у верхній частині файлу :file:`Objects/obmalloc.c` у вихідному коді Python."
" Наведене вище посилання вказує на файл у браузері python.org SVN."

#: ../../whatsnew/2.3.rst:1876
msgid "Build and C API Changes"
msgstr "Зміни збірки та C API"

#: ../../whatsnew/2.3.rst:1878
msgid "Changes to Python's build process and to the C API include:"
msgstr "Зміни в процесі збирання Python і в API C включають:"

#: ../../whatsnew/2.3.rst:1880
msgid ""
"The cycle detection implementation used by the garbage collection has proven"
" to be stable, so it's now been made mandatory.  You can no longer compile "
"Python without it, and the :option:`!--with-cycle-gc` switch to "
":program:`configure` has been removed."
msgstr ""
"Реалізація виявлення циклу, яка використовується для збирання сміття, "
"виявилася стабільною, тому тепер вона стала обов’язковою. Ви більше не "
"можете скомпілювати Python без нього, а перемикач :option:`!--with-cycle-gc`"
" на :program:`configure` видалено."

#: ../../whatsnew/2.3.rst:1885
msgid ""
"Python can now optionally be built as a shared library "
"(:file:`libpython2.3.so`) by supplying :option:`!--enable-shared` when "
"running Python's :program:`configure` script.  (Contributed by Ondrej "
"Palkovsky.)"
msgstr ""
"Python тепер можна опціонально створити як спільну бібліотеку "
"(:file:`libpython2.3.so`), вказавши :option:`!--enable-shared` під час "
"виконання сценарію :program:`configure` Python. (Надав Ондрей Палковський.)"

#: ../../whatsnew/2.3.rst:1889
msgid ""
"The :c:macro:`!DL_EXPORT` and :c:macro:`!DL_IMPORT` macros are now "
"deprecated. Initialization functions for Python extension modules should now"
" be declared using the new macro :c:macro:`PyMODINIT_FUNC`, while the Python"
" core will generally use the :c:macro:`!PyAPI_FUNC` and "
":c:macro:`!PyAPI_DATA` macros."
msgstr ""

#: ../../whatsnew/2.3.rst:1894
msgid ""
"The interpreter can be compiled without any docstrings for the built-in "
"functions and modules by supplying :option:`!--without-doc-strings` to the "
":program:`configure` script. This makes the Python executable about 10% "
"smaller, but will also mean that you can't get help for Python's built-ins."
"  (Contributed by Gustavo Niemeyer.)"
msgstr ""
"Інтерпретатор може бути скомпільований без будь-яких рядків документації для"
" вбудованих функцій і модулів, надаючи :option:`!--without-doc-strings` до "
"сценарію :program:`configure`. Це робить виконуваний файл Python приблизно "
"на 10% меншим, але також означатиме, що ви не зможете отримати допомогу для "
"вбудованих компонентів Python. (Надав Густаво Німейєр.)"

#: ../../whatsnew/2.3.rst:1900
msgid ""
"The :c:func:`!PyArg_NoArgs` macro is now deprecated, and code that uses it "
"should be changed.  For Python 2.2 and later, the method definition table "
"can specify the :c:macro:`METH_NOARGS` flag, signalling that there are no "
"arguments, and the argument checking can then be removed.  If compatibility "
"with pre-2.2 versions of Python is important, the code could use "
"``PyArg_ParseTuple(args, \"\")`` instead, but this will be slower than using"
" :c:macro:`METH_NOARGS`."
msgstr ""

#: ../../whatsnew/2.3.rst:1907
msgid ""
":c:func:`PyArg_ParseTuple` accepts new format characters for various sizes "
"of unsigned integers: ``B`` for :c:expr:`unsigned char`, ``H`` for "
":c:expr:`unsigned short int`,  ``I`` for :c:expr:`unsigned int`,  and ``K`` "
"for :c:expr:`unsigned long long`."
msgstr ""

#: ../../whatsnew/2.3.rst:1912
msgid ""
"A new function, ``PyObject_DelItemString(mapping, char *key)`` was added as "
"shorthand for ``PyObject_DelItem(mapping, PyString_New(key))``."
msgstr ""
"Нову функцію ``PyObject_DelItemString(mapping, char *key)`` було додано як "
"скорочення для ``PyObject_DelItem(mapping, PyString_New(key))``."

#: ../../whatsnew/2.3.rst:1915
msgid ""
"File objects now manage their internal string buffer differently, increasing"
" it exponentially when needed.  This results in the benchmark tests in "
":file:`Lib/test/test_bufio.py` speeding up considerably (from 57 seconds to "
"1.7 seconds, according to one measurement)."
msgstr ""
"Файлові об’єкти тепер керують своїм внутрішнім рядковим буфером по-іншому, "
"збільшуючи його експоненціально за потреби. Це призводить до значного "
"прискорення тестів у :file:`Lib/test/test_bufio.py` (з 57 секунд до 1,7 "
"секунд, згідно з одним вимірюванням)."

#: ../../whatsnew/2.3.rst:1920
msgid ""
"It's now possible to define class and static methods for a C extension type "
"by setting either the :c:macro:`METH_CLASS` or :c:macro:`METH_STATIC` flags "
"in a method's :c:type:`PyMethodDef` structure."
msgstr ""

#: ../../whatsnew/2.3.rst:1924
msgid ""
"Python now includes a copy of the Expat XML parser's source code, removing "
"any dependence on a system version or local installation of Expat."
msgstr ""
"Python тепер містить копію вихідного коду синтаксичного аналізатора Expat "
"XML, усуваючи будь-яку залежність від версії системи або локальної "
"інсталяції Expat."

#: ../../whatsnew/2.3.rst:1927
msgid ""
"If you dynamically allocate type objects in your extension, you should be "
"aware of a change in the rules relating to the :attr:`~type.__module__` and "
":attr:`~type.__name__` attributes.  In summary, you will want to ensure the "
"type's dictionary contains a ``'__module__'`` key; making the module name "
"the part of the type name leading up to the final period will no longer have"
" the desired effect.  For more detail, read the API reference documentation "
"or the  source."
msgstr ""

#: ../../whatsnew/2.3.rst:1938
msgid "Port-Specific Changes"
msgstr "Зміни, що стосуються порту"

#: ../../whatsnew/2.3.rst:1940
msgid ""
"Support for a port to IBM's OS/2 using the EMX runtime environment was "
"merged into the main Python source tree.  EMX is a POSIX emulation layer "
"over the OS/2 system APIs.  The Python port for EMX tries to support all the"
" POSIX-like capability exposed by the EMX runtime, and mostly succeeds; "
":func:`!fork` and :func:`fcntl` are restricted by the limitations of the "
"underlying emulation layer.  The standard OS/2 port, which uses IBM's Visual"
" Age compiler, also gained support for case-sensitive import semantics as "
"part of the integration of the EMX port into CVS.  (Contributed by Andrew "
"MacIntyre.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1949
msgid ""
"On MacOS, most toolbox modules have been weaklinked to improve backward "
"compatibility.  This means that modules will no longer fail to load if a "
"single routine is missing on the current OS version. Instead calling the "
"missing routine will raise an exception. (Contributed by Jack Jansen.)"
msgstr ""
"У MacOS більшість модулів панелі інструментів були слабко зв’язані, щоб "
"покращити зворотну сумісність. Це означає, що модулі більше не будуть "
"завантажуватися, якщо в поточній версії ОС відсутня одна процедура. "
"Натомість виклик відсутньої підпрограми призведе до виключення. (Надав Джек "
"Янсен.)"

#: ../../whatsnew/2.3.rst:1954
msgid ""
"The RPM spec files, found in the :file:`Misc/RPM/` directory in the Python "
"source distribution, were updated for 2.3.  (Contributed by Sean "
"Reifschneider.)"
msgstr ""
"Файли специфікацій RPM, знайдені в каталозі :file:`Misc/RPM/` вихідного коду"
" Python, було оновлено до версії 2.3. (Надав Шон Райфшнайдер.)"

#: ../../whatsnew/2.3.rst:1957
msgid ""
"Other new platforms now supported by Python include AtheOS "
"(http://www.atheos.cx/), GNU/Hurd, and OpenVMS."
msgstr ""
"Інші нові платформи, які зараз підтримуються Python, включають AtheOS "
"(http://www.atheos.cx/), GNU/Hurd і OpenVMS."

#: ../../whatsnew/2.3.rst:1966
msgid "Other Changes and Fixes"
msgstr "Інші зміни та виправлення"

#: ../../whatsnew/2.3.rst:1968
msgid ""
"As usual, there were a bunch of other improvements and bugfixes scattered "
"throughout the source tree.  A search through the CVS change logs finds "
"there were 523 patches applied and 514 bugs fixed between Python 2.2 and "
"2.3.  Both figures are likely to be underestimates."
msgstr ""
"Як завжди, була купа інших покращень і виправлень помилок, розкиданих по "
"дереву вихідних кодів. Пошук у журналах змін CVS виявив, що між Python 2.2 і"
" 2.3 було застосовано 523 виправлення та 514 виправлених помилок. Обидві "
"цифри, ймовірно, занижені."

#: ../../whatsnew/2.3.rst:1973
msgid "Some of the more notable changes are:"
msgstr "Деякі з найбільш помітних змін:"

#: ../../whatsnew/2.3.rst:1975
msgid ""
"If the :envvar:`PYTHONINSPECT` environment variable is set, the Python "
"interpreter will enter the interactive prompt after running a Python "
"program, as if Python had been invoked with the :option:`-i` option. The "
"environment variable can be set before running the Python interpreter, or it"
" can be set by the Python program as part of its execution."
msgstr ""
"Якщо встановлено змінну середовища :envvar:`PYTHONINSPECT`, інтерпретатор "
"Python увійде в інтерактивну підказку після запуску програми Python, як якщо"
" б Python було викликано з параметром :option:`-i`. Змінну середовища можна "
"встановити перед запуском інтерпретатора Python або її можна встановити "
"програмою Python як частину її виконання."

#: ../../whatsnew/2.3.rst:1981
msgid ""
"The :file:`regrtest.py` script now provides a way to allow \"all resources "
"except *foo*.\"  A resource name passed to the :option:`!-u` option can now "
"be prefixed with a hyphen (``'-'``) to mean \"remove this resource.\"  For "
"example, the option '``-uall,-bsddb``' could be used to enable the use of "
"all resources except ``bsddb``."
msgstr ""
"Сценарій :file:`regrtest.py` тепер надає спосіб дозволити \"всі ресурси, "
"крім *foo*\". Ім’я ресурсу, передане параметру :option:`!-u`, тепер може "
"мати перед префіксом дефіс (``'-'``), що означає \"видалити цей ресурс\". "
"Наприклад, параметр \"``-uall,-bsddb``\" можна використовувати, щоб "
"увімкнути використання всіх ресурсів, крім ``bsddb``."

#: ../../whatsnew/2.3.rst:1987
msgid ""
"The tools used to build the documentation now work under Cygwin as well as "
"Unix."
msgstr ""
"Інструменти, які використовуються для створення документації, тепер працюють"
" як під Cygwin, так і під Unix."

#: ../../whatsnew/2.3.rst:1990
msgid ""
"The ``SET_LINENO`` opcode has been removed.  Back in the mists of time, this"
" opcode was needed to produce line numbers in tracebacks and support trace "
"functions (for, e.g., :mod:`pdb`). Since Python 1.5, the line numbers in "
"tracebacks have been computed using a different mechanism that works with "
"\"python -O\".  For Python 2.3 Michael Hudson implemented a similar scheme "
"to determine when to call the trace function, removing the need for "
"``SET_LINENO`` entirely."
msgstr ""
"Код операції ``SET_LINENO`` видалено. У давнину цей код операції був "
"потрібний для створення номерів рядків у відстеженнях і підтримки функцій "
"відстеження (наприклад, для :mod:`pdb`). Починаючи з Python 1.5, номери "
"рядків у трасуваннях обчислюються за допомогою іншого механізму, який працює"
" з \"python -O\". Для Python 2.3 Майкл Хадсон реалізував подібну схему, щоб "
"визначити, коли викликати функцію трасування, повністю усунувши потребу в "
"``SET_LINENO``."

#: ../../whatsnew/2.3.rst:1998
msgid ""
"It would be difficult to detect any resulting difference from Python code, "
"apart from a slight speed up when Python is run without :option:`-O`."
msgstr ""
"Було б важко виявити будь-яку результуючу відмінність від коду Python, окрім"
" невеликого прискорення, коли Python запускається без :option:`-O`."

#: ../../whatsnew/2.3.rst:2001
msgid ""
"C extensions that access the :attr:`~frame.f_lineno` field of frame objects "
"should instead call ``PyCode_Addr2Line(f->f_code, f->f_lasti)``. This will "
"have the added effect of making the code work as desired under \"python -O\""
" in earlier versions of Python."
msgstr ""

#: ../../whatsnew/2.3.rst:2006
msgid ""
"A nifty new feature is that trace functions can now assign to the "
":attr:`~frame.f_lineno` attribute of frame objects, changing the line that "
"will be executed next.  A ``jump`` command has been added to the :mod:`pdb` "
"debugger taking advantage of this new feature. (Implemented by Richie "
"Hindle.)"
msgstr ""

#: ../../whatsnew/2.3.rst:2015
msgid "Porting to Python 2.3"
msgstr "Перенесення на Python 2.3"

#: ../../whatsnew/2.3.rst:2017
msgid ""
"This section lists previously described changes that may require changes to "
"your code:"
msgstr ""
"У цьому розділі перераховано описані раніше зміни, які можуть потребувати "
"змін у вашому коді:"

#: ../../whatsnew/2.3.rst:2020
msgid ""
":keyword:`yield` is now always a keyword; if it's used as a variable name in"
" your code, a different name must be chosen."
msgstr ""
":keyword:`yield` тепер завжди є ключовим словом; якщо воно використовується "
"як ім’я змінної у вашому коді, потрібно вибрати інше ім’я."

#: ../../whatsnew/2.3.rst:2023
msgid ""
"For strings *X* and *Y*, ``X in Y`` now works if *X* is more than one "
"character long."
msgstr ""
"Для рядків *X* і *Y* \"X в Y\" тепер працює, якщо *X* містить більше одного "
"символу."

#: ../../whatsnew/2.3.rst:2026
msgid ""
"The :func:`int` type constructor will now return a long integer instead of "
"raising an :exc:`OverflowError` when a string or floating-point number is "
"too large to fit into an integer."
msgstr ""
"Конструктор типу :func:`int` тепер повертатиме довге ціле число замість "
"того, щоб викликати :exc:`OverflowError`, коли рядок або число з плаваючою "
"комою занадто велике, щоб поміститися в ціле число."

#: ../../whatsnew/2.3.rst:2030
msgid ""
"If you have Unicode strings that contain 8-bit characters, you must declare "
"the file's encoding (UTF-8, Latin-1, or whatever) by adding a comment to the"
" top of the file.  See section :ref:`section-encodings` for more "
"information."
msgstr ""
"Якщо у вас є рядки Unicode, які містять 8-бітові символи, ви повинні "
"оголосити кодування файлу (UTF-8, Latin-1 або інше), додавши коментар у "
"верхній частині файлу. Перегляньте розділ :ref:`section-encodings` для "
"отримання додаткової інформації."

#: ../../whatsnew/2.3.rst:2034
msgid ""
"Calling Tcl methods through :mod:`!_tkinter` no longer  returns only "
"strings. Instead, if Tcl returns other objects those objects are converted "
"to their Python equivalent, if one exists, or wrapped with a "
":class:`!_tkinter.Tcl_Obj` object if no Python equivalent exists."
msgstr ""

#: ../../whatsnew/2.3.rst:2039
msgid ""
"Large octal and hex literals such as ``0xffffffff`` now trigger a "
":exc:`FutureWarning`. Currently they're stored as 32-bit numbers and result "
"in a negative value, but in Python 2.4 they'll become positive long "
"integers."
msgstr ""
"Великі вісімкові та шістнадцяткові літерали, такі як ``0xffffffff``, тепер "
"викликають :exc:`FutureWarning`. Наразі вони зберігаються як 32-розрядні "
"числа та отримують від’ємне значення, але в Python 2.4 вони стануть "
"додатними довгими цілими числами."

#: ../../whatsnew/2.3.rst:2043
msgid ""
"There are a few ways to fix this warning.  If you really need a positive "
"number, just add an ``L`` to the end of the literal.  If you're trying to "
"get a 32-bit integer with low bits set and have previously used an "
"expression such as ``~(1 << 31)``, it's probably clearest to start with all "
"bits set and clear the desired upper bits. For example, to clear just the "
"top bit (bit 31), you could write ``0xffffffffL &~(1L<<31)``."
msgstr ""
"Є кілька способів виправити це попередження. Якщо вам справді потрібне "
"позитивне число, просто додайте ``L`` до кінця літералу. Якщо ви намагаєтеся"
" отримати 32-розрядне ціле число з установленими молодшими бітами і раніше "
"використовували такий вираз, як ``~(1 << 31)``, ймовірно, найзрозуміліше "
"почати з усіма встановленими бітами та очистити потрібний верхній біти. "
"Наприклад, щоб очистити лише верхній біт (біт 31), ви можете написати "
"``0xffffffffL &~(1L<<31)``."

#: ../../whatsnew/2.3.rst:2050
msgid "You can no longer disable assertions by assigning to ``__debug__``."
msgstr "Ви більше не можете вимкнути твердження, призначивши ``__debug__``."

#: ../../whatsnew/2.3.rst:2052
msgid ""
"The Distutils :func:`!setup` function has gained various new keyword "
"arguments such as *depends*.  Old versions of the Distutils will abort if "
"passed unknown keywords.  A solution is to check for the presence of the new"
" :func:`!get_distutil_options` function in your :file:`setup.py` and only "
"uses the new keywords with a version of the Distutils that supports them::"
msgstr ""

#: ../../whatsnew/2.3.rst:2058
msgid ""
"from distutils import core\n"
"\n"
"kw = {'sources': 'foo.c', ...}\n"
"if hasattr(core, 'get_distutil_options'):\n"
"    kw['depends'] = ['foo.h']\n"
"ext = Extension(**kw)"
msgstr ""

#: ../../whatsnew/2.3.rst:2065
msgid ""
"Using ``None`` as a variable name will now result in a :exc:`SyntaxWarning` "
"warning."
msgstr ""
"Використання ``None`` як назви змінної тепер призведе до попередження "
":exc:`SyntaxWarning`."

#: ../../whatsnew/2.3.rst:2068
msgid ""
"Names of extension types defined by the modules included with Python now "
"contain the module and a ``'.'`` in front of the type name."
msgstr ""
"Назви типів розширень, визначені модулями, що входять до Python, тепер "
"містять модуль і ``'.'`` перед назвою типу."

#: ../../whatsnew/2.3.rst:2077
msgid "Acknowledgements"
msgstr "Подяки"

#: ../../whatsnew/2.3.rst:2079
msgid ""
"The author would like to thank the following people for offering "
"suggestions, corrections and assistance with various drafts of this article:"
" Jeff Bauer, Simon Brunning, Brett Cannon, Michael Chermside, Andrew Dalke, "
"Scott David Daniels, Fred L. Drake, Jr., David Fraser,  Kelly Gerber, "
"Raymond Hettinger, Michael Hudson, Chris Lambert, Detlef Lannert, Martin von"
" Löwis, Andrew MacIntyre, Lalo Martins, Chad Netzer, Gustavo Niemeyer, Neal "
"Norwitz, Hans Nowak, Chris Reedy, Francesco Ricciardi, Vinay Sajip, Neil "
"Schemenauer, Roman Suzi, Jason Tishler, Just van Rossum."
msgstr ""
"Автор хотів би подякувати наступним людям за пропозиції, виправлення та "
"допомогу з різними чернетками цієї статті: Джефф Бауер, Саймон Бруннінг, "
"Бретт Кеннон, Майкл Чермсайд, Ендрю Далк, Скотт Девід Деніелс, Фред Л. Дрейк"
" молодший, Девід Фрейзер, Келлі Гербер, Реймонд Геттінгер, Майкл Хадсон, "
"Кріс Ламберт, Детлеф Ланнерт, Мартін фон Левіс, Ендрю Макінтайр, Лало "
"Мартінс, Чад Нетцер, Густаво Німейєр, Ніл Норвіц, Ханс Новак, Кріс Ріді, "
"Франческо Ріккарді, Віней Саджип, Ніл Шеменауер, Роман Сузі, Джейсон Тішлер,"
" Юст ван Россум."

#: ../../whatsnew/2.3.rst:371
msgid "universal newlines"
msgstr "універсальні символи нового рядка"

#: ../../whatsnew/2.3.rst:371
msgid "What's new"
msgstr ""
