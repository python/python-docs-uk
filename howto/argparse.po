# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Dmytro Kazanzhy, 2022
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-11-22 14:17+0000\n"
"PO-Revision-Date: 2021-06-28 00:52+0000\n"
"Last-Translator: Dmytro Kazanzhy, 2022\n"
"Language-Team: Ukrainian (https://app.transifex.com/python-doc/teams/5390/uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != 11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % 100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || (n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

#: ../../howto/argparse.rst:5
msgid "Argparse Tutorial"
msgstr "Підручник Argparse"

#: ../../howto/argparse.rst:0
msgid "author"
msgstr "автор"

#: ../../howto/argparse.rst:7
msgid "Tshepang Mbambo"
msgstr ""

#: ../../howto/argparse.rst:11
msgid ""
"This tutorial is intended to be a gentle introduction to :mod:`argparse`, "
"the recommended command-line parsing module in the Python standard library."
msgstr ""
"Цей підручник призначений для ознайомлення з :mod:`argparse`, рекомендованим"
" модулем аналізу командного рядка в стандартній бібліотеці Python."

#: ../../howto/argparse.rst:16
msgid ""
"There are two other modules that fulfill the same task, namely :mod:`getopt`"
" (an equivalent for ``getopt()`` from the C language) and the deprecated "
":mod:`optparse`. Note also that :mod:`argparse` is based on :mod:`optparse`,"
" and therefore very similar in terms of usage."
msgstr ""

#: ../../howto/argparse.rst:24
msgid "Concepts"
msgstr "Концепції"

#: ../../howto/argparse.rst:26
msgid ""
"Let's show the sort of functionality that we are going to explore in this "
"introductory tutorial by making use of the :command:`ls` command:"
msgstr ""
"Давайте покажемо тип функціональності, який ми збираємося досліджувати в "
"цьому вступному посібнику, використовуючи команду :command:`ls`:"

#: ../../howto/argparse.rst:29
msgid ""
"$ ls\n"
"cpython  devguide  prog.py  pypy  rm-unused-function.patch\n"
"$ ls pypy\n"
"ctypes_configure  demo  dotviewer  include  lib_pypy  lib-python ...\n"
"$ ls -l\n"
"total 20\n"
"drwxr-xr-x 19 wena wena 4096 Feb 18 18:51 cpython\n"
"drwxr-xr-x  4 wena wena 4096 Feb  8 12:04 devguide\n"
"-rwxr-xr-x  1 wena wena  535 Feb 19 00:05 prog.py\n"
"drwxr-xr-x 14 wena wena 4096 Feb  7 00:59 pypy\n"
"-rw-r--r--  1 wena wena  741 Feb 18 01:01 rm-unused-function.patch\n"
"$ ls --help\n"
"Usage: ls [OPTION]... [FILE]...\n"
"List information about the FILEs (the current directory by default).\n"
"Sort entries alphabetically if none of -cftuvSUX nor --sort is specified.\n"
"..."
msgstr ""

#: ../../howto/argparse.rst:48
msgid "A few concepts we can learn from the four commands:"
msgstr "Кілька понять, які ми можемо вивчити з чотирьох команд:"

#: ../../howto/argparse.rst:50
msgid ""
"The :command:`ls` command is useful when run without any options at all. It "
"defaults to displaying the contents of the current directory."
msgstr ""
"Команда :command:`ls` корисна, якщо її запускати без жодних опцій. За "
"замовчуванням відображається вміст поточного каталогу."

#: ../../howto/argparse.rst:53
msgid ""
"If we want beyond what it provides by default, we tell it a bit more. In "
"this case, we want it to display a different directory, ``pypy``. What we "
"did is specify what is known as a positional argument. It's named so because"
" the program should know what to do with the value, solely based on where it"
" appears on the command line. This concept is more relevant to a command "
"like :command:`cp`, whose most basic usage is ``cp SRC DEST``. The first "
"position is *what you want copied,* and the second position is *where you "
"want it copied to*."
msgstr ""
"Якщо ми хочемо вийти за межі того, що він надає за замовчуванням, ми "
"розповідаємо про це трохи більше. У цьому випадку ми хочемо, щоб він "
"відображав інший каталог, ``pypy``. Ми вказали так званий позиційний "
"аргумент. Це названо так, тому що програма повинна знати, що робити зі "
"значенням, виключно на основі того, де воно з’являється в командному рядку. "
"Ця концепція більш актуальна для такої команди, як :command:`cp`, основним "
"використанням якої є ``cp SRC DEST``. Перша позиція — це *те, що ви хочете "
"скопіювати*, а друга позиція — це *куди ви хочете це скопіювати*."

#: ../../howto/argparse.rst:62
msgid ""
"Now, say we want to change behaviour of the program. In our example, we "
"display more info for each file instead of just showing the file names. The "
"``-l`` in that case is known as an optional argument."
msgstr ""
"Тепер, скажімо, ми хочемо змінити поведінку програми. У нашому прикладі ми "
"показуємо більше інформації для кожного файлу, а не просто показуємо імена "
"файлів. ``-l`` у цьому випадку відомий як необов'язковий аргумент."

#: ../../howto/argparse.rst:66
msgid ""
"That's a snippet of the help text. It's very useful in that you can come "
"across a program you have never used before, and can figure out how it works"
" simply by reading its help text."
msgstr ""
"Це фрагмент довідкового тексту. Це дуже корисно, оскільки ви можете "
"натрапити на програму, якою ніколи раніше не користувалися, і зрозуміти, як "
"вона працює, просто прочитавши довідковий текст."

#: ../../howto/argparse.rst:72
msgid "The basics"
msgstr "Основи"

#: ../../howto/argparse.rst:74
msgid "Let us start with a very simple example which does (almost) nothing::"
msgstr "Почнемо з дуже простого прикладу, який (майже) нічого не робить:"

#: ../../howto/argparse.rst:76
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.parse_args()"
msgstr ""

#: ../../howto/argparse.rst:80 ../../howto/argparse.rst:188
#: ../../howto/argparse.rst:209
msgid "Following is a result of running the code:"
msgstr "Нижче наведено результат виконання коду:"

#: ../../howto/argparse.rst:82
msgid ""
"$ python prog.py\n"
"$ python prog.py --help\n"
"usage: prog.py [-h]\n"
"\n"
"options:\n"
"  -h, --help  show this help message and exit\n"
"$ python prog.py --verbose\n"
"usage: prog.py [-h]\n"
"prog.py: error: unrecognized arguments: --verbose\n"
"$ python prog.py foo\n"
"usage: prog.py [-h]\n"
"prog.py: error: unrecognized arguments: foo"
msgstr ""

#: ../../howto/argparse.rst:97 ../../howto/argparse.rst:254
#: ../../howto/argparse.rst:298
msgid "Here is what is happening:"
msgstr "Ось що відбувається:"

#: ../../howto/argparse.rst:99
msgid ""
"Running the script without any options results in nothing displayed to "
"stdout. Not so useful."
msgstr ""
"Запуск сценарію без будь-яких параметрів призводить до того, що стандартний "
"вивід нічого не відображає. Не дуже корисно."

#: ../../howto/argparse.rst:102
msgid ""
"The second one starts to display the usefulness of the :mod:`argparse` "
"module. We have done almost nothing, but already we get a nice help message."
msgstr ""
"Другий починає відображати корисність модуля :mod:`argparse`. Ми майже "
"нічого не зробили, але вже отримуємо гарне довідкове повідомлення."

#: ../../howto/argparse.rst:105
msgid ""
"The ``--help`` option, which can also be shortened to ``-h``, is the only "
"option we get for free (i.e. no need to specify it). Specifying anything "
"else results in an error. But even then, we do get a useful usage message, "
"also for free."
msgstr ""
"Опція ``--help``, яку також можна скоротити до ``-h``, є єдиною опцією, яку "
"ми отримуємо безкоштовно (тобто її не потрібно вказувати). Вказівка будь-"
"чого іншого призводить до помилки. Але навіть тоді ми отримуємо корисне "
"повідомлення про використання, також безкоштовно."

#: ../../howto/argparse.rst:112
msgid "Introducing Positional arguments"
msgstr "Представлення позиційних аргументів"

#: ../../howto/argparse.rst:114
msgid "An example::"
msgstr "Приклад::"

#: ../../howto/argparse.rst:116
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"echo\")\n"
"args = parser.parse_args()\n"
"print(args.echo)"
msgstr ""

#: ../../howto/argparse.rst:122
msgid "And running the code:"
msgstr "І запуск коду:"

#: ../../howto/argparse.rst:124
msgid ""
"$ python prog.py\n"
"usage: prog.py [-h] echo\n"
"prog.py: error: the following arguments are required: echo\n"
"$ python prog.py --help\n"
"usage: prog.py [-h] echo\n"
"\n"
"positional arguments:\n"
"  echo\n"
"\n"
"options:\n"
"  -h, --help  show this help message and exit\n"
"$ python prog.py foo\n"
"foo"
msgstr ""

#: ../../howto/argparse.rst:140
msgid "Here is what's happening:"
msgstr "Ось що відбувається:"

#: ../../howto/argparse.rst:142
msgid ""
"We've added the :meth:`~ArgumentParser.add_argument` method, which is what "
"we use to specify which command-line options the program is willing to "
"accept. In this case, I've named it ``echo`` so that it's in line with its "
"function."
msgstr ""

#: ../../howto/argparse.rst:146
msgid "Calling our program now requires us to specify an option."
msgstr "Для виклику нашої програми тепер потрібно вказати опцію."

#: ../../howto/argparse.rst:148
msgid ""
"The :meth:`~ArgumentParser.parse_args` method actually returns some data "
"from the options specified, in this case, ``echo``."
msgstr ""

#: ../../howto/argparse.rst:151
msgid ""
"The variable is some form of 'magic' that :mod:`argparse` performs for free "
"(i.e. no need to specify which variable that value is stored in). You will "
"also notice that its name matches the string argument given to the method, "
"``echo``."
msgstr ""
"Змінна є певною формою \"магії\", яку :mod:`argparse` виконує безкоштовно "
"(тобто не потрібно вказувати, у якій змінній це значення зберігається). Ви "
"також помітите, що його назва відповідає рядковому аргументу, наданому "
"методу, ``echo``."

#: ../../howto/argparse.rst:156
msgid ""
"Note however that, although the help display looks nice and all, it "
"currently is not as helpful as it can be. For example we see that we got "
"``echo`` as a positional argument, but we don't know what it does, other "
"than by guessing or by reading the source code. So, let's make it a bit more"
" useful::"
msgstr ""
"Зауважте, однак, що, незважаючи на те, що екран довідки виглядає гарно і все"
" таке, наразі він не такий корисний, як міг би бути. Наприклад, ми бачимо, "
"що ми отримали ``echo`` як позиційний аргумент, але ми не знаємо, що він "
"робить, окрім здогадок або читання вихідного коду. Отже, давайте зробимо це "
"трохи кориснішим::"

#: ../../howto/argparse.rst:161
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"echo\", help=\"echo the string you use here\")\n"
"args = parser.parse_args()\n"
"print(args.echo)"
msgstr ""

#: ../../howto/argparse.rst:167
msgid "And we get:"
msgstr "І отримуємо:"

#: ../../howto/argparse.rst:169
msgid ""
"$ python prog.py -h\n"
"usage: prog.py [-h] echo\n"
"\n"
"positional arguments:\n"
"  echo        echo the string you use here\n"
"\n"
"options:\n"
"  -h, --help  show this help message and exit"
msgstr ""

#: ../../howto/argparse.rst:180
msgid "Now, how about doing something even more useful::"
msgstr "А тепер як щодо того, щоб зробити щось ще корисніше:"

#: ../../howto/argparse.rst:182
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"square\", help=\"display a square of a given number\")\n"
"args = parser.parse_args()\n"
"print(args.square**2)"
msgstr ""

#: ../../howto/argparse.rst:190
msgid ""
"$ python prog.py 4\n"
"Traceback (most recent call last):\n"
"  File \"prog.py\", line 5, in <module>\n"
"    print(args.square**2)\n"
"TypeError: unsupported operand type(s) for ** or pow(): 'str' and 'int'"
msgstr ""

#: ../../howto/argparse.rst:198
msgid ""
"That didn't go so well. That's because :mod:`argparse` treats the options we"
" give it as strings, unless we tell it otherwise. So, let's tell "
":mod:`argparse` to treat that input as an integer::"
msgstr ""
"Це пішло не так добре. Це тому, що :mod:`argparse` розглядає надані нами "
"параметри як рядки, якщо ми не вкажемо інше. Отже, давайте скажемо "
":mod:`argparse` розглядати цей вхід як ціле число::"

#: ../../howto/argparse.rst:202
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"square\", help=\"display a square of a given number\",\n"
"                    type=int)\n"
"args = parser.parse_args()\n"
"print(args.square**2)"
msgstr ""

#: ../../howto/argparse.rst:211
msgid ""
"$ python prog.py 4\n"
"16\n"
"$ python prog.py four\n"
"usage: prog.py [-h] square\n"
"prog.py: error: argument square: invalid int value: 'four'"
msgstr ""

#: ../../howto/argparse.rst:219
msgid ""
"That went well. The program now even helpfully quits on bad illegal input "
"before proceeding."
msgstr ""
"Це пройшло добре. Програма тепер навіть допомагає завершити роботу, якщо "
"неправильно введено неправильні дані, перш ніж продовжити."

#: ../../howto/argparse.rst:224
msgid "Introducing Optional arguments"
msgstr "Представляємо додаткові аргументи"

#: ../../howto/argparse.rst:226
msgid ""
"So far we have been playing with positional arguments. Let us have a look on"
" how to add optional ones::"
msgstr ""
"Досі ми гралися з позиційними аргументами. Давайте розглянемо, як додати "
"необов'язкові:"

#: ../../howto/argparse.rst:229
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"--verbosity\", help=\"increase output verbosity\")\n"
"args = parser.parse_args()\n"
"if args.verbosity:\n"
"    print(\"verbosity turned on\")"
msgstr ""

#: ../../howto/argparse.rst:236 ../../howto/argparse.rst:282
#: ../../howto/argparse.rst:398 ../../howto/argparse.rst:432
msgid "And the output:"
msgstr "І вихід:"

#: ../../howto/argparse.rst:238
msgid ""
"$ python prog.py --verbosity 1\n"
"verbosity turned on\n"
"$ python prog.py\n"
"$ python prog.py --help\n"
"usage: prog.py [-h] [--verbosity VERBOSITY]\n"
"\n"
"options:\n"
"  -h, --help            show this help message and exit\n"
"  --verbosity VERBOSITY\n"
"                        increase output verbosity\n"
"$ python prog.py --verbosity\n"
"usage: prog.py [-h] [--verbosity VERBOSITY]\n"
"prog.py: error: argument --verbosity: expected one argument"
msgstr ""

#: ../../howto/argparse.rst:256
msgid ""
"The program is written so as to display something when ``--verbosity`` is "
"specified and display nothing when not."
msgstr ""
"Програма написана таким чином, щоб щось відображати, коли вказано "
"``--verbosity``, і нічого не відображати, якщо ні."

#: ../../howto/argparse.rst:259
msgid ""
"To show that the option is actually optional, there is no error when running"
" the program without it. Note that by default, if an optional argument isn't"
" used, the relevant variable, in this case ``args.verbosity``, is given "
"``None`` as a value, which is the reason it fails the truth test of the "
":keyword:`if` statement."
msgstr ""

#: ../../howto/argparse.rst:265
msgid "The help message is a bit different."
msgstr "Довідкове повідомлення дещо інше."

#: ../../howto/argparse.rst:267
msgid ""
"When using the ``--verbosity`` option, one must also specify some value, any"
" value."
msgstr ""
"При використанні опції ``--verbosity`` необхідно також вказати певне "
"значення, будь-яке значення."

#: ../../howto/argparse.rst:270
msgid ""
"The above example accepts arbitrary integer values for ``--verbosity``, but "
"for our simple program, only two values are actually useful, ``True`` or "
"``False``. Let's modify the code accordingly::"
msgstr ""
"Наведений вище приклад приймає довільні цілі значення для ``--verbosity``, "
"але для нашої простої програми насправді корисними є лише два значення, "
"``True`` або ``False``. Давайте відповідно змінимо код::"

#: ../../howto/argparse.rst:274
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"--verbose\", help=\"increase output verbosity\",\n"
"                    action=\"store_true\")\n"
"args = parser.parse_args()\n"
"if args.verbose:\n"
"    print(\"verbosity turned on\")"
msgstr ""

#: ../../howto/argparse.rst:284
msgid ""
"$ python prog.py --verbose\n"
"verbosity turned on\n"
"$ python prog.py --verbose 1\n"
"usage: prog.py [-h] [--verbose]\n"
"prog.py: error: unrecognized arguments: 1\n"
"$ python prog.py --help\n"
"usage: prog.py [-h] [--verbose]\n"
"\n"
"options:\n"
"  -h, --help  show this help message and exit\n"
"  --verbose   increase output verbosity"
msgstr ""

#: ../../howto/argparse.rst:300
msgid ""
"The option is now more of a flag than something that requires a value. We "
"even changed the name of the option to match that idea. Note that we now "
"specify a new keyword, ``action``, and give it the value ``\"store_true\"``."
" This means that, if the option is specified, assign the value ``True`` to "
"``args.verbose``. Not specifying it implies ``False``."
msgstr ""

#: ../../howto/argparse.rst:307
msgid ""
"It complains when you specify a value, in true spirit of what flags actually"
" are."
msgstr ""
"Він скаржиться, коли ви вказуєте значення, у справжньому дусі того, чим "
"насправді є прапори."

#: ../../howto/argparse.rst:310
msgid "Notice the different help text."
msgstr "Зверніть увагу на інший текст довідки."

#: ../../howto/argparse.rst:314
msgid "Short options"
msgstr "Короткі варіанти"

#: ../../howto/argparse.rst:316
msgid ""
"If you are familiar with command line usage, you will notice that I haven't "
"yet touched on the topic of short versions of the options. It's quite "
"simple::"
msgstr ""
"Якщо ви знайомі з використанням командного рядка, ви помітите, що я ще не "
"торкався теми коротких версій параметрів. Це досить просто::"

#: ../../howto/argparse.rst:320
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"-v\", \"--verbose\", help=\"increase output verbosity\",\n"
"                    action=\"store_true\")\n"
"args = parser.parse_args()\n"
"if args.verbose:\n"
"    print(\"verbosity turned on\")"
msgstr ""

#: ../../howto/argparse.rst:328
msgid "And here goes:"
msgstr "І ось:"

#: ../../howto/argparse.rst:330
msgid ""
"$ python prog.py -v\n"
"verbosity turned on\n"
"$ python prog.py --help\n"
"usage: prog.py [-h] [-v]\n"
"\n"
"options:\n"
"  -h, --help     show this help message and exit\n"
"  -v, --verbose  increase output verbosity"
msgstr ""

#: ../../howto/argparse.rst:341
msgid "Note that the new ability is also reflected in the help text."
msgstr ""
"Зверніть увагу, що нова здатність також відображається в тексті довідки."

#: ../../howto/argparse.rst:345
msgid "Combining Positional and Optional arguments"
msgstr "Поєднання позиційних і необов’язкових аргументів"

#: ../../howto/argparse.rst:347
msgid "Our program keeps growing in complexity::"
msgstr "Наша програма постійно ускладнюється:"

#: ../../howto/argparse.rst:349
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"square\", type=int,\n"
"                    help=\"display a square of a given number\")\n"
"parser.add_argument(\"-v\", \"--verbose\", action=\"store_true\",\n"
"                    help=\"increase output verbosity\")\n"
"args = parser.parse_args()\n"
"answer = args.square**2\n"
"if args.verbose:\n"
"    print(f\"the square of {args.square} equals {answer}\")\n"
"else:\n"
"    print(answer)"
msgstr ""

#: ../../howto/argparse.rst:362
msgid "And now the output:"
msgstr "А тепер вихід:"

#: ../../howto/argparse.rst:364
msgid ""
"$ python prog.py\n"
"usage: prog.py [-h] [-v] square\n"
"prog.py: error: the following arguments are required: square\n"
"$ python prog.py 4\n"
"16\n"
"$ python prog.py 4 --verbose\n"
"the square of 4 equals 16\n"
"$ python prog.py --verbose 4\n"
"the square of 4 equals 16"
msgstr ""

#: ../../howto/argparse.rst:376
msgid "We've brought back a positional argument, hence the complaint."
msgstr "Ми повернули позиційний аргумент, тому скарга."

#: ../../howto/argparse.rst:378
msgid "Note that the order does not matter."
msgstr "Зауважте, що порядок не має значення."

#: ../../howto/argparse.rst:380
msgid ""
"How about we give this program of ours back the ability to have multiple "
"verbosity values, and actually get to use them::"
msgstr ""
"Як щодо того, щоб ми повернули цій нашій програмі можливість мати кілька "
"значень докладності та фактично отримати їх використання:"

#: ../../howto/argparse.rst:383
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"square\", type=int,\n"
"                    help=\"display a square of a given number\")\n"
"parser.add_argument(\"-v\", \"--verbosity\", type=int,\n"
"                    help=\"increase output verbosity\")\n"
"args = parser.parse_args()\n"
"answer = args.square**2\n"
"if args.verbosity == 2:\n"
"    print(f\"the square of {args.square} equals {answer}\")\n"
"elif args.verbosity == 1:\n"
"    print(f\"{args.square}^2 == {answer}\")\n"
"else:\n"
"    print(answer)"
msgstr ""

#: ../../howto/argparse.rst:400
msgid ""
"$ python prog.py 4\n"
"16\n"
"$ python prog.py 4 -v\n"
"usage: prog.py [-h] [-v VERBOSITY] square\n"
"prog.py: error: argument -v/--verbosity: expected one argument\n"
"$ python prog.py 4 -v 1\n"
"4^2 == 16\n"
"$ python prog.py 4 -v 2\n"
"the square of 4 equals 16\n"
"$ python prog.py 4 -v 3\n"
"16"
msgstr ""

#: ../../howto/argparse.rst:414
msgid ""
"These all look good except the last one, which exposes a bug in our program."
" Let's fix it by restricting the values the ``--verbosity`` option can "
"accept::"
msgstr ""
"Усі вони виглядають добре, крім останнього, який виявляє помилку в нашій "
"програмі. Давайте виправимо це, обмеживши значення, які може приймати "
"параметр ``--verbosity``:"

#: ../../howto/argparse.rst:417
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"square\", type=int,\n"
"                    help=\"display a square of a given number\")\n"
"parser.add_argument(\"-v\", \"--verbosity\", type=int, choices=[0, 1, 2],\n"
"                    help=\"increase output verbosity\")\n"
"args = parser.parse_args()\n"
"answer = args.square**2\n"
"if args.verbosity == 2:\n"
"    print(f\"the square of {args.square} equals {answer}\")\n"
"elif args.verbosity == 1:\n"
"    print(f\"{args.square}^2 == {answer}\")\n"
"else:\n"
"    print(answer)"
msgstr ""

#: ../../howto/argparse.rst:434
msgid ""
"$ python prog.py 4 -v 3\n"
"usage: prog.py [-h] [-v {0,1,2}] square\n"
"prog.py: error: argument -v/--verbosity: invalid choice: 3 (choose from 0, 1, 2)\n"
"$ python prog.py 4 -h\n"
"usage: prog.py [-h] [-v {0,1,2}] square\n"
"\n"
"positional arguments:\n"
"  square                display a square of a given number\n"
"\n"
"options:\n"
"  -h, --help            show this help message and exit\n"
"  -v, --verbosity {0,1,2}\n"
"                        increase output verbosity"
msgstr ""

#: ../../howto/argparse.rst:450
msgid ""
"Note that the change also reflects both in the error message as well as the "
"help string."
msgstr ""
"Зауважте, що зміна також відображається як у повідомленні про помилку, так і"
" в рядку довідки."

#: ../../howto/argparse.rst:453
msgid ""
"Now, let's use a different approach of playing with verbosity, which is "
"pretty common. It also matches the way the CPython executable handles its "
"own verbosity argument (check the output of ``python --help``)::"
msgstr ""
"Тепер давайте використаємо інший підхід гри з багатослівністю, який є досить"
" поширеним. Це також відповідає тому, як виконуваний файл CPython обробляє "
"власний аргумент багатослівності (перевірте вихід ``python --help``)::"

#: ../../howto/argparse.rst:457
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"square\", type=int,\n"
"                    help=\"display the square of a given number\")\n"
"parser.add_argument(\"-v\", \"--verbosity\", action=\"count\",\n"
"                    help=\"increase output verbosity\")\n"
"args = parser.parse_args()\n"
"answer = args.square**2\n"
"if args.verbosity == 2:\n"
"    print(f\"the square of {args.square} equals {answer}\")\n"
"elif args.verbosity == 1:\n"
"    print(f\"{args.square}^2 == {answer}\")\n"
"else:\n"
"    print(answer)"
msgstr ""

#: ../../howto/argparse.rst:472
msgid ""
"We have introduced another action, \"count\", to count the number of "
"occurrences of specific options."
msgstr ""
"Ми запровадили ще одну дію, \"підрахунок\", щоб підрахувати кількість "
"повторень певних параметрів."

#: ../../howto/argparse.rst:476
msgid ""
"$ python prog.py 4\n"
"16\n"
"$ python prog.py 4 -v\n"
"4^2 == 16\n"
"$ python prog.py 4 -vv\n"
"the square of 4 equals 16\n"
"$ python prog.py 4 --verbosity --verbosity\n"
"the square of 4 equals 16\n"
"$ python prog.py 4 -v 1\n"
"usage: prog.py [-h] [-v] square\n"
"prog.py: error: unrecognized arguments: 1\n"
"$ python prog.py 4 -h\n"
"usage: prog.py [-h] [-v] square\n"
"\n"
"positional arguments:\n"
"  square           display a square of a given number\n"
"\n"
"options:\n"
"  -h, --help       show this help message and exit\n"
"  -v, --verbosity  increase output verbosity\n"
"$ python prog.py 4 -vvv\n"
"16"
msgstr ""

#: ../../howto/argparse.rst:501
msgid ""
"Yes, it's now more of a flag (similar to ``action=\"store_true\"``) in the "
"previous version of our script. That should explain the complaint."
msgstr ""
"Так, тепер це більше позначка (схожа на ``action=\"store_true\"``) у "
"попередній версії нашого сценарію. Це має пояснити скаргу."

#: ../../howto/argparse.rst:504
msgid "It also behaves similar to \"store_true\" action."
msgstr "Він також поводиться подібно до дії \"store_true\"."

#: ../../howto/argparse.rst:506
msgid ""
"Now here's a demonstration of what the \"count\" action gives. You've "
"probably seen this sort of usage before."
msgstr ""
"Тепер ось демонстрація того, що дає дія \"підрахунок\". Ви, напевно, бачили "
"таке використання раніше."

#: ../../howto/argparse.rst:509
msgid ""
"And if you don't specify the ``-v`` flag, that flag is considered to have "
"``None`` value."
msgstr ""
"І якщо ви не вкажете прапорець ``-v``, цей прапорець вважатиметься таким, що"
" має значення ``None``."

#: ../../howto/argparse.rst:512
msgid ""
"As should be expected, specifying the long form of the flag, we should get "
"the same output."
msgstr ""
"Як і слід було очікувати, вказавши довгу форму прапора, ми повинні отримати "
"той самий результат."

#: ../../howto/argparse.rst:515
msgid ""
"Sadly, our help output isn't very informative on the new ability our script "
"has acquired, but that can always be fixed by improving the documentation "
"for our script (e.g. via the ``help`` keyword argument)."
msgstr ""
"На жаль, результати нашої довідки не надто інформативні щодо нових "
"можливостей, які отримав наш сценарій, але це завжди можна виправити, "
"покращивши документацію для нашого сценарію (наприклад, за допомогою "
"аргументу ключового слова ``help``)."

#: ../../howto/argparse.rst:519
msgid "That last output exposes a bug in our program."
msgstr "Цей останній вихід виявляє помилку в нашій програмі."

#: ../../howto/argparse.rst:522
msgid "Let's fix::"
msgstr "Виправимо::"

#: ../../howto/argparse.rst:524
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"square\", type=int,\n"
"                    help=\"display a square of a given number\")\n"
"parser.add_argument(\"-v\", \"--verbosity\", action=\"count\",\n"
"                    help=\"increase output verbosity\")\n"
"args = parser.parse_args()\n"
"answer = args.square**2\n"
"\n"
"# bugfix: replace == with >=\n"
"if args.verbosity >= 2:\n"
"    print(f\"the square of {args.square} equals {answer}\")\n"
"elif args.verbosity >= 1:\n"
"    print(f\"{args.square}^2 == {answer}\")\n"
"else:\n"
"    print(answer)"
msgstr ""

#: ../../howto/argparse.rst:541
msgid "And this is what it gives:"
msgstr "І ось що це дає:"

#: ../../howto/argparse.rst:543
msgid ""
"$ python prog.py 4 -vvv\n"
"the square of 4 equals 16\n"
"$ python prog.py 4 -vvvv\n"
"the square of 4 equals 16\n"
"$ python prog.py 4\n"
"Traceback (most recent call last):\n"
"  File \"prog.py\", line 11, in <module>\n"
"    if args.verbosity >= 2:\n"
"TypeError: '>=' not supported between instances of 'NoneType' and 'int'"
msgstr ""

#: ../../howto/argparse.rst:556
msgid ""
"First output went well, and fixes the bug we had before. That is, we want "
"any value >= 2 to be as verbose as possible."
msgstr ""
"Перший вихід пройшов добре та виправляє помилку, яку ми мали раніше. Тобто "
"ми хочемо, щоб будь-яке значення >= 2 було якомога детальнішим."

#: ../../howto/argparse.rst:559
msgid "Third output not so good."
msgstr "Третій вихід не дуже хороший."

#: ../../howto/argparse.rst:561
msgid "Let's fix that bug::"
msgstr "Давайте виправимо цю помилку::"

#: ../../howto/argparse.rst:563
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"square\", type=int,\n"
"                    help=\"display a square of a given number\")\n"
"parser.add_argument(\"-v\", \"--verbosity\", action=\"count\", default=0,\n"
"                    help=\"increase output verbosity\")\n"
"args = parser.parse_args()\n"
"answer = args.square**2\n"
"if args.verbosity >= 2:\n"
"    print(f\"the square of {args.square} equals {answer}\")\n"
"elif args.verbosity >= 1:\n"
"    print(f\"{args.square}^2 == {answer}\")\n"
"else:\n"
"    print(answer)"
msgstr ""

#: ../../howto/argparse.rst:578
msgid ""
"We've just introduced yet another keyword, ``default``. We've set it to "
"``0`` in order to make it comparable to the other int values. Remember that "
"by default, if an optional argument isn't specified, it gets the ``None`` "
"value, and that cannot be compared to an int value (hence the "
":exc:`TypeError` exception)."
msgstr ""
"Ми щойно представили ще одне ключове слово, ``default``. Ми встановили для "
"нього значення ``0``, щоб зробити його порівнянним з іншими значеннями int. "
"Пам’ятайте, що за замовчуванням, якщо необов’язковий аргумент не вказано, "
"він отримує значення ``None``, яке не можна порівняти зі значенням int "
"(отже, виняток :exc:`TypeError`)."

#: ../../howto/argparse.rst:585
msgid "And:"
msgstr "і:"

#: ../../howto/argparse.rst:587
msgid ""
"$ python prog.py 4\n"
"16"
msgstr ""

#: ../../howto/argparse.rst:592
msgid ""
"You can go quite far just with what we've learned so far, and we have only "
"scratched the surface. The :mod:`argparse` module is very powerful, and "
"we'll explore a bit more of it before we end this tutorial."
msgstr ""
"Ви можете зайти досить далеко лише з тим, що ми навчилися досі, і ми лише "
"подряпали поверхню. Модуль :mod:`argparse` дуже потужний, і ми вивчимо його "
"трохи більше, перш ніж закінчити цей підручник."

#: ../../howto/argparse.rst:599
msgid "Getting a little more advanced"
msgstr "Ставши трохи більш просунутим"

#: ../../howto/argparse.rst:601
msgid ""
"What if we wanted to expand our tiny program to perform other powers, not "
"just squares::"
msgstr ""
"Що, якби ми захотіли розширити нашу крихітну програму для виконання інших "
"ступенів, а не лише квадратів:"

#: ../../howto/argparse.rst:604
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"x\", type=int, help=\"the base\")\n"
"parser.add_argument(\"y\", type=int, help=\"the exponent\")\n"
"parser.add_argument(\"-v\", \"--verbosity\", action=\"count\", default=0)\n"
"args = parser.parse_args()\n"
"answer = args.x**args.y\n"
"if args.verbosity >= 2:\n"
"    print(f\"{args.x} to the power {args.y} equals {answer}\")\n"
"elif args.verbosity >= 1:\n"
"    print(f\"{args.x}^{args.y} == {answer}\")\n"
"else:\n"
"    print(answer)"
msgstr ""

#: ../../howto/argparse.rst:618 ../../howto/argparse.rst:656
#: ../../howto/argparse.rst:872
msgid "Output:"
msgstr "Вихід:"

#: ../../howto/argparse.rst:620
msgid ""
"$ python prog.py\n"
"usage: prog.py [-h] [-v] x y\n"
"prog.py: error: the following arguments are required: x, y\n"
"$ python prog.py -h\n"
"usage: prog.py [-h] [-v] x y\n"
"\n"
"positional arguments:\n"
"  x                the base\n"
"  y                the exponent\n"
"\n"
"options:\n"
"  -h, --help       show this help message and exit\n"
"  -v, --verbosity\n"
"$ python prog.py 4 2 -v\n"
"4^2 == 16"
msgstr ""

#: ../../howto/argparse.rst:639
msgid ""
"Notice that so far we've been using verbosity level to *change* the text "
"that gets displayed. The following example instead uses verbosity level to "
"display *more* text instead::"
msgstr ""
"Зверніть увагу, що досі ми використовували рівень докладності, щоб *змінити*"
" текст, який відображається. Натомість у наступному прикладі "
"використовується рівень детальності для відображення *більше* тексту::"

#: ../../howto/argparse.rst:643
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"x\", type=int, help=\"the base\")\n"
"parser.add_argument(\"y\", type=int, help=\"the exponent\")\n"
"parser.add_argument(\"-v\", \"--verbosity\", action=\"count\", default=0)\n"
"args = parser.parse_args()\n"
"answer = args.x**args.y\n"
"if args.verbosity >= 2:\n"
"    print(f\"Running '{__file__}'\")\n"
"if args.verbosity >= 1:\n"
"    print(f\"{args.x}^{args.y} == \", end=\"\")\n"
"print(answer)"
msgstr ""

#: ../../howto/argparse.rst:658
msgid ""
"$ python prog.py 4 2\n"
"16\n"
"$ python prog.py 4 2 -v\n"
"4^2 == 16\n"
"$ python prog.py 4 2 -vv\n"
"Running 'prog.py'\n"
"4^2 == 16"
msgstr ""

#: ../../howto/argparse.rst:672
msgid "Specifying ambiguous arguments"
msgstr ""

#: ../../howto/argparse.rst:674
msgid ""
"When there is ambiguity in deciding whether an argument is positional or for"
" an argument, ``--`` can be used to tell :meth:`~ArgumentParser.parse_args` "
"that everything after that is a positional argument::"
msgstr ""

#: ../../howto/argparse.rst:678
msgid ""
">>> parser = argparse.ArgumentParser(prog='PROG')\n"
">>> parser.add_argument('-n', nargs='+')\n"
">>> parser.add_argument('args', nargs='*')\n"
"\n"
">>> # ambiguous, so parse_args assumes it's an option\n"
">>> parser.parse_args(['-f'])\n"
"usage: PROG [-h] [-n N [N ...]] [args ...]\n"
"PROG: error: unrecognized arguments: -f\n"
"\n"
">>> parser.parse_args(['--', '-f'])\n"
"Namespace(args=['-f'], n=None)\n"
"\n"
">>> # ambiguous, so the -n option greedily accepts arguments\n"
">>> parser.parse_args(['-n', '1', '2', '3'])\n"
"Namespace(args=[], n=['1', '2', '3'])\n"
"\n"
">>> parser.parse_args(['-n', '1', '--', '2', '3'])\n"
"Namespace(args=['2', '3'], n=['1'])"
msgstr ""

#: ../../howto/argparse.rst:699
msgid "Conflicting options"
msgstr "Конфліктні варіанти"

#: ../../howto/argparse.rst:701
msgid ""
"So far, we have been working with two methods of an "
":class:`argparse.ArgumentParser` instance. Let's introduce a third one, "
":meth:`~ArgumentParser.add_mutually_exclusive_group`. It allows for us to "
"specify options that conflict with each other. Let's also change the rest of"
" the program so that the new functionality makes more sense: we'll introduce"
" the ``--quiet`` option, which will be the opposite of the ``--verbose`` "
"one::"
msgstr ""

#: ../../howto/argparse.rst:709
msgid ""
"import argparse\n"
"\n"
"parser = argparse.ArgumentParser()\n"
"group = parser.add_mutually_exclusive_group()\n"
"group.add_argument(\"-v\", \"--verbose\", action=\"store_true\")\n"
"group.add_argument(\"-q\", \"--quiet\", action=\"store_true\")\n"
"parser.add_argument(\"x\", type=int, help=\"the base\")\n"
"parser.add_argument(\"y\", type=int, help=\"the exponent\")\n"
"args = parser.parse_args()\n"
"answer = args.x**args.y\n"
"\n"
"if args.quiet:\n"
"    print(answer)\n"
"elif args.verbose:\n"
"    print(f\"{args.x} to the power {args.y} equals {answer}\")\n"
"else:\n"
"    print(f\"{args.x}^{args.y} == {answer}\")"
msgstr ""

#: ../../howto/argparse.rst:727
msgid ""
"Our program is now simpler, and we've lost some functionality for the sake "
"of demonstration. Anyways, here's the output:"
msgstr ""
"Наша програма стала простішою, і ми втратили деякі функції заради "
"демонстрації. У будь-якому випадку, ось результат:"

#: ../../howto/argparse.rst:730
msgid ""
"$ python prog.py 4 2\n"
"4^2 == 16\n"
"$ python prog.py 4 2 -q\n"
"16\n"
"$ python prog.py 4 2 -v\n"
"4 to the power 2 equals 16\n"
"$ python prog.py 4 2 -vq\n"
"usage: prog.py [-h] [-v | -q] x y\n"
"prog.py: error: argument -q/--quiet: not allowed with argument -v/--verbose\n"
"$ python prog.py 4 2 -v --quiet\n"
"usage: prog.py [-h] [-v | -q] x y\n"
"prog.py: error: argument -q/--quiet: not allowed with argument -v/--verbose"
msgstr ""

#: ../../howto/argparse.rst:745
msgid ""
"That should be easy to follow. I've added that last output so you can see "
"the sort of flexibility you get, i.e. mixing long form options with short "
"form ones."
msgstr ""
"Це повинно бути легко слідкувати. Я додав цей останній вихід, щоб ви могли "
"бачити, яку гнучкість ви отримуєте, тобто змішування параметрів довгої форми"
" з опціями короткої."

#: ../../howto/argparse.rst:749
msgid ""
"Before we conclude, you probably want to tell your users the main purpose of"
" your program, just in case they don't know::"
msgstr ""
"Перш ніж завершити, ви, ймовірно, захочете повідомити своїм користувачам "
"головну мету вашої програми, на випадок, якщо вони не знають:"

#: ../../howto/argparse.rst:752
msgid ""
"import argparse\n"
"\n"
"parser = argparse.ArgumentParser(description=\"calculate X to the power of Y\")\n"
"group = parser.add_mutually_exclusive_group()\n"
"group.add_argument(\"-v\", \"--verbose\", action=\"store_true\")\n"
"group.add_argument(\"-q\", \"--quiet\", action=\"store_true\")\n"
"parser.add_argument(\"x\", type=int, help=\"the base\")\n"
"parser.add_argument(\"y\", type=int, help=\"the exponent\")\n"
"args = parser.parse_args()\n"
"answer = args.x**args.y\n"
"\n"
"if args.quiet:\n"
"    print(answer)\n"
"elif args.verbose:\n"
"    print(f\"{args.x} to the power {args.y} equals {answer}\")\n"
"else:\n"
"    print(f\"{args.x}^{args.y} == {answer}\")"
msgstr ""

#: ../../howto/argparse.rst:770
msgid ""
"Note that slight difference in the usage text. Note the ``[-v | -q]``, which"
" tells us that we can either use ``-v`` or ``-q``, but not both at the same "
"time:"
msgstr ""
"Зверніть увагу на невелику різницю в тексті використання. Зверніть увагу на "
"``[-v | -q]``, який говорить нам, що ми можемо використовувати ``-v`` або "
"``-q``, але не обидва одночасно:"

#: ../../howto/argparse.rst:774 ../../howto/argparse.rst:801
msgid ""
"$ python prog.py --help\n"
"usage: prog.py [-h] [-v | -q] x y\n"
"\n"
"calculate X to the power of Y\n"
"\n"
"positional arguments:\n"
"  x              the base\n"
"  y              the exponent\n"
"\n"
"options:\n"
"  -h, --help     show this help message and exit\n"
"  -v, --verbose\n"
"  -q, --quiet"
msgstr ""

#: ../../howto/argparse.rst:792
msgid "How to translate the argparse output"
msgstr ""

#: ../../howto/argparse.rst:794
msgid ""
"The output of the :mod:`argparse` module such as its help text and error "
"messages are all made translatable using the :mod:`gettext` module. This "
"allows applications to easily localize messages produced by :mod:`argparse`."
" See also :ref:`i18n-howto`."
msgstr ""

#: ../../howto/argparse.rst:799
msgid "For instance, in this :mod:`argparse` output:"
msgstr ""

#: ../../howto/argparse.rst:817
msgid ""
"The strings ``usage:``, ``positional arguments:``, ``options:`` and ``show "
"this help message and exit`` are all translatable."
msgstr ""

#: ../../howto/argparse.rst:820
msgid ""
"In order to translate these strings, they must first be extracted into a "
"``.po`` file. For example, using `Babel <https://babel.pocoo.org/>`__, run "
"this command:"
msgstr ""

#: ../../howto/argparse.rst:824
msgid "$ pybabel extract -o messages.po /usr/lib/python3.12/argparse.py"
msgstr ""

#: ../../howto/argparse.rst:828
msgid ""
"This command will extract all translatable strings from the :mod:`argparse` "
"module and output them into a file named ``messages.po``. This command "
"assumes that your Python installation is in ``/usr/lib``."
msgstr ""

#: ../../howto/argparse.rst:832
msgid ""
"You can find out the location of the :mod:`argparse` module on your system "
"using this script::"
msgstr ""

#: ../../howto/argparse.rst:835
msgid ""
"import argparse\n"
"print(argparse.__file__)"
msgstr ""

#: ../../howto/argparse.rst:838
msgid ""
"Once the messages in the ``.po`` file are translated and the translations "
"are installed using :mod:`gettext`, :mod:`argparse` will be able to display "
"the translated messages."
msgstr ""

#: ../../howto/argparse.rst:842
msgid ""
"To translate your own strings in the :mod:`argparse` output, use "
":mod:`gettext`."
msgstr ""

#: ../../howto/argparse.rst:845
msgid "Custom type converters"
msgstr ""

#: ../../howto/argparse.rst:847
msgid ""
"The :mod:`argparse` module allows you to specify custom type converters for "
"your command-line arguments. This allows you to modify user input before "
"it's stored in the :class:`argparse.Namespace`. This can be useful when you "
"need to pre-process the input before it is used in your program."
msgstr ""

#: ../../howto/argparse.rst:852
msgid ""
"When using a custom type converter, you can use any callable that takes a "
"single string argument (the argument value) and returns the converted value."
" However, if you need to handle more complex scenarios, you can use a custom"
" action class with the **action** parameter instead."
msgstr ""

#: ../../howto/argparse.rst:857
msgid ""
"For example, let's say you want to handle arguments with different prefixes "
"and process them accordingly::"
msgstr ""

#: ../../howto/argparse.rst:860
msgid ""
"import argparse\n"
"\n"
"parser = argparse.ArgumentParser(prefix_chars='-+')\n"
"\n"
"parser.add_argument('-a', metavar='<value>', action='append',\n"
"                    type=lambda x: ('-', x))\n"
"parser.add_argument('+a', metavar='<value>', action='append',\n"
"                    type=lambda x: ('+', x))\n"
"\n"
"args = parser.parse_args()\n"
"print(args)"
msgstr ""

#: ../../howto/argparse.rst:874
msgid ""
"$ python prog.py -a value1 +a value2\n"
"Namespace(a=[('-', 'value1'), ('+', 'value2')])"
msgstr ""

#: ../../howto/argparse.rst:879
msgid "In this example, we:"
msgstr ""

#: ../../howto/argparse.rst:881
msgid ""
"Created a parser with custom prefix characters using the ``prefix_chars`` "
"parameter."
msgstr ""

#: ../../howto/argparse.rst:884
msgid ""
"Defined two arguments, ``-a`` and ``+a``, which used the ``type`` parameter "
"to create custom type converters to store the value in a tuple with the "
"prefix."
msgstr ""

#: ../../howto/argparse.rst:887
msgid ""
"Without the custom type converters, the arguments would have treated the "
"``-a`` and ``+a`` as the same argument, which would have been undesirable. "
"By using custom type converters, we were able to differentiate between the "
"two arguments."
msgstr ""

#: ../../howto/argparse.rst:892
msgid "Conclusion"
msgstr "Висновок"

#: ../../howto/argparse.rst:894
msgid ""
"The :mod:`argparse` module offers a lot more than shown here. Its docs are "
"quite detailed and thorough, and full of examples. Having gone through this "
"tutorial, you should easily digest them without feeling overwhelmed."
msgstr ""
"Модуль :mod:`argparse` пропонує набагато більше, ніж показано тут. Його "
"документи досить докладні та ретельні та повні прикладів. Пройшовши цей "
"підручник, ви повинні легко засвоїти їх, не відчуваючи себе приголомшеними."
