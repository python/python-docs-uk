# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Dmytro Kazanzhy, 2022
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-11-22 14:17+0000\n"
"PO-Revision-Date: 2021-06-28 00:53+0000\n"
"Last-Translator: Dmytro Kazanzhy, 2022\n"
"Language-Team: Ukrainian (https://app.transifex.com/python-doc/teams/5390/uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != 11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % 100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || (n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

#: ../../howto/instrumentation.rst:7
msgid "Instrumenting CPython with DTrace and SystemTap"
msgstr "Інструментування CPython за допомогою DTrace і SystemTap"

#: ../../howto/instrumentation.rst:0
msgid "author"
msgstr "автор"

#: ../../howto/instrumentation.rst:9
msgid "David Malcolm"
msgstr "David Malcolm"

#: ../../howto/instrumentation.rst:10
msgid "Łukasz Langa"
msgstr "Łukasz Langa"

#: ../../howto/instrumentation.rst:12
msgid ""
"DTrace and SystemTap are monitoring tools, each providing a way to inspect "
"what the processes on a computer system are doing.  They both use domain-"
"specific languages allowing a user to write scripts which:"
msgstr ""
"DTrace і SystemTap — це інструменти моніторингу, кожен з яких надає спосіб "
"перевірити, що роблять процеси в комп’ютерній системі. Вони обидва "
"використовують доменно-спеціальні мови, що дозволяє користувачеві писати "
"сценарії, які:"

#: ../../howto/instrumentation.rst:16
msgid "filter which processes are to be observed"
msgstr "фільтрувати процеси, які слід спостерігати"

#: ../../howto/instrumentation.rst:17
msgid "gather data from the processes of interest"
msgstr "збирати дані з цікавих процесів"

#: ../../howto/instrumentation.rst:18
msgid "generate reports on the data"
msgstr "створювати звіти за даними"

#: ../../howto/instrumentation.rst:20
msgid ""
"As of Python 3.6, CPython can be built with embedded \"markers\", also known"
" as \"probes\", that can be observed by a DTrace or SystemTap script, making"
" it easier to monitor what the CPython processes on a system are doing."
msgstr ""
"Починаючи з Python 3.6, CPython можна створювати за допомогою вбудованих "
"\"маркерів\", також відомих як \"зонди\", які можна спостерігати за "
"допомогою сценарію DTrace або SystemTap, що полегшує моніторинг того, що "
"роблять процеси CPython у системі."

#: ../../howto/instrumentation.rst:27
msgid ""
"DTrace markers are implementation details of the CPython interpreter. No "
"guarantees are made about probe compatibility between versions of CPython. "
"DTrace scripts can stop working or work incorrectly without warning when "
"changing CPython versions."
msgstr ""
"Маркери DTrace є деталями реалізації інтерпретатора CPython. Жодних гарантій"
" щодо сумісності зондів між версіями CPython не надається. Під час зміни "
"версій CPython сценарії DTrace можуть перестати працювати або працювати "
"неправильно без попередження."

#: ../../howto/instrumentation.rst:34
msgid "Enabling the static markers"
msgstr "Увімкнення статичних маркерів"

#: ../../howto/instrumentation.rst:36
msgid ""
"macOS comes with built-in support for DTrace.  On Linux, in order to build "
"CPython with the embedded markers for SystemTap, the SystemTap development "
"tools must be installed."
msgstr ""
"macOS має вбудовану підтримку DTrace. У Linux, щоб створити CPython із "
"вбудованими маркерами для SystemTap, необхідно встановити інструменти "
"розробки SystemTap."

#: ../../howto/instrumentation.rst:40
msgid "On a Linux machine, this can be done via::"
msgstr "На машині Linux це можна зробити за допомогою::"

#: ../../howto/instrumentation.rst:42
msgid "$ yum install systemtap-sdt-devel"
msgstr ""

#: ../../howto/instrumentation.rst:44
msgid "or::"
msgstr "або::"

#: ../../howto/instrumentation.rst:46
msgid "$ sudo apt-get install systemtap-sdt-dev"
msgstr ""

#: ../../howto/instrumentation.rst:49
msgid ""
"CPython must then be :option:`configured with the --with-dtrace option "
"<--with-dtrace>`:"
msgstr ""
"Тоді CPython має бути :option:`налаштований за допомогою параметра --with-"
"dtrace <--with-dtrace>`:"

#: ../../howto/instrumentation.rst:52
msgid "checking for --with-dtrace... yes"
msgstr ""

#: ../../howto/instrumentation.rst:56
msgid ""
"On macOS, you can list available DTrace probes by running a Python process "
"in the background and listing all probes made available by the Python "
"provider::"
msgstr ""
"У macOS ви можете отримати список доступних зондів DTrace, запустивши процес"
" Python у фоновому режимі та перерахувавши всі зонди, доступні "
"постачальником Python:"

#: ../../howto/instrumentation.rst:60
msgid ""
"$ python3.6 -q &\n"
"$ sudo dtrace -l -P python$!  # or: dtrace -l -m python3.6\n"
"\n"
"   ID   PROVIDER            MODULE                          FUNCTION NAME\n"
"29564 python18035        python3.6          _PyEval_EvalFrameDefault function-entry\n"
"29565 python18035        python3.6             dtrace_function_entry function-entry\n"
"29566 python18035        python3.6          _PyEval_EvalFrameDefault function-return\n"
"29567 python18035        python3.6            dtrace_function_return function-return\n"
"29568 python18035        python3.6                           collect gc-done\n"
"29569 python18035        python3.6                           collect gc-start\n"
"29570 python18035        python3.6          _PyEval_EvalFrameDefault line\n"
"29571 python18035        python3.6                 maybe_dtrace_line line"
msgstr ""

#: ../../howto/instrumentation.rst:73
msgid ""
"On Linux, you can verify if the SystemTap static markers are present in the "
"built binary by seeing if it contains a \".note.stapsdt\" section."
msgstr ""
"У Linux ви можете перевірити наявність статичних маркерів SystemTap у "
"вбудованому двійковому файлі, перевіривши, чи містить він розділ "
"\".note.stapsdt\"."

#: ../../howto/instrumentation.rst:78
msgid ""
"$ readelf -S ./python | grep .note.stapsdt\n"
"[30] .note.stapsdt        NOTE         0000000000000000 00308d78"
msgstr ""

#: ../../howto/instrumentation.rst:81
msgid ""
"If you've built Python as a shared library (with the :option:`--enable-"
"shared` configure option), you need to look instead within the shared "
"library.  For example::"
msgstr ""
"Якщо ви створили Python як спільну бібліотеку (з параметром конфігурації "
":option:`--enable-shared`), вам потрібно натомість шукати в спільній "
"бібліотеці. Наприклад::"

#: ../../howto/instrumentation.rst:85
msgid ""
"$ readelf -S libpython3.3dm.so.1.0 | grep .note.stapsdt\n"
"[29] .note.stapsdt        NOTE         0000000000000000 00365b68"
msgstr ""

#: ../../howto/instrumentation.rst:88
msgid "Sufficiently modern readelf can print the metadata::"
msgstr "Досить сучасний readelf може друкувати метадані::"

#: ../../howto/instrumentation.rst:90
msgid ""
"$ readelf -n ./python\n"
"\n"
"Displaying notes found at file offset 0x00000254 with length 0x00000020:\n"
"    Owner                 Data size          Description\n"
"    GNU                  0x00000010          NT_GNU_ABI_TAG (ABI version tag)\n"
"        OS: Linux, ABI: 2.6.32\n"
"\n"
"Displaying notes found at file offset 0x00000274 with length 0x00000024:\n"
"    Owner                 Data size          Description\n"
"    GNU                  0x00000014          NT_GNU_BUILD_ID (unique build ID bitstring)\n"
"        Build ID: df924a2b08a7e89f6e11251d4602022977af2670\n"
"\n"
"Displaying notes found at file offset 0x002d6c30 with length 0x00000144:\n"
"    Owner                 Data size          Description\n"
"    stapsdt              0x00000031          NT_STAPSDT (SystemTap probe descriptors)\n"
"        Provider: python\n"
"        Name: gc__start\n"
"        Location: 0x00000000004371c3, Base: 0x0000000000630ce2, Semaphore: 0x00000000008d6bf6\n"
"        Arguments: -4@%ebx\n"
"    stapsdt              0x00000030          NT_STAPSDT (SystemTap probe descriptors)\n"
"        Provider: python\n"
"        Name: gc__done\n"
"        Location: 0x00000000004374e1, Base: 0x0000000000630ce2, Semaphore: 0x00000000008d6bf8\n"
"        Arguments: -8@%rax\n"
"    stapsdt              0x00000045          NT_STAPSDT (SystemTap probe descriptors)\n"
"        Provider: python\n"
"        Name: function__entry\n"
"        Location: 0x000000000053db6c, Base: 0x0000000000630ce2, Semaphore: 0x00000000008d6be8\n"
"        Arguments: 8@%rbp 8@%r12 -4@%eax\n"
"    stapsdt              0x00000046          NT_STAPSDT (SystemTap probe descriptors)\n"
"        Provider: python\n"
"        Name: function__return\n"
"        Location: 0x000000000053dba8, Base: 0x0000000000630ce2, Semaphore: 0x00000000008d6bea\n"
"        Arguments: 8@%rbp 8@%r12 -4@%eax"
msgstr ""

#: ../../howto/instrumentation.rst:125
msgid ""
"The above metadata contains information for SystemTap describing how it can "
"patch strategically placed machine code instructions to enable the tracing "
"hooks used by a SystemTap script."
msgstr ""

#: ../../howto/instrumentation.rst:131
msgid "Static DTrace probes"
msgstr "Статичні зонди DTrace"

#: ../../howto/instrumentation.rst:133
msgid ""
"The following example DTrace script can be used to show the call/return "
"hierarchy of a Python script, only tracing within the invocation of a "
"function called \"start\". In other words, import-time function invocations "
"are not going to be listed:"
msgstr ""
"Наступний приклад сценарію DTrace можна використовувати, щоб показати "
"ієрархію викликів/повернень сценарію Python, лише відстежуючи в межах "
"виклику функції під назвою \"start\". Іншими словами, виклики функцій під "
"час імпорту не будуть перераховані:"

#: ../../howto/instrumentation.rst:138
msgid ""
"self int indent;\n"
"\n"
"python$target:::function-entry\n"
"/copyinstr(arg1) == \"start\"/\n"
"{\n"
"        self->trace = 1;\n"
"}\n"
"\n"
"python$target:::function-entry\n"
"/self->trace/\n"
"{\n"
"        printf(\"%d\\t%*s:\", timestamp, 15, probename);\n"
"        printf(\"%*s\", self->indent, \"\");\n"
"        printf(\"%s:%s:%d\\n\", basename(copyinstr(arg0)), copyinstr(arg1), arg2);\n"
"        self->indent++;\n"
"}\n"
"\n"
"python$target:::function-return\n"
"/self->trace/\n"
"{\n"
"        self->indent--;\n"
"        printf(\"%d\\t%*s:\", timestamp, 15, probename);\n"
"        printf(\"%*s\", self->indent, \"\");\n"
"        printf(\"%s:%s:%d\\n\", basename(copyinstr(arg0)), copyinstr(arg1), arg2);\n"
"}\n"
"\n"
"python$target:::function-return\n"
"/copyinstr(arg1) == \"start\"/\n"
"{\n"
"        self->trace = 0;\n"
"}"
msgstr ""

#: ../../howto/instrumentation.rst:172 ../../howto/instrumentation.rst:230
msgid "It can be invoked like this::"
msgstr "Його можна викликати так::"

#: ../../howto/instrumentation.rst:174
msgid "$ sudo dtrace -q -s call_stack.d -c \"python3.6 script.py\""
msgstr ""

#: ../../howto/instrumentation.rst:176 ../../howto/instrumentation.rst:236
msgid "The output looks like this:"
msgstr "Результат виглядає так:"

#: ../../howto/instrumentation.rst:178
msgid ""
"156641360502280  function-entry:call_stack.py:start:23\n"
"156641360518804  function-entry: call_stack.py:function_1:1\n"
"156641360532797  function-entry:  call_stack.py:function_3:9\n"
"156641360546807 function-return:  call_stack.py:function_3:10\n"
"156641360563367 function-return: call_stack.py:function_1:2\n"
"156641360578365  function-entry: call_stack.py:function_2:5\n"
"156641360591757  function-entry:  call_stack.py:function_1:1\n"
"156641360605556  function-entry:   call_stack.py:function_3:9\n"
"156641360617482 function-return:   call_stack.py:function_3:10\n"
"156641360629814 function-return:  call_stack.py:function_1:2\n"
"156641360642285 function-return: call_stack.py:function_2:6\n"
"156641360656770  function-entry: call_stack.py:function_3:9\n"
"156641360669707 function-return: call_stack.py:function_3:10\n"
"156641360687853  function-entry: call_stack.py:function_4:13\n"
"156641360700719 function-return: call_stack.py:function_4:14\n"
"156641360719640  function-entry: call_stack.py:function_5:18\n"
"156641360732567 function-return: call_stack.py:function_5:21\n"
"156641360747370 function-return:call_stack.py:start:28"
msgstr ""

#: ../../howto/instrumentation.rst:201
msgid "Static SystemTap markers"
msgstr "Статичні маркери SystemTap"

#: ../../howto/instrumentation.rst:203
msgid ""
"The low-level way to use the SystemTap integration is to use the static "
"markers directly.  This requires you to explicitly state the binary file "
"containing them."
msgstr ""
"Низькорівневий спосіб використання інтеграції SystemTap полягає в "
"безпосередньому використанні статичних маркерів. Це вимагає, щоб ви явно "
"вказали бінарний файл, який їх містить."

#: ../../howto/instrumentation.rst:207
msgid ""
"For example, this SystemTap script can be used to show the call/return "
"hierarchy of a Python script:"
msgstr ""
"Наприклад, цей сценарій SystemTap можна використовувати, щоб показати "
"ієрархію викликів/повернень сценарію Python:"

#: ../../howto/instrumentation.rst:210
msgid ""
"probe process(\"python\").mark(\"function__entry\") {\n"
"     filename = user_string($arg1);\n"
"     funcname = user_string($arg2);\n"
"     lineno = $arg3;\n"
"\n"
"     printf(\"%s => %s in %s:%d\\\\n\",\n"
"            thread_indent(1), funcname, filename, lineno);\n"
"}\n"
"\n"
"probe process(\"python\").mark(\"function__return\") {\n"
"    filename = user_string($arg1);\n"
"    funcname = user_string($arg2);\n"
"    lineno = $arg3;\n"
"\n"
"    printf(\"%s <= %s in %s:%d\\\\n\",\n"
"           thread_indent(-1), funcname, filename, lineno);\n"
"}"
msgstr ""

#: ../../howto/instrumentation.rst:232
msgid ""
"$ stap \\\n"
"  show-call-hierarchy.stp \\\n"
"  -c \"./python test.py\""
msgstr ""

#: ../../howto/instrumentation.rst:238
msgid ""
"11408 python(8274):        => __contains__ in Lib/_abcoll.py:362\n"
"11414 python(8274):         => __getitem__ in Lib/os.py:425\n"
"11418 python(8274):          => encode in Lib/os.py:490\n"
"11424 python(8274):          <= encode in Lib/os.py:493\n"
"11428 python(8274):         <= __getitem__ in Lib/os.py:426\n"
"11433 python(8274):        <= __contains__ in Lib/_abcoll.py:366"
msgstr ""

#: ../../howto/instrumentation.rst:247
msgid "where the columns are:"
msgstr "де стовпці:"

#: ../../howto/instrumentation.rst:249
msgid "time in microseconds since start of script"
msgstr "час у мікросекундах з моменту запуску сценарію"

#: ../../howto/instrumentation.rst:250
msgid "name of executable"
msgstr "ім'я виконуваного файлу"

#: ../../howto/instrumentation.rst:251
msgid "PID of process"
msgstr "PID процесу"

#: ../../howto/instrumentation.rst:253
msgid ""
"and the remainder indicates the call/return hierarchy as the script "
"executes."
msgstr ""
"а залишок вказує на ієрархію виклику/повернення під час виконання сценарію."

#: ../../howto/instrumentation.rst:255
msgid ""
"For a :option:`--enable-shared` build of CPython, the markers are contained "
"within the libpython shared library, and the probe's dotted path needs to "
"reflect this. For example, this line from the above example:"
msgstr ""
"Для :option:`--enable-shared` збірки CPython маркери містяться в спільній "
"бібліотеці libpython, і пунктирний шлях зонда повинен це відображати. "
"Наприклад, цей рядок із наведеного вище прикладу:"

#: ../../howto/instrumentation.rst:259
msgid "probe process(\"python\").mark(\"function__entry\") {"
msgstr ""

#: ../../howto/instrumentation.rst:263
msgid "should instead read:"
msgstr "замість цього слід читати:"

#: ../../howto/instrumentation.rst:265
msgid ""
"probe "
"process(\"python\").library(\"libpython3.6dm.so.1.0\").mark(\"function__entry\")"
" {"
msgstr ""

#: ../../howto/instrumentation.rst:269
msgid "(assuming a :ref:`debug build <debug-build>` of CPython 3.6)"
msgstr "(за умови :ref:`debug build <debug-build>` CPython 3.6)"

#: ../../howto/instrumentation.rst:273
msgid "Available static markers"
msgstr "Наявні статичні маркери"

#: ../../howto/instrumentation.rst:277
msgid ""
"This marker indicates that execution of a Python function has begun. It is "
"only triggered for pure-Python (bytecode) functions."
msgstr ""
"Цей маркер вказує на те, що почалося виконання функції Python. Він "
"запускається лише для функцій чистого Python (байт-код)."

#: ../../howto/instrumentation.rst:280
msgid ""
"The filename, function name, and line number are provided back to the "
"tracing script as positional arguments, which must be accessed using "
"``$arg1``, ``$arg2``, ``$arg3``:"
msgstr ""
"Ім’я файлу, ім’я функції та номер рядка повертаються до сценарію трасування "
"як позиційні аргументи, до яких потрібно отримати доступ за допомогою "
"``$arg1``, ``$arg2``, ``$arg3``:"

#: ../../howto/instrumentation.rst:284
msgid ""
"``$arg1`` : ``(const char *)`` filename, accessible using "
"``user_string($arg1)``"
msgstr ""
"``$arg1`` : ``(const char *)`` ім'я файлу, доступне за допомогою "
"``user_string($arg1)``"

#: ../../howto/instrumentation.rst:286
msgid ""
"``$arg2`` : ``(const char *)`` function name, accessible using "
"``user_string($arg2)``"
msgstr ""
"``$arg2`` : ``(const char *)`` назва функції, доступна за допомогою "
"``user_string($arg2)``"

#: ../../howto/instrumentation.rst:289
msgid "``$arg3`` : ``int`` line number"
msgstr "``$arg3`` : ``int`` номер рядка"

#: ../../howto/instrumentation.rst:293
msgid ""
"This marker is the converse of :c:func:`!function__entry`, and indicates "
"that execution of a Python function has ended (either via ``return``, or via"
" an exception).  It is only triggered for pure-Python (bytecode) functions."
msgstr ""

#: ../../howto/instrumentation.rst:297
msgid "The arguments are the same as for :c:func:`!function__entry`"
msgstr ""

#: ../../howto/instrumentation.rst:301
msgid ""
"This marker indicates a Python line is about to be executed.  It is the "
"equivalent of line-by-line tracing with a Python profiler.  It is not "
"triggered within C functions."
msgstr ""
"Цей маркер вказує на те, що рядок Python збирається виконати. Це еквівалент "
"построкової трасування за допомогою профайлера Python. Він не запускається у"
" функціях C."

#: ../../howto/instrumentation.rst:305
msgid "The arguments are the same as for :c:func:`!function__entry`."
msgstr ""

#: ../../howto/instrumentation.rst:309
msgid ""
"Fires when the Python interpreter starts a garbage collection cycle. "
"``arg0`` is the generation to scan, like :func:`gc.collect`."
msgstr ""

#: ../../howto/instrumentation.rst:314
msgid ""
"Fires when the Python interpreter finishes a garbage collection cycle. "
"``arg0`` is the number of collected objects."
msgstr ""
"Спрацьовує, коли інтерпретатор Python завершує цикл збирання сміття. "
"``arg0`` - кількість зібраних об'єктів."

#: ../../howto/instrumentation.rst:319
msgid ""
"Fires before :mod:`importlib` attempts to find and load the module. ``arg0``"
" is the module name."
msgstr ""
"Спрацьовує перед спробою :mod:`importlib` знайти та завантажити модуль. "
"``arg0`` - це назва модуля."

#: ../../howto/instrumentation.rst:326
msgid ""
"Fires after :mod:`importlib`'s find_and_load function is called. ``arg0`` is"
" the module name, ``arg1`` indicates if module was successfully loaded."
msgstr ""
"Спрацьовує після виклику функції find_and_load :mod:`importlib`. ``arg0`` - "
"це назва модуля, ``arg1`` вказує, чи модуль було успішно завантажено."

#: ../../howto/instrumentation.rst:335
msgid ""
"Fires when :func:`sys.audit` or :c:func:`PySys_Audit` is called. ``arg0`` is"
" the event name as C string, ``arg1`` is a :c:type:`PyObject` pointer to a "
"tuple object."
msgstr ""
"Спрацьовує під час виклику :func:`sys.audit` або :c:func:`PySys_Audit`. "
"``arg0`` — це ім’я події у вигляді рядка C, ``arg1`` — це покажчик "
":c:type:`PyObject` на об’єкт кортежу."

#: ../../howto/instrumentation.rst:343
msgid "SystemTap Tapsets"
msgstr "Системні крани"

#: ../../howto/instrumentation.rst:345
msgid ""
"The higher-level way to use the SystemTap integration is to use a "
"\"tapset\": SystemTap's equivalent of a library, which hides some of the "
"lower-level details of the static markers."
msgstr ""
"Шлях вищого рівня використання інтеграції SystemTap полягає у використанні "
"\"tapset\": еквівалента бібліотеки SystemTap, яка приховує деякі деталі "
"нижчого рівня статичних маркерів."

#: ../../howto/instrumentation.rst:349
msgid "Here is a tapset file, based on a non-shared build of CPython:"
msgstr "Ось файл tapset, заснований на незагальній збірці CPython:"

#: ../../howto/instrumentation.rst:351
msgid ""
"/*\n"
"   Provide a higher-level wrapping around the function__entry and\n"
"   function__return markers:\n"
" \\*/\n"
"probe python.function.entry = process(\"python\").mark(\"function__entry\")\n"
"{\n"
"    filename = user_string($arg1);\n"
"    funcname = user_string($arg2);\n"
"    lineno = $arg3;\n"
"    frameptr = $arg4\n"
"}\n"
"probe python.function.return = process(\"python\").mark(\"function__return\")\n"
"{\n"
"    filename = user_string($arg1);\n"
"    funcname = user_string($arg2);\n"
"    lineno = $arg3;\n"
"    frameptr = $arg4\n"
"}"
msgstr ""

#: ../../howto/instrumentation.rst:372
msgid ""
"If this file is installed in SystemTap's tapset directory (e.g. "
"``/usr/share/systemtap/tapset``), then these additional probepoints become "
"available:"
msgstr ""
"Якщо цей файл встановлено в каталозі tapset SystemTap (наприклад, "
"``/usr/share/systemtap/tapset``), тоді ці додаткові точки дослідження стають"
" доступними:"

#: ../../howto/instrumentation.rst:378
msgid ""
"This probe point indicates that execution of a Python function has begun. It"
" is only triggered for pure-Python (bytecode) functions."
msgstr ""
"Ця точка тестування вказує на те, що почалося виконання функції Python. Він "
"запускається лише для функцій чистого Python (байт-код)."

#: ../../howto/instrumentation.rst:383
msgid ""
"This probe point is the converse of ``python.function.return``, and "
"indicates that execution of a Python function has ended (either via "
"``return``, or via an exception).  It is only triggered for pure-Python "
"(bytecode) functions."
msgstr ""
"Ця точка тестування є протилежністю ``python.function.return`` і вказує, що "
"виконання функції Python завершилося (або через ``return``, або через "
"виняток). Він запускається лише для функцій чистого Python (байт-код)."

#: ../../howto/instrumentation.rst:390
msgid "Examples"
msgstr "Приклади"

#: ../../howto/instrumentation.rst:391
msgid ""
"This SystemTap script uses the tapset above to more cleanly implement the "
"example given above of tracing the Python function-call hierarchy, without "
"needing to directly name the static markers:"
msgstr ""
"Цей сценарій SystemTap використовує наведений вище набір для більш чіткої "
"реалізації наведеного вище прикладу відстеження ієрархії викликів функцій "
"Python, без необхідності безпосередньо називати статичні маркери:"

#: ../../howto/instrumentation.rst:395
msgid ""
"probe python.function.entry\n"
"{\n"
"  printf(\"%s => %s in %s:%d\\n\",\n"
"         thread_indent(1), funcname, filename, lineno);\n"
"}\n"
"\n"
"probe python.function.return\n"
"{\n"
"  printf(\"%s <= %s in %s:%d\\n\",\n"
"         thread_indent(-1), funcname, filename, lineno);\n"
"}"
msgstr ""

#: ../../howto/instrumentation.rst:410
msgid ""
"The following script uses the tapset above to provide a top-like view of all"
" running CPython code, showing the top 20 most frequently entered bytecode "
"frames, each second, across the whole system:"
msgstr ""

#: ../../howto/instrumentation.rst:414
msgid ""
"global fn_calls;\n"
"\n"
"probe python.function.entry\n"
"{\n"
"    fn_calls[pid(), filename, funcname, lineno] += 1;\n"
"}\n"
"\n"
"probe timer.ms(1000) {\n"
"    printf(\"\\033[2J\\033[1;1H\") /* clear screen \\*/\n"
"    printf(\"%6s %80s %6s %30s %6s\\n\",\n"
"           \"PID\", \"FILENAME\", \"LINE\", \"FUNCTION\", \"CALLS\")\n"
"    foreach ([pid, filename, funcname, lineno] in fn_calls- limit 20) {\n"
"        printf(\"%6d %80s %6d %30s %6d\\n\",\n"
"            pid, filename, lineno, funcname,\n"
"            fn_calls[pid, filename, funcname, lineno]);\n"
"    }\n"
"    delete fn_calls;\n"
"}"
msgstr ""
