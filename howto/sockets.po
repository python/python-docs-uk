# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Dmytro Kazanzhy, 2022
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-11-19 01:00+0000\n"
"PO-Revision-Date: 2021-06-28 00:53+0000\n"
"Last-Translator: Dmytro Kazanzhy, 2022\n"
"Language-Team: Ukrainian (https://app.transifex.com/python-doc/teams/5390/uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != 11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % 100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || (n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

#: ../../howto/sockets.rst:5
msgid "Socket Programming HOWTO"
msgstr "HOWTO з програмування сокетів"

#: ../../howto/sockets.rst:0
msgid "Author"
msgstr "Автор"

#: ../../howto/sockets.rst:7
msgid "Gordon McMillan"
msgstr "Gordon McMillan"

#: ../../howto/sockets.rst-1
msgid "Abstract"
msgstr "Анотація"

#: ../../howto/sockets.rst:12
msgid ""
"Sockets are used nearly everywhere, but are one of the most severely "
"misunderstood technologies around. This is a 10,000 foot overview of "
"sockets. It's not really a tutorial - you'll still have work to do in "
"getting things operational. It doesn't cover the fine points (and there are "
"a lot of them), but I hope it will give you enough background to begin using"
" them decently."
msgstr ""
"Розетки використовуються майже скрізь, але це одна з найбільш неправильно "
"зрозумілих технологій. Це 10 000-футовий огляд розеток. Насправді це не "
"підручник – вам ще доведеться попрацювати, щоб налагодити роботу. Він не "
"охоплює тонкощі (а їх багато), але я сподіваюся, що він дасть вам достатньо "
"інформації, щоб почати ними гідно користуватися."

#: ../../howto/sockets.rst:20
msgid "Sockets"
msgstr "Сокети"

#: ../../howto/sockets.rst:22
msgid ""
"I'm only going to talk about INET (i.e. IPv4) sockets, but they account for "
"at least 99% of the sockets in use. And I'll only talk about STREAM (i.e. "
"TCP) sockets - unless you really know what you're doing (in which case this "
"HOWTO isn't for you!), you'll get better behavior and performance from a "
"STREAM socket than anything else. I will try to clear up the mystery of what"
" a socket is, as well as some hints on how to work with blocking and non-"
"blocking sockets. But I'll start by talking about blocking sockets. You'll "
"need to know how they work before dealing with non-blocking sockets."
msgstr ""
"Я збираюся говорити лише про сокети INET (тобто IPv4), але на них припадає "
"щонайменше 99% використовуваних сокетів. І я буду говорити лише про сокети "
"STREAM (тобто TCP) - якщо ви дійсно не знаєте, що робите (у цьому випадку це"
" HOWTO не для вас!), ви отримаєте кращу поведінку та продуктивність від "
"сокета STREAM, ніж будь-що інше. Я спробую розкрити таємницю того, що таке "
"сокет, а також дам деякі підказки щодо роботи з блокуючими та неблокуючими "
"сокетами. Але я почну з розмови про блокування сокетів. Вам потрібно знати, "
"як вони працюють, перш ніж мати справу з неблокуючими сокетами."

#: ../../howto/sockets.rst:31
msgid ""
"Part of the trouble with understanding these things is that \"socket\" can "
"mean a number of subtly different things, depending on context. So first, "
"let's make a distinction between a \"client\" socket - an endpoint of a "
"conversation, and a \"server\" socket, which is more like a switchboard "
"operator. The client application (your browser, for example) uses \"client\""
" sockets exclusively; the web server it's talking to uses both \"server\" "
"sockets and \"client\" sockets."
msgstr ""
"Частково проблема з розумінням цих речей полягає в тому, що \"розетка\" може"
" означати декілька дещо різних речей, залежно від контексту. Отже, спочатку "
"давайте розрізнимо \"клієнтський\" сокет — кінцеву точку розмови, і "
"\"серверний\" сокет, який більше схожий на оператора комутатора. Клієнтська "
"програма (наприклад, ваш браузер) використовує виключно \"клієнтські\" "
"сокети; веб-сервер, з яким він спілкується, використовує як \"серверні\" "
"сокети, так і \"клієнтські\" сокети."

#: ../../howto/sockets.rst:40
msgid "History"
msgstr "історія"

#: ../../howto/sockets.rst:42
msgid ""
"Of the various forms of :abbr:`IPC (Inter Process Communication)`, sockets "
"are by far the most popular.  On any given platform, there are likely to be "
"other forms of IPC that are faster, but for cross-platform communication, "
"sockets are about the only game in town."
msgstr ""
"З різних форм :abbr:`IPC (Inter Process Communication)` сокети є, безумовно,"
" найпопулярнішими. На будь-якій платформі, імовірно, існують інші форми IPC,"
" які є швидшими, але для міжплатформного зв’язку сокети – це майже єдина гра"
" в місті."

#: ../../howto/sockets.rst:47
msgid ""
"They were invented in Berkeley as part of the BSD flavor of Unix. They "
"spread like wildfire with the internet. With good reason --- the combination"
" of sockets with INET makes talking to arbitrary machines around the world "
"unbelievably easy (at least compared to other schemes)."
msgstr ""
"Вони були винайдені в Берклі як частина різновиду BSD Unix. Вони поширюються"
" з Інтернетом як лісова пожежа. З поважною причиною --- поєднання сокетів з "
"INET робить спілкування з довільними машинами по всьому світу неймовірно "
"легким (принаймні порівняно з іншими схемами)."

#: ../../howto/sockets.rst:54
msgid "Creating a Socket"
msgstr "Створення сокета"

#: ../../howto/sockets.rst:56
msgid ""
"Roughly speaking, when you clicked on the link that brought you to this "
"page, your browser did something like the following::"
msgstr ""
"Грубо кажучи, коли ви клацали посилання, яке привело вас на цю сторінку, ваш"
" браузер робив щось на зразок наступного:"

#: ../../howto/sockets.rst:59
msgid ""
"# create an INET, STREAMing socket\n"
"s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n"
"# now connect to the web server on port 80 - the normal http port\n"
"s.connect((\"www.python.org\", 80))"
msgstr ""

#: ../../howto/sockets.rst:64
msgid ""
"When the ``connect`` completes, the socket ``s`` can be used to send in a "
"request for the text of the page. The same socket will read the reply, and "
"then be destroyed. That's right, destroyed. Client sockets are normally only"
" used for one exchange (or a small set of sequential exchanges)."
msgstr ""
"Коли ``connect`` завершиться, сокет ``s`` можна використовувати для "
"надсилання запиту на текст сторінки. Той самий сокет прочитає відповідь, а "
"потім буде знищено. Правильно, знищено. Клієнтські сокети зазвичай "
"використовуються лише для одного обміну (або невеликого набору послідовних "
"обмінів)."

#: ../../howto/sockets.rst:70
msgid ""
"What happens in the web server is a bit more complex. First, the web server "
"creates a \"server socket\"::"
msgstr ""
"Те, що відбувається на веб-сервері, дещо складніше. Спочатку веб-сервер "
"створює \"серверний сокет\"::"

#: ../../howto/sockets.rst:73
msgid ""
"# create an INET, STREAMing socket\n"
"serversocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n"
"# bind the socket to a public host, and a well-known port\n"
"serversocket.bind((socket.gethostname(), 80))\n"
"# become a server socket\n"
"serversocket.listen(5)"
msgstr ""

#: ../../howto/sockets.rst:80
msgid ""
"A couple things to notice: we used ``socket.gethostname()`` so that the "
"socket would be visible to the outside world.  If we had used "
"``s.bind(('localhost', 80))`` or ``s.bind(('127.0.0.1', 80))`` we would "
"still have a \"server\" socket, but one that was only visible within the "
"same machine.  ``s.bind(('', 80))`` specifies that the socket is reachable "
"by any address the machine happens to have."
msgstr ""
"Кілька речей, які слід зауважити: ми використали ``socket.gethostname()``, "
"щоб сокет був видимий для зовнішнього світу. Якби ми використовували "
"``s.bind(('localhost', 80))`` або ``s.bind(('127.0.0.1', 80))``, ми все одно"
" мали б \"серверний\" сокет, але той, який був видимий лише на одній машині."
" ``s.bind(('', 80))`` вказує, що сокет доступний за будь-якою адресою, яку "
"має машина."

#: ../../howto/sockets.rst:87
msgid ""
"A second thing to note: low number ports are usually reserved for \"well "
"known\" services (HTTP, SNMP etc). If you're playing around, use a nice high"
" number (4 digits)."
msgstr ""
"По-друге, на що слід звернути увагу: порти з малими номерами зазвичай "
"зарезервовані для \"добре відомих\" служб (HTTP, SNMP тощо). Якщо ви "
"граєтесь, використовуйте гарне високе число (4 цифри)."

#: ../../howto/sockets.rst:91
msgid ""
"Finally, the argument to ``listen`` tells the socket library that we want it"
" to queue up as many as 5 connect requests (the normal max) before refusing "
"outside connections. If the rest of the code is written properly, that "
"should be plenty."
msgstr ""
"Нарешті, аргумент ``listen`` повідомляє бібліотеці сокетів, що ми хочемо "
"поставити в чергу щонайменше 5 запитів на з’єднання (звичайний максимум), "
"перш ніж відхилити зовнішні з’єднання. Якщо решта коду написана належним "
"чином, цього має бути достатньо."

#: ../../howto/sockets.rst:95
msgid ""
"Now that we have a \"server\" socket, listening on port 80, we can enter the"
" mainloop of the web server::"
msgstr ""
"Тепер, коли у нас є \"серверний\" сокет, який слухає порт 80, ми можемо "
"увійти в основний цикл веб-сервера:"

#: ../../howto/sockets.rst:98
msgid ""
"while True:\n"
"    # accept connections from outside\n"
"    (clientsocket, address) = serversocket.accept()\n"
"    # now do something with the clientsocket\n"
"    # in this case, we'll pretend this is a threaded server\n"
"    ct = client_thread(clientsocket)\n"
"    ct.run()"
msgstr ""

#: ../../howto/sockets.rst:106
msgid ""
"There's actually 3 general ways in which this loop could work - dispatching "
"a thread to handle ``clientsocket``, create a new process to handle "
"``clientsocket``, or restructure this app to use non-blocking sockets, and "
"multiplex between our \"server\" socket and any active ``clientsocket``\\ s "
"using ``select``. More about that later. The important thing to understand "
"now is this: this is *all* a \"server\" socket does. It doesn't send any "
"data. It doesn't receive any data. It just produces \"client\" sockets. Each"
" ``clientsocket`` is created in response to some *other* \"client\" socket "
"doing a ``connect()`` to the host and port we're bound to. As soon as we've "
"created that ``clientsocket``, we go back to listening for more connections."
" The two \"clients\" are free to chat it up - they are using some "
"dynamically allocated port which will be recycled when the conversation "
"ends."
msgstr ""
"Насправді існує 3 загальні способи роботи цього циклу: відправка потоку для "
"обробки ``clientsocket``, створення нового процесу для обробки "
"``clientsocket`` або реструктуризація цієї програми для використання "
"неблокуючих сокетів і мультиплексування між нашими \"серверний\" сокет і "
"будь-який активний ``clientocket``\\ з використанням ``select``. Про це "
"пізніше. Зараз важливо розуміти наступне: це *все*, що робить \"серверний\" "
"сокет. Він не надсилає жодних даних. Він не отримує жодних даних. Він просто"
" створює \"клієнтські\" сокети. Кожен ``clientocket`` створюється у "
"відповідь на те, що якийсь *інший* \"клієнтський\" сокет виконує "
"``connect()`` до хосту та порту, до якого ми прив’язані. Як тільки ми "
"створили цей ``clientsocket``, ми повертаємося до прослуховування додаткових"
" з’єднань. Два \"клієнти\" можуть вільно спілкуватися - вони використовують "
"якийсь динамічно виділений порт, який буде повторно використано після "
"завершення розмови."

#: ../../howto/sockets.rst:121
msgid "IPC"
msgstr "IPC"

#: ../../howto/sockets.rst:123
msgid ""
"If you need fast IPC between two processes on one machine, you should look "
"into pipes or shared memory.  If you do decide to use AF_INET sockets, bind "
"the \"server\" socket to ``'localhost'``. On most platforms, this will take "
"a shortcut around a couple of layers of network code and be quite a bit "
"faster."
msgstr ""
"Якщо вам потрібен швидкий IPC між двома процесами на одній машині, вам слід "
"звернути увагу на канали або спільну пам’ять. Якщо ви вирішите "
"використовувати сокети AF_INET, прив’яжіть сокет \"сервер\" до "
"``'localhost'``. На більшості платформ це займе ярлик навколо кількох шарів "
"мережевого коду та буде трохи швидшим."

#: ../../howto/sockets.rst:129
msgid ""
"The :mod:`multiprocessing` integrates cross-platform IPC into a higher-level"
" API."
msgstr ""
":mod:`multiprocessing` інтегрує міжплатформенний IPC у API вищого рівня."

#: ../../howto/sockets.rst:134
msgid "Using a Socket"
msgstr "Використання сокета"

#: ../../howto/sockets.rst:136
msgid ""
"The first thing to note, is that the web browser's \"client\" socket and the"
" web server's \"client\" socket are identical beasts. That is, this is a "
"\"peer to peer\" conversation. Or to put it another way, *as the designer, "
"you will have to decide what the rules of etiquette are for a conversation*."
" Normally, the ``connect``\\ ing socket starts the conversation, by sending "
"in a request, or perhaps a signon. But that's a design decision - it's not a"
" rule of sockets."
msgstr ""
"Перше, що слід зазначити, це те, що \"клієнтський\" сокет веб-браузера та "
"\"клієнтський\" сокет веб-сервера є ідентичними звірами. Тобто це розмова "
"\"рівний\". Або інакше кажучи, *як дизайнеру, вам доведеться вирішити, які "
"правила етикету для розмови*. Зазвичай сокет ``connect``\\ починає розмову, "
"надсилаючи запит або, можливо, авторизуючись. Але це дизайнерське рішення - "
"це не правило розеток."

#: ../../howto/sockets.rst:143
msgid ""
"Now there are two sets of verbs to use for communication. You can use "
"``send`` and ``recv``, or you can transform your client socket into a file-"
"like beast and use ``read`` and ``write``. The latter is the way Java "
"presents its sockets. I'm not going to talk about it here, except to warn "
"you that you need to use ``flush`` on sockets. These are buffered \"files\","
" and a common mistake is to ``write`` something, and then ``read`` for a "
"reply. Without a ``flush`` in there, you may wait forever for the reply, "
"because the request may still be in your output buffer."
msgstr ""
"Тепер є два набори дієслів для спілкування. Ви можете використовувати "
"``send`` і ``recv``, або ви можете перетворити свій клієнтський сокет на "
"звіра, схожого на файл, і використовувати ``read`` і ``write``. Останнім є "
"те, як Java представляє свої сокети. Я не збираюся говорити про це тут, "
"окрім того, щоб попередити вас, що вам потрібно використовувати "
"``промивання`` для сокетів. Це буферизовані \"файли\", і поширеною помилкою "
"є ``написати`` щось, а потім ``читати`` для відповіді. Без ``скидання`` ви "
"можете вічно чекати відповіді, оскільки запит може все ще перебувати у "
"вашому вихідному буфері."

#: ../../howto/sockets.rst:152
msgid ""
"Now we come to the major stumbling block of sockets - ``send`` and ``recv`` "
"operate on the network buffers. They do not necessarily handle all the bytes"
" you hand them (or expect from them), because their major focus is handling "
"the network buffers. In general, they return when the associated network "
"buffers have been filled (``send``) or emptied (``recv``). They then tell "
"you how many bytes they handled. It is *your* responsibility to call them "
"again until your message has been completely dealt with."
msgstr ""
"Тепер ми підходимо до основного каменю спотикання сокетів - ``send`` і "
"``recv`` працюють з мережевими буферами. Вони не обов’язково обробляють усі "
"байти, які ви їм передаєте (або очікуєте від них), тому що їх основна увага "
"приділяється роботі з мережевими буферами. Зазвичай вони повертаються, коли "
"пов’язані мережеві буфери заповнено (``send``) або спустошено (``recv``). "
"Потім вони повідомлять вам, скільки байтів вони обробили. Це *ваш* обов’язок"
" зателефонувати їм знову, доки ваше повідомлення не буде повністю "
"розглянуто."

#: ../../howto/sockets.rst:160
msgid ""
"When a ``recv`` returns 0 bytes, it means the other side has closed (or is "
"in the process of closing) the connection.  You will not receive any more "
"data on this connection. Ever.  You may be able to send data successfully; "
"I'll talk more about this later."
msgstr ""
"Коли ``recv`` повертає 0 байтів, це означає, що інша сторона закрила (або "
"знаходиться в процесі закриття) з’єднання. Ви більше не отримуватимете "
"жодних даних за цим з’єднанням. Коли-небудь. Можливо, ви зможете успішно "
"надіслати дані; Я розповім про це пізніше."

#: ../../howto/sockets.rst:165
msgid ""
"A protocol like HTTP uses a socket for only one transfer. The client sends a"
" request, then reads a reply.  That's it. The socket is discarded. This "
"means that a client can detect the end of the reply by receiving 0 bytes."
msgstr ""
"Такий протокол, як HTTP, використовує сокет лише для однієї передачі. Клієнт"
" надсилає запит, потім читає відповідь. Це воно. Розетка викидається. Це "
"означає, що клієнт може виявити кінець відповіді, отримавши 0 байтів."

#: ../../howto/sockets.rst:169
msgid ""
"But if you plan to reuse your socket for further transfers, you need to "
"realize that *there is no* :abbr:`EOT (End of Transfer)` *on a socket.* I "
"repeat: if a socket ``send`` or ``recv`` returns after handling 0 bytes, the"
" connection has been broken.  If the connection has *not* been broken, you "
"may wait on a ``recv`` forever, because the socket will *not* tell you that "
"there's nothing more to read (for now).  Now if you think about that a bit, "
"you'll come to realize a fundamental truth of sockets: *messages must either"
" be fixed length* (yuck), *or be delimited* (shrug), *or indicate how long "
"they are* (much better), *or end by shutting down the connection*. The "
"choice is entirely yours, (but some ways are righter than others)."
msgstr ""
"Але якщо ви плануєте повторно використовувати свій сокет для подальших "
"передач, ви повинні розуміти, що *немає* :abbr:`EOT (End of Transfer)` *у "
"сокеті*. Я повторюю: якщо сокет ``надсилає`` або ``recv`` повертає після "
"обробки 0 байт, з'єднання було розірвано. Якщо з’єднання *не* розірвано, ви "
"можете чекати ``recv`` вічно, тому що сокет *не* скаже вам, що більше нічого"
" читати (наразі). Тепер, якщо ви трохи подумаєте про це, ви зрозумієте "
"фундаментальну істину сокетів: *повідомлення мають бути фіксованої довжини* "
"(фу), *або бути розділеними* (знизати плечима), *або вказати їхню довжину* "
"(набагато краще), *або закінчити, вимкнувши з’єднання*. Вибір виключно за "
"вами (але деякі шляхи правильніші за інші)."

#: ../../howto/sockets.rst:180
msgid ""
"Assuming you don't want to end the connection, the simplest solution is a "
"fixed length message::"
msgstr ""
"Якщо припустити, що ви не хочете розривати з’єднання, найпростішим рішенням "
"є повідомлення фіксованої довжини::"

#: ../../howto/sockets.rst:183
msgid ""
"class MySocket:\n"
"    \"\"\"demonstration class only\n"
"      - coded for clarity, not efficiency\n"
"    \"\"\"\n"
"\n"
"    def __init__(self, sock=None):\n"
"        if sock is None:\n"
"            self.sock = socket.socket(\n"
"                            socket.AF_INET, socket.SOCK_STREAM)\n"
"        else:\n"
"            self.sock = sock\n"
"\n"
"    def connect(self, host, port):\n"
"        self.sock.connect((host, port))\n"
"\n"
"    def mysend(self, msg):\n"
"        totalsent = 0\n"
"        while totalsent < MSGLEN:\n"
"            sent = self.sock.send(msg[totalsent:])\n"
"            if sent == 0:\n"
"                raise RuntimeError(\"socket connection broken\")\n"
"            totalsent = totalsent + sent\n"
"\n"
"    def myreceive(self):\n"
"        chunks = []\n"
"        bytes_recd = 0\n"
"        while bytes_recd < MSGLEN:\n"
"            chunk = self.sock.recv(min(MSGLEN - bytes_recd, 2048))\n"
"            if chunk == b'':\n"
"                raise RuntimeError(\"socket connection broken\")\n"
"            chunks.append(chunk)\n"
"            bytes_recd = bytes_recd + len(chunk)\n"
"        return b''.join(chunks)"
msgstr ""

#: ../../howto/sockets.rst:217
msgid ""
"The sending code here is usable for almost any messaging scheme - in Python "
"you send strings, and you can use ``len()`` to determine its length (even if"
" it has embedded ``\\0`` characters). It's mostly the receiving code that "
"gets more complex. (And in C, it's not much worse, except you can't use "
"``strlen`` if the message has embedded ``\\0``\\ s.)"
msgstr ""
"Код надсилання тут можна використовувати майже для будь-якої схеми обміну "
"повідомленнями - у Python ви надсилаєте рядки, і ви можете використовувати "
"``len()``, щоб визначити його довжину (навіть якщо він містить символи "
"``\\0``). Здебільшого код отримання стає складнішим. (У C це не набагато "
"гірше, за винятком того, що ви не можете використовувати ``strlen``, якщо "
"повідомлення містить ``\\0``\\ s.)"

#: ../../howto/sockets.rst:223
msgid ""
"The easiest enhancement is to make the first character of the message an "
"indicator of message type, and have the type determine the length. Now you "
"have two ``recv``\\ s - the first to get (at least) that first character so "
"you can look up the length, and the second in a loop to get the rest. If you"
" decide to go the delimited route, you'll be receiving in some arbitrary "
"chunk size, (4096 or 8192 is frequently a good match for network buffer "
"sizes), and scanning what you've received for a delimiter."
msgstr ""
"Найпростішим удосконаленням є зробити перший символ повідомлення індикатором"
" типу повідомлення, а тип визначати довжину. Тепер у вас є два ``recv``\\ - "
"перший, щоб отримати (принаймні) перший символ, щоб ви могли переглянути "
"довжину, а другий у циклі, щоб отримати решту. Якщо ви вирішите скористатися"
" розмежованим маршрутом, ви отримуватимете довільний розмір фрагмента (4096 "
"або 8192 часто добре підходить для розмірів мережевого буфера) і "
"скануватимете отримане як роздільник."

#: ../../howto/sockets.rst:231
msgid ""
"One complication to be aware of: if your conversational protocol allows "
"multiple messages to be sent back to back (without some kind of reply), and "
"you pass ``recv`` an arbitrary chunk size, you may end up reading the start "
"of a following message. You'll need to put that aside and hold onto it, "
"until it's needed."
msgstr ""
"Одна складність, про яку слід пам’ятати: якщо ваш протокол розмови дозволяє "
"надсилати декілька повідомлень один за одним (без відповіді), і ви передаєте"
" ``recv`` довільного розміру фрагмента, ви можете завершити читання початку "
"наступне повідомлення. Вам потрібно буде відкласти це вбік і тримати, поки "
"воно не знадобиться."

#: ../../howto/sockets.rst:237
msgid ""
"Prefixing the message with its length (say, as 5 numeric characters) gets "
"more complex, because (believe it or not), you may not get all 5 characters "
"in one ``recv``. In playing around, you'll get away with it; but in high "
"network loads, your code will very quickly break unless you use two ``recv``"
" loops - the first to determine the length, the second to get the data part "
"of the message. Nasty. This is also when you'll discover that ``send`` does "
"not always manage to get rid of everything in one pass. And despite having "
"read this, you will eventually get bit by it!"
msgstr ""
"Додавання до повідомлення довжини (скажімо, 5 цифрових символів) стає "
"складнішим, оскільки (вірте чи ні), ви можете не отримати всі 5 символів в "
"одному ``recv``. Граючись, ви вийдете з рук; але за високого навантаження на"
" мережу ваш код дуже швидко зламається, якщо ви не використовуєте два цикли "
"``recv`` - перший для визначення довжини, другий для отримання частини даних"
" повідомлення. Огидно. Тут також ви побачите, що ``send`` не завжди вдається"
" позбутися всього за один прохід. І, незважаючи на те, що ви прочитали це, "
"ви зрештою розчулитесь!"

#: ../../howto/sockets.rst:246
msgid ""
"In the interests of space, building your character, (and preserving my "
"competitive position), these enhancements are left as an exercise for the "
"reader. Lets move on to cleaning up."
msgstr ""
"В інтересах простору, побудови вашого персонажа (і збереження моєї "
"конкурентної позиції), ці вдосконалення залишаються як вправа для читача. "
"Переходимо до прибирання."

#: ../../howto/sockets.rst:252
msgid "Binary Data"
msgstr "Двійкові дані"

#: ../../howto/sockets.rst:254
msgid ""
"It is perfectly possible to send binary data over a socket. The major "
"problem is that not all machines use the same formats for binary data. For "
"example, `network byte order "
"<https://en.wikipedia.org/wiki/Endianness#Networking>`_ is big-endian, with "
"the most significant byte first, so a 16 bit integer with the value ``1`` "
"would be the two hex bytes ``00 01``. However, most common processors "
"(x86/AMD64, ARM, RISC-V), are little-endian, with the least significant byte"
" first - that same ``1`` would be ``01 00``."
msgstr ""
"Цілком можливо надсилати двійкові дані через сокет. Основна проблема полягає"
" в тому, що не всі машини використовують однакові формати для двійкових "
"даних. Наприклад, `мережевий порядок байтів "
"<https://en.wikipedia.org/wiki/Endianness#Networking>`_ є старшим байтом, із"
" старшим байтом першим, тому 16-бітове ціле число зі значенням ``1`` буде "
"двома шістнадцятковими байтами ``00 01``. Однак більшість поширених "
"процесорів (x86/AMD64, ARM, RISC-V) мають байт від маленького байта з "
"молодшим байтом першим - той самий ``1`` буде ``01 00``."

#: ../../howto/sockets.rst:262
msgid ""
"Socket libraries have calls for converting 16 and 32 bit integers - ``ntohl,"
" htonl, ntohs, htons`` where \"n\" means *network* and \"h\" means *host*, "
"\"s\" means *short* and \"l\" means *long*. Where network order is host "
"order, these do nothing, but where the machine is byte-reversed, these swap "
"the bytes around appropriately."
msgstr ""
"Бібліотеки сокетів містять виклики для перетворення 16- та 32-розрядних "
"цілих чисел — ``ntohl, htonl, ntohs, htons``, де \"n\" означає *мережа*, а "
"\"h\" означає *host*, \"s\" означає *short* і \"l\". \" означає *довгий*. "
"Там, де мережевий порядок є порядком хостів, вони нічого не роблять, але "
"там, де машина реверсована, байти міняються місцями належним чином."

#: ../../howto/sockets.rst:268
msgid ""
"In these days of 64-bit machines, the ASCII representation of binary data is"
" frequently smaller than the binary representation. That's because a "
"surprising amount of the time, most integers have the value 0, or maybe 1. "
"The string ``\"0\"`` would be two bytes, while a full 64-bit integer would "
"be 8. Of course, this doesn't fit well with fixed-length messages. "
"Decisions, decisions."
msgstr ""
"У наші дні 64-розрядних машин представлення двійкових даних у форматі ASCII "
"часто менше, ніж у двійковому. Це тому, що на диво більшість цілих чисел "
"мають значення 0 або, можливо, 1. Рядок ``\"0\"`` складатиметься з двох "
"байтів, тоді як повне 64-розрядне ціле число буде 8. Звичайно, це не не "
"підходить для повідомлень фіксованої довжини. Рішення, рішення."

#: ../../howto/sockets.rst:277
msgid "Disconnecting"
msgstr "Відключення"

#: ../../howto/sockets.rst:279
msgid ""
"Strictly speaking, you're supposed to use ``shutdown`` on a socket before "
"you ``close`` it.  The ``shutdown`` is an advisory to the socket at the "
"other end. Depending on the argument you pass it, it can mean \"I'm not "
"going to send anymore, but I'll still listen\", or \"I'm not listening, good"
" riddance!\".  Most socket libraries, however, are so used to programmers "
"neglecting to use this piece of etiquette that normally a ``close`` is the "
"same as ``shutdown(); close()``.  So in most situations, an explicit "
"``shutdown`` is not needed."
msgstr ""
"Власне кажучи, ви повинні використовувати ``shutdown`` для сокета перед тим,"
" як ``закрити`` його. ``вимкнення`` є порадою для розетки на іншому кінці. "
"Залежно від аргументу, який ви передаєте, це може означати \"Я більше не "
"надсилаю, але я все одно вислухаю\", або \"Я не слухаю, ну добре!\". Однак "
"більшість бібліотек сокетів настільки звикли до того, що програмісти "
"нехтують використанням цього правила етикету, що зазвичай ``close`` є таким "
"самим, як ``shutdown(); close()``. Тож у більшості ситуацій явне "
"``вимкнення`` не потрібне."

#: ../../howto/sockets.rst:287
msgid ""
"One way to use ``shutdown`` effectively is in an HTTP-like exchange. The "
"client sends a request and then does a ``shutdown(1)``. This tells the "
"server \"This client is done sending, but can still receive.\"  The server "
"can detect \"EOF\" by a receive of 0 bytes. It can assume it has the "
"complete request.  The server sends a reply. If the ``send`` completes "
"successfully then, indeed, the client was still receiving."
msgstr ""
"Один із способів ефективного використання ``shutdown`` - це HTTP-подібний "
"обмін. Клієнт надсилає запит, а потім виконує ``shutdown(1)``. Це повідомляє"
" серверу: \"Цей клієнт завершив надсилання, але все ще може отримувати\". "
"Сервер може виявити \"EOF\" за отриманням 0 байтів. Він може вважати, що має"
" повний запит. Сервер надсилає відповідь. Якщо ``надсилання`` завершилося "
"успішно, тоді клієнт справді все ще отримував."

#: ../../howto/sockets.rst:294
msgid ""
"Python takes the automatic shutdown a step further, and says that when a "
"socket is garbage collected, it will automatically do a ``close`` if it's "
"needed. But relying on this is a very bad habit. If your socket just "
"disappears without doing a ``close``, the socket at the other end may hang "
"indefinitely, thinking you're just being slow. *Please* ``close`` your "
"sockets when you're done."
msgstr ""
"Python робить автоматичне завершення роботи на крок далі, і каже, що коли "
"сокет збирає сміття, він автоматично виконає ``закриття``, якщо це "
"необхідно. Але покладатися на це – дуже погана звичка. Якщо ваш сокет просто"
" зникне, не виконавши ``закриття``, сокет на іншому кінці може зависнути "
"нескінченно, вважаючи, що ви просто повільні. *Будь ласка* ``закрийте`` свої"
" сокети, коли закінчите."

#: ../../howto/sockets.rst:302
msgid "When Sockets Die"
msgstr "Коли сокети вмирають"

#: ../../howto/sockets.rst:304
msgid ""
"Probably the worst thing about using blocking sockets is what happens when "
"the other side comes down hard (without doing a ``close``). Your socket is "
"likely to hang. TCP is a reliable protocol, and it will wait a long, long "
"time before giving up on a connection. If you're using threads, the entire "
"thread is essentially dead. There's not much you can do about it. As long as"
" you aren't doing something dumb, like holding a lock while doing a blocking"
" read, the thread isn't really consuming much in the way of resources. Do "
"*not* try to kill the thread - part of the reason that threads are more "
"efficient than processes is that they avoid the overhead associated with the"
" automatic recycling of resources. In other words, if you do manage to kill "
"the thread, your whole process is likely to be screwed up."
msgstr ""
"Ймовірно, найгірше у використанні блокування сокетів – це те, що "
"відбувається, коли інша сторона сильно опускається (без виконання "
"``закриття``). Ваша розетка, швидше за все, зависла. TCP є надійним "
"протоколом, і він чекатиме дуже довго, перш ніж відмовитися від з’єднання. "
"Якщо ви використовуєте потоки, весь потік фактично мертвий. З цим мало що "
"можна зробити. Поки ви не робите щось дурне, наприклад, утримуєте блокування"
" під час виконання блокуючого читання, потік насправді не споживає багато "
"ресурсів. *Не* намагайтеся припинити потік – одна з причин того, що потоки "
"ефективніші за процеси, полягає в тому, що вони уникають накладних витрат, "
"пов’язаних з автоматичною переробкою ресурсів. Іншими словами, якщо вам таки"
" вдасться припинити потік, весь ваш процес, швидше за все, буде зіпсовано."

#: ../../howto/sockets.rst:318
msgid "Non-blocking Sockets"
msgstr "Неблокуючі сокети"

#: ../../howto/sockets.rst:320
msgid ""
"If you've understood the preceding, you already know most of what you need "
"to know about the mechanics of using sockets. You'll still use the same "
"calls, in much the same ways. It's just that, if you do it right, your app "
"will be almost inside-out."
msgstr ""
"Якщо ви зрозуміли попереднє, ви вже знаєте більшість того, що вам потрібно "
"знати про механізми використання розеток. Ви й надалі використовуватимете ті"
" самі дзвінки майже тими самими способами. Просто якщо ви зробите це "
"правильно, ваш додаток буде майже навиворіт."

#: ../../howto/sockets.rst:325
msgid ""
"In Python, you use ``socket.setblocking(False)`` to make it non-blocking. In"
" C, it's more complex, (for one thing, you'll need to choose between the BSD"
" flavor ``O_NONBLOCK`` and the almost indistinguishable POSIX flavor "
"``O_NDELAY``, which is completely different from ``TCP_NODELAY``), but it's "
"the exact same idea. You do this after creating the socket, but before using"
" it. (Actually, if you're nuts, you can switch back and forth.)"
msgstr ""
"У Python ви використовуєте ``socket.setblocking(False)``, щоб зробити його "
"неблокуючим. У C це складніше (з одного боку, вам потрібно буде вибирати між"
" варіантом BSD ``O_NONBLOCK`` і майже невідмітним варіантом POSIX "
"``O_NDELAY``, який повністю відрізняється від ``TCP_NODELAY``) , але це та "
"сама ідея. Ви робите це після створення сокета, але перед його "
"використанням. (Насправді, якщо ви божевільні, ви можете перемикатися вперед"
" і назад.)"

#: ../../howto/sockets.rst:332
msgid ""
"The major mechanical difference is that ``send``, ``recv``, ``connect`` and "
"``accept`` can return without having done anything. You have (of course) a "
"number of choices. You can check return code and error codes and generally "
"drive yourself crazy. If you don't believe me, try it sometime. Your app "
"will grow large, buggy and suck CPU. So let's skip the brain-dead solutions "
"and do it right."
msgstr ""
"Основна механічна відмінність полягає в тому, що ``send``, ``recv``, "
"``connect`` і ``accept`` можуть повернутися, не зробивши нічого. У вас є "
"(звичайно) кілька варіантів. Можна перевірити код повернення і коди помилок "
"і взагалі звести себе з розуму. Якщо ви мені не вірите, спробуйте якось. "
"Ваша програма буде рости, матиме помилки та завантажуватиме процесор. Тож "
"давайте пропустимо рішення, що призводять до смерті мозку, і зробимо це "
"правильно."

#: ../../howto/sockets.rst:339
msgid "Use ``select``."
msgstr "Використовуйте ``вибрати``."

#: ../../howto/sockets.rst:341
msgid ""
"In C, coding ``select`` is fairly complex. In Python, it's a piece of cake, "
"but it's close enough to the C version that if you understand ``select`` in "
"Python, you'll have little trouble with it in C::"
msgstr ""
"У C кодування ``select`` є досить складним. У Python це непросто, але він "
"досить близький до версії C, тому якщо ви розумієте ``select`` у Python, у "
"вас не буде проблем з цим у C::"

#: ../../howto/sockets.rst:345
msgid ""
"ready_to_read, ready_to_write, in_error = \\\n"
"               select.select(\n"
"                  potential_readers,\n"
"                  potential_writers,\n"
"                  potential_errs,\n"
"                  timeout)"
msgstr ""

#: ../../howto/sockets.rst:352
msgid ""
"You pass ``select`` three lists: the first contains all sockets that you "
"might want to try reading; the second all the sockets you might want to try "
"writing to, and the last (normally left empty) those that you want to check "
"for errors. You should note that a socket can go into more than one list. "
"The ``select`` call is blocking, but you can give it a timeout. This is "
"generally a sensible thing to do - give it a nice long timeout (say a "
"minute) unless you have good reason to do otherwise."
msgstr ""
"Ви передаєте ``select`` три списки: перший містить усі сокети, які ви можете"
" спробувати прочитати; другий – усі сокети, до яких ви можете спробувати "
"записати, а останній (зазвичай залишають порожнім) ті, які ви хочете "
"перевірити на наявність помилок. Зверніть увагу, що сокет може входити до "
"кількох списків. Виклик ``select`` блокується, але ви можете дати йому тайм-"
"аут. Загалом це розумна річ — дайте гарний довгий тайм-аут (скажімо, "
"хвилину), якщо у вас немає вагомих причин для цього."

#: ../../howto/sockets.rst:360
msgid ""
"In return, you will get three lists. They contain the sockets that are "
"actually readable, writable and in error. Each of these lists is a subset "
"(possibly empty) of the corresponding list you passed in."
msgstr ""
"Натомість ви отримаєте три списки. Вони містять сокети, які фактично "
"доступні для читання, запису та помилок. Кожен із цих списків є підмножиною "
"(можливо, порожньою) відповідного списку, який ви передали."

#: ../../howto/sockets.rst:364
msgid ""
"If a socket is in the output readable list, you can be as-close-to-certain-"
"as-we-ever-get-in-this-business that a ``recv`` on that socket will return "
"*something*. Same idea for the writable list. You'll be able to send "
"*something*. Maybe not all you want to, but *something* is better than "
"nothing.  (Actually, any reasonably healthy socket will return as writable -"
" it just means outbound network buffer space is available.)"
msgstr ""
"Якщо сокет є у вихідному списку доступних для читання, ви можете бути "
"настільки ж близькі до впевненості, що ``recv`` для цього сокета поверне "
"*щось*. Така сама ідея для списку доступного для запису. Ви зможете "
"надіслати *щось*. Можливо, не все, що ви хочете, але *щось* краще, ніж "
"нічого. (Насправді, будь-який досить справний сокет повернеться як доступний"
" для запису - це просто означає, що вихідний мережевий буфер доступний.)"

#: ../../howto/sockets.rst:371
msgid ""
"If you have a \"server\" socket, put it in the potential_readers list. If it"
" comes out in the readable list, your ``accept`` will (almost certainly) "
"work. If you have created a new socket to ``connect`` to someone else, put "
"it in the potential_writers list. If it shows up in the writable list, you "
"have a decent chance that it has connected."
msgstr ""
"Якщо у вас є \"серверний\" сокет, додайте його до списку potencial_readers. "
"Якщо він з’явиться у списку доступних для читання, ваш ``accept`` (майже "
"напевно) спрацює. Якщо ви створили новий сокет для ``з’єднання`` з кимось "
"іншим, додайте його до списку potencijal_writers. Якщо він відображається у "
"списку доступних для запису, у вас є пристойний шанс, що він підключився."

#: ../../howto/sockets.rst:377
msgid ""
"Actually, ``select`` can be handy even with blocking sockets. It's one way "
"of determining whether you will block - the socket returns as readable when "
"there's something in the buffers.  However, this still doesn't help with the"
" problem of determining whether the other end is done, or just busy with "
"something else."
msgstr ""
"Фактично, ``select`` може бути зручним навіть з блокуванням сокетів. Це один"
" із способів визначити, чи будете ви блокувати – сокет повертається як "
"читабельний, коли щось є в буферах. Однак це все ще не допомагає вирішити "
"проблему визначення того, чи інший кінець готовий, чи він просто зайнятий "
"чимось іншим."

#: ../../howto/sockets.rst:382
msgid ""
"**Portability alert**: On Unix, ``select`` works both with the sockets and "
"files. Don't try this on Windows. On Windows, ``select`` works with sockets "
"only. Also note that in C, many of the more advanced socket options are done"
" differently on Windows. In fact, on Windows I usually use threads (which "
"work very, very well) with my sockets."
msgstr ""
"**Попередження про переносимість**: в Unix ``select`` працює як з сокетами, "
"так і з файлами. Не пробуйте це на Windows. У Windows ``select`` працює лише"
" з сокетами. Також зауважте, що в C багато розширені параметри сокетів "
"виконуються інакше у Windows. Фактично, у Windows я зазвичай використовую "
"потоки (які дуже, дуже добре працюють) зі своїми сокетами."
