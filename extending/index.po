# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Dmytro Kazanzhy, 2022
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-11-22 14:17+0000\n"
"PO-Revision-Date: 2021-06-28 00:52+0000\n"
"Last-Translator: Dmytro Kazanzhy, 2022\n"
"Language-Team: Ukrainian (https://app.transifex.com/python-doc/teams/5390/uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != 11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % 100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || (n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

#: ../../extending/index.rst:5
msgid "Extending and Embedding the Python Interpreter"
msgstr "Розширення та вбудовування інтерпретатора Python"

#: ../../extending/index.rst:7
msgid ""
"This document describes how to write modules in C or C++ to extend the "
"Python interpreter with new modules.  Those modules can not only define new "
"functions but also new object types and their methods.  The document also "
"describes how to embed the Python interpreter in another application, for "
"use as an extension language.  Finally, it shows how to compile and link "
"extension modules so that they can be loaded dynamically (at run time) into "
"the interpreter, if the underlying operating system supports this feature."
msgstr ""
"У цьому документі описано, як писати модулі на C або C++, щоб розширити "
"інтерпретатор Python новими модулями. Ці модулі можуть не лише визначати "
"нові функції, але й нові типи об’єктів та їхні методи. У документі також "
"описано, як вбудувати інтерпретатор Python в іншу програму для використання "
"як мови розширення. Нарешті, показано, як компілювати та зв’язувати модулі "
"розширення, щоб їх можна було динамічно завантажувати (під час виконання) в "
"інтерпретатор, якщо базова операційна система підтримує цю функцію."

#: ../../extending/index.rst:15
msgid ""
"This document assumes basic knowledge about Python.  For an informal "
"introduction to the language, see :ref:`tutorial-index`.  :ref:`reference-"
"index` gives a more formal definition of the language.  :ref:`library-index`"
" documents the existing object types, functions and modules (both built-in "
"and written in Python) that give the language its wide application range."
msgstr ""
"Цей документ передбачає базові знання про Python. Для неформального "
"ознайомлення з мовою див. :ref:`tutorial-index`. :ref:`reference-index` дає "
"більш формальне визначення мови. :ref:`library-index` документує існуючі "
"типи об’єктів, функції та модулі (як вбудовані, так і написані на Python), "
"які надають мові широкий спектр застосування."

#: ../../extending/index.rst:21
msgid ""
"For a detailed description of the whole Python/C API, see the separate "
":ref:`c-api-index`."
msgstr ""
"Для детального опису всього API Python/C перегляньте окремий :ref:`c-api-"
"index`."

#: ../../extending/index.rst:26
msgid "Recommended third party tools"
msgstr "Рекомендовані сторонні інструменти"

#: ../../extending/index.rst:28
msgid ""
"This guide only covers the basic tools for creating extensions provided as "
"part of this version of CPython. Third party tools like `Cython "
"<https://cython.org/>`_, `cffi <https://cffi.readthedocs.io>`_, `SWIG "
"<https://www.swig.org>`_ and `Numba <https://numba.pydata.org/>`_ offer both"
" simpler and more sophisticated approaches to creating C and C++ extensions "
"for Python."
msgstr ""

#: ../../extending/index.rst:37
msgid ""
"`Python Packaging User Guide: Binary Extensions "
"<https://packaging.python.org/guides/packaging-binary-extensions/>`_"
msgstr ""
"`Посібник користувача з упаковки Python: двійкові розширення "
"<https://packaging.python.org/guides/packaging-binary-extensions/>`_"

#: ../../extending/index.rst:38
msgid ""
"The Python Packaging User Guide not only covers several available tools that"
" simplify the creation of binary extensions, but also discusses the various "
"reasons why creating an extension module may be desirable in the first "
"place."
msgstr ""
"Посібник користувача з упакування Python не лише охоплює кілька доступних "
"інструментів, які спрощують створення бінарних розширень, але й обговорює "
"різні причини, чому створення модуля розширення може бути бажаним у першу "
"чергу."

#: ../../extending/index.rst:45
msgid "Creating extensions without third party tools"
msgstr "Створення розширень без сторонніх інструментів"

#: ../../extending/index.rst:47
msgid ""
"This section of the guide covers creating C and C++ extensions without "
"assistance from third party tools. It is intended primarily for creators of "
"those tools, rather than being a recommended way to create your own C "
"extensions."
msgstr ""
"У цьому розділі посібника описано створення розширень C і C++ без допомоги "
"сторонніх інструментів. Він призначений насамперед для розробників цих "
"інструментів, а не як рекомендований спосіб створення власних розширень C."

#: ../../extending/index.rst:63
msgid "Embedding the CPython runtime in a larger application"
msgstr "Вбудовування середовища виконання CPython у більшу програму"

#: ../../extending/index.rst:65
msgid ""
"Sometimes, rather than creating an extension that runs inside the Python "
"interpreter as the main application, it is desirable to instead embed the "
"CPython runtime inside a larger application. This section covers some of the"
" details involved in doing that successfully."
msgstr ""
"Іноді замість створення розширення, яке працює в інтерпретаторі Python як "
"основної програми, бажано замість цього вбудувати середовище виконання "
"CPython у більшу програму. У цьому розділі описано деякі деталі, необхідні "
"для успішного виконання цього завдання."
