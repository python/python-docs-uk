# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Dmytro Kazanzhy, 2023
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-11-19 01:00+0000\n"
"PO-Revision-Date: 2021-06-28 01:06+0000\n"
"Last-Translator: Dmytro Kazanzhy, 2023\n"
"Language-Team: Ukrainian (https://app.transifex.com/python-doc/teams/5390/uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != 11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % 100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || (n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

#: ../../library/gettext.rst:2
msgid ":mod:`!gettext` --- Multilingual internationalization services"
msgstr ""

#: ../../library/gettext.rst:10
msgid "**Source code:** :source:`Lib/gettext.py`"
msgstr "**Вихідний код:** :source:`Lib/gettext.py`"

#: ../../library/gettext.rst:14
msgid ""
"The :mod:`gettext` module provides internationalization (I18N) and "
"localization (L10N) services for your Python modules and applications. It "
"supports both the GNU :program:`gettext` message catalog API and a higher "
"level, class-based API that may be more appropriate for Python files.  The "
"interface described below allows you to write your module and application "
"messages in one natural language, and provide a catalog of translated "
"messages for running under different natural languages."
msgstr ""
"Модуль :mod:`gettext` надає служби інтернаціоналізації (I18N) і локалізації "
"(L10N) для ваших модулів і програм Python. Він підтримує як API каталогу "
"повідомлень GNU :program:`gettext`, так і API вищого рівня на основі класів,"
" який може бути більш відповідним для файлів Python. Інтерфейс, описаний "
"нижче, дозволяє вам писати повідомлення модуля та додатка однією природною "
"мовою та надавати каталог перекладених повідомлень для роботи на різних "
"природних мовах."

#: ../../library/gettext.rst:22
msgid ""
"Some hints on localizing your Python modules and applications are also "
"given."
msgstr ""
"Також подано деякі підказки щодо локалізації ваших модулів і програм Python."

#: ../../library/gettext.rst:26
msgid "GNU :program:`gettext` API"
msgstr "GNU :program:`gettext` API"

#: ../../library/gettext.rst:28
msgid ""
"The :mod:`gettext` module defines the following API, which is very similar "
"to the GNU :program:`gettext` API.  If you use this API you will affect the "
"translation of your entire application globally.  Often this is what you "
"want if your application is monolingual, with the choice of language "
"dependent on the locale of your user.  If you are localizing a Python "
"module, or if your application needs to switch languages on the fly, you "
"probably want to use the class-based API instead."
msgstr ""
"Модуль :mod:`gettext` визначає наступний API, який дуже схожий на GNU "
":program:`gettext` API. Якщо ви використовуєте цей API, ви вплинете на "
"глобальний переклад усієї вашої програми. Часто це те, що вам потрібно, якщо"
" ваша програма є одномовною, а вибір мови залежить від локалі вашого "
"користувача. Якщо ви локалізуєте модуль Python або якщо вашій програмі "
"потрібно миттєво перемикати мови, ви, ймовірно, захочете замість цього "
"використовувати API на основі класів."

#: ../../library/gettext.rst:39
msgid ""
"Bind the *domain* to the locale directory *localedir*.  More concretely, "
":mod:`gettext` will look for binary :file:`.mo` files for the given domain "
"using the path (on Unix): "
":file:`{localedir}/{language}/LC_MESSAGES/{domain}.mo`, where *language* is "
"searched for in the environment variables :envvar:`LANGUAGE`, "
":envvar:`LC_ALL`, :envvar:`LC_MESSAGES`, and :envvar:`LANG` respectively."
msgstr ""
"Прив’яжіть *домен* до каталогу локалі *localedir*. Точніше, :mod:`gettext` "
"шукатиме двійкові файли :file:`.mo` для вказаного домену за шляхом (в Unix):"
" :file:`{localedir}/{language}/LC_MESSAGES/{domain} .mo`, де *мова* "
"шукається в змінних середовища :envvar:`LANGUAGE`, :envvar:`LC_ALL`, "
":envvar:`LC_MESSAGES` та :envvar:`LANG` відповідно."

#: ../../library/gettext.rst:45
msgid ""
"If *localedir* is omitted or ``None``, then the current binding for *domain*"
" is returned. [#]_"
msgstr ""
"Якщо *localedir* пропущено або ``None``, повертається поточне прив’язування "
"для *domain*. [#]_"

#: ../../library/gettext.rst:51
msgid ""
"Change or query the current global domain.  If *domain* is ``None``, then "
"the current global domain is returned, otherwise the global domain is set to"
" *domain*, which is returned."
msgstr ""
"Змініть або запитайте поточний глобальний домен. Якщо *domain* має значення "
"``None``, тоді повертається поточний глобальний домен, інакше глобальний "
"домен встановлюється на *domain*, який повертається."

#: ../../library/gettext.rst:59
msgid ""
"Return the localized translation of *message*, based on the current global "
"domain, language, and locale directory.  This function is usually aliased as"
" :func:`!_` in the local namespace (see examples below)."
msgstr ""

#: ../../library/gettext.rst:66
msgid ""
"Like :func:`.gettext`, but look the message up in the specified *domain*."
msgstr "Як :func:`.gettext`, але шукайте повідомлення у вказаному *доміні*."

#: ../../library/gettext.rst:71
msgid ""
"Like :func:`.gettext`, but consider plural forms. If a translation is found,"
" apply the plural formula to *n*, and return the resulting message (some "
"languages have more than two plural forms). If no translation is found, "
"return *singular* if *n* is 1; return *plural* otherwise."
msgstr ""
"Як :func:`.gettext`, але враховуйте форми множини. Якщо переклад знайдено, "
"застосуйте формулу множини до *n* та поверніть отримане повідомлення (деякі "
"мови мають більше двох форм множини). Якщо переклад не знайдено, поверніть "
"*singular*, якщо *n* дорівнює 1; повернути *множину* інакше."

#: ../../library/gettext.rst:76
msgid ""
"The Plural formula is taken from the catalog header. It is a C or Python "
"expression that has a free variable *n*; the expression evaluates to the "
"index of the plural in the catalog. See `the GNU gettext documentation "
"<https://www.gnu.org/software/gettext/manual/gettext.html>`__ for the "
"precise syntax to be used in :file:`.po` files and the formulas for a "
"variety of languages."
msgstr ""
"Формула множини взята із заголовка каталогу. Це вираз C або Python, який має"
" вільну змінну *n*; вираз обчислюється відповідно до індексу множини в "
"каталозі. Перегляньте `документацію GNU gettext "
"<https://www.gnu.org/software/gettext/manual/gettext.html>`__ для точного "
"синтаксису, який буде використовуватися у файлах :file:`.po` та формул для "
"різних мов."

#: ../../library/gettext.rst:86
msgid ""
"Like :func:`ngettext`, but look the message up in the specified *domain*."
msgstr "Як :func:`ngettext`, але шукайте повідомлення у вказаному *доміні*."

#: ../../library/gettext.rst:94
msgid ""
"Similar to the corresponding functions without the ``p`` in the prefix (that"
" is, :func:`gettext`, :func:`dgettext`, :func:`ngettext`, "
":func:`dngettext`), but the translation is restricted to the given message "
"*context*."
msgstr ""
"Подібно до відповідних функцій без ``p`` у префіксі (тобто :func:`gettext`, "
":func:`dgettext`, :func:`ngettext`, :func:`dngettext`), але переклад "
"обмежено даним *контекстом* повідомлення."

#: ../../library/gettext.rst:101
msgid ""
"Note that GNU :program:`gettext` also defines a :func:`!dcgettext` method, "
"but this was deemed not useful and so it is currently unimplemented."
msgstr ""

#: ../../library/gettext.rst:104
msgid "Here's an example of typical usage for this API::"
msgstr "Ось приклад типового використання цього API:"

#: ../../library/gettext.rst:106
msgid ""
"import gettext\n"
"gettext.bindtextdomain('myapplication', '/path/to/my/language/directory')\n"
"gettext.textdomain('myapplication')\n"
"_ = gettext.gettext\n"
"# ...\n"
"print(_('This is a translatable string.'))"
msgstr ""

#: ../../library/gettext.rst:115
msgid "Class-based API"
msgstr "API на основі класів"

#: ../../library/gettext.rst:117
msgid ""
"The class-based API of the :mod:`gettext` module gives you more flexibility "
"and greater convenience than the GNU :program:`gettext` API.  It is the "
"recommended way of localizing your Python applications and modules.  "
":mod:`!gettext` defines a :class:`GNUTranslations` class which implements "
"the parsing of GNU :file:`.mo` format files, and has methods for returning "
"strings. Instances of this class can also install themselves in the built-in"
" namespace as the function :func:`!_`."
msgstr ""

#: ../../library/gettext.rst:127
msgid ""
"This function implements the standard :file:`.mo` file search algorithm.  It"
" takes a *domain*, identical to what :func:`textdomain` takes.  Optional "
"*localedir* is as in :func:`bindtextdomain`. Optional *languages* is a list "
"of strings, where each string is a language code."
msgstr ""
"Ця функція реалізує стандартний алгоритм пошуку файлів :file:`.mo`. Для "
"цього потрібно *домен*, ідентичний тому, що приймає :func:`textdomain`. "
"Необов’язковий *localedir* такий, як у :func:`bindtextdomain`. Необов’язкові"
" *мови* – це список рядків, де кожен рядок є кодом мови."

#: ../../library/gettext.rst:132
msgid ""
"If *localedir* is not given, then the default system locale directory is "
"used. [#]_  If *languages* is not given, then the following environment "
"variables are searched: :envvar:`LANGUAGE`, :envvar:`LC_ALL`, "
":envvar:`LC_MESSAGES`, and :envvar:`LANG`.  The first one returning a non-"
"empty value is used for the *languages* variable. The environment variables "
"should contain a colon separated list of languages, which will be split on "
"the colon to produce the expected list of language code strings."
msgstr ""
"Якщо *localedir* не вказано, використовується каталог локалі системи за "
"замовчуванням. [#]_ Якщо *мови* не вказано, шукаються такі змінні "
"середовища: :envvar:`LANGUAGE`, :envvar:`LC_ALL`, :envvar:`LC_MESSAGES` і "
":envvar:`LANG`. Перше, що повертає непорожнє значення, використовується для "
"змінної *languages*. Змінні середовища мають містити розділений двокрапкою "
"список мов, який буде розділено на двокрапку для створення очікуваного "
"списку рядків коду мови."

#: ../../library/gettext.rst:140
msgid ""
":func:`find` then expands and normalizes the languages, and then iterates "
"through them, searching for an existing file built of these components:"
msgstr ""
":func:`find` потім розширює та нормалізує мови, а потім перебирає їх, "
"шукаючи існуючий файл, створений із цих компонентів:"

#: ../../library/gettext.rst:143
msgid ":file:`{localedir}/{language}/LC_MESSAGES/{domain}.mo`"
msgstr ":file:`{localedir}/{language}/LC_MESSAGES/{domain}.mo`"

#: ../../library/gettext.rst:145
msgid ""
"The first such file name that exists is returned by :func:`find`. If no such"
" file is found, then ``None`` is returned. If *all* is given, it returns a "
"list of all file names, in the order in which they appear in the languages "
"list or the environment variables."
msgstr ""
"Перше таке ім’я файлу, яке існує, повертається :func:`find`. Якщо такий файл"
" не знайдено, повертається ``None``. Якщо задано *all*, повертається список "
"усіх імен файлів у порядку, у якому вони з’являються у списку мов або "
"змінних середовища."

#: ../../library/gettext.rst:153
msgid ""
"Return a ``*Translations`` instance based on the *domain*, *localedir*, and "
"*languages*, which are first passed to :func:`find` to get a list of the "
"associated :file:`.mo` file paths.  Instances with identical :file:`.mo` "
"file names are cached.  The actual class instantiated is *class_* if "
"provided, otherwise :class:`GNUTranslations`.  The class's constructor must "
"take a single :term:`file object` argument."
msgstr ""

#: ../../library/gettext.rst:160
msgid ""
"If multiple files are found, later files are used as fallbacks for earlier "
"ones. To allow setting the fallback, :func:`copy.copy` is used to clone each"
" translation object from the cache; the actual instance data is still shared"
" with the cache."
msgstr ""
"Якщо знайдено декілька файлів, пізніші файли використовуються як запасні для"
" попередніх. Щоб дозволити встановлення запасного варіанта, "
":func:`copy.copy` використовується для клонування кожного об’єкта перекладу "
"з кешу; фактичні дані екземпляра все ще використовуються в кеші."

#: ../../library/gettext.rst:165
msgid ""
"If no :file:`.mo` file is found, this function raises :exc:`OSError` if "
"*fallback* is false (which is the default), and returns a "
":class:`NullTranslations` instance if *fallback* is true."
msgstr ""
"Якщо файл :file:`.mo` не знайдено, ця функція викликає :exc:`OSError`, якщо "
"*fallback* має значення false (що є типовим), і повертає екземпляр "
":class:`NullTranslations`, якщо *fallback* є правда."

#: ../../library/gettext.rst:169
msgid ""
":exc:`IOError` used to be raised, it is now an alias of :exc:`OSError`."
msgstr ":exc:`IOError` раніше викликався, тепер це псевдонім :exc:`OSError`."

#: ../../library/gettext.rst:172
msgid "*codeset* parameter is removed."
msgstr ""

#: ../../library/gettext.rst:177
msgid ""
"This installs the function :func:`!_` in Python's builtins namespace, based "
"on *domain* and *localedir* which are passed to the function "
":func:`translation`."
msgstr ""

#: ../../library/gettext.rst:180
msgid ""
"For the *names* parameter, please see the description of the translation "
"object's :meth:`~NullTranslations.install` method."
msgstr ""
"Для параметра *names* див. опис методу :meth:`~NullTranslations.install` "
"об’єкта перекладу."

#: ../../library/gettext.rst:183
msgid ""
"As seen below, you usually mark the strings in your application that are "
"candidates for translation, by wrapping them in a call to the :func:`!_` "
"function, like this::"
msgstr ""

#: ../../library/gettext.rst:187
msgid "print(_('This string will be translated.'))"
msgstr ""

#: ../../library/gettext.rst:189
msgid ""
"For convenience, you want the :func:`!_` function to be installed in "
"Python's builtins namespace, so it is easily accessible in all modules of "
"your application."
msgstr ""

#: ../../library/gettext.rst:193
msgid "*names* is now a keyword-only parameter."
msgstr ""

#: ../../library/gettext.rst:197
msgid "The :class:`NullTranslations` class"
msgstr "Клас :class:`NullTranslations`"

#: ../../library/gettext.rst:199
msgid ""
"Translation classes are what actually implement the translation of original "
"source file message strings to translated message strings. The base class "
"used by all translation classes is :class:`NullTranslations`; this provides "
"the basic interface you can use to write your own specialized translation "
"classes.  Here are the methods of :class:`!NullTranslations`:"
msgstr ""
"Класи перекладу — це те, що фактично реалізує переклад рядків повідомлень "
"вихідного файлу в перекладені рядки повідомлень. Базовим класом, який "
"використовується всіма класами перекладу, є :class:`NullTranslations`; це "
"забезпечує базовий інтерфейс, який можна використовувати для написання "
"власних спеціалізованих класів перекладу. Ось методи "
":class:`!NullTranslations`:"

#: ../../library/gettext.rst:208
msgid ""
"Takes an optional :term:`file object` *fp*, which is ignored by the base "
"class. Initializes \"protected\" instance variables *_info* and *_charset* "
"which are set by derived classes, as well as *_fallback*, which is set "
"through :meth:`add_fallback`.  It then calls ``self._parse(fp)`` if *fp* is "
"not ``None``."
msgstr ""
"Приймає необов’язковий :term:`file object` *fp*, який ігнорується базовим "
"класом. Ініціалізує \"захищені\" змінні екземпляра *_info* та *_charset*, "
"які встановлюються похідними класами, а також *_fallback*, який "
"встановлюється через :meth:`add_fallback`. Потім він викликає "
"``self._parse(fp)``, якщо *fp* не є ``None``."

#: ../../library/gettext.rst:216
msgid ""
"No-op in the base class, this method takes file object *fp*, and reads the "
"data from the file, initializing its message catalog.  If you have an "
"unsupported message catalog file format, you should override this method to "
"parse your format."
msgstr ""
"No-op у базовому класі, цей метод бере файловий об’єкт *fp* і читає дані з "
"файлу, ініціалізуючи його каталог повідомлень. Якщо у вас є непідтримуваний "
"формат файлу каталогу повідомлень, вам слід замінити цей метод для аналізу "
"вашого формату."

#: ../../library/gettext.rst:224
msgid ""
"Add *fallback* as the fallback object for the current translation object. A "
"translation object should consult the fallback if it cannot provide a "
"translation for a given message."
msgstr ""
"Додайте *резервний* як резервний об’єкт для поточного об’єкта перекладу. "
"Об’єкт перекладу має звернутися до резервного варіанту, якщо він не може "
"надати переклад для даного повідомлення."

#: ../../library/gettext.rst:231
msgid ""
"If a fallback has been set, forward :meth:`!gettext` to the fallback. "
"Otherwise, return *message*.  Overridden in derived classes."
msgstr ""
"Якщо встановлено запасний варіант, перешліть :meth:`!gettext` на резервний "
"варіант. В іншому випадку поверніть *повідомлення*. Перевизначено в похідних"
" класах."

#: ../../library/gettext.rst:237
msgid ""
"If a fallback has been set, forward :meth:`!ngettext` to the fallback. "
"Otherwise, return *singular* if *n* is 1; return *plural* otherwise. "
"Overridden in derived classes."
msgstr ""
"Якщо встановлено запасний варіант, перешліть :meth:`!ngettext` до резервного"
" варіанту. В іншому випадку поверніть *singular*, якщо *n* дорівнює 1; "
"повернути *множину* інакше. Перевизначено в похідних класах."

#: ../../library/gettext.rst:244
msgid ""
"If a fallback has been set, forward :meth:`pgettext` to the fallback. "
"Otherwise, return the translated message.  Overridden in derived classes."
msgstr ""
"Якщо встановлено запасний варіант, перешліть :meth:`pgettext` на резервний "
"варіант. В іншому випадку поверніть перекладене повідомлення. Перевизначено "
"в похідних класах."

#: ../../library/gettext.rst:252
msgid ""
"If a fallback has been set, forward :meth:`npgettext` to the fallback. "
"Otherwise, return the translated message.  Overridden in derived classes."
msgstr ""
"Якщо встановлено запасний варіант, перешліть :meth:`npgettext` резервному "
"варіанту. В іншому випадку поверніть перекладене повідомлення. Перевизначено"
" в похідних класах."

#: ../../library/gettext.rst:260
msgid ""
"Return a dictionary containing the metadata found in the message catalog "
"file."
msgstr ""

#: ../../library/gettext.rst:266
msgid "Return the encoding of the message catalog file."
msgstr "Повернути кодування файлу каталогу повідомлень."

#: ../../library/gettext.rst:271
msgid ""
"This method installs :meth:`.gettext` into the built-in namespace, binding "
"it to ``_``."
msgstr ""
"Цей метод встановлює :meth:`.gettext` у вбудований простір імен, прив’язуючи"
" його до ``_``."

#: ../../library/gettext.rst:274
msgid ""
"If the *names* parameter is given, it must be a sequence containing the "
"names of functions you want to install in the builtins namespace in addition"
" to :func:`!_`.  Supported names are ``'gettext'``, ``'ngettext'``, "
"``'pgettext'``, and ``'npgettext'``."
msgstr ""

#: ../../library/gettext.rst:279
msgid ""
"Note that this is only one way, albeit the most convenient way, to make the "
":func:`!_` function available to your application.  Because it affects the "
"entire application globally, and specifically the built-in namespace, "
"localized modules should never install :func:`!_`. Instead, they should use "
"this code to make :func:`!_` available to their module::"
msgstr ""

#: ../../library/gettext.rst:285
msgid ""
"import gettext\n"
"t = gettext.translation('mymodule', ...)\n"
"_ = t.gettext"
msgstr ""

#: ../../library/gettext.rst:289
msgid ""
"This puts :func:`!_` only in the module's global namespace and so only "
"affects calls within this module."
msgstr ""

#: ../../library/gettext.rst:292
msgid "Added ``'pgettext'`` and ``'npgettext'``."
msgstr "Додано ``'pgettext'`` і ``'npgettext'``."

#: ../../library/gettext.rst:297
msgid "The :class:`GNUTranslations` class"
msgstr "Клас :class:`GNUTranslations`"

#: ../../library/gettext.rst:299
msgid ""
"The :mod:`!gettext` module provides one additional class derived from "
":class:`NullTranslations`: :class:`GNUTranslations`.  This class overrides "
":meth:`!_parse` to enable reading GNU :program:`gettext` format :file:`.mo` "
"files in both big-endian and little-endian format."
msgstr ""

#: ../../library/gettext.rst:304
msgid ""
":class:`GNUTranslations` parses optional metadata out of the translation "
"catalog. It is convention with GNU :program:`gettext` to include metadata as"
" the translation for the empty string. This metadata is in :rfc:`822`\\ "
"-style ``key: value`` pairs, and should contain the ``Project-Id-Version`` "
"key.  If the key ``Content-Type`` is found, then the ``charset`` property is"
" used to initialize the \"protected\" :attr:`!_charset` instance variable, "
"defaulting to ``None`` if not found.  If the charset encoding is specified, "
"then all message ids and message strings read from the catalog are converted"
" to Unicode using this encoding, else ASCII is assumed."
msgstr ""

#: ../../library/gettext.rst:314
msgid ""
"Since message ids are read as Unicode strings too, all ``*gettext()`` "
"methods will assume message ids as Unicode strings, not byte strings."
msgstr ""

#: ../../library/gettext.rst:317
msgid ""
"The entire set of key/value pairs are placed into a dictionary and set as "
"the \"protected\" :attr:`!_info` instance variable."
msgstr ""

#: ../../library/gettext.rst:320
msgid ""
"If the :file:`.mo` file's magic number is invalid, the major version number "
"is unexpected, or if other problems occur while reading the file, "
"instantiating a :class:`GNUTranslations` class can raise :exc:`OSError`."
msgstr ""
"Якщо магічне число файлу :file:`.mo` недійсне, основний номер версії "
"неочікуваний або якщо під час читання файлу виникають інші проблеми, "
"створення екземпляра класу :class:`GNUTranslations` може викликати "
":exc:`OSError`."

#: ../../library/gettext.rst:326
msgid ""
"The following methods are overridden from the base class implementation:"
msgstr "Наступні методи перевизначені з реалізації базового класу:"

#: ../../library/gettext.rst:330
msgid ""
"Look up the *message* id in the catalog and return the corresponding message"
" string, as a Unicode string.  If there is no entry in the catalog for the "
"*message* id, and a fallback has been set, the look up is forwarded to the "
"fallback's :meth:`~NullTranslations.gettext` method.  Otherwise, the "
"*message* id is returned."
msgstr ""
"Знайдіть ідентифікатор *повідомлення* в каталозі та поверніть відповідний "
"рядок повідомлення як рядок Unicode. Якщо в каталозі немає запису для "
"ідентифікатора *message* і встановлено резервний варіант, пошук "
"пересилається до резервного методу :meth:`~NullTranslations.gettext`. В "
"іншому випадку повертається ідентифікатор *повідомлення*."

#: ../../library/gettext.rst:339
msgid ""
"Do a plural-forms lookup of a message id.  *singular* is used as the message"
" id for purposes of lookup in the catalog, while *n* is used to determine "
"which plural form to use.  The returned message string is a Unicode string."
msgstr ""
"Виконайте пошук у формі множини ідентифікатора повідомлення. *singular* "
"використовується як ідентифікатор повідомлення для цілей пошуку в каталозі, "
"тоді як *n* використовується, щоб визначити, яку форму множини "
"використовувати. Повернений рядок повідомлення є рядком Unicode."

#: ../../library/gettext.rst:343
msgid ""
"If the message id is not found in the catalog, and a fallback is specified, "
"the request is forwarded to the fallback's "
":meth:`~NullTranslations.ngettext` method.  Otherwise, when *n* is 1 "
"*singular* is returned, and *plural* is returned in all other cases."
msgstr ""
"Якщо ідентифікатор повідомлення не знайдено в каталозі та вказано запасний "
"варіант, запит пересилається до резервного методу "
":meth:`~NullTranslations.ngettext`. В іншому випадку, коли *n* дорівнює 1, "
"повертається *однина*, а *множина* повертається в усіх інших випадках."

#: ../../library/gettext.rst:348
msgid "Here is an example::"
msgstr "Ось приклад::"

#: ../../library/gettext.rst:350
msgid ""
"n = len(os.listdir('.'))\n"
"cat = GNUTranslations(somefile)\n"
"message = cat.ngettext(\n"
"    'There is %(num)d file in this directory',\n"
"    'There are %(num)d files in this directory',\n"
"    n) % {'num': n}"
msgstr ""

#: ../../library/gettext.rst:360
msgid ""
"Look up the *context* and *message* id in the catalog and return the "
"corresponding message string, as a Unicode string.  If there is no entry in "
"the catalog for the *message* id and *context*, and a fallback has been set,"
" the look up is forwarded to the fallback's :meth:`pgettext` method.  "
"Otherwise, the *message* id is returned."
msgstr ""
"Знайдіть *контекст* і ідентифікатор *повідомлення* в каталозі та поверніть "
"відповідний рядок повідомлення як рядок Unicode. Якщо в каталозі немає "
"запису для ідентифікатора *повідомлення* та *контексту*, і було встановлено "
"резервний варіант, пошук пересилається до резервного методу "
":meth:`pgettext`. В іншому випадку повертається ідентифікатор "
"*повідомлення*."

#: ../../library/gettext.rst:371
msgid ""
"Do a plural-forms lookup of a message id.  *singular* is used as the message"
" id for purposes of lookup in the catalog, while *n* is used to determine "
"which plural form to use."
msgstr ""
"Виконайте пошук у формі множини ідентифікатора повідомлення. *singular* "
"використовується як ідентифікатор повідомлення для цілей пошуку в каталозі, "
"тоді як *n* використовується, щоб визначити, яку форму множини "
"використовувати."

#: ../../library/gettext.rst:375
msgid ""
"If the message id for *context* is not found in the catalog, and a fallback "
"is specified, the request is forwarded to the fallback's :meth:`npgettext` "
"method.  Otherwise, when *n* is 1 *singular* is returned, and *plural* is "
"returned in all other cases."
msgstr ""
"Якщо ідентифікатор повідомлення для *контексту* не знайдено в каталозі, і "
"вказано резервний варіант, запит пересилається на резервний метод "
":meth:`npgettext`. В іншому випадку, коли *n* дорівнює 1, повертається "
"*однина*, а *множина* повертається в усіх інших випадках."

#: ../../library/gettext.rst:384
msgid "Solaris message catalog support"
msgstr "Підтримка каталогу повідомлень Solaris"

#: ../../library/gettext.rst:386
msgid ""
"The Solaris operating system defines its own binary :file:`.mo` file format,"
" but since no documentation can be found on this format, it is not supported"
" at this time."
msgstr ""
"Операційна система Solaris визначає власний двійковий формат файлу "
":file:`.mo`, але оскільки документацію щодо цього формату немає, він наразі "
"не підтримується."

#: ../../library/gettext.rst:392
msgid "The Catalog constructor"
msgstr "Конструктор каталогу"

#: ../../library/gettext.rst:396
msgid ""
"GNOME uses a version of the :mod:`gettext` module by James Henstridge, but "
"this version has a slightly different API.  Its documented usage was::"
msgstr ""
"GNOME використовує версію модуля :mod:`gettext` від Джеймса Хенстріджа, але "
"ця версія має дещо інший API. Його задокументоване використання:"

#: ../../library/gettext.rst:399
msgid ""
"import gettext\n"
"cat = gettext.Catalog(domain, localedir)\n"
"_ = cat.gettext\n"
"print(_('hello world'))"
msgstr ""

#: ../../library/gettext.rst:404
msgid ""
"For compatibility with this older module, the function :func:`!Catalog` is "
"an alias for the :func:`translation` function described above."
msgstr ""

#: ../../library/gettext.rst:407
msgid ""
"One difference between this module and Henstridge's: his catalog objects "
"supported access through a mapping API, but this appears to be unused and so"
" is not currently supported."
msgstr ""
"Одна відмінність між цим модулем і модулем Хенстріджа: його об’єкти каталогу"
" підтримували доступ через API відображення, але він, здається, не "
"використовується, тому наразі не підтримується."

#: ../../library/gettext.rst:414
msgid "Internationalizing your programs and modules"
msgstr "Інтернаціоналізація ваших програм і модулів"

#: ../../library/gettext.rst:416
msgid ""
"Internationalization (I18N) refers to the operation by which a program is "
"made aware of multiple languages.  Localization (L10N) refers to the "
"adaptation of your program, once internationalized, to the local language "
"and cultural habits. In order to provide multilingual messages for your "
"Python programs, you need to take the following steps:"
msgstr ""
"Інтернаціоналізація (I18N) відноситься до операції, за допомогою якої "
"програма дізнається про декілька мов. Локалізація (L10N) означає адаптацію "
"вашої програми після її інтернаціоналізації до місцевої мови та культурних "
"звичок. Щоб надати багатомовні повідомлення для своїх програм на Python, "
"потрібно виконати наступні кроки:"

#: ../../library/gettext.rst:422
msgid ""
"prepare your program or module by specially marking translatable strings"
msgstr ""
"підготуйте свою програму або модуль, спеціально позначивши рядки для "
"перекладу"

#: ../../library/gettext.rst:424
msgid ""
"run a suite of tools over your marked files to generate raw messages "
"catalogs"
msgstr ""
"запустіть набір інструментів над позначеними файлами, щоб створити каталоги "
"необроблених повідомлень"

#: ../../library/gettext.rst:426
msgid "create language-specific translations of the message catalogs"
msgstr "створювати переклади каталогів повідомлень на певну мову"

#: ../../library/gettext.rst:428
msgid ""
"use the :mod:`gettext` module so that message strings are properly "
"translated"
msgstr ""
"використовуйте модуль :mod:`gettext`, щоб рядки повідомлень були правильно "
"перекладені"

#: ../../library/gettext.rst:430
msgid ""
"In order to prepare your code for I18N, you need to look at all the strings "
"in your files.  Any string that needs to be translated should be marked by "
"wrapping it in ``_('...')`` --- that is, a call to the function :func:`_ "
"<gettext>`.  For example::"
msgstr ""

#: ../../library/gettext.rst:434
msgid ""
"filename = 'mylog.txt'\n"
"message = _('writing a log message')\n"
"with open(filename, 'w') as fp:\n"
"    fp.write(message)"
msgstr ""

#: ../../library/gettext.rst:439
msgid ""
"In this example, the string ``'writing a log message'`` is marked as a "
"candidate for translation, while the strings ``'mylog.txt'`` and ``'w'`` are"
" not."
msgstr ""
"У цьому прикладі рядок \"writing a log message\" позначено як кандидат на "
"переклад, тоді як рядки \"mylog.txt\" і \"w\" — ні."

#: ../../library/gettext.rst:442
msgid ""
"There are a few tools to extract the strings meant for translation. The "
"original GNU :program:`gettext` only supported C or C++ source code but its "
"extended version :program:`xgettext` scans code written in a number of "
"languages, including Python, to find strings marked as translatable.  `Babel"
" <https://babel.pocoo.org/>`__ is a Python internationalization library that"
" includes a :file:`pybabel` script to extract and compile message catalogs."
"  François Pinard's program called :program:`xpot` does a similar job and is"
" available as part of his `po-utils package <https://github.com/pinard/po-"
"utils>`__."
msgstr ""

#: ../../library/gettext.rst:452
msgid ""
"(Python also includes pure-Python versions of these programs, called "
":program:`pygettext.py` and :program:`msgfmt.py`; some Python distributions "
"will install them for you.  :program:`pygettext.py` is similar to "
":program:`xgettext`, but only understands Python source code and cannot "
"handle other programming languages such as C or C++. :program:`pygettext.py`"
" supports a command-line interface similar to :program:`xgettext`; for "
"details on its use, run ``pygettext.py --help``.  :program:`msgfmt.py` is "
"binary compatible with GNU :program:`msgfmt`.  With these two programs, you "
"may not need the GNU :program:`gettext` package to internationalize your "
"Python applications.)"
msgstr ""
"(Python також включає версії цих програм на чистому Python, які називаються "
":program:`pygettext.py` і :program:`msgfmt.py`; деякі дистрибутиви Python "
"встановлять їх для вас. :program:`pygettext.py` схоже до "
":program:`xgettext`, але розуміє лише вихідний код Python і не може "
"працювати з іншими мовами програмування, такими як C або C++. "
":program:`pygettext.py` підтримує інтерфейс командного рядка, подібний до "
":program:`xgettext`; для детальніше про його використання, запустіть "
"``pygettext.py --help``. :program:`msgfmt.py` бінарно сумісний із GNU "
":program:`msgfmt`. З цими двома програмами вам може не знадобитися GNU "
":program:`gettext` пакет для інтернаціоналізації ваших програм Python.)"

#: ../../library/gettext.rst:464
msgid ""
":program:`xgettext`, :program:`pygettext`, and similar tools generate "
":file:`.po` files that are message catalogs.  They are structured human-"
"readable files that contain every marked string in the source code, along "
"with a placeholder for the translated versions of these strings."
msgstr ""
":program:`xgettext`, :program:`pygettext` та подібні інструменти створюють "
"файли :file:`.po`, які є каталогами повідомлень. Це структуровані зрозумілі "
"для людини файли, які містять кожен позначений рядок у вихідному коді разом "
"із заповнювачем для перекладених версій цих рядків."

#: ../../library/gettext.rst:470
msgid ""
"Copies of these :file:`.po` files are then handed over to the individual "
"human translators who write translations for every supported natural "
"language.  They send back the completed language-specific versions as a "
":file:`<language-name>.po` file that's compiled into a machine-readable "
":file:`.mo` binary catalog file using the :program:`msgfmt` program.  The "
":file:`.mo` files are used by the :mod:`gettext` module for the actual "
"translation processing at run-time."
msgstr ""
"Потім копії цих файлів :file:`.po` передаються окремим перекладачам, які "
"пишуть переклади для кожної підтримуваної природної мови. Вони надсилають "
"назад завершені версії для певної мови у вигляді файлу :file:`<language-"
"name> .po`, який скомпільовано в машиночитаний файл бінарного каталогу "
":file:`.mo` за допомогою програми :program:`msgfmt`. Файли :file:`.mo` "
"використовуються модулем :mod:`gettext` для фактичної обробки перекладу під "
"час виконання."

#: ../../library/gettext.rst:479
msgid ""
"How you use the :mod:`gettext` module in your code depends on whether you "
"are internationalizing a single module or your entire application. The next "
"two sections will discuss each case."
msgstr ""
"Те, як ви використовуєте модуль :mod:`gettext` у своєму коді, залежить від "
"того, чи інтернаціоналізуєте ви один модуль чи всю програму. У наступних "
"двох розділах буде розглянуто кожен випадок."

#: ../../library/gettext.rst:485
msgid "Localizing your module"
msgstr "Локалізація вашого модуля"

#: ../../library/gettext.rst:487
msgid ""
"If you are localizing your module, you must take care not to make global "
"changes, e.g. to the built-in namespace. You should not use the GNU "
":program:`gettext` API but instead the class-based API."
msgstr ""
"Якщо ви локалізуєте свій модуль, ви повинні подбати про те, щоб не вносити "
"глобальних змін, напр. до вбудованого простору імен. Вам слід "
"використовувати не GNU :program:`gettext` API, а замість нього API на основі"
" класів."

#: ../../library/gettext.rst:491
msgid ""
"Let's say your module is called \"spam\" and the module's various natural "
"language translation :file:`.mo` files reside in :file:`/usr/share/locale` "
"in GNU :program:`gettext` format.  Here's what you would put at the top of "
"your module::"
msgstr ""
"Припустімо, що ваш модуль називається \"спамом\", і різні файли перекладу "
"природної мови модуля :file:`.mo` містяться в :file:`/usr/share/locale` у "
"форматі GNU :program:`gettext`. Ось що ви б розмістили у верхній частині "
"свого модуля:"

#: ../../library/gettext.rst:496
msgid ""
"import gettext\n"
"t = gettext.translation('spam', '/usr/share/locale')\n"
"_ = t.gettext"
msgstr ""

#: ../../library/gettext.rst:502
msgid "Localizing your application"
msgstr "Локалізація вашої програми"

#: ../../library/gettext.rst:504
msgid ""
"If you are localizing your application, you can install the :func:`!_` "
"function globally into the built-in namespace, usually in the main driver "
"file of your application.  This will let all your application-specific files"
" just use ``_('...')`` without having to explicitly install it in each file."
msgstr ""

#: ../../library/gettext.rst:509
msgid ""
"In the simple case then, you need only add the following bit of code to the "
"main driver file of your application::"
msgstr ""
"У простому випадку вам потрібно лише додати наступний біт коду до основного "
"файлу драйвера вашої програми:"

#: ../../library/gettext.rst:512
msgid ""
"import gettext\n"
"gettext.install('myapplication')"
msgstr ""

#: ../../library/gettext.rst:515
msgid ""
"If you need to set the locale directory, you can pass it into the "
":func:`install` function::"
msgstr ""
"Якщо вам потрібно встановити каталог локалі, ви можете передати його у "
"функцію :func:`install`::"

#: ../../library/gettext.rst:518
msgid ""
"import gettext\n"
"gettext.install('myapplication', '/usr/share/locale')"
msgstr ""

#: ../../library/gettext.rst:523
msgid "Changing languages on the fly"
msgstr "Зміна мов на льоту"

#: ../../library/gettext.rst:525
msgid ""
"If your program needs to support many languages at the same time, you may "
"want to create multiple translation instances and then switch between them "
"explicitly, like so::"
msgstr ""
"Якщо ваша програма повинна підтримувати багато мов одночасно, ви можете "
"створити кілька екземплярів перекладу, а потім явно перемикатися між ними, "
"наприклад:"

#: ../../library/gettext.rst:529
msgid ""
"import gettext\n"
"\n"
"lang1 = gettext.translation('myapplication', languages=['en'])\n"
"lang2 = gettext.translation('myapplication', languages=['fr'])\n"
"lang3 = gettext.translation('myapplication', languages=['de'])\n"
"\n"
"# start by using language1\n"
"lang1.install()\n"
"\n"
"# ... time goes by, user selects language 2\n"
"lang2.install()\n"
"\n"
"# ... more time goes by, user selects language 3\n"
"lang3.install()"
msgstr ""

#: ../../library/gettext.rst:546
msgid "Deferred translations"
msgstr "Відкладені переклади"

#: ../../library/gettext.rst:548
msgid ""
"In most coding situations, strings are translated where they are coded. "
"Occasionally however, you need to mark strings for translation, but defer "
"actual translation until later.  A classic example is::"
msgstr ""
"У більшості ситуацій кодування рядки перекладаються там, де вони закодовані."
" Однак інколи вам потрібно позначити рядки для перекладу, але відкласти "
"фактичний переклад на потім. Класичний приклад::"

#: ../../library/gettext.rst:552
msgid ""
"animals = ['mollusk',\n"
"           'albatross',\n"
"           'rat',\n"
"           'penguin',\n"
"           'python', ]\n"
"# ...\n"
"for a in animals:\n"
"    print(a)"
msgstr ""

#: ../../library/gettext.rst:561
msgid ""
"Here, you want to mark the strings in the ``animals`` list as being "
"translatable, but you don't actually want to translate them until they are "
"printed."
msgstr ""
"Тут ви хочете позначити рядки у списку ``animals`` як такі, що можна "
"перекладати, але насправді ви не хочете їх перекладати, поки вони не будуть "
"надруковані."

#: ../../library/gettext.rst:565
msgid "Here is one way you can handle this situation::"
msgstr "Ось один із способів вирішення цієї ситуації:"

#: ../../library/gettext.rst:567
msgid ""
"def _(message): return message\n"
"\n"
"animals = [_('mollusk'),\n"
"           _('albatross'),\n"
"           _('rat'),\n"
"           _('penguin'),\n"
"           _('python'), ]\n"
"\n"
"del _\n"
"\n"
"# ...\n"
"for a in animals:\n"
"    print(_(a))"
msgstr ""

#: ../../library/gettext.rst:581
msgid ""
"This works because the dummy definition of :func:`!_` simply returns the "
"string unchanged.  And this dummy definition will temporarily override any "
"definition of :func:`!_` in the built-in namespace (until the :keyword:`del`"
" command). Take care, though if you have a previous definition of :func:`!_`"
" in the local namespace."
msgstr ""

#: ../../library/gettext.rst:587
msgid ""
"Note that the second use of :func:`!_` will not identify \"a\" as being "
"translatable to the :program:`gettext` program, because the parameter is not"
" a string literal."
msgstr ""

#: ../../library/gettext.rst:591
msgid "Another way to handle this is with the following example::"
msgstr "Ще один спосіб вирішити це за допомогою наступного прикладу::"

#: ../../library/gettext.rst:593
msgid ""
"def N_(message): return message\n"
"\n"
"animals = [N_('mollusk'),\n"
"           N_('albatross'),\n"
"           N_('rat'),\n"
"           N_('penguin'),\n"
"           N_('python'), ]\n"
"\n"
"# ...\n"
"for a in animals:\n"
"    print(_(a))"
msgstr ""

#: ../../library/gettext.rst:605
msgid ""
"In this case, you are marking translatable strings with the function "
":func:`!N_`, which won't conflict with any definition of :func:`!_`. "
"However, you will need to teach your message extraction program to look for "
"translatable strings marked with :func:`!N_`. :program:`xgettext`, "
":program:`pygettext`, ``pybabel extract``, and :program:`xpot` all support "
"this through the use of the :option:`!-k` command-line switch. The choice of"
" :func:`!N_` here is totally arbitrary; it could have just as easily been "
":func:`!MarkThisStringForTranslation`."
msgstr ""

#: ../../library/gettext.rst:616
msgid "Acknowledgements"
msgstr "Подяки"

#: ../../library/gettext.rst:618
msgid ""
"The following people contributed code, feedback, design suggestions, "
"previous implementations, and valuable experience to the creation of this "
"module:"
msgstr ""
"Наступні люди надали код, відгуки, пропозиції щодо дизайну, попередні "
"реалізації та цінний досвід для створення цього модуля:"

#: ../../library/gettext.rst:621
msgid "Peter Funk"
msgstr "Пітер Функ"

#: ../../library/gettext.rst:623
msgid "James Henstridge"
msgstr "Джеймс Хенстрідж"

#: ../../library/gettext.rst:625
msgid "Juan David Ibáñez Palomar"
msgstr "Хуан Давид Ібаньес Паломар"

#: ../../library/gettext.rst:627
msgid "Marc-André Lemburg"
msgstr "Марк-Андре Лембург"

#: ../../library/gettext.rst:629
msgid "Martin von Löwis"
msgstr "Мартін фон Льовіс"

#: ../../library/gettext.rst:631
msgid "François Pinard"
msgstr "Франсуа Пінар"

#: ../../library/gettext.rst:633
msgid "Barry Warsaw"
msgstr "Баррі Варшава"

#: ../../library/gettext.rst:635
msgid "Gustavo Niemeyer"
msgstr "Густаво Німейєр"

#: ../../library/gettext.rst:638
msgid "Footnotes"
msgstr "Виноски"

#: ../../library/gettext.rst:639
msgid ""
"The default locale directory is system dependent; for example, on Red Hat "
"Linux it is :file:`/usr/share/locale`, but on Solaris it is "
":file:`/usr/lib/locale`. The :mod:`!gettext` module does not try to support "
"these system dependent defaults; instead its default is "
":file:`{sys.base_prefix}/share/locale` (see :data:`sys.base_prefix`). For "
"this reason, it is always best to call :func:`bindtextdomain` with an "
"explicit absolute path at the start of your application."
msgstr ""

#: ../../library/gettext.rst:647
msgid "See the footnote for :func:`bindtextdomain` above."
msgstr "Див. виноску для :func:`bindtextdomain` вище."

#: ../../library/gettext.rst:56
msgid "_ (underscore)"
msgstr ""

#: ../../library/gettext.rst:56
msgid "gettext"
msgstr "gettext"

#: ../../library/gettext.rst:394
msgid "GNOME"
msgstr ""
