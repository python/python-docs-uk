# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Dmytro Kazanzhy, 2022
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-11-19 01:00+0000\n"
"PO-Revision-Date: 2021-06-28 01:12+0000\n"
"Last-Translator: Dmytro Kazanzhy, 2022\n"
"Language-Team: Ukrainian (https://app.transifex.com/python-doc/teams/5390/uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != 11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % 100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || (n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

#: ../../library/readline.rst:2
msgid ":mod:`!readline` --- GNU readline interface"
msgstr ""

#: ../../library/readline.rst:12
msgid ""
"The :mod:`readline` module defines a number of functions to facilitate "
"completion and reading/writing of history files from the Python interpreter."
" This module can be used directly, or via the :mod:`rlcompleter` module, "
"which supports completion of Python identifiers at the interactive prompt.  "
"Settings made using  this module affect the behaviour of both the "
"interpreter's interactive prompt  and the prompts offered by the built-in "
":func:`input` function."
msgstr ""
"Модуль :mod:`readline` визначає низку функцій для полегшення завершення та "
"читання/запису файлів історії з інтерпретатора Python. Цей модуль можна "
"використовувати безпосередньо або через модуль :mod:`rlcompleter`, який "
"підтримує завершення ідентифікаторів Python за інтерактивним запитом. "
"Параметри, зроблені за допомогою цього модуля, впливають на поведінку як "
"інтерактивної підказки інтерпретатора, так і підказок, запропонованих "
"вбудованою функцією :func:`input`."

#: ../../library/readline.rst:20
msgid ""
"Readline keybindings may be configured via an initialization file, typically"
" ``.inputrc`` in your home directory.  See `Readline Init File "
"<https://tiswww.cwru.edu/php/chet/readline/rluserman.html#Readline-Init-"
"File>`_ in the GNU Readline manual for information about the format and "
"allowable constructs of that file, and the capabilities of the Readline "
"library in general."
msgstr ""

#: ../../includes/wasm-mobile-notavail.rst:3
msgid "Availability"
msgstr ""

#: ../../includes/wasm-mobile-notavail.rst:5
msgid ""
"This module is not supported on :ref:`mobile platforms <mobile-"
"availability>` or :ref:`WebAssembly platforms <wasm-availability>`."
msgstr ""

#: ../../library/readline.rst:31
msgid ""
"The underlying Readline library API may be implemented by the ``editline`` "
"(``libedit``) library instead of GNU readline. On macOS the :mod:`readline` "
"module detects which library is being used at run time."
msgstr ""

#: ../../library/readline.rst:36
msgid ""
"The configuration file for ``editline`` is different from that of GNU "
"readline. If you programmatically load configuration strings you can use "
":data:`backend` to determine which library is being used."
msgstr ""

#: ../../library/readline.rst:40
msgid ""
"If you use ``editline``/``libedit`` readline emulation on macOS, the "
"initialization file located in your home directory is named ``.editrc``. For"
" example, the following content in ``~/.editrc`` will turn ON *vi* "
"keybindings and TAB completion::"
msgstr ""

#: ../../library/readline.rst:45
msgid ""
"python:bind -v\n"
"python:bind ^I rl_complete"
msgstr ""

#: ../../library/readline.rst:48
msgid ""
"Also note that different libraries may use different history file formats. "
"When switching the underlying library, existing history files may become "
"unusable."
msgstr ""

#: ../../library/readline.rst:54
msgid ""
"The name of the underlying Readline library being used, either "
"``\"readline\"`` or ``\"editline\"``."
msgstr ""

#: ../../library/readline.rst:60
msgid "Init file"
msgstr "Ініціальний файл"

#: ../../library/readline.rst:62
msgid ""
"The following functions relate to the init file and user configuration:"
msgstr ""
"Наступні функції стосуються файлу ініціалізації та конфігурації користувача:"

#: ../../library/readline.rst:67
msgid ""
"Execute the init line provided in the *string* argument. This calls "
":c:func:`rl_parse_and_bind` in the underlying library."
msgstr ""
"Виконайте рядок ініціалізації, наданий в аргументі *string*. Це викликає "
":c:func:`rl_parse_and_bind` у базовій бібліотеці."

#: ../../library/readline.rst:73
msgid ""
"Execute a readline initialization file. The default filename is the last "
"filename used. This calls :c:func:`rl_read_init_file` in the underlying "
"library."
msgstr ""
"Виконайте файл ініціалізації рядка читання. Назва файлу за замовчуванням — "
"це останнє використане ім’я файлу. Це викликає :c:func:`rl_read_init_file` у"
" базовій бібліотеці."

#: ../../library/readline.rst:78
msgid "Line buffer"
msgstr "Лінійний буфер"

#: ../../library/readline.rst:80
msgid "The following functions operate on the line buffer:"
msgstr "На буфері лінії працюють такі функції:"

#: ../../library/readline.rst:85
msgid ""
"Return the current contents of the line buffer (:c:data:`rl_line_buffer` in "
"the underlying library)."
msgstr ""
"Повертає поточний вміст буфера рядків (:c:data:`rl_line_buffer` у базовій "
"бібліотеці)."

#: ../../library/readline.rst:91
msgid ""
"Insert text into the line buffer at the cursor position.  This calls "
":c:func:`rl_insert_text` in the underlying library, but ignores the return "
"value."
msgstr ""
"Вставте текст у буфер рядків у позиції курсора. Це викликає "
":c:func:`rl_insert_text` у базовій бібліотеці, але ігнорує повернуте "
"значення."

#: ../../library/readline.rst:98
msgid ""
"Change what's displayed on the screen to reflect the current contents of the"
" line buffer.  This calls :c:func:`rl_redisplay` in the underlying library."
msgstr ""
"Змініть те, що відображається на екрані, щоб відобразити поточний вміст "
"рядкового буфера. Це викликає :c:func:`rl_redisplay` у базовій бібліотеці."

#: ../../library/readline.rst:103
msgid "History file"
msgstr "Файл історії"

#: ../../library/readline.rst:105
msgid "The following functions operate on a history file:"
msgstr "З файлом історії працюють такі функції:"

#: ../../library/readline.rst:110
msgid ""
"Load a readline history file, and append it to the history list. The default"
" filename is :file:`~/.history`.  This calls :c:func:`read_history` in the "
"underlying library."
msgstr ""
"Завантажте файл історії рядка читання та додайте його до списку історії. "
"Назва файлу за замовчуванням :file:`~/.history`. Це викликає "
":c:func:`read_history` у базовій бібліотеці."

#: ../../library/readline.rst:117
msgid ""
"Save the history list to a readline history file, overwriting any existing "
"file.  The default filename is :file:`~/.history`.  This calls "
":c:func:`write_history` in the underlying library."
msgstr ""
"Збережіть список історії у файл історії рядка читання, перезаписавши будь-"
"який існуючий файл. Назва файлу за замовчуванням :file:`~/.history`. Це "
"викликає :c:func:`write_history` у базовій бібліотеці."

#: ../../library/readline.rst:124
msgid ""
"Append the last *nelements* items of history to a file.  The default "
"filename is :file:`~/.history`.  The file must already exist.  This calls "
":c:func:`append_history` in the underlying library.  This function only "
"exists if Python was compiled for a version of the library that supports it."
msgstr ""
"Додайте останні *elements* елементи історії до файлу. Назва файлу за "
"замовчуванням :file:`~/.history`. Файл уже має існувати. Це викликає "
":c:func:`append_history` у базовій бібліотеці. Ця функція існує, лише якщо "
"Python було скомпільовано для версії бібліотеки, яка її підтримує."

#: ../../library/readline.rst:136
msgid ""
"Set or return the desired number of lines to save in the history file. The "
":func:`write_history_file` function uses this value to truncate the history "
"file, by calling :c:func:`history_truncate_file` in the underlying library."
"  Negative values imply unlimited history file size."
msgstr ""
"Установіть або поверніть потрібну кількість рядків для збереження у файлі "
"історії. Функція :func:`write_history_file` використовує це значення для "
"скорочення файлу історії, викликаючи :c:func:`history_truncate_file` у "
"базовій бібліотеці. Від’ємні значення означають необмежений розмір файлу "
"історії."

#: ../../library/readline.rst:144
msgid "History list"
msgstr "Список історії"

#: ../../library/readline.rst:146
msgid "The following functions operate on a global history list:"
msgstr "У списку глобальної історії працюють такі функції:"

#: ../../library/readline.rst:151
msgid ""
"Clear the current history.  This calls :c:func:`clear_history` in the "
"underlying library.  The Python function only exists if Python was compiled "
"for a version of the library that supports it."
msgstr ""
"Очистити поточну історію. Це викликає :c:func:`clear_history` у базовій "
"бібліотеці. Функція Python існує, лише якщо Python було скомпільовано для "
"версії бібліотеки, яка її підтримує."

#: ../../library/readline.rst:158
msgid ""
"Return the number of items currently in the history.  (This is different "
"from :func:`get_history_length`, which returns the maximum number of lines "
"that will be written to a history file.)"
msgstr ""
"Повертає кількість елементів в історії. (Це відрізняється від "
":func:`get_history_length`, який повертає максимальну кількість рядків, які "
"будуть записані у файл історії.)"

#: ../../library/readline.rst:165
msgid ""
"Return the current contents of history item at *index*.  The item index is "
"one-based.  This calls :c:func:`history_get` in the underlying library."
msgstr ""
"Повернути поточний вміст елемента історії за *index*. Індекс позиції "
"складається з однієї основи. Це викликає :c:func:`history_get` у базовій "
"бібліотеці."

#: ../../library/readline.rst:171
msgid ""
"Remove history item specified by its position from the history. The position"
" is zero-based.  This calls :c:func:`remove_history` in the underlying "
"library."
msgstr ""
"Видалити з історії елемент історії, визначений його позицією. Позиція "
"відраховується з нуля. Це викликає :c:func:`remove_history` у базовій "
"бібліотеці."

#: ../../library/readline.rst:178
msgid ""
"Replace history item specified by its position with *line*. The position is "
"zero-based.  This calls :c:func:`replace_history_entry` in the underlying "
"library."
msgstr ""
"Замінити елемент історії, визначений його позицією, на *рядок*. Позиція "
"відраховується з нуля. Це викликає :c:func:`replace_history_entry` у базовій"
" бібліотеці."

#: ../../library/readline.rst:185
msgid ""
"Append *line* to the history buffer, as if it was the last line typed. This "
"calls :c:func:`add_history` in the underlying library."
msgstr ""
"Додайте *рядок* до буфера історії, ніби це був останній введений рядок. Це "
"викликає :c:func:`add_history` у базовій бібліотеці."

#: ../../library/readline.rst:191
msgid ""
"Enable or disable automatic calls to :c:func:`add_history` when reading "
"input via readline.  The *enabled* argument should be a Boolean value that "
"when true, enables auto history, and that when false, disables auto history."
msgstr ""
"Увімкнути або вимкнути автоматичні виклики :c:func:`add_history` під час "
"читання введених даних через рядок читання. Аргумент *enabled* має бути "
"логічним значенням, яке, коли істина, вмикає автоматичну історію, а коли "
"хибна, вимикає автоматичну історію."

#: ../../library/readline.rst:199
msgid ""
"Auto history is enabled by default, and changes to this do not persist "
"across multiple sessions."
msgstr ""

#: ../../library/readline.rst:204
msgid "Startup hooks"
msgstr "Хуки для запуску"

#: ../../library/readline.rst:209
msgid ""
"Set or remove the function invoked by the :c:data:`rl_startup_hook` callback"
" of the underlying library.  If *function* is specified, it will be used as "
"the new hook function; if omitted or ``None``, any function already "
"installed is removed.  The hook is called with no arguments just before "
"readline prints the first prompt."
msgstr ""
"Установіть або видаліть функцію, викликану зворотним викликом "
":c:data:`rl_startup_hook` основної бібліотеки. Якщо вказано *функцію*, її "
"буде використано як нову функцію підключення; якщо опущено або ``None``, усі"
" вже встановлені функції буде видалено. Хук викликається без аргументів "
"безпосередньо перед тим, як readline надрукує перший запит."

#: ../../library/readline.rst:218
msgid ""
"Set or remove the function invoked by the :c:data:`rl_pre_input_hook` "
"callback of the underlying library.  If *function* is specified, it will be "
"used as the new hook function; if omitted or ``None``, any function already "
"installed is removed.  The hook is called with no arguments after the first "
"prompt has been printed and just before readline starts reading input "
"characters.  This function only exists if Python was compiled for a version "
"of the library that supports it."
msgstr ""
"Установіть або видаліть функцію, викликану зворотним викликом "
":c:data:`rl_pre_input_hook` основної бібліотеки. Якщо вказано *функцію*, її "
"буде використано як нову функцію підключення; якщо опущено або ``None``, усі"
" вже встановлені функції буде видалено. Хук викликається без аргументів "
"після того, як перше запрошення буде надруковано та безпосередньо перед тим,"
" як readline почне читати введені символи. Ця функція існує, лише якщо "
"Python було скомпільовано для версії бібліотеки, яка її підтримує."

#: ../../library/readline.rst:230
msgid "Completion"
msgstr "Завершення"

#: ../../library/readline.rst:232
msgid ""
"The following functions relate to implementing a custom word completion "
"function.  This is typically operated by the Tab key, and can suggest and "
"automatically complete a word being typed.  By default, Readline is set up "
"to be used by :mod:`rlcompleter` to complete Python identifiers for the "
"interactive interpreter.  If the :mod:`readline` module is to be used with a"
" custom completer, a different set of word delimiters should be set."
msgstr ""
"Наступні функції стосуються реалізації спеціальної функції доповнення слів. "
"Зазвичай це працює за допомогою клавіші Tab і може пропонувати та "
"автоматично завершувати введене слово. За замовчуванням Readline налаштовано"
" на використання :mod:`rlcompleter` для заповнення ідентифікаторів Python "
"для інтерактивного інтерпретатора. Якщо модуль :mod:`readline` "
"використовуватиметься з настроюваним доповнювачем, слід встановити інший "
"набір розділювачів слів."

#: ../../library/readline.rst:242
msgid ""
"Set or remove the completer function.  If *function* is specified, it will "
"be used as the new completer function; if omitted or ``None``, any completer"
" function already installed is removed.  The completer function is called as"
" ``function(text, state)``, for *state* in ``0``, ``1``, ``2``, ..., until "
"it returns a non-string value.  It should return the next possible "
"completion starting with *text*."
msgstr ""
"Встановити або видалити функцію завершення. Якщо вказано *функцію*, вона "
"використовуватиметься як нова функція завершення; якщо опущено або ``None``,"
" усі вже встановлені завершальні функції видаляються. Функція завершення "
"викликається як ``function(text, state)`` для *state* в ``0``, ``1``, ``2``,"
" ..., доки вона не поверне не- значення рядка. Він має повернути наступне "
"можливе завершення, починаючи з *тексту*."

#: ../../library/readline.rst:249
msgid ""
"The installed completer function is invoked by the *entry_func* callback "
"passed to :c:func:`rl_completion_matches` in the underlying library. The "
"*text* string comes from the first parameter to the "
":c:data:`rl_attempted_completion_function` callback of the underlying "
"library."
msgstr ""
"Встановлена функція завершувача викликається зворотним викликом "
"*entry_func*, переданим до :c:func:`rl_completion_matches` у базовій "
"бібліотеці. Рядок *text* надходить із першого параметра зворотного виклику "
":c:data:`rl_attempted_completion_function` основної бібліотеки."

#: ../../library/readline.rst:258
msgid ""
"Get the completer function, or ``None`` if no completer function has been "
"set."
msgstr ""
"Отримайте функцію завершувача або ``None``, якщо функцію завершувача не "
"встановлено."

#: ../../library/readline.rst:263
msgid ""
"Get the type of completion being attempted.  This returns the "
":c:data:`rl_completion_type` variable in the underlying library as an "
"integer."
msgstr ""
"Отримайте тип завершення, яке намагається виконати. Це повертає змінну "
":c:data:`rl_completion_type` у базовій бібліотеці як ціле число."

#: ../../library/readline.rst:271
msgid ""
"Get the beginning or ending index of the completion scope. These indexes are"
" the *start* and *end* arguments passed to the "
":c:data:`rl_attempted_completion_function` callback of the underlying "
"library.  The values may be different in the same input editing scenario "
"based on the underlying C readline implementation. Ex: libedit is known to "
"behave differently than libreadline."
msgstr ""
"Отримати початковий або кінцевий індекс області завершення. Ці індекси є "
"аргументами *start* і *end*, що передаються до зворотного виклику "
":c:data:`rl_attempted_completion_function` основної бібліотеки. Значення "
"можуть відрізнятися в тому самому сценарії редагування введення на основі "
"базової реалізації C readline. Приклад: libedit, як відомо, поводиться "
"інакше, ніж libreadline."

#: ../../library/readline.rst:282
msgid ""
"Set or get the word delimiters for completion.  These determine the start of"
" the word to be considered for completion (the completion scope). These "
"functions access the :c:data:`rl_completer_word_break_characters` variable "
"in the underlying library."
msgstr ""
"Установіть або отримайте роздільники слів для завершення. Вони визначають "
"початок слова, яке розглядається для завершення (область завершення). Ці "
"функції отримують доступ до змінної "
":c:data:`rl_completer_word_break_characters` у базовій бібліотеці."

#: ../../library/readline.rst:290
msgid ""
"Set or remove the completion display function.  If *function* is specified, "
"it will be used as the new completion display function; if omitted or "
"``None``, any completion display function already installed is removed.  "
"This sets or clears the :c:data:`rl_completion_display_matches_hook` "
"callback in the underlying library.  The completion display function is "
"called as ``function(substitution, [matches], longest_match_length)`` once "
"each time matches need to be displayed."
msgstr ""
"Встановіть або видаліть функцію відображення завершення. Якщо вказано "
"*функцію*, вона використовуватиметься як нова функція відображення "
"завершення; якщо опущено або ``None``, усі вже встановлені функції "
"відображення завершення видаляються. Це встановлює або очищає зворотний "
"виклик :c:data:`rl_completion_display_matches_hook` у базовій бібліотеці. "
"Функція відображення завершення викликається як ``function(substitution, "
"[matches], longest_match_length)`` щоразу, коли потрібно відображати збіги."

#: ../../library/readline.rst:303
msgid "Example"
msgstr "приклад"

#: ../../library/readline.rst:305
msgid ""
"The following example demonstrates how to use the :mod:`readline` module's "
"history reading and writing functions to automatically load and save a "
"history file named :file:`.python_history` from the user's home directory.  "
"The code below would normally be executed automatically during interactive "
"sessions from the user's :envvar:`PYTHONSTARTUP` file. ::"
msgstr ""
"У наступному прикладі показано, як використовувати функції читання та запису"
" історії модуля :mod:`readline` для автоматичного завантаження та збереження"
" файлу історії під назвою :file:`.python_history` з домашнього каталогу "
"користувача. Наведений нижче код зазвичай виконується автоматично під час "
"інтерактивних сеансів із файлу користувача :envvar:`PYTHONSTARTUP`. ::"

#: ../../library/readline.rst:311
msgid ""
"import atexit\n"
"import os\n"
"import readline\n"
"\n"
"histfile = os.path.join(os.path.expanduser(\"~\"), \".python_history\")\n"
"try:\n"
"    readline.read_history_file(histfile)\n"
"    # default history len is -1 (infinite), which may grow unruly\n"
"    readline.set_history_length(1000)\n"
"except FileNotFoundError:\n"
"    pass\n"
"\n"
"atexit.register(readline.write_history_file, histfile)"
msgstr ""

#: ../../library/readline.rst:325
msgid ""
"This code is actually automatically run when Python is run in "
":ref:`interactive mode <tut-interactive>` (see :ref:`rlcompleter-config`)."
msgstr ""
"Цей код насправді запускається автоматично, коли Python запускається в "
":ref:`інтерактивному режимі <tut-interactive>` (див. :ref:`rlcompleter-"
"config`)."

#: ../../library/readline.rst:328
msgid ""
"The following example achieves the same goal but supports concurrent "
"interactive sessions, by only appending the new history. ::"
msgstr ""
"Наступний приклад досягає тієї ж мети, але підтримує одночасні інтерактивні "
"сеанси, лише додаючи нову історію. ::"

#: ../../library/readline.rst:331
msgid ""
"import atexit\n"
"import os\n"
"import readline\n"
"histfile = os.path.join(os.path.expanduser(\"~\"), \".python_history\")\n"
"\n"
"try:\n"
"    readline.read_history_file(histfile)\n"
"    h_len = readline.get_current_history_length()\n"
"except FileNotFoundError:\n"
"    open(histfile, 'wb').close()\n"
"    h_len = 0\n"
"\n"
"def save(prev_h_len, histfile):\n"
"    new_h_len = readline.get_current_history_length()\n"
"    readline.set_history_length(1000)\n"
"    readline.append_history_file(new_h_len - prev_h_len, histfile)\n"
"atexit.register(save, h_len, histfile)"
msgstr ""

#: ../../library/readline.rst:349
msgid ""
"The following example extends the :class:`code.InteractiveConsole` class to "
"support history save/restore. ::"
msgstr ""
"Наступний приклад розширює клас :class:`code.InteractiveConsole` для "
"підтримки збереження/відновлення історії. ::"

#: ../../library/readline.rst:352
msgid ""
"import atexit\n"
"import code\n"
"import os\n"
"import readline\n"
"\n"
"class HistoryConsole(code.InteractiveConsole):\n"
"    def __init__(self, locals=None, filename=\"<console>\",\n"
"                 histfile=os.path.expanduser(\"~/.console-history\")):\n"
"        code.InteractiveConsole.__init__(self, locals, filename)\n"
"        self.init_history(histfile)\n"
"\n"
"    def init_history(self, histfile):\n"
"        readline.parse_and_bind(\"tab: complete\")\n"
"        if hasattr(readline, \"read_history_file\"):\n"
"            try:\n"
"                readline.read_history_file(histfile)\n"
"            except FileNotFoundError:\n"
"                pass\n"
"            atexit.register(self.save_history, histfile)\n"
"\n"
"    def save_history(self, histfile):\n"
"        readline.set_history_length(1000)\n"
"        readline.write_history_file(histfile)"
msgstr ""
