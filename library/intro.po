# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Dmytro Kazanzhy, 2022
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-11-22 14:17+0000\n"
"PO-Revision-Date: 2021-06-28 01:08+0000\n"
"Last-Translator: Dmytro Kazanzhy, 2022\n"
"Language-Team: Ukrainian (https://app.transifex.com/python-doc/teams/5390/uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != 11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % 100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || (n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

#: ../../library/intro.rst:5
msgid "Introduction"
msgstr "Вступ"

#: ../../library/intro.rst:7
msgid "The \"Python library\" contains several different kinds of components."
msgstr "\"Бібліотека Python\" містить кілька різних видів компонентів."

#: ../../library/intro.rst:9
msgid ""
"It contains data types that would normally be considered part of the "
"\"core\" of a language, such as numbers and lists.  For these types, the "
"Python language core defines the form of literals and places some "
"constraints on their semantics, but does not fully define the semantics.  "
"(On the other hand, the language core does define syntactic properties like "
"the spelling and priorities of operators.)"
msgstr ""
"Він містить типи даних, які зазвичай вважаються частиною \"ядра\" мови, "
"наприклад числа та списки. Для цих типів ядро мови Python визначає форму "
"літералів і накладає деякі обмеження на їх семантику, але не повністю "
"визначає семантику. (З іншого боку, ядро мови визначає синтаксичні "
"властивості, такі як правопис і пріоритети операторів.)"

#: ../../library/intro.rst:15
msgid ""
"The library also contains built-in functions and exceptions --- objects that"
" can be used by all Python code without the need of an :keyword:`import` "
"statement. Some of these are defined by the core language, but many are not "
"essential for the core semantics and are only described here."
msgstr ""
"Бібліотека також містить вбудовані функції та винятки --- об’єкти, які "
"можуть використовуватися всім кодом Python без необхідності оператора "
":keyword:`import`. Деякі з них визначені основною мовою, але багато з них не"
" є суттєвими для основної семантики та описані лише тут."

#: ../../library/intro.rst:20
msgid ""
"The bulk of the library, however, consists of a collection of modules. There"
" are many ways to dissect this collection.  Some modules are written in C "
"and built in to the Python interpreter; others are written in Python and "
"imported in source form.  Some modules provide interfaces that are highly "
"specific to Python, like printing a stack trace; some provide interfaces "
"that are specific to particular operating systems, such as access to "
"specific hardware; others provide interfaces that are specific to a "
"particular application domain, like the World Wide Web. Some modules are "
"available in all versions and ports of Python; others are only available "
"when the underlying system supports or requires them; yet others are "
"available only when a particular configuration option was chosen at the time"
" when Python was compiled and installed."
msgstr ""
"Основна частина бібліотеки, однак, складається з набору модулів. Є багато "
"способів розібрати цю колекцію. Деякі модулі написані мовою C і вбудовані в "
"інтерпретатор Python; інші написані на Python та імпортовані у вихідній "
"формі. Деякі модулі надають інтерфейси, дуже специфічні для Python, як-от "
"друк трасування стека; деякі надають інтерфейси, які є специфічними для "
"конкретних операційних систем, наприклад доступ до певного апаратного "
"забезпечення; інші надають інтерфейси, які є специфічними для конкретного "
"домену програми, наприклад Всесвітньої павутини. Деякі модулі доступні в "
"усіх версіях і портах Python; інші доступні лише тоді, коли базова система "
"їх підтримує або вимагає; ще інші доступні лише тоді, коли певний параметр "
"конфігурації було вибрано під час компіляції та встановлення Python."

#: ../../library/intro.rst:32
msgid ""
"This manual is organized \"from the inside out:\" it first describes the "
"built-in functions, data types and exceptions, and finally the modules, "
"grouped in chapters of related modules."
msgstr ""
"Цей посібник організовано \"зсередини назовні\": спочатку в ньому описано "
"вбудовані функції, типи даних і винятки, а нарешті — модулі, згруповані в "
"розділи пов’язаних модулів."

#: ../../library/intro.rst:36
msgid ""
"This means that if you start reading this manual from the start, and skip to"
" the next chapter when you get bored, you will get a reasonable overview of "
"the available modules and application areas that are supported by the Python"
" library.  Of course, you don't *have* to read it like a novel --- you can "
"also browse the table of contents (in front of the manual), or look for a "
"specific function, module or term in the index (in the back).  And finally, "
"if you enjoy learning about random subjects, you choose a random page number"
" (see module :mod:`random`) and read a section or two.  Regardless of the "
"order in which you read the sections of this manual, it helps to start with "
"chapter :ref:`built-in-funcs`, as the remainder of the manual assumes "
"familiarity with this material."
msgstr ""
"Це означає, що якщо ви почнете читати цей посібник із самого початку та "
"перейдете до наступного розділу, коли вам стане нудно, ви отримаєте розумний"
" огляд доступних модулів і областей застосування, які підтримуються "
"бібліотекою Python. Звичайно, ви не *повинні* читати це як роман --- ви "
"також можете переглянути зміст (перед посібником) або шукати певну функцію, "
"модуль або термін в покажчику (у спина). І, нарешті, якщо вам подобається "
"вивчати випадкові теми, ви обираєте випадковий номер сторінки (дивіться "
"модуль :mod:`random`) і читаєте розділ або два. Незалежно від порядку, в "
"якому ви читаєте розділи цього посібника, корисно почати з розділу "
":ref:`built-in-funcs`, оскільки решта посібника передбачає знайомство з цим "
"матеріалом."

#: ../../library/intro.rst:48
msgid "Let the show begin!"
msgstr "Нехай шоу почнеться!"

#: ../../library/intro.rst:54
msgid "Notes on availability"
msgstr "Примітки щодо наявності"

#: ../../library/intro.rst:56
msgid ""
"An \"Availability: Unix\" note means that this function is commonly found on"
" Unix systems.  It does not make any claims about its existence on a "
"specific operating system."
msgstr ""
"Примітка \"Доступність: Unix\" означає, що ця функція зазвичай зустрічається"
" в системах Unix. Він не робить жодних заяв про його існування в конкретній "
"операційній системі."

#: ../../library/intro.rst:60
msgid ""
"If not separately noted, all functions that claim \"Availability: Unix\" are"
" supported on macOS, iOS and Android, all of which build on a Unix core."
msgstr ""

#: ../../library/intro.rst:63
msgid ""
"If an availability note contains both a minimum Kernel version and a minimum"
" libc version, then both conditions must hold. For example a feature with "
"note *Availability: Linux >= 3.17 with glibc >= 2.27* requires both Linux "
"3.17 or newer and glibc 2.27 or newer."
msgstr ""

#: ../../library/intro.rst:71
msgid "WebAssembly platforms"
msgstr ""

#: ../../library/intro.rst:73
msgid ""
"The `WebAssembly`_ platforms ``wasm32-emscripten`` (`Emscripten`_) and "
"``wasm32-wasi`` (`WASI`_) provide a subset of POSIX APIs. WebAssembly "
"runtimes and browsers are sandboxed and have limited access to the host and "
"external resources. Any Python standard library module that uses processes, "
"threading, networking, signals, or other forms of inter-process "
"communication (IPC), is either not available or may not work as on other "
"Unix-like systems. File I/O, file system, and Unix permission-related "
"functions are restricted, too. Emscripten does not permit blocking I/O. "
"Other blocking operations like :func:`~time.sleep` block the browser event "
"loop."
msgstr ""

#: ../../library/intro.rst:83
msgid ""
"The properties and behavior of Python on WebAssembly platforms depend on the"
" `Emscripten`_-SDK or `WASI`_-SDK version, WASM runtimes (browser, NodeJS, "
"`wasmtime`_), and Python build time flags. WebAssembly, Emscripten, and WASI"
" are evolving standards; some features like networking may be supported in "
"the future."
msgstr ""

#: ../../library/intro.rst:89
msgid ""
"For Python in the browser, users should consider `Pyodide`_ or `PyScript`_. "
"PyScript is built on top of Pyodide, which itself is built on top of CPython"
" and Emscripten. Pyodide provides access to browsers' JavaScript and DOM "
"APIs as well as limited networking capabilities with JavaScript's "
"``XMLHttpRequest`` and ``Fetch`` APIs."
msgstr ""

#: ../../library/intro.rst:95
msgid ""
"Process-related APIs are not available or always fail with an error. That "
"includes APIs that spawn new processes (:func:`~os.fork`, "
":func:`~os.execve`), wait for processes (:func:`~os.waitpid`), send signals "
"(:func:`~os.kill`), or otherwise interact with processes. The "
":mod:`subprocess` is importable but does not work."
msgstr ""

#: ../../library/intro.rst:101
msgid ""
"The :mod:`socket` module is available, but is limited and behaves "
"differently from other platforms. On Emscripten, sockets are always non-"
"blocking and require additional JavaScript code and helpers on the server to"
" proxy TCP through WebSockets; see `Emscripten Networking`_ for more "
"information. WASI snapshot preview 1 only permits sockets from an existing "
"file descriptor."
msgstr ""

#: ../../library/intro.rst:108
msgid ""
"Some functions are stubs that either don't do anything and always return "
"hardcoded values."
msgstr ""

#: ../../library/intro.rst:111
msgid ""
"Functions related to file descriptors, file permissions, file ownership, and"
" links are limited and don't support some operations. For example, WASI does"
" not permit symlinks with absolute file names."
msgstr ""

#: ../../library/intro.rst:127
msgid "Mobile platforms"
msgstr ""

#: ../../library/intro.rst:129
msgid ""
"Android and iOS are, in most respects, POSIX operating systems. File I/O, "
"socket handling, and threading all behave as they would on any POSIX "
"operating system. However, there are several major differences:"
msgstr ""

#: ../../library/intro.rst:133
msgid ""
"Mobile platforms can only use Python in \"embedded\" mode. There is no "
"Python REPL, and no ability to use separate executables such as "
":program:`python` or :program:`pip`. To add Python code to your mobile app, "
"you must use the :ref:`Python embedding API <embedding>`. For more details, "
"see :ref:`using-android` and :ref:`using-ios`."
msgstr ""

#: ../../library/intro.rst:139
msgid "Subprocesses:"
msgstr ""

#: ../../library/intro.rst:141
msgid ""
"On Android, creating subprocesses is possible but `officially unsupported "
"<https://issuetracker.google.com/issues/128554619#comment4>`__. In "
"particular, Android does not support any part of the System V IPC API, so "
":mod:`multiprocessing` is not available."
msgstr ""

#: ../../library/intro.rst:146
msgid ""
"An iOS app cannot use any form of subprocessing, multiprocessing, or inter-"
"process communication. If an iOS app attempts to create a subprocess, the "
"process creating the subprocess will either lock up, or crash. An iOS app "
"has no visibility of other applications that are running, nor any ability to"
" communicate with other running applications, outside of the iOS-specific "
"APIs that exist for this purpose."
msgstr ""

#: ../../library/intro.rst:153
msgid ""
"Mobile apps have limited access to modify system resources (such as the "
"system clock). These resources will often be *readable*, but attempts to "
"modify those resources will usually fail."
msgstr ""

#: ../../library/intro.rst:157
msgid "Console input and output:"
msgstr ""

#: ../../library/intro.rst:159
msgid ""
"On Android, the native ``stdout`` and ``stderr`` are not connected to "
"anything, so Python installs its own streams which redirect messages to the "
"system log. These can be seen under the tags ``python.stdout`` and "
"``python.stderr`` respectively."
msgstr ""

#: ../../library/intro.rst:164
msgid ""
"iOS apps have a limited concept of console output. ``stdout`` and ``stderr``"
" *exist*, and content written to ``stdout`` and ``stderr`` will be visible "
"in logs when running in Xcode, but this content *won't* be recorded in the "
"system log. If a user who has installed your app provides their app logs as "
"a diagnostic aid, they will not include any detail written to ``stdout`` or "
"``stderr``."
msgstr ""

#: ../../library/intro.rst:171
msgid ""
"Mobile apps have no usable ``stdin`` at all. While apps can display an on-"
"screen keyboard, this is a software feature, not something that is attached "
"to ``stdin``."
msgstr ""

#: ../../library/intro.rst:175
msgid ""
"As a result, Python modules that involve console manipulation (such as "
":mod:`curses` and :mod:`readline`) are not available on mobile platforms."
msgstr ""
