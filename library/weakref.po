# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Dmytro Kazanzhy, 2022
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-11-19 01:00+0000\n"
"PO-Revision-Date: 2021-06-28 01:17+0000\n"
"Last-Translator: Dmytro Kazanzhy, 2022\n"
"Language-Team: Ukrainian (https://app.transifex.com/python-doc/teams/5390/uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != 11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % 100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || (n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

#: ../../library/weakref.rst:4
msgid ":mod:`weakref` --- Weak references"
msgstr ":mod:`weakref` --- Слабкі посилання"

#: ../../library/weakref.rst:14
msgid "**Source code:** :source:`Lib/weakref.py`"
msgstr "**Вихідний код:** :source:`Lib/weakref.py`"

#: ../../library/weakref.rst:18
msgid ""
"The :mod:`weakref` module allows the Python programmer to create :dfn:`weak "
"references` to objects."
msgstr ""
"Модуль :mod:`weakref` дозволяє програмісту Python створювати :dfn:`слабкі "
"посилання` на об’єкти."

#: ../../library/weakref.rst:24
msgid ""
"In the following, the term :dfn:`referent` means the object which is "
"referred to by a weak reference."
msgstr ""
"Далі термін :dfn:`referent` означає об’єкт, на який посилається слабке "
"посилання."

#: ../../library/weakref.rst:27
msgid ""
"A weak reference to an object is not enough to keep the object alive: when "
"the only remaining references to a referent are weak references, "
":term:`garbage collection` is free to destroy the referent and reuse its "
"memory for something else.  However, until the object is actually destroyed "
"the weak reference may return the object even if there are no strong "
"references to it."
msgstr ""
"Слабкого посилання на об’єкт недостатньо, щоб зберегти об’єкт живим: коли "
"єдині посилання на референт є слабкими посиланнями, :term:`garbage "
"collection` може знищити референт і використовувати його пам’ять для чогось "
"іншого. Однак, поки об’єкт не буде фактично знищено, слабке посилання може "
"повертати об’єкт, навіть якщо на нього немає сильних посилань."

#: ../../library/weakref.rst:33
msgid ""
"A primary use for weak references is to implement caches or mappings holding"
" large objects, where it's desired that a large object not be kept alive "
"solely because it appears in a cache or mapping."
msgstr ""
"Основним використанням слабких посилань є реалізація кешів або відображень, "
"що містять великі об’єкти, де бажано, щоб великий об’єкт не зберігався живим"
" лише тому, що він з’являється в кеші чи відображенні."

#: ../../library/weakref.rst:37
msgid ""
"For example, if you have a number of large binary image objects, you may "
"wish to associate a name with each.  If you used a Python dictionary to map "
"names to images, or images to names, the image objects would remain alive "
"just because they appeared as values or keys in the dictionaries.  The "
":class:`WeakKeyDictionary` and :class:`WeakValueDictionary` classes supplied"
" by the :mod:`weakref` module are an alternative, using weak references to "
"construct mappings that don't keep objects alive solely because they appear "
"in the mapping objects.  If, for example, an image object is a value in a "
":class:`WeakValueDictionary`, then when the last remaining references to "
"that image object are the weak references held by weak mappings, garbage "
"collection can reclaim the object, and its corresponding entries in weak "
"mappings are simply deleted."
msgstr ""
"Наприклад, якщо у вас є кілька великих бінарних об’єктів зображення, ви "
"можете призначити ім’я кожному. Якби ви використовували словник Python для "
"зіставлення імен із зображеннями або зображень з іменами, об’єкти зображення"
" залишалися б живими лише тому, що вони відображалися як значення або ключі "
"в словниках. Класи :class:`WeakKeyDictionary` і "
":class:`WeakValueDictionary`, що надаються модулем :mod:`weakref`, є "
"альтернативою, використовуючи слабкі посилання для створення відображень, "
"які не зберігають об’єкти лише тому, що вони з’являються в об’єктах "
"відображення . Якщо, наприклад, об’єкт зображення є значенням у "
":class:`WeakValueDictionary`, тоді, коли останні посилання на цей об’єкт "
"зображення є слабкими посиланнями, утримуваними слабкими відображеннями, "
"збір сміття може відновити об’єкт і його відповідні записи у слабких "
"відображеннях просто видаляються."

#: ../../library/weakref.rst:50
msgid ""
":class:`WeakKeyDictionary` and :class:`WeakValueDictionary` use weak "
"references in their implementation, setting up callback functions on the "
"weak references that notify the weak dictionaries when a key or value has "
"been reclaimed by garbage collection.  :class:`WeakSet` implements the "
":class:`set` interface, but keeps weak references to its elements, just like"
" a :class:`WeakKeyDictionary` does."
msgstr ""
":class:`WeakKeyDictionary` і :class:`WeakValueDictionary` використовують "
"слабкі посилання у своїй реалізації, встановлюючи функції зворотного виклику"
" для слабких посилань, які сповіщають слабкі словники, коли ключ або "
"значення було вилучено під час збирання сміття. :class:`WeakSet` реалізує "
"інтерфейс :class:`set`, але зберігає слабкі посилання на його елементи, як "
"це робить :class:`WeakKeyDictionary`."

#: ../../library/weakref.rst:57
msgid ""
":class:`finalize` provides a straight forward way to register a cleanup "
"function to be called when an object is garbage collected. This is simpler "
"to use than setting up a callback function on a raw weak reference, since "
"the module automatically ensures that the finalizer remains alive until the "
"object is collected."
msgstr ""
":class:`finalize` забезпечує прямий спосіб реєстрації функції очищення, яка "
"буде викликатися під час збирання сміття об’єкта. Це простіше у "
"використанні, ніж налаштування функції зворотного виклику для необробленого "
"слабкого посилання, оскільки модуль автоматично гарантує, що фіналізатор "
"залишається активним, доки об’єкт не буде зібрано."

#: ../../library/weakref.rst:63
msgid ""
"Most programs should find that using one of these weak container types or "
":class:`finalize` is all they need -- it's not usually necessary to create "
"your own weak references directly.  The low-level machinery is exposed by "
"the :mod:`weakref` module for the benefit of advanced uses."
msgstr ""
"Більшість програм має виявити, що використання одного з цих слабких типів "
"контейнерів або :class:`finalize` — це все, що їм потрібно - зазвичай не "
"потрібно безпосередньо створювати власні слабкі посилання. Механізм низького"
" рівня розкривається модулем :mod:`weakref` для розширеного використання."

#: ../../library/weakref.rst:68
msgid ""
"Not all objects can be weakly referenced. Objects which support weak "
"references include class instances, functions written in Python (but not in "
"C), instance methods, sets, frozensets, some :term:`file objects <file "
"object>`, :term:`generators <generator>`, type objects, sockets, arrays, "
"deques, regular expression pattern objects, and code objects."
msgstr ""

#: ../../library/weakref.rst:74
msgid "Added support for thread.lock, threading.Lock, and code objects."
msgstr "Додано підтримку об’єктів thread.lock, threading.Lock і коду."

#: ../../library/weakref.rst:77
msgid ""
"Several built-in types such as :class:`list` and :class:`dict` do not "
"directly support weak references but can add support through subclassing::"
msgstr ""
"Кілька вбудованих типів, таких як :class:`list` і :class:`dict`, не "
"підтримують безпосередньо слабкі посилання, але можуть додати підтримку "
"через підкласи::"

#: ../../library/weakref.rst:80
msgid ""
"class Dict(dict):\n"
"    pass\n"
"\n"
"obj = Dict(red=1, green=2, blue=3)   # this object is weak referenceable"
msgstr ""

#: ../../library/weakref.rst:87
msgid ""
"Other built-in types such as :class:`tuple` and :class:`int` do not support "
"weak references even when subclassed."
msgstr ""
"Інші вбудовані типи, такі як :class:`tuple` і :class:`int` не підтримують "
"слабкі посилання, навіть якщо є підкласами."

#: ../../library/weakref.rst:90
msgid ""
"Extension types can easily be made to support weak references; see "
":ref:`weakref-support`."
msgstr ""
"Типи розширень можна легко створити для підтримки слабких посилань; див. "
":ref:`weakref-support`."

#: ../../library/weakref.rst:93
msgid ""
"When ``__slots__`` are defined for a given type, weak reference support is "
"disabled unless a ``'__weakref__'`` string is also present in the sequence "
"of strings in the ``__slots__`` declaration. See :ref:`__slots__ "
"documentation <slots>` for details."
msgstr ""
"Коли для даного типу визначено ``__slots__``, підтримку слабких посилань "
"вимкнено, якщо тільки рядок ``'__weakref__`` також не присутній у "
"послідовності рядків у декларації ``__slots__``. Перегляньте :ref:`__slots__"
" документацію <slots>` для деталей."

#: ../../library/weakref.rst:100
msgid ""
"Return a weak reference to *object*.  The original object can be retrieved "
"by calling the reference object if the referent is still alive; if the "
"referent is no longer alive, calling the reference object will cause "
":const:`None` to be returned.  If *callback* is provided and not "
":const:`None`, and the returned weakref object is still alive, the callback "
"will be called when the object is about to be finalized; the weak reference "
"object will be passed as the only parameter to the callback; the referent "
"will no longer be available."
msgstr ""
"Повернути слабке посилання на *об’єкт*. Вихідний об’єкт можна отримати, "
"викликавши еталонний об’єкт, якщо референт ще живий; якщо референт більше не"
" живий, виклик об’єкта посилання призведе до повернення :const:`None`. Якщо "
"надано *callback*, а не :const:`None`, і повернутий об’єкт weakref все ще "
"живий, зворотний виклик буде викликано, коли об’єкт буде завершено; об'єкт "
"слабкого посилання буде передано як єдиний параметр зворотного виклику; "
"референт більше не буде доступний."

#: ../../library/weakref.rst:108
msgid ""
"It is allowable for many weak references to be constructed for the same "
"object. Callbacks registered for each weak reference will be called from the"
" most recently registered callback to the oldest registered callback."
msgstr ""
"Для одного об’єкта допускається створення багатьох слабких посилань. "
"Зворотні виклики, зареєстровані для кожного слабкого посилання, "
"викликатимуться від останнього зареєстрованого зворотного виклику до "
"найстарішого зареєстрованого зворотного виклику."

#: ../../library/weakref.rst:112
msgid ""
"Exceptions raised by the callback will be noted on the standard error "
"output, but cannot be propagated; they are handled in exactly the same way "
"as exceptions raised from an object's :meth:`~object.__del__` method."
msgstr ""

#: ../../library/weakref.rst:116
msgid ""
"Weak references are :term:`hashable` if the *object* is hashable.  They will"
" maintain their hash value even after the *object* was deleted.  If "
":func:`hash` is called the first time only after the *object* was deleted, "
"the call will raise :exc:`TypeError`."
msgstr ""
"Слабкі посилання є :term:`hashable`, якщо *об’єкт* є хешованим. Вони "
"збережуть своє хеш-значення навіть після видалення *об’єкта*. Якщо "
":func:`hash` викликається вперше лише після того, як *об’єкт* було видалено,"
" виклик викличе :exc:`TypeError`."

#: ../../library/weakref.rst:121
msgid ""
"Weak references support tests for equality, but not ordering.  If the "
"referents are still alive, two references have the same equality "
"relationship as their referents (regardless of the *callback*).  If either "
"referent has been deleted, the references are equal only if the reference "
"objects are the same object."
msgstr ""
"Слабкі посилання підтримують тести на рівність, але не впорядкування. Якщо "
"референти ще живі, два посилання мають таке ж відношення рівності, що й їхні"
" референти (незалежно від *зворотного виклику*). Якщо будь-який референт "
"було видалено, посилання є рівними, лише якщо об’єкти еталонів є одним і тим"
" же об’єктом."

#: ../../library/weakref.rst:126
msgid "This is a subclassable type rather than a factory function."
msgstr "Це тип підкласу, а не фабрична функція."

#: ../../library/weakref.rst:130
msgid ""
"This read-only attribute returns the callback currently associated to the "
"weakref.  If there is no callback or if the referent of the weakref is no "
"longer alive then this attribute will have value ``None``."
msgstr ""
"Цей атрибут лише для читання повертає зворотний виклик, наразі пов’язаний зі"
" слабким посиланням. Якщо зворотного виклику немає або референт слабкого "
"посилання більше не живий, цей атрибут матиме значення ``None``."

#: ../../library/weakref.rst:134
msgid "Added the :attr:`__callback__` attribute."
msgstr "Додано атрибут :attr:`__callback__`."

#: ../../library/weakref.rst:140
msgid ""
"Return a proxy to *object* which uses a weak reference.  This supports use "
"of the proxy in most contexts instead of requiring the explicit "
"dereferencing used with weak reference objects.  The returned object will "
"have a type of either ``ProxyType`` or ``CallableProxyType``, depending on "
"whether *object* is callable.  Proxy objects are not :term:`hashable` "
"regardless of the referent; this avoids a number of problems related to "
"their fundamentally mutable nature, and prevents their use as dictionary "
"keys.  *callback* is the same as the parameter of the same name to the "
":func:`ref` function."
msgstr ""

#: ../../library/weakref.rst:149
msgid ""
"Accessing an attribute of the proxy object after the referent is garbage "
"collected raises :exc:`ReferenceError`."
msgstr ""

#: ../../library/weakref.rst:152
msgid ""
"Extended the operator support on proxy objects to include the matrix "
"multiplication operators ``@`` and ``@=``."
msgstr ""
"Розширено підтримку операторів на проксі-об’єктах, щоб включити оператори "
"множення матриці ``@`` і ``@=``."

#: ../../library/weakref.rst:159
msgid ""
"Return the number of weak references and proxies which refer to *object*."
msgstr ""
"Повертає кількість слабких посилань і проксі, які посилаються на *об’єкт*."

#: ../../library/weakref.rst:164
msgid ""
"Return a list of all weak reference and proxy objects which refer to "
"*object*."
msgstr ""
"Повертає список усіх слабких посилань і проксі-об’єктів, які посилаються на "
"*об’єкт*."

#: ../../library/weakref.rst:169
msgid ""
"Mapping class that references keys weakly.  Entries in the dictionary will "
"be discarded when there is no longer a strong reference to the key.  This "
"can be used to associate additional data with an object owned by other parts"
" of an application without adding attributes to those objects.  This can be "
"especially useful with objects that override attribute accesses."
msgstr ""
"Клас зіставлення, який слабко посилається на ключі. Записи в словнику буде "
"відкинуто, коли більше немає сильного посилання на ключ. Це можна "
"використовувати для зв’язування додаткових даних з об’єктом, що належить "
"іншим частинам програми, без додавання атрибутів до цих об’єктів. Це може "
"бути особливо корисним для об’єктів, які перевизначають доступ до атрибутів."

#: ../../library/weakref.rst:175
msgid ""
"Note that when a key with equal value to an existing key (but not equal "
"identity) is inserted into the dictionary, it replaces the value but does "
"not replace the existing key. Due to this, when the reference to the "
"original key is deleted, it also deletes the entry in the dictionary::"
msgstr ""

#: ../../library/weakref.rst:180
msgid ""
">>> class T(str): pass\n"
"...\n"
">>> k1, k2 = T(), T()\n"
">>> d = weakref.WeakKeyDictionary()\n"
">>> d[k1] = 1   # d = {k1: 1}\n"
">>> d[k2] = 2   # d = {k1: 2}\n"
">>> del k1      # d = {}"
msgstr ""

#: ../../library/weakref.rst:188
msgid "A workaround would be to remove the key prior to reassignment::"
msgstr ""

#: ../../library/weakref.rst:190
msgid ""
">>> class T(str): pass\n"
"...\n"
">>> k1, k2 = T(), T()\n"
">>> d = weakref.WeakKeyDictionary()\n"
">>> d[k1] = 1   # d = {k1: 1}\n"
">>> del d[k1]\n"
">>> d[k2] = 2   # d = {k2: 2}\n"
">>> del k1      # d = {k2: 2}"
msgstr ""

#: ../../library/weakref.rst:199 ../../library/weakref.rst:220
msgid ""
"Added support for ``|`` and ``|=`` operators, as specified in :pep:`584`."
msgstr ""
"Додано підтримку операторів ``|`` і ``|=``, як зазначено в :pep:`584`."

#: ../../library/weakref.rst:202
msgid ""
":class:`WeakKeyDictionary` objects have an additional method that exposes "
"the internal references directly.  The references are not guaranteed to be "
"\"live\" at the time they are used, so the result of calling the references "
"needs to be checked before being used.  This can be used to avoid creating "
"references that will cause the garbage collector to keep the keys around "
"longer than needed."
msgstr ""
"Об’єкти :class:`WeakKeyDictionary` мають додатковий метод, який "
"безпосередньо відкриває внутрішні посилання. Не гарантується, що посилання "
"будуть \"живими\" під час їх використання, тому результат виклику посилань "
"потрібно перевірити перед використанням. Це можна використовувати, щоб "
"уникнути створення посилань, через які збирач сміття зберігатиме ключі "
"довше, ніж потрібно."

#: ../../library/weakref.rst:212
msgid "Return an iterable of the weak references to the keys."
msgstr "Повертає ітерацію слабких посилань на ключі."

#: ../../library/weakref.rst:217
msgid ""
"Mapping class that references values weakly.  Entries in the dictionary will"
" be discarded when no strong reference to the value exists any more."
msgstr ""
"Клас зіставлення, який слабко посилається на значення. Записи в словнику "
"буде відкинуто, якщо більше не існує сильного посилання на значення."

#: ../../library/weakref.rst:223
msgid ""
":class:`WeakValueDictionary` objects have an additional method that has the "
"same issues as the :meth:`WeakKeyDictionary.keyrefs` method."
msgstr ""

#: ../../library/weakref.rst:229
msgid "Return an iterable of the weak references to the values."
msgstr "Повертає ітерацію слабких посилань на значення."

#: ../../library/weakref.rst:234
msgid ""
"Set class that keeps weak references to its elements.  An element will be "
"discarded when no strong reference to it exists any more."
msgstr ""
"Клас набору, який зберігає слабкі посилання на свої елементи. Елемент буде "
"відкинуто, якщо на нього більше не буде сильних посилань."

#: ../../library/weakref.rst:240
msgid ""
"A custom :class:`ref` subclass which simulates a weak reference to a bound "
"method (i.e., a method defined on a class and looked up on an instance). "
"Since a bound method is ephemeral, a standard weak reference cannot keep "
"hold of it.  :class:`WeakMethod` has special code to recreate the bound "
"method until either the object or the original function dies::"
msgstr ""
"Спеціальний підклас :class:`ref`, який імітує слабке посилання на зв’язаний "
"метод (тобто метод, визначений у класі та шуканий у екземплярі). Оскільки "
"зв’язаний метод є ефемерним, стандартне слабке посилання не може втримати "
"його. :class:`WeakMethod` має спеціальний код для відтворення зв’язаного "
"методу, доки об’єкт або вихідна функція не помре::"

#: ../../library/weakref.rst:246
msgid ""
">>> class C:\n"
"...     def method(self):\n"
"...         print(\"method called!\")\n"
"...\n"
">>> c = C()\n"
">>> r = weakref.ref(c.method)\n"
">>> r()\n"
">>> r = weakref.WeakMethod(c.method)\n"
">>> r()\n"
"<bound method C.method of <__main__.C object at 0x7fc859830220>>\n"
">>> r()()\n"
"method called!\n"
">>> del c\n"
">>> gc.collect()\n"
"0\n"
">>> r()\n"
">>>"
msgstr ""

#: ../../library/weakref.rst:264
msgid ""
"*callback* is the same as the parameter of the same name to the :func:`ref` "
"function."
msgstr ""

#: ../../library/weakref.rst:270
msgid ""
"Return a callable finalizer object which will be called when *obj* is "
"garbage collected. Unlike an ordinary weak reference, a finalizer will "
"always survive until the reference object is collected, greatly simplifying "
"lifecycle management."
msgstr ""
"Повертає викликаний об’єкт фіналізатора, який буде викликаний, коли *obj* "
"буде зібрано сміття. На відміну від звичайного слабкого посилання, "
"фіналізатор завжди житиме, доки не буде зібрано еталонний об’єкт, що значно "
"спрощує керування життєвим циклом."

#: ../../library/weakref.rst:275
msgid ""
"A finalizer is considered *alive* until it is called (either explicitly or "
"at garbage collection), and after that it is *dead*.  Calling a live "
"finalizer returns the result of evaluating ``func(*arg, **kwargs)``, whereas"
" calling a dead finalizer returns :const:`None`."
msgstr ""
"Фіналізатор вважається *живим*, доки його не викликають (явним чином або під"
" час збирання сміття), а після цього він *мертвий*. Виклик активного "
"фіналізатора повертає результат обчислення ``func(*arg, **kwargs)``, тоді як"
" виклик мертвого фіналізатора повертає :const:`None`."

#: ../../library/weakref.rst:280
msgid ""
"Exceptions raised by finalizer callbacks during garbage collection will be "
"shown on the standard error output, but cannot be propagated.  They are "
"handled in the same way as exceptions raised from an object's "
":meth:`~object.__del__` method or a weak reference's callback."
msgstr ""

#: ../../library/weakref.rst:286
msgid ""
"When the program exits, each remaining live finalizer is called unless its "
":attr:`atexit` attribute has been set to false.  They are called in reverse "
"order of creation."
msgstr ""
"Коли програма завершує роботу, викликається кожен живий фіналізатор, що "
"залишився, якщо його атрибут :attr:`atexit` не має значення false. Вони "
"називаються у зворотному порядку створення."

#: ../../library/weakref.rst:290
msgid ""
"A finalizer will never invoke its callback during the later part of the "
":term:`interpreter shutdown` when module globals are liable to have been "
"replaced by :const:`None`."
msgstr ""
"Фіналізатор ніколи не викличе свій зворотний виклик протягом наступної "
"частини :term:`interpreter shutdown`, коли глобальні елементи модуля можуть "
"бути замінені на :const:`None`."

#: ../../library/weakref.rst:296
msgid ""
"If *self* is alive then mark it as dead and return the result of calling "
"``func(*args, **kwargs)``.  If *self* is dead then return :const:`None`."
msgstr ""
"Якщо *self* живе, позначте його як мертве та поверніть результат виклику "
"``func(*args, **kwargs)``. Якщо *self* мертвий, поверніть :const:`None`."

#: ../../library/weakref.rst:302
msgid ""
"If *self* is alive then mark it as dead and return the tuple ``(obj, func, "
"args, kwargs)``.  If *self* is dead then return :const:`None`."
msgstr ""
"Якщо *self* живий, позначте його як мертвий і поверніть кортеж ``(obj, func,"
" args, kwargs)``. Якщо *self* мертвий, поверніть :const:`None`."

#: ../../library/weakref.rst:308
msgid ""
"If *self* is alive then return the tuple ``(obj, func, args, kwargs)``.  If "
"*self* is dead then return :const:`None`."
msgstr ""
"Якщо *self* живе, повертає кортеж ``(obj, func, args, kwargs)``. Якщо *self*"
" мертвий, поверніть :const:`None`."

#: ../../library/weakref.rst:313
msgid "Property which is true if the finalizer is alive, false otherwise."
msgstr ""
"Властивість, яка є істинною, якщо фіналізатор активний, і хибною в іншому "
"випадку."

#: ../../library/weakref.rst:317
msgid ""
"A writable boolean property which by default is true.  When the program "
"exits, it calls all remaining live finalizers for which :attr:`.atexit` is "
"true.  They are called in reverse order of creation."
msgstr ""
"Булева властивість, доступна для запису, яка за замовчуванням має значення "
"true. Коли програма завершує роботу, вона викликає всі поточні фіналізатори,"
" для яких :attr:`.atexit` має значення true. Вони називаються у зворотному "
"порядку створення."

#: ../../library/weakref.rst:324
msgid ""
"It is important to ensure that *func*, *args* and *kwargs* do not own any "
"references to *obj*, either directly or indirectly, since otherwise *obj* "
"will never be garbage collected.  In particular, *func* should not be a "
"bound method of *obj*."
msgstr ""
"Важливо переконатися, що *func*, *args* і *kwargs* не мають жодних посилань "
"на *obj*, прямо чи опосередковано, оскільки інакше *obj* ніколи не "
"збиратиметься як сміття. Зокрема, *func* не має бути зв’язаним методом "
"*obj*."

#: ../../library/weakref.rst:334
msgid "The type object for weak references objects."
msgstr "Об’єкт типу для об’єктів слабких посилань."

#: ../../library/weakref.rst:339
msgid "The type object for proxies of objects which are not callable."
msgstr "Об’єкт типу для проксі об’єктів, які не можна викликати."

#: ../../library/weakref.rst:344
msgid "The type object for proxies of callable objects."
msgstr "Об’єкт типу для проксі об’єктів, що викликаються."

#: ../../library/weakref.rst:349
msgid ""
"Sequence containing all the type objects for proxies.  This can make it "
"simpler to test if an object is a proxy without being dependent on naming "
"both proxy types."
msgstr ""
"Послідовність, що містить усі об’єкти типу для проксі. Це може спростити "
"перевірку того, чи є об’єкт проксі-сервером, не залежачи від іменування обох"
" типів проксі."

#: ../../library/weakref.rst:356
msgid ":pep:`205` - Weak References"
msgstr ":pep:`205` - Слабкі посилання"

#: ../../library/weakref.rst:357
msgid ""
"The proposal and rationale for this feature, including links to earlier "
"implementations and information about similar features in other languages."
msgstr ""
"Пропозиція та обґрунтування цієї функції, включаючи посилання на попередні "
"реалізації та інформацію про подібні функції іншими мовами."

#: ../../library/weakref.rst:364
msgid "Weak Reference Objects"
msgstr "Слабкі довідкові об’єкти"

#: ../../library/weakref.rst:366
msgid ""
"Weak reference objects have no methods and no attributes besides "
":attr:`ref.__callback__`. A weak reference object allows the referent to be "
"obtained, if it still exists, by calling it:"
msgstr ""
"Слабкі посилальні об’єкти не мають методів і атрибутів, крім "
":attr:`ref.__callback__`. Слабкий посилальний об’єкт дозволяє отримати "
"референт, якщо він все ще існує, викликаючи його:"

#: ../../library/weakref.rst:380
msgid ""
"If the referent no longer exists, calling the reference object returns "
":const:`None`:"
msgstr ""
"Якщо референт більше не існує, виклик об’єкта посилання повертає "
":const:`None`:"

#: ../../library/weakref.rst:387
msgid ""
"Testing that a weak reference object is still live should be done using the "
"expression ``ref() is not None``.  Normally, application code that needs to "
"use a reference object should follow this pattern::"
msgstr ""
"Перевірку того, що слабкий еталонний об’єкт все ще живий, слід виконувати за"
" допомогою виразу ``ref() is not None``. Зазвичай код програми, який "
"потребує використання еталонного об’єкта, має відповідати такому шаблону:"

#: ../../library/weakref.rst:391
msgid ""
"# r is a weak reference object\n"
"o = r()\n"
"if o is None:\n"
"    # referent has been garbage collected\n"
"    print(\"Object has been deallocated; can't frobnicate.\")\n"
"else:\n"
"    print(\"Object is still live!\")\n"
"    o.do_something_useful()"
msgstr ""

#: ../../library/weakref.rst:400
msgid ""
"Using a separate test for \"liveness\" creates race conditions in threaded "
"applications; another thread can cause a weak reference to become "
"invalidated before the weak reference is called; the idiom shown above is "
"safe in threaded applications as well as single-threaded applications."
msgstr ""
"Використання окремого тесту на \"жвавість\" створює умови гонки в потокових "
"програмах; інший потік може призвести до того, що слабке посилання стане "
"недійсним до виклику слабкого посилання; ідіома, показана вище, безпечна як "
"у багатопотокових програмах, так і в однопотокових програмах."

#: ../../library/weakref.rst:405
msgid ""
"Specialized versions of :class:`ref` objects can be created through "
"subclassing. This is used in the implementation of the "
":class:`WeakValueDictionary` to reduce the memory overhead for each entry in"
" the mapping.  This may be most useful to associate additional information "
"with a reference, but could also be used to insert additional processing on "
"calls to retrieve the referent."
msgstr ""
"Спеціалізовані версії об’єктів :class:`ref` можна створити за допомогою "
"підкласів. Це використовується в реалізації :class:`WeakValueDictionary`, "
"щоб зменшити витрати пам’яті для кожного запису у відображенні. Це може бути"
" найбільш корисним для пов’язування додаткової інформації з посиланням, але "
"також може використовуватися для вставки додаткової обробки викликів для "
"отримання референту."

#: ../../library/weakref.rst:411
msgid ""
"This example shows how a subclass of :class:`ref` can be used to store "
"additional information about an object and affect the value that's returned "
"when the referent is accessed::"
msgstr ""
"У цьому прикладі показано, як підклас :class:`ref` можна використовувати для"
" зберігання додаткової інформації про об’єкт і впливу на значення, яке "
"повертається під час звернення до референта::"

#: ../../library/weakref.rst:415
msgid ""
"import weakref\n"
"\n"
"class ExtendedRef(weakref.ref):\n"
"    def __init__(self, ob, callback=None, /, **annotations):\n"
"        super().__init__(ob, callback)\n"
"        self.__counter = 0\n"
"        for k, v in annotations.items():\n"
"            setattr(self, k, v)\n"
"\n"
"    def __call__(self):\n"
"        \"\"\"Return a pair containing the referent and the number of\n"
"        times the reference has been called.\n"
"        \"\"\"\n"
"        ob = super().__call__()\n"
"        if ob is not None:\n"
"            self.__counter += 1\n"
"            ob = (ob, self.__counter)\n"
"        return ob"
msgstr ""

#: ../../library/weakref.rst:438
msgid "Example"
msgstr "приклад"

#: ../../library/weakref.rst:440
msgid ""
"This simple example shows how an application can use object IDs to retrieve "
"objects that it has seen before.  The IDs of the objects can then be used in"
" other data structures without forcing the objects to remain alive, but the "
"objects can still be retrieved by ID if they do."
msgstr ""
"Цей простий приклад показує, як програма може використовувати ідентифікатори"
" об’єктів для отримання об’єктів, які вона бачила раніше. Потім "
"ідентифікатори об’єктів можна використовувати в інших структурах даних, не "
"змушуючи об’єкти залишатися живими, але об’єкти все одно можна отримати за "
"ідентифікатором, якщо вони це роблять."

#: ../../library/weakref.rst:449
msgid ""
"import weakref\n"
"\n"
"_id2obj_dict = weakref.WeakValueDictionary()\n"
"\n"
"def remember(obj):\n"
"    oid = id(obj)\n"
"    _id2obj_dict[oid] = obj\n"
"    return oid\n"
"\n"
"def id2obj(oid):\n"
"    return _id2obj_dict[oid]"
msgstr ""

#: ../../library/weakref.rst:465
msgid "Finalizer Objects"
msgstr "Об’єкти фіналізатора"

#: ../../library/weakref.rst:467
msgid ""
"The main benefit of using :class:`finalize` is that it makes it simple to "
"register a callback without needing to preserve the returned finalizer "
"object.  For instance"
msgstr ""
"Основна перевага використання :class:`finalize` полягає в тому, що це "
"спрощує реєстрацію зворотного виклику без необхідності зберігати повернутий "
"об’єкт фіналізатора. Наприклад"

#: ../../library/weakref.rst:481
msgid ""
"The finalizer can be called directly as well.  However the finalizer will "
"invoke the callback at most once."
msgstr ""
"Фіналізатор також можна викликати безпосередньо. Однак фіналізатор викличе "
"зворотний виклик щонайбільше один раз."

#: ../../library/weakref.rst:497
msgid ""
"You can unregister a finalizer using its :meth:`~finalize.detach` method.  "
"This kills the finalizer and returns the arguments passed to the constructor"
" when it was created."
msgstr ""
"Ви можете скасувати реєстрацію фіналізатора за допомогою його методу "
":meth:`~finalize.detach`. Це вбиває фіналізатор і повертає аргументи, "
"передані конструктору під час його створення."

#: ../../library/weakref.rst:511
msgid ""
"Unless you set the :attr:`~finalize.atexit` attribute to :const:`False`, a "
"finalizer will be called when the program exits if it is still alive.  For "
"instance"
msgstr ""
"Якщо ви не встановили для атрибута :attr:`~finalize.atexit` значення "
":const:`False`, фіналізатор буде викликаний під час завершення програми, "
"якщо вона все ще жива. Наприклад"

#: ../../library/weakref.rst:515
msgid ""
">>> obj = Object()\n"
">>> weakref.finalize(obj, print, \"obj dead or exiting\")\n"
"<finalize object at ...; for 'Object' at ...>\n"
">>> exit()\n"
"obj dead or exiting"
msgstr ""

#: ../../library/weakref.rst:526
msgid "Comparing finalizers with :meth:`~object.__del__` methods"
msgstr ""

#: ../../library/weakref.rst:528
msgid ""
"Suppose we want to create a class whose instances represent temporary "
"directories.  The directories should be deleted with their contents when the"
" first of the following events occurs:"
msgstr ""
"Припустимо, ми хочемо створити клас, екземпляри якого представляють "
"тимчасові каталоги. Каталоги мають бути видалені разом із їхнім вмістом, "
"коли станеться перша з наступних подій:"

#: ../../library/weakref.rst:532
msgid "the object is garbage collected,"
msgstr "об'єкт вивезено сміття,"

#: ../../library/weakref.rst:533
msgid "the object's :meth:`!remove` method is called, or"
msgstr ""

#: ../../library/weakref.rst:534
msgid "the program exits."
msgstr "програма виходить."

#: ../../library/weakref.rst:536
msgid ""
"We might try to implement the class using a :meth:`~object.__del__` method "
"as follows::"
msgstr ""

#: ../../library/weakref.rst:539
msgid ""
"class TempDir:\n"
"    def __init__(self):\n"
"        self.name = tempfile.mkdtemp()\n"
"\n"
"    def remove(self):\n"
"        if self.name is not None:\n"
"            shutil.rmtree(self.name)\n"
"            self.name = None\n"
"\n"
"    @property\n"
"    def removed(self):\n"
"        return self.name is None\n"
"\n"
"    def __del__(self):\n"
"        self.remove()"
msgstr ""

#: ../../library/weakref.rst:555
msgid ""
"Starting with Python 3.4, :meth:`~object.__del__` methods no longer prevent "
"reference cycles from being garbage collected, and module globals are no "
"longer forced to :const:`None` during :term:`interpreter shutdown`. So this "
"code should work without any issues on CPython."
msgstr ""

#: ../../library/weakref.rst:560
msgid ""
"However, handling of :meth:`~object.__del__` methods is notoriously "
"implementation specific, since it depends on internal details of the "
"interpreter's garbage collector implementation."
msgstr ""

#: ../../library/weakref.rst:564
msgid ""
"A more robust alternative can be to define a finalizer which only references"
" the specific functions and objects that it needs, rather than having access"
" to the full state of the object::"
msgstr ""
"Більш надійною альтернативою може бути визначення фіналізатора, який "
"посилається лише на певні функції та об’єкти, які йому потрібні, а не має "
"доступу до повного стану об’єкта:"

#: ../../library/weakref.rst:568
msgid ""
"class TempDir:\n"
"    def __init__(self):\n"
"        self.name = tempfile.mkdtemp()\n"
"        self._finalizer = weakref.finalize(self, shutil.rmtree, self.name)\n"
"\n"
"    def remove(self):\n"
"        self._finalizer()\n"
"\n"
"    @property\n"
"    def removed(self):\n"
"        return not self._finalizer.alive"
msgstr ""

#: ../../library/weakref.rst:580
msgid ""
"Defined like this, our finalizer only receives a reference to the details it"
" needs to clean up the directory appropriately. If the object never gets "
"garbage collected the finalizer will still be called at exit."
msgstr ""
"Визначений таким чином, наш фіналізатор отримує лише посилання на деталі, "
"необхідні для належного очищення каталогу. Якщо об’єкт ніколи не отримує "
"сміття, фіналізатор все одно буде викликаний при виході."

#: ../../library/weakref.rst:584
msgid ""
"The other advantage of weakref based finalizers is that they can be used to "
"register finalizers for classes where the definition is controlled by a "
"third party, such as running code when a module is unloaded::"
msgstr ""
"Інша перевага фіналізаторів на основі слабких рефлексів полягає в тому, що "
"їх можна використовувати для реєстрації фіналізаторів для класів, де "
"визначення контролює третя сторона, наприклад, запуск коду, коли модуль "
"вивантажується:"

#: ../../library/weakref.rst:588
msgid ""
"import weakref, sys\n"
"def unloading_module():\n"
"    # implicit reference to the module globals from the function body\n"
"weakref.finalize(sys.modules[__name__], unloading_module)"
msgstr ""

#: ../../library/weakref.rst:596
msgid ""
"If you create a finalizer object in a daemonic thread just as the program "
"exits then there is the possibility that the finalizer does not get called "
"at exit.  However, in a daemonic thread :func:`atexit.register`, ``try: ... "
"finally: ...`` and ``with: ...`` do not guarantee that cleanup occurs "
"either."
msgstr ""
"Якщо ви створюєте об’єкт фіналізатора в демонічному потоці саме під час "
"виходу з програми, тоді існує ймовірність того, що фіналізатор не буде "
"викликаний під час виходу. Однак у демонічному потоці "
":func:`atexit.register`, ``try: ... finally: ...`` і ``with: ...`` також не "
"гарантують виконання очищення."
