# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Dmytro Kazanzhy, 2022
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-11-19 01:00+0000\n"
"PO-Revision-Date: 2021-06-28 01:18+0000\n"
"Last-Translator: Dmytro Kazanzhy, 2022\n"
"Language-Team: Ukrainian (https://app.transifex.com/python-doc/teams/5390/uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != 11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % 100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || (n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

#: ../../library/xmlrpc.server.rst:2
msgid ":mod:`!xmlrpc.server` --- Basic XML-RPC servers"
msgstr ""

#: ../../library/xmlrpc.server.rst:10
msgid "**Source code:** :source:`Lib/xmlrpc/server.py`"
msgstr "**Вихідний код:** :source:`Lib/xmlrpc/server.py`"

#: ../../library/xmlrpc.server.rst:14
msgid ""
"The :mod:`xmlrpc.server` module provides a basic server framework for XML-"
"RPC servers written in Python.  Servers can either be free standing, using "
":class:`SimpleXMLRPCServer`, or embedded in a CGI environment, using "
":class:`CGIXMLRPCRequestHandler`."
msgstr ""
"Модуль :mod:`xmlrpc.server` надає базову серверну структуру для серверів "
"XML-RPC, написаних на Python. Сервери можуть бути автономними, "
"використовуючи :class:`SimpleXMLRPCServer`, або вбудованими в середовище "
"CGI, використовуючи :class:`CGIXMLRPCRequestHandler`."

#: ../../library/xmlrpc.server.rst:22
msgid ""
"The :mod:`xmlrpc.server` module is not secure against maliciously "
"constructed data.  If you need to parse untrusted or unauthenticated data "
"see :ref:`xml-vulnerabilities`."
msgstr ""
"Модуль :mod:`xmlrpc.server` не захищений від зловмисно створених даних. Якщо"
" вам потрібно проаналізувати ненадійні або неавтентифіковані дані, "
"перегляньте :ref:`xml-vulnerabilities`."

#: ../../includes/wasm-notavail.rst:3
msgid "Availability"
msgstr ""

#: ../../includes/wasm-notavail.rst:5
msgid ""
"This module does not work or is not available on WebAssembly. See "
":ref:`wasm-availability` for more information."
msgstr ""

#: ../../library/xmlrpc.server.rst:32
msgid ""
"Create a new server instance.  This class provides methods for registration "
"of functions that can be called by the XML-RPC protocol.  The "
"*requestHandler* parameter should be a factory for request handler "
"instances; it defaults to :class:`SimpleXMLRPCRequestHandler`.  The *addr* "
"and *requestHandler* parameters are passed to the "
":class:`socketserver.TCPServer` constructor.  If *logRequests* is true (the "
"default), requests will be logged; setting this parameter to false will turn"
" off logging.   The *allow_none* and *encoding* parameters are passed on to "
":mod:`xmlrpc.client` and control the XML-RPC responses that will be returned"
" from the server. The *bind_and_activate* parameter controls whether "
":meth:`server_bind` and :meth:`server_activate` are called immediately by "
"the constructor; it defaults to true. Setting it to false allows code to "
"manipulate the *allow_reuse_address* class variable before the address is "
"bound. The *use_builtin_types* parameter is passed to the "
":func:`~xmlrpc.client.loads` function and controls which types are processed"
" when date/times values or binary data are received; it defaults to false."
msgstr ""
"Створіть новий екземпляр сервера. Цей клас надає методи для реєстрації "
"функцій, які можуть бути викликані протоколом XML-RPC. Параметр "
"*requestHandler* має бути фабрикою для екземплярів обробника запитів; за "
"замовчуванням :class:`SimpleXMLRPCRequestHandler`. Параметри *addr* і "
"*requestHandler* передаються до конструктора "
":class:`socketserver.TCPServer`. Якщо *logRequests* має значення true (за "
"замовчуванням), запити реєструватимуться; встановлення цього параметра на "
"false вимкне журналювання. Параметри *allow_none* і *encoding* передаються "
"до :mod:`xmlrpc.client` і контролюють відповіді XML-RPC, які повертаються з "
"сервера. Параметр *bind_and_activate* контролює, чи :meth:`server_bind` і "
":meth:`server_activate` негайно викликаються конструктором; за замовчуванням"
" значення true. Встановлення значення false дозволяє коду маніпулювати "
"змінною класу *allow_reuse_address* до того, як адресу буде зв’язано. "
"Параметр *use_builtin_types* передається до функції "
":func:`~xmlrpc.client.loads` і контролює, які типи обробляються під час "
"отримання значень дати/часу або двійкових даних; за замовчуванням значення "
"false."

#: ../../library/xmlrpc.server.rst:48 ../../library/xmlrpc.server.rst:62
#: ../../library/xmlrpc.server.rst:374
msgid "The *use_builtin_types* flag was added."
msgstr "Додано прапорець *use_builtin_types*."

#: ../../library/xmlrpc.server.rst:55
msgid ""
"Create a new instance to handle XML-RPC requests in a CGI environment.  The "
"*allow_none* and *encoding* parameters are passed on to :mod:`xmlrpc.client`"
" and control the XML-RPC responses that will be returned from the server. "
"The *use_builtin_types* parameter is passed to the "
":func:`~xmlrpc.client.loads` function and controls which types are processed"
" when date/times values or binary data are received; it defaults to false."
msgstr ""
"Створіть новий екземпляр для обробки запитів XML-RPC у середовищі CGI. "
"Параметри *allow_none* і *encoding* передаються до :mod:`xmlrpc.client` і "
"контролюють відповіді XML-RPC, які повертаються з сервера. Параметр "
"*use_builtin_types* передається до функції :func:`~xmlrpc.client.loads` і "
"контролює, які типи обробляються під час отримання значень дати/часу або "
"двійкових даних; за замовчуванням значення false."

#: ../../library/xmlrpc.server.rst:68
msgid ""
"Create a new request handler instance.  This request handler supports "
"``POST`` requests and modifies logging so that the *logRequests* parameter "
"to the :class:`SimpleXMLRPCServer` constructor parameter is honored."
msgstr ""
"Створіть новий екземпляр обробника запитів. Цей обробник запитів підтримує "
"запити ``POST`` і змінює журналювання таким чином, щоб параметр "
"*logRequests* для параметра конструктора :class:`SimpleXMLRPCServer` "
"враховувався."

#: ../../library/xmlrpc.server.rst:76
msgid "SimpleXMLRPCServer Objects"
msgstr "Об’єкти SimpleXMLRPCServer"

#: ../../library/xmlrpc.server.rst:78
msgid ""
"The :class:`SimpleXMLRPCServer` class is based on "
":class:`socketserver.TCPServer` and provides a means of creating simple, "
"stand alone XML-RPC servers."
msgstr ""
"Клас :class:`SimpleXMLRPCServer` заснований на "
":class:`socketserver.TCPServer` і надає засоби для створення простих "
"автономних серверів XML-RPC."

#: ../../library/xmlrpc.server.rst:85 ../../library/xmlrpc.server.rst:299
msgid ""
"Register a function that can respond to XML-RPC requests.  If *name* is "
"given, it will be the method name associated with *function*, otherwise "
":attr:`function.__name__` will be used.  *name* is a string, and may contain"
" characters not legal in Python identifiers, including the period character."
msgstr ""

#: ../../library/xmlrpc.server.rst:90 ../../library/xmlrpc.server.rst:304
msgid ""
"This method can also be used as a decorator.  When used as a decorator, "
"*name* can only be given as a keyword argument to register *function* under "
"*name*.  If no *name* is given, :attr:`function.__name__` will be used."
msgstr ""

#: ../../library/xmlrpc.server.rst:94 ../../library/xmlrpc.server.rst:308
msgid ":meth:`register_function` can be used as a decorator."
msgstr ":meth:`register_function` можна використовувати як декоратор."

#: ../../library/xmlrpc.server.rst:100
msgid ""
"Register an object which is used to expose method names which have not been "
"registered using :meth:`register_function`.  If *instance* contains a "
":meth:`_dispatch` method, it is called with the requested method name and "
"the parameters from the request.  Its API is ``def _dispatch(self, method, "
"params)`` (note that *params* does not represent a variable argument list)."
"  If it calls an underlying function to perform its task, that function is "
"called as ``func(*params)``, expanding the parameter list. The return value "
"from :meth:`_dispatch` is returned to the client as the result.  If "
"*instance* does not have a :meth:`_dispatch` method, it is searched for an "
"attribute matching the name of the requested method."
msgstr ""
"Зареєструйте об’єкт, який використовується для надання імен методів, які не "
"були зареєстровані за допомогою :meth:`register_function`. Якщо *екземпляр* "
"містить метод :meth:`_dispatch`, він викликається із запитаною назвою методу"
" та параметрами із запиту. Його API — ``def _dispatch(self, method, "
"params)`` (зверніть увагу, що *params* не представляє список змінних "
"аргументів). Якщо вона викликає базову функцію для виконання свого завдання,"
" ця функція викликається як ``func(*params)``, розширюючи список параметрів."
" Повернене значення від :meth:`_dispatch` повертається клієнту як результат."
" Якщо *екземпляр* не має методу :meth:`_dispatch`, він шукається за "
"атрибутом, який відповідає назві запитаного методу."

#: ../../library/xmlrpc.server.rst:111
msgid ""
"If the optional *allow_dotted_names* argument is true and the instance does "
"not have a :meth:`_dispatch` method, then if the requested method name "
"contains periods, each component of the method name is searched for "
"individually, with the effect that a simple hierarchical search is "
"performed.  The value found from this search is then called with the "
"parameters from the request, and the return value is passed back to the "
"client."
msgstr ""
"Якщо необов’язковий аргумент *allow_dotted_names* має значення true і "
"екземпляр не має методу :meth:`_dispatch`, тоді, якщо запитане ім’я методу "
"містить крапки, кожен компонент імені методу шукається окремо, з ефектом "
"простого виконується ієрархічний пошук. Значення, знайдене в результаті "
"цього пошуку, потім викликається з параметрами із запиту, а повернуте "
"значення передається назад клієнту."

#: ../../library/xmlrpc.server.rst:120
msgid ""
"Enabling the *allow_dotted_names* option allows intruders to access your "
"module's global variables and may allow intruders to execute arbitrary code "
"on your machine.  Only use this option on a secure, closed network."
msgstr ""
"Увімкнення опції *allow_dotted_names* дозволяє зловмисникам отримати доступ "
"до глобальних змінних вашого модуля та може дозволити зловмисникам "
"виконувати довільний код на вашій машині. Використовуйте цей параметр лише в"
" безпечній закритій мережі."

#: ../../library/xmlrpc.server.rst:127
msgid ""
"Registers the XML-RPC introspection functions ``system.listMethods``, "
"``system.methodHelp`` and ``system.methodSignature``."
msgstr ""
"Реєструє функції інтроспекції XML-RPC ``system.listMethods``, "
"``system.methodHelp`` і ``system.methodSignature``."

#: ../../library/xmlrpc.server.rst:133
msgid "Registers the XML-RPC multicall function system.multicall."
msgstr "Реєструє функцію багаторазового виклику XML-RPC system.multicall."

#: ../../library/xmlrpc.server.rst:138
msgid ""
"An attribute value that must be a tuple listing valid path portions of the "
"URL for receiving XML-RPC requests.  Requests posted to other paths will "
"result in a 404 \"no such page\" HTTP error.  If this tuple is empty, all "
"paths will be considered valid. The default value is ``('/', '/RPC2')``."
msgstr ""
"Значення атрибута, яке має бути кортежем із переліком дійсних частин шляху "
"URL-адреси для отримання запитів XML-RPC. Запити, опубліковані на інших "
"шляхах, призведуть до помилки HTTP 404 \"немає такої сторінки\". Якщо цей "
"кортеж порожній, усі шляхи вважатимуться дійсними. Значення за замовчуванням"
" – ``('/', '/RPC2')``."

#: ../../library/xmlrpc.server.rst:147
msgid "SimpleXMLRPCServer Example"
msgstr "Приклад SimpleXMLRPCServer"

#: ../../library/xmlrpc.server.rst:148
msgid "Server code::"
msgstr "Код сервера ::"

#: ../../library/xmlrpc.server.rst:150
msgid ""
"from xmlrpc.server import SimpleXMLRPCServer\n"
"from xmlrpc.server import SimpleXMLRPCRequestHandler\n"
"\n"
"# Restrict to a particular path.\n"
"class RequestHandler(SimpleXMLRPCRequestHandler):\n"
"    rpc_paths = ('/RPC2',)\n"
"\n"
"# Create server\n"
"with SimpleXMLRPCServer(('localhost', 8000),\n"
"                        requestHandler=RequestHandler) as server:\n"
"    server.register_introspection_functions()\n"
"\n"
"    # Register pow() function; this will use the value of\n"
"    # pow.__name__ as the name, which is just 'pow'.\n"
"    server.register_function(pow)\n"
"\n"
"    # Register a function under a different name\n"
"    def adder_function(x, y):\n"
"        return x + y\n"
"    server.register_function(adder_function, 'add')\n"
"\n"
"    # Register an instance; all the methods of the instance are\n"
"    # published as XML-RPC methods (in this case, just 'mul').\n"
"    class MyFuncs:\n"
"        def mul(self, x, y):\n"
"            return x * y\n"
"\n"
"    server.register_instance(MyFuncs())\n"
"\n"
"    # Run the server's main loop\n"
"    server.serve_forever()"
msgstr ""

#: ../../library/xmlrpc.server.rst:182
msgid ""
"The following client code will call the methods made available by the "
"preceding server::"
msgstr "Наступний код клієнта викличе методи, доступні попереднім сервером:"

#: ../../library/xmlrpc.server.rst:185
msgid ""
"import xmlrpc.client\n"
"\n"
"s = xmlrpc.client.ServerProxy('http://localhost:8000')\n"
"print(s.pow(2,3))  # Returns 2**3 = 8\n"
"print(s.add(2,3))  # Returns 5\n"
"print(s.mul(5,2))  # Returns 5*2 = 10\n"
"\n"
"# Print list of available methods\n"
"print(s.system.listMethods())"
msgstr ""

#: ../../library/xmlrpc.server.rst:195
msgid ""
":meth:`register_function` can also be used as a decorator. The previous "
"server example can register functions in a decorator way::"
msgstr ""
":meth:`register_function` також можна використовувати як декоратор. "
"Попередній приклад сервера може реєструвати функції у спосіб декоратора:"

#: ../../library/xmlrpc.server.rst:198
msgid ""
"from xmlrpc.server import SimpleXMLRPCServer\n"
"from xmlrpc.server import SimpleXMLRPCRequestHandler\n"
"\n"
"class RequestHandler(SimpleXMLRPCRequestHandler):\n"
"    rpc_paths = ('/RPC2',)\n"
"\n"
"with SimpleXMLRPCServer(('localhost', 8000),\n"
"                        requestHandler=RequestHandler) as server:\n"
"    server.register_introspection_functions()\n"
"\n"
"    # Register pow() function; this will use the value of\n"
"    # pow.__name__ as the name, which is just 'pow'.\n"
"    server.register_function(pow)\n"
"\n"
"    # Register a function under a different name, using\n"
"    # register_function as a decorator. *name* can only be given\n"
"    # as a keyword argument.\n"
"    @server.register_function(name='add')\n"
"    def adder_function(x, y):\n"
"        return x + y\n"
"\n"
"    # Register a function under function.__name__.\n"
"    @server.register_function\n"
"    def mul(x, y):\n"
"        return x * y\n"
"\n"
"    server.serve_forever()"
msgstr ""

#: ../../library/xmlrpc.server.rst:226
msgid ""
"The following example included in the :file:`Lib/xmlrpc/server.py` module "
"shows a server allowing dotted names and registering a multicall function."
msgstr ""
"У наступному прикладі, включеному в модуль :file:`Lib/xmlrpc/server.py`, "
"показано сервер, який дозволяє використовувати імена з крапками та реєструє "
"функцію багаторазового виклику."

#: ../../library/xmlrpc.server.rst:231
msgid ""
"Enabling the *allow_dotted_names* option allows intruders to access your "
"module's global variables and may allow intruders to execute arbitrary code "
"on your machine.  Only use this example only within a secure, closed "
"network."
msgstr ""
"Увімкнення опції *allow_dotted_names* дозволяє зловмисникам отримати доступ "
"до глобальних змінних вашого модуля та може дозволити зловмисникам "
"виконувати довільний код на вашій машині. Використовуйте цей приклад лише в "
"безпечній закритій мережі."

#: ../../library/xmlrpc.server.rst:237
msgid ""
"import datetime\n"
"\n"
"class ExampleService:\n"
"    def getData(self):\n"
"        return '42'\n"
"\n"
"    class currentTime:\n"
"        @staticmethod\n"
"        def getCurrentTime():\n"
"            return datetime.datetime.now()\n"
"\n"
"with SimpleXMLRPCServer((\"localhost\", 8000)) as server:\n"
"    server.register_function(pow)\n"
"    server.register_function(lambda x,y: x+y, 'add')\n"
"    server.register_instance(ExampleService(), allow_dotted_names=True)\n"
"    server.register_multicall_functions()\n"
"    print('Serving XML-RPC on localhost port 8000')\n"
"    try:\n"
"        server.serve_forever()\n"
"    except KeyboardInterrupt:\n"
"        print(\"\\nKeyboard interrupt received, exiting.\")\n"
"        sys.exit(0)"
msgstr ""

#: ../../library/xmlrpc.server.rst:260
msgid "This ExampleService demo can be invoked from the command line::"
msgstr "Цю демо-версію ExampleService можна викликати з командного рядка::"

#: ../../library/xmlrpc.server.rst:262
msgid "python -m xmlrpc.server"
msgstr ""

#: ../../library/xmlrpc.server.rst:265
msgid ""
"The client that interacts with the above server is included in "
"``Lib/xmlrpc/client.py``::"
msgstr ""

#: ../../library/xmlrpc.server.rst:268
msgid ""
"server = ServerProxy(\"http://localhost:8000\")\n"
"\n"
"try:\n"
"    print(server.currentTime.getCurrentTime())\n"
"except Error as v:\n"
"    print(\"ERROR\", v)\n"
"\n"
"multi = MultiCall(server)\n"
"multi.getData()\n"
"multi.pow(2,9)\n"
"multi.add(1,2)\n"
"try:\n"
"    for response in multi():\n"
"        print(response)\n"
"except Error as v:\n"
"    print(\"ERROR\", v)"
msgstr ""

#: ../../library/xmlrpc.server.rst:285
msgid ""
"This client which interacts with the demo XMLRPC server can be invoked as::"
msgstr ""
"Цей клієнт, який взаємодіє з демонстраційним сервером XMLRPC, можна "
"викликати як:"

#: ../../library/xmlrpc.server.rst:287
msgid "python -m xmlrpc.client"
msgstr ""

#: ../../library/xmlrpc.server.rst:291
msgid "CGIXMLRPCRequestHandler"
msgstr "CGIXMLRPCRequestHandler"

#: ../../library/xmlrpc.server.rst:293
msgid ""
"The :class:`CGIXMLRPCRequestHandler` class can be used to handle XML-RPC "
"requests sent to Python CGI scripts."
msgstr ""
"Клас :class:`CGIXMLRPCRequestHandler` можна використовувати для обробки "
"запитів XML-RPC, надісланих до сценаріїв Python CGI."

#: ../../library/xmlrpc.server.rst:314
msgid ""
"Register an object which is used to expose method names  which have not been"
" registered using :meth:`register_function`. If  instance contains a "
":meth:`_dispatch` method, it is called with the  requested method name and "
"the parameters from the  request; the return value is returned to the client"
" as the result. If instance does not have a :meth:`_dispatch` method, it is "
"searched for an attribute matching the name of the requested method; if  the"
" requested method name contains periods, each  component of the method name "
"is searched for individually,  with the effect that a simple hierarchical "
"search is performed. The value found from this search is then called with "
"the  parameters from the request, and the return value is passed  back to "
"the client."
msgstr ""
"Зареєструйте об’єкт, який використовується для надання імен методів, які не "
"були зареєстровані за допомогою :meth:`register_function`. Якщо екземпляр "
"містить метод :meth:`_dispatch`, він викликається із запитаною назвою методу"
" та параметрами із запиту; повертається значення повертається клієнту як "
"результат. Якщо екземпляр не має методу :meth:`_dispatch`, він шукається за "
"атрибутом, який відповідає назві запитуваного методу; якщо запитане ім'я "
"методу містить крапки, кожен компонент імені методу шукається окремо, в "
"результаті чого виконується простий ієрархічний пошук. Значення, знайдене в "
"результаті цього пошуку, потім викликається з параметрами із запиту, а "
"повернуте значення передається назад клієнту."

#: ../../library/xmlrpc.server.rst:328
msgid ""
"Register the XML-RPC introspection functions  ``system.listMethods``, "
"``system.methodHelp`` and  ``system.methodSignature``."
msgstr ""
"Зареєструйте функції інтроспекції XML-RPC ``system.listMethods``, "
"``system.methodHelp`` і ``system.methodSignature``."

#: ../../library/xmlrpc.server.rst:334
msgid "Register the XML-RPC multicall function ``system.multicall``."
msgstr ""
"Зареєструйте функцію багаторазового виклику XML-RPC ``system.multicall``."

#: ../../library/xmlrpc.server.rst:339
msgid ""
"Handle an XML-RPC request. If *request_text* is given, it should be the POST"
" data provided by the HTTP server,  otherwise the contents of stdin will be "
"used."
msgstr ""
"Обробляти запит XML-RPC. Якщо задано *request_text*, це мають бути дані "
"POST, надані HTTP-сервером, інакше буде використано вміст stdin."

#: ../../library/xmlrpc.server.rst:342
msgid "Example::"
msgstr "Приклад::"

#: ../../library/xmlrpc.server.rst:344
msgid ""
"class MyFuncs:\n"
"    def mul(self, x, y):\n"
"        return x * y\n"
"\n"
"\n"
"handler = CGIXMLRPCRequestHandler()\n"
"handler.register_function(pow)\n"
"handler.register_function(lambda x,y: x+y, 'add')\n"
"handler.register_introspection_functions()\n"
"handler.register_instance(MyFuncs())\n"
"handler.handle_request()"
msgstr ""

#: ../../library/xmlrpc.server.rst:358
msgid "Documenting XMLRPC server"
msgstr "Документування сервера XMLRPC"

#: ../../library/xmlrpc.server.rst:360
msgid ""
"These classes extend the above classes to serve HTML documentation in "
"response to HTTP GET requests.  Servers can either be free standing, using "
":class:`DocXMLRPCServer`, or embedded in a CGI environment, using "
":class:`DocCGIXMLRPCRequestHandler`."
msgstr ""
"Ці класи розширюють наведені вище класи для обслуговування документації HTML"
" у відповідь на запити HTTP GET. Сервери можуть бути автономними, "
"використовуючи :class:`DocXMLRPCServer`, або вбудованими в середовище CGI, "
"використовуючи :class:`DocCGIXMLRPCRequestHandler`."

#: ../../library/xmlrpc.server.rst:370
msgid ""
"Create a new server instance. All parameters have the same meaning as for "
":class:`SimpleXMLRPCServer`; *requestHandler* defaults to "
":class:`DocXMLRPCRequestHandler`."
msgstr ""
"Створіть новий екземпляр сервера. Усі параметри мають те саме значення, що й"
" для :class:`SimpleXMLRPCServer`; *requestHandler* за умовчанням має "
"значення :class:`DocXMLRPCRequestHandler`."

#: ../../library/xmlrpc.server.rst:380
msgid "Create a new instance to handle XML-RPC requests in a CGI environment."
msgstr ""
"Створіть новий екземпляр для обробки запитів XML-RPC у середовищі CGI."

#: ../../library/xmlrpc.server.rst:385
msgid ""
"Create a new request handler instance. This request handler supports XML-RPC"
" POST requests, documentation GET requests, and modifies logging so that the"
" *logRequests* parameter to the :class:`DocXMLRPCServer` constructor "
"parameter is honored."
msgstr ""
"Створіть новий екземпляр обробника запитів. Цей обробник запитів підтримує "
"запити POST XML-RPC, запити GET документації та змінює журналювання таким "
"чином, щоб параметр *logRequests* для параметра конструктора "
":class:`DocXMLRPCServer` враховувався."

#: ../../library/xmlrpc.server.rst:394
msgid "DocXMLRPCServer Objects"
msgstr "Об’єкти DocXMLRPCServer"

#: ../../library/xmlrpc.server.rst:396
msgid ""
"The :class:`DocXMLRPCServer` class is derived from "
":class:`SimpleXMLRPCServer` and provides a means of creating self-"
"documenting, stand alone XML-RPC servers. HTTP POST requests are handled as "
"XML-RPC method calls. HTTP GET requests are handled by generating pydoc-"
"style HTML documentation. This allows a server to provide its own web-based "
"documentation."
msgstr ""
"Клас :class:`DocXMLRPCServer` походить від :class:`SimpleXMLRPCServer` і "
"забезпечує засоби для створення самодокументованих автономних серверів XML-"
"RPC. Запити HTTP POST обробляються як виклики методів XML-RPC. Запити HTTP "
"GET обробляються шляхом створення документації HTML у стилі pydoc. Це "
"дозволяє серверу надавати власну веб-документацію."

#: ../../library/xmlrpc.server.rst:405 ../../library/xmlrpc.server.rst:433
msgid ""
"Set the title used in the generated HTML documentation. This title will be "
"used inside the HTML \"title\" element."
msgstr ""
"Встановіть заголовок, який використовується у створеній документації HTML. "
"Цей заголовок використовуватиметься всередині елемента HTML \"title\"."

#: ../../library/xmlrpc.server.rst:411 ../../library/xmlrpc.server.rst:439
msgid ""
"Set the name used in the generated HTML documentation. This name will appear"
" at the top of the generated documentation inside a \"h1\" element."
msgstr ""
"Встановіть назву, яка використовується у створеній документації HTML. Це "
"ім’я з’явиться у верхній частині створеної документації всередині елемента "
"\"h1\"."

#: ../../library/xmlrpc.server.rst:417 ../../library/xmlrpc.server.rst:445
msgid ""
"Set the description used in the generated HTML documentation. This "
"description will appear as a paragraph, below the server name, in the "
"documentation."
msgstr ""
"Встановіть опис, який використовується у створеній документації HTML. Цей "
"опис відображатиметься як абзац під назвою сервера в документації."

#: ../../library/xmlrpc.server.rst:422
msgid "DocCGIXMLRPCRequestHandler"
msgstr "DocCGIXMLRPCRequestHandler"

#: ../../library/xmlrpc.server.rst:424
msgid ""
"The :class:`DocCGIXMLRPCRequestHandler` class is derived from "
":class:`CGIXMLRPCRequestHandler` and provides a means of creating self-"
"documenting, XML-RPC CGI scripts. HTTP POST requests are handled as XML-RPC "
"method calls. HTTP GET requests are handled by generating pydoc-style HTML "
"documentation. This allows a server to provide its own web-based "
"documentation."
msgstr ""
"Клас :class:`DocCGIXMLRPCRequestHandler` походить від "
":class:`CGIXMLRPCRequestHandler` і надає засоби для створення "
"самодокументованих сценаріїв XML-RPC CGI. Запити HTTP POST обробляються як "
"виклики методів XML-RPC. Запити HTTP GET обробляються шляхом створення "
"документації HTML у стилі pydoc. Це дозволяє серверу надавати власну веб-"
"документацію."
