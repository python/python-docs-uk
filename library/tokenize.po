# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Dmytro Kazanzhy, 2022
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-11-19 01:00+0000\n"
"PO-Revision-Date: 2021-06-28 01:16+0000\n"
"Last-Translator: Dmytro Kazanzhy, 2022\n"
"Language-Team: Ukrainian (https://app.transifex.com/python-doc/teams/5390/uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != 11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % 100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || (n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

#: ../../library/tokenize.rst:2
msgid ":mod:`!tokenize` --- Tokenizer for Python source"
msgstr ""

#: ../../library/tokenize.rst:10
msgid "**Source code:** :source:`Lib/tokenize.py`"
msgstr "**Вихідний код:** :source:`Lib/tokenize.py`"

#: ../../library/tokenize.rst:14
msgid ""
"The :mod:`tokenize` module provides a lexical scanner for Python source "
"code, implemented in Python.  The scanner in this module returns comments as"
" tokens as well, making it useful for implementing \"pretty-printers\", "
"including colorizers for on-screen displays."
msgstr ""
"Модуль :mod:`tokenize` забезпечує лексичний сканер вихідного коду Python, "
"реалізований на Python. Сканер у цьому модулі також повертає коментарі як "
"токени, що робить його корисним для реалізації \"красивих принтерів\", "
"включаючи розфарбовувачі для екранних дисплеїв."

#: ../../library/tokenize.rst:19
msgid ""
"To simplify token stream handling, all :ref:`operator <operators>` and "
":ref:`delimiter <delimiters>` tokens and :data:`Ellipsis` are returned using"
" the generic :data:`~token.OP` token type.  The exact type can be determined"
" by checking the ``exact_type`` property on the :term:`named tuple` returned"
" from :func:`tokenize.tokenize`."
msgstr ""
"Щоб спростити обробку потоку маркерів, усі маркери :ref:`operator "
"<operators>` і :ref:`delimiter <delimiters>` і :data:`Ellipsis` повертаються"
" за допомогою загального типу токена :data:`~token.OP`. Точний тип можна "
"визначити, перевіривши властивість ``exact_type`` кортежу :term:`named "
"tuple`, який повертається з :func:`tokenize.tokenize`."

#: ../../library/tokenize.rst:28
msgid ""
"Note that the functions in this module are only designed to parse "
"syntactically valid Python code (code that does not raise when parsed using "
":func:`ast.parse`).  The behavior of the functions in this module is "
"**undefined** when providing invalid Python code and it can change at any "
"point."
msgstr ""

#: ../../library/tokenize.rst:35
msgid "Tokenizing Input"
msgstr "Токенізований вхід"

#: ../../library/tokenize.rst:37
msgid "The primary entry point is a :term:`generator`:"
msgstr "Основною точкою входу є :term:`generator`:"

#: ../../library/tokenize.rst:41
msgid ""
"The :func:`.tokenize` generator requires one argument, *readline*, which "
"must be a callable object which provides the same interface as the "
":meth:`io.IOBase.readline` method of file objects.  Each call to the "
"function should return one line of input as bytes."
msgstr ""
"Для генератора :func:`.tokenize` потрібен один аргумент, *readline*, який "
"має бути викликаним об’єктом, який забезпечує той самий інтерфейс, що й "
"метод :meth:`io.IOBase.readline` файлових об’єктів. Кожен виклик функції має"
" повертати один рядок введення у вигляді байтів."

#: ../../library/tokenize.rst:46
msgid ""
"The generator produces 5-tuples with these members: the token type; the "
"token string; a 2-tuple ``(srow, scol)`` of ints specifying the row and "
"column where the token begins in the source; a 2-tuple ``(erow, ecol)`` of "
"ints specifying the row and column where the token ends in the source; and "
"the line on which the token was found. The line passed (the last tuple item)"
" is the *physical* line.  The 5 tuple is returned as a :term:`named tuple` "
"with the field names: ``type string start end line``."
msgstr ""
"Генератор створює 5-кортежі з такими членами: тип маркера; рядок маркера; "
"2-кортеж ``(srow, scol)`` int, що визначає рядок і стовпець, де починається "
"маркер у джерелі; 2-кортеж ``(erow, ecol)`` int, що визначає рядок і "
"стовпець, де закінчується маркер у джерелі; і рядок, на якому було знайдено "
"маркер. Пропущений рядок (останній елемент кортежу) є *фізичним* рядком. "
"Кортеж 5 повертається як :term:`named tuple` з іменами полів: ``type string "
"start end line``."

#: ../../library/tokenize.rst:55
msgid ""
"The returned :term:`named tuple` has an additional property named "
"``exact_type`` that contains the exact operator type for :data:`~token.OP` "
"tokens.  For all other token types ``exact_type`` equals the named tuple "
"``type`` field."
msgstr ""
"Повернений кортеж :term:`named tuple` має додаткову властивість під назвою "
"``exact_type``, яка містить точний тип оператора для токенів "
":data:`~token.OP`. Для всіх інших типів токенів ``точний_тип`` дорівнює "
"іменованому полю ``тип`` кортежу."

#: ../../library/tokenize.rst:60
msgid "Added support for named tuples."
msgstr "Додано підтримку іменованих кортежів."

#: ../../library/tokenize.rst:63
msgid "Added support for ``exact_type``."
msgstr "Додано підтримку ``exact_type``."

#: ../../library/tokenize.rst:66
msgid ""
":func:`.tokenize` determines the source encoding of the file by looking for "
"a UTF-8 BOM or encoding cookie, according to :pep:`263`."
msgstr ""
":func:`.tokenize` визначає вихідне кодування файлу, шукаючи специфікацію "
"UTF-8 або кодування cookie, відповідно до :pep:`263`."

#: ../../library/tokenize.rst:71
msgid "Tokenize a source reading unicode strings instead of bytes."
msgstr "Токенізуйте джерело, яке читає рядки Unicode замість байтів."

#: ../../library/tokenize.rst:73
msgid ""
"Like :func:`.tokenize`, the *readline* argument is a callable returning a "
"single line of input. However, :func:`generate_tokens` expects *readline* to"
" return a str object rather than bytes."
msgstr ""
"Як і :func:`.tokenize`, аргумент *readline* є викликом, що повертає один "
"рядок введення. Однак :func:`generate_tokens` очікує, що *readline* "
"повертатиме об’єкт str, а не байти."

#: ../../library/tokenize.rst:77
msgid ""
"The result is an iterator yielding named tuples, exactly like "
":func:`.tokenize`. It does not yield an :data:`~token.ENCODING` token."
msgstr ""
"Результатом є ітератор, який видає іменовані кортежі, точно як "
":func:`.tokenize`. Він не дає маркер :data:`~token.ENCODING`."

#: ../../library/tokenize.rst:80
msgid ""
"All constants from the :mod:`token` module are also exported from "
":mod:`tokenize`."
msgstr ""
"Усі константи з модуля :mod:`token` також експортуються з :mod:`tokenize`."

#: ../../library/tokenize.rst:83
msgid ""
"Another function is provided to reverse the tokenization process. This is "
"useful for creating tools that tokenize a script, modify the token stream, "
"and write back the modified script."
msgstr ""
"Ще одна функція передбачена для зворотного процесу токенізації. Це корисно "
"для створення інструментів, які токенізують сценарій, змінюють потік "
"маркерів і записують назад змінений сценарій."

#: ../../library/tokenize.rst:90
msgid ""
"Converts tokens back into Python source code.  The *iterable* must return "
"sequences with at least two elements, the token type and the token string. "
"Any additional sequence elements are ignored."
msgstr ""
"Перетворює маркери назад у вихідний код Python. *iterable* має повертати "
"послідовності принаймні з двома елементами, типом маркера та рядком маркера."
" Будь-які додаткові елементи послідовності ігноруються."

#: ../../library/tokenize.rst:94
msgid ""
"The reconstructed script is returned as a single string.  The result is "
"guaranteed to tokenize back to match the input so that the conversion is "
"lossless and round-trips are assured.  The guarantee applies only to the "
"token type and token string as the spacing between tokens (column positions)"
" may change."
msgstr ""
"Реконструйований сценарій повертається як один рядок. Результат гарантовано "
"токенізуватиметься назад, щоб відповідати вхідним даним, так що перетворення"
" буде без втрат і зворотні передачі будуть забезпечені. Гарантія поширюється"
" лише на тип маркера та рядок маркера, оскільки відстань між маркерами "
"(позиції стовпців) може змінюватися."

#: ../../library/tokenize.rst:100
msgid ""
"It returns bytes, encoded using the :data:`~token.ENCODING` token, which is "
"the first token sequence output by :func:`.tokenize`. If there is no "
"encoding token in the input, it returns a str instead."
msgstr ""
"Він повертає байти, закодовані за допомогою маркера :data:`~token.ENCODING`,"
" який є першою послідовністю маркерів, виведеною :func:`.tokenize`. Якщо у "
"вхідних даних немає маркера кодування, натомість повертається str."

#: ../../library/tokenize.rst:105
msgid ""
":func:`.tokenize` needs to detect the encoding of source files it tokenizes."
" The function it uses to do this is available:"
msgstr ""
":func:`.tokenize` має визначити кодування вихідних файлів, які він "
"токенізує. Доступна функція, яку він використовує для цього:"

#: ../../library/tokenize.rst:110
msgid ""
"The :func:`detect_encoding` function is used to detect the encoding that "
"should be used to decode a Python source file. It requires one argument, "
"readline, in the same way as the :func:`.tokenize` generator."
msgstr ""
"Функція :func:`detect_encoding` використовується для визначення кодування, "
"яке слід використовувати для декодування вихідного файлу Python. Для нього "
"потрібен один аргумент, readline, так само, як і генератор "
":func:`.tokenize`."

#: ../../library/tokenize.rst:114
msgid ""
"It will call readline a maximum of twice, and return the encoding used (as a"
" string) and a list of any lines (not decoded from bytes) it has read in."
msgstr ""
"Він викличе readline щонайбільше двічі та поверне використане кодування (як "
"рядок) і список будь-яких рядків (не декодованих із байтів), які він "
"прочитав."

#: ../../library/tokenize.rst:118
msgid ""
"It detects the encoding from the presence of a UTF-8 BOM or an encoding "
"cookie as specified in :pep:`263`. If both a BOM and a cookie are present, "
"but disagree, a :exc:`SyntaxError` will be raised. Note that if the BOM is "
"found, ``'utf-8-sig'`` will be returned as an encoding."
msgstr ""
"Він визначає кодування за наявністю специфікації UTF-8 або файлу cookie "
"кодування, як зазначено в :pep:`263`. Якщо і специфікація, і файл cookie "
"присутні, але не узгоджуються, виникне :exc:`SyntaxError`. Зауважте, що якщо"
" специфікацію буде знайдено, як кодування буде повернуто ``'utf-8-sig``."

#: ../../library/tokenize.rst:123
msgid ""
"If no encoding is specified, then the default of ``'utf-8'`` will be "
"returned."
msgstr ""
"Якщо кодування не вказано, буде повернено значення за замовчуванням "
"``'utf-8``."

#: ../../library/tokenize.rst:126
msgid ""
"Use :func:`.open` to open Python source files: it uses "
":func:`detect_encoding` to detect the file encoding."
msgstr ""
"Використовуйте :func:`.open` для відкриття вихідних файлів Python: він "
"використовує :func:`detect_encoding` для визначення кодування файлу."

#: ../../library/tokenize.rst:132
msgid ""
"Open a file in read only mode using the encoding detected by "
":func:`detect_encoding`."
msgstr ""
"Відкрийте файл у режимі лише для читання, використовуючи кодування, "
"визначене :func:`detect_encoding`."

#: ../../library/tokenize.rst:139
msgid ""
"Raised when either a docstring or expression that may be split over several "
"lines is not completed anywhere in the file, for example::"
msgstr ""
"Викликається, коли рядок документа або вираз, які можуть бути розділені на "
"кілька рядків, не завершені ніде у файлі, наприклад::"

#: ../../library/tokenize.rst:142
msgid ""
"\"\"\"Beginning of\n"
"docstring"
msgstr ""

#: ../../library/tokenize.rst:145
msgid "or::"
msgstr "або::"

#: ../../library/tokenize.rst:147
msgid ""
"[1,\n"
" 2,\n"
" 3"
msgstr ""

#: ../../library/tokenize.rst:154
msgid "Command-Line Usage"
msgstr "Використання командного рядка"

#: ../../library/tokenize.rst:158
msgid ""
"The :mod:`tokenize` module can be executed as a script from the command "
"line. It is as simple as:"
msgstr ""
"Модуль :mod:`tokenize` можна запустити як скрипт із командного рядка. Це так"
" просто:"

#: ../../library/tokenize.rst:161
msgid "python -m tokenize [-e] [filename.py]"
msgstr ""

#: ../../library/tokenize.rst:165
msgid "The following options are accepted:"
msgstr "Приймаються такі варіанти:"

#: ../../library/tokenize.rst:171
msgid "show this help message and exit"
msgstr "показати це довідкове повідомлення та вийти"

#: ../../library/tokenize.rst:175
msgid "display token names using the exact type"
msgstr "відображати імена токенів, використовуючи точний тип"

#: ../../library/tokenize.rst:177
msgid ""
"If :file:`filename.py` is specified its contents are tokenized to stdout. "
"Otherwise, tokenization is performed on stdin."
msgstr ""
"Якщо вказано :file:`filename.py`, його вміст токенізується до stdout. В "
"іншому випадку токенізація виконується на stdin."

#: ../../library/tokenize.rst:181
msgid "Examples"
msgstr "Приклади"

#: ../../library/tokenize.rst:183
msgid ""
"Example of a script rewriter that transforms float literals into Decimal "
"objects::"
msgstr ""
"Приклад сценарію переписувача, який перетворює плаваючі літерали в десяткові"
" об’єкти::"

#: ../../library/tokenize.rst:186
msgid ""
"from tokenize import tokenize, untokenize, NUMBER, STRING, NAME, OP\n"
"from io import BytesIO\n"
"\n"
"def decistmt(s):\n"
"    \"\"\"Substitute Decimals for floats in a string of statements.\n"
"\n"
"    >>> from decimal import Decimal\n"
"    >>> s = 'print(+21.3e-5*-.1234/81.7)'\n"
"    >>> decistmt(s)\n"
"    \"print (+Decimal ('21.3e-5')*-Decimal ('.1234')/Decimal ('81.7'))\"\n"
"\n"
"    The format of the exponent is inherited from the platform C library.\n"
"    Known cases are \"e-007\" (Windows) and \"e-07\" (not Windows).  Since\n"
"    we're only showing 12 digits, and the 13th isn't close to 5, the\n"
"    rest of the output should be platform-independent.\n"
"\n"
"    >>> exec(s)  #doctest: +ELLIPSIS\n"
"    -3.21716034272e-0...7\n"
"\n"
"    Output from calculations with Decimal should be identical across all\n"
"    platforms.\n"
"\n"
"    >>> exec(decistmt(s))\n"
"    -3.217160342717258261933904529E-7\n"
"    \"\"\"\n"
"    result = []\n"
"    g = tokenize(BytesIO(s.encode('utf-8')).readline)  # tokenize the string\n"
"    for toknum, tokval, _, _, _ in g:\n"
"        if toknum == NUMBER and '.' in tokval:  # replace NUMBER tokens\n"
"            result.extend([\n"
"                (NAME, 'Decimal'),\n"
"                (OP, '('),\n"
"                (STRING, repr(tokval)),\n"
"                (OP, ')')\n"
"            ])\n"
"        else:\n"
"            result.append((toknum, tokval))\n"
"    return untokenize(result).decode('utf-8')"
msgstr ""

#: ../../library/tokenize.rst:225
msgid "Example of tokenizing from the command line.  The script::"
msgstr "Приклад токенізації з командного рядка. Сценарій::"

#: ../../library/tokenize.rst:227
msgid ""
"def say_hello():\n"
"    print(\"Hello, World!\")\n"
"\n"
"say_hello()"
msgstr ""

#: ../../library/tokenize.rst:232
msgid ""
"will be tokenized to the following output where the first column is the "
"range of the line/column coordinates where the token is found, the second "
"column is the name of the token, and the final column is the value of the "
"token (if any)"
msgstr ""
"буде токенизовано до наступного виводу, де перший стовпець — діапазон "
"координат рядка/стовпця, де знайдено маркер, другий стовпець — ім’я маркера,"
" а останній стовпець — значення маркера (якщо є)"

#: ../../library/tokenize.rst:236
msgid ""
"$ python -m tokenize hello.py\n"
"0,0-0,0:            ENCODING       'utf-8'\n"
"1,0-1,3:            NAME           'def'\n"
"1,4-1,13:           NAME           'say_hello'\n"
"1,13-1,14:          OP             '('\n"
"1,14-1,15:          OP             ')'\n"
"1,15-1,16:          OP             ':'\n"
"1,16-1,17:          NEWLINE        '\\n'\n"
"2,0-2,4:            INDENT         '    '\n"
"2,4-2,9:            NAME           'print'\n"
"2,9-2,10:           OP             '('\n"
"2,10-2,25:          STRING         '\"Hello, World!\"'\n"
"2,25-2,26:          OP             ')'\n"
"2,26-2,27:          NEWLINE        '\\n'\n"
"3,0-3,1:            NL             '\\n'\n"
"4,0-4,0:            DEDENT         ''\n"
"4,0-4,9:            NAME           'say_hello'\n"
"4,9-4,10:           OP             '('\n"
"4,10-4,11:          OP             ')'\n"
"4,11-4,12:          NEWLINE        '\\n'\n"
"5,0-5,0:            ENDMARKER      ''"
msgstr ""

#: ../../library/tokenize.rst:260
msgid ""
"The exact token type names can be displayed using the :option:`-e` option:"
msgstr ""
"Точні назви типів маркерів можна відобразити за допомогою параметра "
":option:`-e`:"

#: ../../library/tokenize.rst:262
msgid ""
"$ python -m tokenize -e hello.py\n"
"0,0-0,0:            ENCODING       'utf-8'\n"
"1,0-1,3:            NAME           'def'\n"
"1,4-1,13:           NAME           'say_hello'\n"
"1,13-1,14:          LPAR           '('\n"
"1,14-1,15:          RPAR           ')'\n"
"1,15-1,16:          COLON          ':'\n"
"1,16-1,17:          NEWLINE        '\\n'\n"
"2,0-2,4:            INDENT         '    '\n"
"2,4-2,9:            NAME           'print'\n"
"2,9-2,10:           LPAR           '('\n"
"2,10-2,25:          STRING         '\"Hello, World!\"'\n"
"2,25-2,26:          RPAR           ')'\n"
"2,26-2,27:          NEWLINE        '\\n'\n"
"3,0-3,1:            NL             '\\n'\n"
"4,0-4,0:            DEDENT         ''\n"
"4,0-4,9:            NAME           'say_hello'\n"
"4,9-4,10:           LPAR           '('\n"
"4,10-4,11:          RPAR           ')'\n"
"4,11-4,12:          NEWLINE        '\\n'\n"
"5,0-5,0:            ENDMARKER      ''"
msgstr ""

#: ../../library/tokenize.rst:286
msgid ""
"Example of tokenizing a file programmatically, reading unicode strings "
"instead of bytes with :func:`generate_tokens`::"
msgstr ""
"Приклад токенізації файлу програмним шляхом, зчитування рядків Unicode "
"замість байтів за допомогою :func:`generate_tokens`::"

#: ../../library/tokenize.rst:289
msgid ""
"import tokenize\n"
"\n"
"with tokenize.open('hello.py') as f:\n"
"    tokens = tokenize.generate_tokens(f.readline)\n"
"    for token in tokens:\n"
"        print(token)"
msgstr ""

#: ../../library/tokenize.rst:296
msgid "Or reading bytes directly with :func:`.tokenize`::"
msgstr "Або читання байтів безпосередньо за допомогою :func:`.tokenize`::"

#: ../../library/tokenize.rst:298
msgid ""
"import tokenize\n"
"\n"
"with open('hello.py', 'rb') as f:\n"
"    tokens = tokenize.tokenize(f.readline)\n"
"    for token in tokens:\n"
"        print(token)"
msgstr ""
