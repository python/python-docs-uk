# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Dmytro Kazanzhy, 2022
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-11-19 01:00+0000\n"
"PO-Revision-Date: 2021-06-28 01:18+0000\n"
"Last-Translator: Dmytro Kazanzhy, 2022\n"
"Language-Team: Ukrainian (https://app.transifex.com/python-doc/teams/5390/uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != 11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % 100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || (n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

#: ../../library/xml.dom.pulldom.rst:2
msgid ":mod:`!xml.dom.pulldom` --- Support for building partial DOM trees"
msgstr ""

#: ../../library/xml.dom.pulldom.rst:9
msgid "**Source code:** :source:`Lib/xml/dom/pulldom.py`"
msgstr "**Вихідний код:** :source:`Lib/xml/dom/pulldom.py`"

#: ../../library/xml.dom.pulldom.rst:13
msgid ""
"The :mod:`xml.dom.pulldom` module provides a \"pull parser\" which can also "
"be asked to produce DOM-accessible fragments of the document where "
"necessary. The basic concept involves pulling \"events\" from a stream of "
"incoming XML and processing them. In contrast to SAX which also employs an "
"event-driven processing model together with callbacks, the user of a pull "
"parser is responsible for explicitly pulling events from the stream, looping"
" over those events until either processing is finished or an error condition"
" occurs."
msgstr ""
"Модуль :mod:`xml.dom.pulldom` забезпечує \"аналізатор витягування\", який "
"також може бути запрошений створити доступні для DOM фрагменти документа, де"
" це необхідно. Основна концепція передбачає вилучення \"подій\" із потоку "
"вхідного XML та їх обробку. На відміну від SAX, який також використовує "
"керовану подіями модель обробки разом із зворотними викликами, користувач "
"аналізатора вилучення відповідає за явне отримання подій із потоку, циклюючи"
" ці події, доки обробка не завершиться або не виникне помилка."

#: ../../library/xml.dom.pulldom.rst:24
msgid ""
"The :mod:`xml.dom.pulldom` module is not secure against maliciously "
"constructed data.  If you need to parse untrusted or unauthenticated data "
"see :ref:`xml-vulnerabilities`."
msgstr ""
"Модуль :mod:`xml.dom.pulldom` не захищений від зловмисно створених даних. "
"Якщо вам потрібно проаналізувати ненадійні або неавтентифіковані дані, "
"перегляньте :ref:`xml-vulnerabilities`."

#: ../../library/xml.dom.pulldom.rst:30
msgid ""
"The SAX parser no longer processes general external entities by default to "
"increase security by default. To enable processing of external entities, "
"pass a custom parser instance in::"
msgstr ""
"Синтаксичний аналізатор SAX більше не обробляє загальні зовнішні сутності за"
" замовчуванням, щоб підвищити рівень безпеки за замовчуванням. Щоб увімкнути"
" обробку зовнішніх об’єктів, передайте настроюваний екземпляр аналізатора "
"в::"

#: ../../library/xml.dom.pulldom.rst:34
msgid ""
"from xml.dom.pulldom import parse\n"
"from xml.sax import make_parser\n"
"from xml.sax.handler import feature_external_ges\n"
"\n"
"parser = make_parser()\n"
"parser.setFeature(feature_external_ges, True)\n"
"parse(filename, parser=parser)"
msgstr ""

#: ../../library/xml.dom.pulldom.rst:43
msgid "Example::"
msgstr "Приклад::"

#: ../../library/xml.dom.pulldom.rst:45
msgid ""
"from xml.dom import pulldom\n"
"\n"
"doc = pulldom.parse('sales_items.xml')\n"
"for event, node in doc:\n"
"    if event == pulldom.START_ELEMENT and node.tagName == 'item':\n"
"        if int(node.getAttribute('price')) > 50:\n"
"            doc.expandNode(node)\n"
"            print(node.toxml())"
msgstr ""

#: ../../library/xml.dom.pulldom.rst:54
msgid "``event`` is a constant and can be one of:"
msgstr "``подія`` є константою і може бути одним із:"

#: ../../library/xml.dom.pulldom.rst:56
msgid ":data:`START_ELEMENT`"
msgstr ":data:`START_ELEMENT`"

#: ../../library/xml.dom.pulldom.rst:57
msgid ":data:`END_ELEMENT`"
msgstr ":data:`END_ELEMENT`"

#: ../../library/xml.dom.pulldom.rst:58
msgid ":data:`COMMENT`"
msgstr ":data:`COMMENT`"

#: ../../library/xml.dom.pulldom.rst:59
msgid ":data:`START_DOCUMENT`"
msgstr ":data:`START_DOCUMENT`"

#: ../../library/xml.dom.pulldom.rst:60
msgid ":data:`END_DOCUMENT`"
msgstr ":data:`END_DOCUMENT`"

#: ../../library/xml.dom.pulldom.rst:61
msgid ":data:`CHARACTERS`"
msgstr ":data:`CHARACTERS`"

#: ../../library/xml.dom.pulldom.rst:62
msgid ":data:`PROCESSING_INSTRUCTION`"
msgstr ":data:`INSTRUCTION_PROCESSING_INSTRUCTION`"

#: ../../library/xml.dom.pulldom.rst:63
msgid ":data:`IGNORABLE_WHITESPACE`"
msgstr ":data:`IGNORABLE_WHITESPACE`"

#: ../../library/xml.dom.pulldom.rst:65
msgid ""
"``node`` is an object of type :class:`xml.dom.minidom.Document`, "
":class:`xml.dom.minidom.Element` or :class:`xml.dom.minidom.Text`."
msgstr ""
"``вузол`` є об’єктом типу :class:`xml.dom.minidom.Document`, "
":class:`xml.dom.minidom.Element` або :class:`xml.dom.minidom.Text`."

#: ../../library/xml.dom.pulldom.rst:68
msgid ""
"Since the document is treated as a \"flat\" stream of events, the document "
"\"tree\" is implicitly traversed and the desired elements are found "
"regardless of their depth in the tree. In other words, one does not need to "
"consider hierarchical issues such as recursive searching of the document "
"nodes, although if the context of elements were important, one would either "
"need to maintain some context-related state (i.e. remembering where one is "
"in the document at any given point) or to make use of the "
":func:`DOMEventStream.expandNode` method and switch to DOM-related "
"processing."
msgstr ""
"Оскільки документ розглядається як \"плоский\" потік подій, \"дерево\" "
"документа обходиться неявно, і потрібні елементи знаходять незалежно від їх "
"глибини в дереві. Іншими словами, не потрібно розглядати ієрархічні "
"проблеми, такі як рекурсивний пошук вузлів документа, хоча, якби контекст "
"елементів був важливим, потрібно було б підтримувати певний контекстно-"
"пов’язаний стан (тобто запам’ятовувати, де ви знаходитесь у документі) у "
"будь-який момент) або використати метод :func:`DOMEventStream.expandNode` і "
"перейти до обробки, пов’язаної з DOM."

#: ../../library/xml.dom.pulldom.rst:80 ../../library/xml.dom.pulldom.rst:85
msgid "Subclass of :class:`xml.sax.handler.ContentHandler`."
msgstr "Підклас :class:`xml.sax.handler.ContentHandler`."

#: ../../library/xml.dom.pulldom.rst:90
msgid ""
"Return a :class:`DOMEventStream` from the given input. *stream_or_string* "
"may be either a file name, or a file-like object. *parser*, if given, must "
"be an :class:`~xml.sax.xmlreader.XMLReader` object. This function will "
"change the document handler of the parser and activate namespace support; "
"other parser configuration (like setting an entity resolver) must have been "
"done in advance."
msgstr ""
"Повертає :class:`DOMEventStream` із заданого введення. *stream_or_string* "
"може бути ім’ям файлу або файлоподібним об’єктом. *parser*, якщо задано, має"
" бути об’єктом :class:`~xml.sax.xmlreader.XMLReader`. Ця функція змінить "
"обробник документів аналізатора та активує підтримку простору імен; іншу "
"конфігурацію синтаксичного аналізатора (наприклад, налаштування розв’язувача"
" сутностей) потрібно було виконати заздалегідь."

#: ../../library/xml.dom.pulldom.rst:97
msgid ""
"If you have XML in a string, you can use the :func:`parseString` function "
"instead:"
msgstr ""
"Якщо у вас є XML у рядку, ви можете використовувати замість нього функцію "
":func:`parseString`:"

#: ../../library/xml.dom.pulldom.rst:101
msgid ""
"Return a :class:`DOMEventStream` that represents the (Unicode) *string*."
msgstr "Повертає :class:`DOMEventStream`, який представляє *рядок* (Unicode)."

#: ../../library/xml.dom.pulldom.rst:105
msgid "Default value for the *bufsize* parameter to :func:`parse`."
msgstr "Значення за замовчуванням для параметра *bufsize* — :func:`parse`."

#: ../../library/xml.dom.pulldom.rst:107
msgid ""
"The value of this variable can be changed before calling :func:`parse` and "
"the new value will take effect."
msgstr ""
"Значення цієї змінної можна змінити перед викликом :func:`parse`, і нове "
"значення набуде чинності."

#: ../../library/xml.dom.pulldom.rst:113
msgid "DOMEventStream Objects"
msgstr "Об’єкти DOMEventStream"

#: ../../library/xml.dom.pulldom.rst:117
msgid "Support for :meth:`~object.__getitem__` method has been removed."
msgstr ""

#: ../../library/xml.dom.pulldom.rst:122
msgid ""
"Return a tuple containing *event* and the current *node* as "
":class:`xml.dom.minidom.Document` if event equals :data:`START_DOCUMENT`, "
":class:`xml.dom.minidom.Element` if event equals :data:`START_ELEMENT` or "
":data:`END_ELEMENT` or :class:`xml.dom.minidom.Text` if event equals "
":data:`CHARACTERS`. The current node does not contain information about its "
"children, unless :func:`expandNode` is called."
msgstr ""
"Повертає кортеж, що містить *подію* та поточний *вузол* як "
":class:`xml.dom.minidom.Document`, якщо подія дорівнює "
":data:`START_DOCUMENT`, :class:`xml.dom.minidom.Element`, якщо подія "
"дорівнює :data:`START_ELEMENT` або :data:`END_ELEMENT` або "
":class:`xml.dom.minidom.Text`, якщо подія дорівнює :data:`CHARACTERS`. "
"Поточний вузол не містить інформації про своїх дочірніх вузлів, якщо не "
"викликати :func:`expandNode`."

#: ../../library/xml.dom.pulldom.rst:132
msgid "Expands all children of *node* into *node*. Example::"
msgstr "Розгортає всі дочірні елементи *node* у *node*. Приклад::"

#: ../../library/xml.dom.pulldom.rst:134
msgid ""
"from xml.dom import pulldom\n"
"\n"
"xml = '<html><title>Foo</title> <p>Some text <div>and more</div></p> </html>'\n"
"doc = pulldom.parseString(xml)\n"
"for event, node in doc:\n"
"    if event == pulldom.START_ELEMENT and node.tagName == 'p':\n"
"        # Following statement only prints '<p/>'\n"
"        print(node.toxml())\n"
"        doc.expandNode(node)\n"
"        # Following statement prints node with all its children '<p>Some text <div>and more</div></p>'\n"
"        print(node.toxml())"
msgstr ""
