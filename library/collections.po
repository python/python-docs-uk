# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Dmytro Kazanzhy, 2022
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-11-12 08:36+0000\n"
"PO-Revision-Date: 2021-06-28 00:56+0000\n"
"Last-Translator: Dmytro Kazanzhy, 2022\n"
"Language-Team: Ukrainian (https://app.transifex.com/python-doc/teams/5390/uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != 11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % 100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || (n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

#: ../../library/collections.rst:2
msgid ":mod:`!collections` --- Container datatypes"
msgstr ""

#: ../../library/collections.rst:10
msgid "**Source code:** :source:`Lib/collections/__init__.py`"
msgstr "**Вихідний код:** :source:`Lib/collections/__init__.py`"

#: ../../library/collections.rst:20
msgid ""
"This module implements specialized container datatypes providing "
"alternatives to Python's general purpose built-in containers, :class:`dict`,"
" :class:`list`, :class:`set`, and :class:`tuple`."
msgstr ""
"Цей модуль реалізує спеціалізовані типи даних контейнерів, що є "
"альтернативою вбудованим контейнерам загального призначення Python, "
":class:`dict`, :class:`list`, :class:`set` і :class:`tuple`."

#: ../../library/collections.rst:25
msgid ":func:`namedtuple`"
msgstr ":func:`namedtuple`"

#: ../../library/collections.rst:25
msgid "factory function for creating tuple subclasses with named fields"
msgstr "функція фабрики для створення підкласів кортежів з іменованими полями"

#: ../../library/collections.rst:26
msgid ":class:`deque`"
msgstr ":class:`deque`"

#: ../../library/collections.rst:26
msgid "list-like container with fast appends and pops on either end"
msgstr ""
"контейнер, схожий на список, із швидким додаванням і вискакуванням на обох "
"кінцях"

#: ../../library/collections.rst:27
msgid ":class:`ChainMap`"
msgstr ":class:`ChainMap`"

#: ../../library/collections.rst:27
msgid "dict-like class for creating a single view of multiple mappings"
msgstr ""
"dict-подібний клас для створення єдиного перегляду кількох відображень"

#: ../../library/collections.rst:28
msgid ":class:`Counter`"
msgstr ":class:`Counter`"

#: ../../library/collections.rst:28
msgid "dict subclass for counting :term:`hashable` objects"
msgstr ""

#: ../../library/collections.rst:29
msgid ":class:`OrderedDict`"
msgstr ":class:`OrderedDict`"

#: ../../library/collections.rst:29
msgid "dict subclass that remembers the order entries were added"
msgstr "підклас dict, який запам’ятовує додані записи порядку"

#: ../../library/collections.rst:30
msgid ":class:`defaultdict`"
msgstr ":class:`defaultdict`"

#: ../../library/collections.rst:30
msgid "dict subclass that calls a factory function to supply missing values"
msgstr ""
"підклас dict, який викликає фабричну функцію для надання відсутніх значень"

#: ../../library/collections.rst:31
msgid ":class:`UserDict`"
msgstr ":class:`UserDict`"

#: ../../library/collections.rst:31
msgid "wrapper around dictionary objects for easier dict subclassing"
msgstr ""
"обгортка навколо об’єктів словника для легшого створення підкласів dict"

#: ../../library/collections.rst:32
msgid ":class:`UserList`"
msgstr ":class:`UserList`"

#: ../../library/collections.rst:32
msgid "wrapper around list objects for easier list subclassing"
msgstr ""
"обгортка навколо об'єктів списку для легшого створення підкласів списку"

#: ../../library/collections.rst:33
msgid ":class:`UserString`"
msgstr ":class:`UserString`"

#: ../../library/collections.rst:33
msgid "wrapper around string objects for easier string subclassing"
msgstr ""
"обгортка навколо рядкових об'єктів для легшого створення підкласів рядків"

#: ../../library/collections.rst:38
msgid ":class:`ChainMap` objects"
msgstr ":class:`ChainMap` об'єкти"

#: ../../library/collections.rst:42
msgid ""
"A :class:`ChainMap` class is provided for quickly linking a number of "
"mappings so they can be treated as a single unit.  It is often much faster "
"than creating a new dictionary and running multiple :meth:`~dict.update` "
"calls."
msgstr ""
"Клас :class:`ChainMap` надається для швидкого зв’язування кількох "
"відображень, щоб їх можна було розглядати як єдине ціле. Часто це набагато "
"швидше, ніж створення нового словника та виконання кількох викликів "
":meth:`~dict.update`."

#: ../../library/collections.rst:46
msgid ""
"The class can be used to simulate nested scopes and is useful in templating."
msgstr ""
"Клас можна використовувати для імітації вкладених областей і корисний у "
"створенні шаблонів."

#: ../../library/collections.rst:50
msgid ""
"A :class:`ChainMap` groups multiple dicts or other mappings together to "
"create a single, updateable view.  If no *maps* are specified, a single "
"empty dictionary is provided so that a new chain always has at least one "
"mapping."
msgstr ""
":class:`ChainMap` групує кілька dicts або інших відображень разом, щоб "
"створити єдине оновлюване подання. Якщо *maps* не вказано, надається єдиний "
"порожній словник, щоб новий ланцюжок завжди мав принаймні одне відображення."

#: ../../library/collections.rst:54
msgid ""
"The underlying mappings are stored in a list.  That list is public and can "
"be accessed or updated using the *maps* attribute.  There is no other state."
msgstr ""
"Базові відображення зберігаються в списку. Цей список є загальнодоступним, і"
" до нього можна отримати доступ або оновити за допомогою атрибута *maps*. "
"Іншої держави немає."

#: ../../library/collections.rst:57
msgid ""
"Lookups search the underlying mappings successively until a key is found.  "
"In contrast, writes, updates, and deletions only operate on the first "
"mapping."
msgstr ""
"Пошуки послідовно шукають базові відображення, доки не буде знайдено ключ. "
"Навпаки, записи, оновлення та видалення діють лише на першому відображенні."

#: ../../library/collections.rst:60
msgid ""
"A :class:`ChainMap` incorporates the underlying mappings by reference.  So, "
"if one of the underlying mappings gets updated, those changes will be "
"reflected in :class:`ChainMap`."
msgstr ""
":class:`ChainMap` включає базові відображення за посиланням. Отже, якщо одне"
" з базових відображень буде оновлено, ці зміни буде відображено в "
":class:`ChainMap`."

#: ../../library/collections.rst:64
msgid ""
"All of the usual dictionary methods are supported.  In addition, there is a "
"*maps* attribute, a method for creating new subcontexts, and a property for "
"accessing all but the first mapping:"
msgstr ""
"Підтримуються всі звичайні словникові методи. Крім того, існує атрибут "
"*maps*, метод для створення нових підконтекстів і властивість для доступу до"
" всіх відображень, крім першого:"

#: ../../library/collections.rst:70
msgid ""
"A user updateable list of mappings.  The list is ordered from first-searched"
" to last-searched.  It is the only stored state and can be modified to "
"change which mappings are searched.  The list should always contain at least"
" one mapping."
msgstr ""
"Список відображень, який можна оновлювати користувачем. Список упорядковано "
"від першого до останнього. Це єдиний стан, який зберігається, і його можна "
"змінити, щоб змінити зіставлення, які шукаються. Список завжди повинен "
"містити принаймні одне зіставлення."

#: ../../library/collections.rst:77
msgid ""
"Returns a new :class:`ChainMap` containing a new map followed by all of the "
"maps in the current instance.  If ``m`` is specified, it becomes the new map"
" at the front of the list of mappings; if not specified, an empty dict is "
"used, so that a call to ``d.new_child()`` is equivalent to: ``ChainMap({}, "
"*d.maps)``. If any keyword arguments are specified, they update passed map "
"or new empty dict. This method is used for creating subcontexts that can be "
"updated without altering values in any of the parent mappings."
msgstr ""
"Повертає новий :class:`ChainMap`, який містить нову карту, за якою слідують "
"усі карти в поточному екземплярі. Якщо вказано ``m``, воно стає новою картою"
" на початку списку зіставлень; якщо не вказано, використовується порожній "
"dict, так що виклик ``d.new_child()`` еквівалентний: ``ChainMap({}, "
"*d.maps)``. Якщо вказано будь-які аргументи ключового слова, вони оновлюють "
"передану карту або новий порожній dict. Цей метод використовується для "
"створення підконтекстів, які можна оновлювати без зміни значень у будь-якому"
" з батьківських відображень."

#: ../../library/collections.rst:86
msgid "The optional ``m`` parameter was added."
msgstr "Додано необов’язковий параметр ``m``."

#: ../../library/collections.rst:89
msgid "Keyword arguments support was added."
msgstr "Додано підтримку аргументів ключових слів."

#: ../../library/collections.rst:94
msgid ""
"Property returning a new :class:`ChainMap` containing all of the maps in the"
" current instance except the first one.  This is useful for skipping the "
"first map in the search.  Use cases are similar to those for the "
":keyword:`nonlocal` keyword used in :term:`nested scopes <nested scope>`.  "
"The use cases also parallel those for the built-in :func:`super` function.  "
"A reference to ``d.parents`` is equivalent to: ``ChainMap(*d.maps[1:])``."
msgstr ""
"Властивість, що повертає новий :class:`ChainMap`, що містить усі карти в "
"поточному екземплярі, крім першої. Це корисно для пропуску першої карти в "
"пошуку. Випадки використання схожі на випадки використання ключового слова "
":keyword:`nonlocal`, що використовується у :term:`вкладених областях <nested"
" scope>`. Випадки використання також аналогічні використанню вбудованої "
"функції :func:`super`. Посилання на ``d.parents`` еквівалентне: "
"``ChainMap(*d.maps[1:])``."

#: ../../library/collections.rst:102
msgid ""
"Note, the iteration order of a :class:`ChainMap` is determined by scanning "
"the mappings last to first::"
msgstr ""

#: ../../library/collections.rst:105
msgid ""
">>> baseline = {'music': 'bach', 'art': 'rembrandt'}\n"
">>> adjustments = {'art': 'van gogh', 'opera': 'carmen'}\n"
">>> list(ChainMap(adjustments, baseline))\n"
"['music', 'art', 'opera']"
msgstr ""

#: ../../library/collections.rst:110
msgid ""
"This gives the same ordering as a series of :meth:`dict.update` calls "
"starting with the last mapping::"
msgstr ""
"Це дає такий самий порядок, як і серія викликів :meth:`dict.update`, "
"починаючи з останнього відображення::"

#: ../../library/collections.rst:113
msgid ""
">>> combined = baseline.copy()\n"
">>> combined.update(adjustments)\n"
">>> list(combined)\n"
"['music', 'art', 'opera']"
msgstr ""

#: ../../library/collections.rst:118
msgid "Added support for ``|`` and ``|=`` operators, specified in :pep:`584`."
msgstr "Додано підтримку операторів ``|`` і ``|=``, указаних у :pep:`584`."

#: ../../library/collections.rst:123
msgid ""
"The `MultiContext class "
"<https://github.com/enthought/codetools/blob/4.0.0/codetools/contexts/multi_context.py>`_"
" in the Enthought `CodeTools package "
"<https://github.com/enthought/codetools>`_ has options to support writing to"
" any mapping in the chain."
msgstr ""
"`MultiContext class "
"<https://github.com/enthought/codetools/blob/4.0.0/codetools/contexts/multi_context.py>`_"
" у пакеті Enthought `CodeTools <https://github.com/enthought/codetools>`_ "
"має опції для підтримки запису в будь-яке відображення в ланцюжку."

#: ../../library/collections.rst:129
msgid ""
"Django's `Context class "
"<https://github.com/django/django/blob/main/django/template/context.py>`_ "
"for templating is a read-only chain of mappings.  It also features pushing "
"and popping of contexts similar to the "
":meth:`~collections.ChainMap.new_child` method and the "
":attr:`~collections.ChainMap.parents` property."
msgstr ""
"`Клас контексту Django "
"<https://github.com/django/django/blob/main/django/template/context.py>`_ "
"для створення шаблонів — це ланцюжок відображень лише для читання. Він також"
" має функцію надсилання та витягування контекстів, подібних до методу "
":meth:`~collections.ChainMap.new_child` і властивості "
":attr:`~collections.ChainMap.parents`."

#: ../../library/collections.rst:136
msgid ""
"The `Nested Contexts recipe "
"<https://code.activestate.com/recipes/577434-nested-contexts-a-chain-of-"
"mapping-objects/>`_ has options to control whether writes and other "
"mutations apply only to the first mapping or to any mapping in the chain."
msgstr ""

#: ../../library/collections.rst:141
msgid ""
"A `greatly simplified read-only version of Chainmap "
"<https://code.activestate.com/recipes/305268/>`_."
msgstr ""
"`Значно спрощена версія Chainmap тільки для читання "
"<https://code.activestate.com/recipes/305268/>`_."

#: ../../library/collections.rst:146
msgid ":class:`ChainMap` Examples and Recipes"
msgstr ":class:`ChainMap` Приклади та рецепти"

#: ../../library/collections.rst:148
msgid "This section shows various approaches to working with chained maps."
msgstr ""
"У цьому розділі показано різні підходи до роботи з ланцюжковими картами."

#: ../../library/collections.rst:151
msgid "Example of simulating Python's internal lookup chain::"
msgstr "Приклад симуляції внутрішнього ланцюжка пошуку Python::"

#: ../../library/collections.rst:153
msgid ""
"import builtins\n"
"pylookup = ChainMap(locals(), globals(), vars(builtins))"
msgstr ""

#: ../../library/collections.rst:156
msgid ""
"Example of letting user specified command-line arguments take precedence "
"over environment variables which in turn take precedence over default "
"values::"
msgstr ""
"Приклад надання переваги заданим користувачем аргументам командного рядка "
"над змінними середовища, які, у свою чергу, мають пріоритет над значеннями "
"за замовчуванням::"

#: ../../library/collections.rst:159
msgid ""
"import os, argparse\n"
"\n"
"defaults = {'color': 'red', 'user': 'guest'}\n"
"\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument('-u', '--user')\n"
"parser.add_argument('-c', '--color')\n"
"namespace = parser.parse_args()\n"
"command_line_args = {k: v for k, v in vars(namespace).items() if v is not None}\n"
"\n"
"combined = ChainMap(command_line_args, os.environ, defaults)\n"
"print(combined['color'])\n"
"print(combined['user'])"
msgstr ""

#: ../../library/collections.rst:173
msgid ""
"Example patterns for using the :class:`ChainMap` class to simulate nested "
"contexts::"
msgstr ""
"Приклади шаблонів використання класу :class:`ChainMap` для імітації "
"вкладених контекстів::"

#: ../../library/collections.rst:176
msgid ""
"c = ChainMap()        # Create root context\n"
"d = c.new_child()     # Create nested child context\n"
"e = c.new_child()     # Child of c, independent from d\n"
"e.maps[0]             # Current context dictionary -- like Python's locals()\n"
"e.maps[-1]            # Root context -- like Python's globals()\n"
"e.parents             # Enclosing context chain -- like Python's nonlocals\n"
"\n"
"d['x'] = 1            # Set value in current context\n"
"d['x']                # Get first key in the chain of contexts\n"
"del d['x']            # Delete from current context\n"
"list(d)               # All nested values\n"
"k in d                # Check all nested values\n"
"len(d)                # Number of nested values\n"
"d.items()             # All nested items\n"
"dict(d)               # Flatten into a regular dictionary"
msgstr ""

#: ../../library/collections.rst:192
msgid ""
"The :class:`ChainMap` class only makes updates (writes and deletions) to the"
" first mapping in the chain while lookups will search the full chain.  "
"However, if deep writes and deletions are desired, it is easy to make a "
"subclass that updates keys found deeper in the chain::"
msgstr ""
"Клас :class:`ChainMap` лише оновлює (записує та видаляє) перше відображення "
"в ланцюжку, тоді як пошук шукатиме повний ланцюжок. Однак, якщо потрібні "
"глибокі записи та видалення, легко створити підклас, який оновлює ключі, "
"знайдені глибше в ланцюжку:"

#: ../../library/collections.rst:197
msgid ""
"class DeepChainMap(ChainMap):\n"
"    'Variant of ChainMap that allows direct updates to inner scopes'\n"
"\n"
"    def __setitem__(self, key, value):\n"
"        for mapping in self.maps:\n"
"            if key in mapping:\n"
"                mapping[key] = value\n"
"                return\n"
"        self.maps[0][key] = value\n"
"\n"
"    def __delitem__(self, key):\n"
"        for mapping in self.maps:\n"
"            if key in mapping:\n"
"                del mapping[key]\n"
"                return\n"
"        raise KeyError(key)\n"
"\n"
">>> d = DeepChainMap({'zebra': 'black'}, {'elephant': 'blue'}, {'lion': 'yellow'})\n"
">>> d['lion'] = 'orange'         # update an existing key two levels down\n"
">>> d['snake'] = 'red'           # new keys get added to the topmost dict\n"
">>> del d['elephant']            # remove an existing key one level down\n"
">>> d                            # display result\n"
"DeepChainMap({'zebra': 'black', 'snake': 'red'}, {}, {'lion': 'orange'})"
msgstr ""

#: ../../library/collections.rst:223
msgid ":class:`Counter` objects"
msgstr ":class:`Counter` об'єкти"

#: ../../library/collections.rst:225
msgid ""
"A counter tool is provided to support convenient and rapid tallies. For "
"example::"
msgstr ""
"Надається інструмент лічильника для зручного та швидкого підрахунку. "
"Наприклад::"

#: ../../library/collections.rst:228
msgid ""
">>> # Tally occurrences of words in a list\n"
">>> cnt = Counter()\n"
">>> for word in ['red', 'blue', 'red', 'green', 'blue', 'blue']:\n"
"...     cnt[word] += 1\n"
"...\n"
">>> cnt\n"
"Counter({'blue': 3, 'red': 2, 'green': 1})\n"
"\n"
">>> # Find the ten most common words in Hamlet\n"
">>> import re\n"
">>> words = re.findall(r'\\w+', open('hamlet.txt').read().lower())\n"
">>> Counter(words).most_common(10)\n"
"[('the', 1143), ('and', 966), ('to', 762), ('of', 669), ('i', 631),\n"
" ('you', 554),  ('a', 546), ('my', 514), ('hamlet', 471), ('in', 451)]"
msgstr ""

#: ../../library/collections.rst:245
msgid ""
"A :class:`Counter` is a :class:`dict` subclass for counting :term:`hashable`"
" objects. It is a collection where elements are stored as dictionary keys "
"and their counts are stored as dictionary values.  Counts are allowed to be "
"any integer value including zero or negative counts.  The :class:`Counter` "
"class is similar to bags or multisets in other languages."
msgstr ""

#: ../../library/collections.rst:251
msgid ""
"Elements are counted from an *iterable* or initialized from another "
"*mapping* (or counter):"
msgstr ""
"Елементи підраховуються з *iterable* або ініціалізуються з іншого *mapping* "
"(або лічильника):"

#: ../../library/collections.rst:259
msgid ""
"Counter objects have a dictionary interface except that they return a zero "
"count for missing items instead of raising a :exc:`KeyError`:"
msgstr ""
"Об’єкти лічильників мають інтерфейс словника, за винятком того, що вони "
"повертають нульову кількість для відсутніх елементів замість того, щоб "
"викликати :exc:`KeyError`:"

#: ../../library/collections.rst:266
msgid ""
"Setting a count to zero does not remove an element from a counter. Use "
"``del`` to remove it entirely:"
msgstr ""
"Встановлення лічильника на нуль не видаляє елемент із лічильника. "
"Використовуйте ``del``, щоб видалити його повністю:"

#: ../../library/collections.rst:274
msgid ""
"As a :class:`dict` subclass, :class:`Counter` inherited the capability to "
"remember insertion order.  Math operations on *Counter* objects also "
"preserve order.  Results are ordered according to when an element is first "
"encountered in the left operand and then by the order encountered in the "
"right operand."
msgstr ""
"Як підклас :class:`dict`, :class:`Counter` успадкував можливість "
"запам’ятовувати порядок вставки. Математичні операції над об’єктами "
"*Counter* також зберігають порядок. Результати впорядковуються відповідно до"
" того, коли елемент вперше зустрічається в лівому операнді, а потім у "
"порядку зустрічі в правому операнді."

#: ../../library/collections.rst:280
msgid ""
"Counter objects support additional methods beyond those available for all "
"dictionaries:"
msgstr ""
"Об’єкти лічильників підтримують додаткові методи, окрім тих, що доступні для"
" всіх словників:"

#: ../../library/collections.rst:285
msgid ""
"Return an iterator over elements repeating each as many times as its count."
"  Elements are returned in the order first encountered. If an element's "
"count is less than one, :meth:`elements` will ignore it."
msgstr ""
"Повертає ітератор над елементами, повторюючи кожен стільки разів, скільки "
"його кількість. Елементи повертаються в тому порядку, в якому вони "
"зустрічаються першими. Якщо кількість елемента менше одиниці, "
":meth:`elements` проігнорує його."

#: ../../library/collections.rst:295
msgid ""
"Return a list of the *n* most common elements and their counts from the most"
" common to the least.  If *n* is omitted or ``None``, :meth:`most_common` "
"returns *all* elements in the counter. Elements with equal counts are "
"ordered in the order first encountered:"
msgstr ""
"Повертає список з *n* найпоширеніших елементів і їх підрахунок від найбільш "
"поширених до найменших. Якщо *n* пропущено або ``None``, :meth:`most_common`"
" повертає *всі* елементи в лічильнику. Елементи з рівною кількістю "
"впорядковуються в порядку, коли вони зустрічаються першими:"

#: ../../library/collections.rst:305
msgid ""
"Elements are subtracted from an *iterable* or from another *mapping* (or "
"counter).  Like :meth:`dict.update` but subtracts counts instead of "
"replacing them.  Both inputs and outputs may be zero or negative."
msgstr ""
"Елементи віднімаються з *iterable* або з іншого *mapping* (або лічильника). "
"Подібно до :meth:`dict.update`, але кількість віднімає, а не замінює. І "
"входи, і виходи можуть бути нульовими або негативними."

#: ../../library/collections.rst:319
msgid "Compute the sum of the counts."
msgstr "Обчисліть суму підрахунків."

#: ../../library/collections.rst:327
msgid ""
"The usual dictionary methods are available for :class:`Counter` objects "
"except for two which work differently for counters."
msgstr ""
"Звичайні методи словника доступні для об’єктів :class:`Counter`, за винятком"
" двох, які працюють по-різному для лічильників."

#: ../../library/collections.rst:332
msgid "This class method is not implemented for :class:`Counter` objects."
msgstr "Цей метод класу не реалізований для об’єктів :class:`Counter`."

#: ../../library/collections.rst:336
msgid ""
"Elements are counted from an *iterable* or added-in from another *mapping* "
"(or counter).  Like :meth:`dict.update` but adds counts instead of replacing"
" them.  Also, the *iterable* is expected to be a sequence of elements, not a"
" sequence of ``(key, value)`` pairs."
msgstr ""
"Елементи підраховуються від *iterable* або add-in від іншого *mapping* (або "
"лічильника). Як :meth:`dict.update`, але додає лічильники замість їх заміни."
" Крім того, очікується, що *iterable* буде послідовністю елементів, а не "
"послідовністю пар ``(ключ, значення)``."

#: ../../library/collections.rst:341
msgid ""
"Counters support rich comparison operators for equality, subset, and "
"superset relationships: ``==``, ``!=``, ``<``, ``<=``, ``>``, ``>=``. All of"
" those tests treat missing elements as having zero counts so that "
"``Counter(a=1) == Counter(a=1, b=0)`` returns true."
msgstr ""
"Лічильники підтримують розширені оператори порівняння для зв’язків рівності,"
" підмножини та надмножини: ``==``, ``!=``, ``<``, ``<=``, ``>``, ``>=``. Усі"
" ці тести розглядають відсутні елементи як такі, що мають нульову кількість,"
" тому ``Counter(a=1) == Counter(a=1, b=0)`` повертає true."

#: ../../library/collections.rst:346
msgid "Rich comparison operations were added."
msgstr "Додано розширені операції порівняння."

#: ../../library/collections.rst:349
msgid ""
"In equality tests, missing elements are treated as having zero counts. "
"Formerly, ``Counter(a=3)`` and ``Counter(a=3, b=0)`` were considered "
"distinct."
msgstr ""
"У тестах на рівність відсутні елементи розглядаються як такі, що мають "
"нульову кількість. Раніше ``Counter(a=3)`` і ``Counter(a=3, b=0)`` вважалися"
" різними."

#: ../../library/collections.rst:354
msgid "Common patterns for working with :class:`Counter` objects::"
msgstr "Загальні шаблони для роботи з об'єктами :class:`Counter`::"

#: ../../library/collections.rst:356
msgid ""
"c.total()                       # total of all counts\n"
"c.clear()                       # reset all counts\n"
"list(c)                         # list unique elements\n"
"set(c)                          # convert to a set\n"
"dict(c)                         # convert to a regular dictionary\n"
"c.items()                       # access the (elem, cnt) pairs\n"
"Counter(dict(list_of_pairs))    # convert from a list of (elem, cnt) pairs\n"
"c.most_common()[:-n-1:-1]       # n least common elements\n"
"+c                              # remove zero and negative counts"
msgstr ""

#: ../../library/collections.rst:366
msgid ""
"Several mathematical operations are provided for combining :class:`Counter` "
"objects to produce multisets (counters that have counts greater than zero). "
"Addition and subtraction combine counters by adding or subtracting the "
"counts of corresponding elements.  Intersection and union return the minimum"
" and maximum of corresponding counts.  Equality and inclusion compare "
"corresponding counts.  Each operation can accept inputs with signed counts, "
"but the output will exclude results with counts of zero or less."
msgstr ""
"Передбачено кілька математичних операцій для об’єднання об’єктів "
":class:`Counter` для створення мультимножин (лічильників, які мають "
"кількість, більшу за нуль). Додавання та віднімання поєднують лічильники "
"шляхом додавання або віднімання підрахунків відповідних елементів. Перетин і"
" об’єднання повертають мінімальне та максимальне значення відповідних "
"підрахунків. Рівність і включення порівнюють відповідні підрахунки. Кожна "
"операція може приймати вхідні дані зі знаком підрахунків, але вихід "
"виключатиме результати з нульовими чи меншими значеннями."

#: ../../library/collections.rst:374
msgid ""
">>> c = Counter(a=3, b=1)\n"
">>> d = Counter(a=1, b=2)\n"
">>> c + d                       # add two counters together:  c[x] + d[x]\n"
"Counter({'a': 4, 'b': 3})\n"
">>> c - d                       # subtract (keeping only positive counts)\n"
"Counter({'a': 2})\n"
">>> c & d                       # intersection:  min(c[x], d[x])\n"
"Counter({'a': 1, 'b': 1})\n"
">>> c | d                       # union:  max(c[x], d[x])\n"
"Counter({'a': 3, 'b': 2})\n"
">>> c == d                      # equality:  c[x] == d[x]\n"
"False\n"
">>> c <= d                      # inclusion:  c[x] <= d[x]\n"
"False"
msgstr ""

#: ../../library/collections.rst:391
msgid ""
"Unary addition and subtraction are shortcuts for adding an empty counter or "
"subtracting from an empty counter."
msgstr ""
"Унарне додавання та віднімання — це ярлики для додавання порожнього "
"лічильника або віднімання з порожнього лічильника."

#: ../../library/collections.rst:400
msgid ""
"Added support for unary plus, unary minus, and in-place multiset operations."
msgstr ""
"Додано підтримку унарних операцій плюс, унарний мінус і мультимножинних "
"операцій на місці."

#: ../../library/collections.rst:405
msgid ""
"Counters were primarily designed to work with positive integers to represent"
" running counts; however, care was taken to not unnecessarily preclude use "
"cases needing other types or negative values.  To help with those use cases,"
" this section documents the minimum range and type restrictions."
msgstr ""
"Лічильники були в основному розроблені для роботи з позитивними цілими "
"числами для представлення поточних підрахунків; однак було вжито заходів для"
" того, щоб без потреби не виключити випадки використання, які потребують "
"інших типів або від’ємних значень. Щоб допомогти з цими випадками "
"використання, у цьому розділі описані мінімальні обмеження діапазону та "
"типу."

#: ../../library/collections.rst:410
msgid ""
"The :class:`Counter` class itself is a dictionary subclass with no "
"restrictions on its keys and values.  The values are intended to be numbers "
"representing counts, but you *could* store anything in the value field."
msgstr ""
"Сам клас :class:`Counter` є підкласом словника без обмежень щодо його ключів"
" і значень. Значення мають бути числами, що представляють кількість, але ви "
"*можете* зберігати будь-що в полі значення."

#: ../../library/collections.rst:414
msgid ""
"The :meth:`~Counter.most_common` method requires only that the values be "
"orderable."
msgstr ""
"Метод :meth:`~Counter.most_common` вимагає лише того, щоб значення можна "
"було впорядкувати."

#: ../../library/collections.rst:416
msgid ""
"For in-place operations such as ``c[key] += 1``, the value type need only "
"support addition and subtraction.  So fractions, floats, and decimals would "
"work and negative values are supported.  The same is also true for "
":meth:`~Counter.update` and :meth:`~Counter.subtract` which allow negative "
"and zero values for both inputs and outputs."
msgstr ""
"Для операцій на місці, таких як ``c[key] += 1``, тип значення потребує лише "
"підтримки додавання та віднімання. Отже, дроби, числа з плаваючою точкою та "
"десяткові дроби працюватимуть, а від’ємні значення підтримуються. Те ж саме "
"вірно для :meth:`~Counter.update` і :meth:`~Counter.subtract`, які "
"дозволяють від’ємні та нульові значення як для входів, так і для виходів."

#: ../../library/collections.rst:422
msgid ""
"The multiset methods are designed only for use cases with positive values. "
"The inputs may be negative or zero, but only outputs with positive values "
"are created.  There are no type restrictions, but the value type needs to "
"support addition, subtraction, and comparison."
msgstr ""
"Мультимножинні методи призначені лише для випадків використання з "
"позитивними значеннями. Вхідні дані можуть бути від’ємними або нульовими, "
"але створюються лише виходи з позитивними значеннями. Немає обмежень щодо "
"типів, але тип значення має підтримувати додавання, віднімання та "
"порівняння."

#: ../../library/collections.rst:427
msgid ""
"The :meth:`~Counter.elements` method requires integer counts.  It ignores "
"zero and negative counts."
msgstr ""
"Метод :meth:`~Counter.elements` вимагає підрахунку цілих чисел. Він ігнорує "
"нульові та негативні значення."

#: ../../library/collections.rst:432
msgid ""
"`Bag class <https://www.gnu.org/software/smalltalk/manual-"
"base/html_node/Bag.html>`_ in Smalltalk."
msgstr ""
"`Клас сумки <https://www.gnu.org/software/smalltalk/manual-"
"base/html_node/Bag.html>`_ у Smalltalk."

#: ../../library/collections.rst:435
msgid ""
"Wikipedia entry for `Multisets <https://en.wikipedia.org/wiki/Multiset>`_."
msgstr ""
"Запис у Вікіпедії для `Мультимножини "
"<https://en.wikipedia.org/wiki/Multiset>`_."

#: ../../library/collections.rst:437
msgid ""
"`C++ multisets <http://www.java2s.com/Tutorial/Cpp/0380__set-"
"multiset/Catalog0380__set-multiset.htm>`_ tutorial with examples."
msgstr ""
"`C++ multisets <http://www.java2s.com/Tutorial/Cpp/0380__set-"
"multiset/Catalog0380__set-multiset.htm>`_ посібник із прикладами."

#: ../../library/collections.rst:440
msgid ""
"For mathematical operations on multisets and their use cases, see *Knuth, "
"Donald. The Art of Computer Programming Volume II, Section 4.6.3, Exercise "
"19*."
msgstr ""
"Про математичні операції над мультимножинами та випадки їх використання див."
" *Knuth, Donald. Мистецтво комп’ютерного програмування, том II, розділ "
"4.6.3, вправа 19*."

#: ../../library/collections.rst:444
msgid ""
"To enumerate all distinct multisets of a given size over a given set of "
"elements, see :func:`itertools.combinations_with_replacement`::"
msgstr ""
"Щоб перерахувати всі різні мультимножини заданого розміру над заданим "
"набором елементів, перегляньте "
":func:`itertools.combinations_with_replacement`::"

#: ../../library/collections.rst:447
msgid ""
"map(Counter, combinations_with_replacement('ABC', 2)) # --> AA AB AC BB BC "
"CC"
msgstr ""

#: ../../library/collections.rst:451
msgid ":class:`deque` objects"
msgstr ":class:`deque` об'єкти"

#: ../../library/collections.rst:455
msgid ""
"Returns a new deque object initialized left-to-right (using :meth:`append`) "
"with data from *iterable*.  If *iterable* is not specified, the new deque is"
" empty."
msgstr ""
"Повертає новий об’єкт deque, ініціалізований зліва направо (за допомогою "
":meth:`append`) з даними з *iterable*. Якщо *iterable* не вказано, нова "
"двочерга порожня."

#: ../../library/collections.rst:458
msgid ""
"Deques are a generalization of stacks and queues (the name is pronounced "
"\"deck\" and is short for \"double-ended queue\").  Deques support thread-"
"safe, memory efficient appends and pops from either side of the deque with "
"approximately the same *O*\\ (1) performance in either direction."
msgstr ""

#: ../../library/collections.rst:463
msgid ""
"Though :class:`list` objects support similar operations, they are optimized "
"for fast fixed-length operations and incur *O*\\ (*n*) memory movement costs"
" for ``pop(0)`` and ``insert(0, v)`` operations which change both the size "
"and position of the underlying data representation."
msgstr ""

#: ../../library/collections.rst:469
msgid ""
"If *maxlen* is not specified or is ``None``, deques may grow to an arbitrary"
" length.  Otherwise, the deque is bounded to the specified maximum length.  "
"Once a bounded length deque is full, when new items are added, a "
"corresponding number of items are discarded from the opposite end.  Bounded "
"length deques provide functionality similar to the ``tail`` filter in Unix. "
"They are also useful for tracking transactions and other pools of data where"
" only the most recent activity is of interest."
msgstr ""
"Якщо *maxlen* не вказано або має значення ``None``, дві версії можуть "
"зростати до довільної довжини. В іншому випадку двочерга обмежена до "
"вказаної максимальної довжини. Коли двочерга обмеженої довжини заповнюється,"
" коли додаються нові елементи, відповідна кількість елементів відкидається з"
" протилежного кінця. Обмежена довжина двох рядків забезпечує "
"функціональність, подібну до фільтра ``tail`` в Unix. Вони також корисні для"
" відстеження транзакцій та інших наборів даних, де цікаві лише останні дії."

#: ../../library/collections.rst:478
msgid "Deque objects support the following methods:"
msgstr "Об’єкти Deque підтримують такі методи:"

#: ../../library/collections.rst:482
msgid "Add *x* to the right side of the deque."
msgstr "Додайте *x* до правої сторони дека."

#: ../../library/collections.rst:487
msgid "Add *x* to the left side of the deque."
msgstr "Додайте *x* до лівої сторони дека."

#: ../../library/collections.rst:492
msgid "Remove all elements from the deque leaving it with length 0."
msgstr ""
"Видаліть усі елементи з двоканального ряду, залишивши його довжиною 0."

#: ../../library/collections.rst:497
msgid "Create a shallow copy of the deque."
msgstr "Створіть поверхневу копію deque."

#: ../../library/collections.rst:504
msgid "Count the number of deque elements equal to *x*."
msgstr "Підрахуйте кількість елементів deque, що дорівнює *x*."

#: ../../library/collections.rst:511
msgid ""
"Extend the right side of the deque by appending elements from the iterable "
"argument."
msgstr ""
"Розширте праву частину двоканального ряду, додавши елементи з ітерованого "
"аргументу."

#: ../../library/collections.rst:517
msgid ""
"Extend the left side of the deque by appending elements from *iterable*. "
"Note, the series of left appends results in reversing the order of elements "
"in the iterable argument."
msgstr ""
"Розширте ліву сторону двостороннього коду, додавши елементи з *iterable*. "
"Зауважте, що серія лівих додань призводить до зміни порядку елементів у "
"повторюваному аргументі."

#: ../../library/collections.rst:524
msgid ""
"Return the position of *x* in the deque (at or after index *start* and "
"before index *stop*).  Returns the first match or raises :exc:`ValueError` "
"if not found."
msgstr ""
"Повертає позицію *x* у черзі (за індексом *start* і перед індексом *stop*). "
"Повертає перший збіг або викликає :exc:`ValueError`, якщо не знайдено."

#: ../../library/collections.rst:533
msgid "Insert *x* into the deque at position *i*."
msgstr "Вставте *x* у рядок у позицію *i*."

#: ../../library/collections.rst:535
msgid ""
"If the insertion would cause a bounded deque to grow beyond *maxlen*, an "
":exc:`IndexError` is raised."
msgstr ""
"Якщо вставка призведе до того, що обмежена двочерга виросте за межі "
"*maxlen*, виникає :exc:`IndexError`."

#: ../../library/collections.rst:543
msgid ""
"Remove and return an element from the right side of the deque. If no "
"elements are present, raises an :exc:`IndexError`."
msgstr ""
"Видаліть і поверніть елемент з правого боку двоканальної таблиці. Якщо немає"
" елементів, викликає :exc:`IndexError`."

#: ../../library/collections.rst:549
msgid ""
"Remove and return an element from the left side of the deque. If no elements"
" are present, raises an :exc:`IndexError`."
msgstr ""
"Видаліть і поверніть елемент з лівої сторони двосторонньої версії. Якщо "
"немає елементів, викликає :exc:`IndexError`."

#: ../../library/collections.rst:555
msgid ""
"Remove the first occurrence of *value*.  If not found, raises a "
":exc:`ValueError`."
msgstr ""
"Видаліть перше входження *значення*. Якщо не знайдено, викликає "
":exc:`ValueError`."

#: ../../library/collections.rst:561
msgid "Reverse the elements of the deque in-place and then return ``None``."
msgstr "Перевернути елементи дек-версії на місці, а потім повернути ``None``."

#: ../../library/collections.rst:568
msgid ""
"Rotate the deque *n* steps to the right.  If *n* is negative, rotate to the "
"left."
msgstr ""
"Поверніть двічі *n* кроків праворуч. Якщо *n* від’ємне, поверніть ліворуч."

#: ../../library/collections.rst:571
msgid ""
"When the deque is not empty, rotating one step to the right is equivalent to"
" ``d.appendleft(d.pop())``, and rotating one step to the left is equivalent "
"to ``d.append(d.popleft())``."
msgstr ""
"Якщо двочерга не порожня, поворот на один крок праворуч еквівалентний "
"d.appendleft(d.pop()) , а поворот на один крок ліворуч еквівалентний "
"d.append(d.popleft ())``."

#: ../../library/collections.rst:576
msgid "Deque objects also provide one read-only attribute:"
msgstr "Об’єкти Deque також надають один атрибут лише для читання:"

#: ../../library/collections.rst:580
msgid "Maximum size of a deque or ``None`` if unbounded."
msgstr ""
"Максимальний розмір двочергового рядка або ``None``, якщо необмежений."

#: ../../library/collections.rst:585
msgid ""
"In addition to the above, deques support iteration, pickling, ``len(d)``, "
"``reversed(d)``, ``copy.copy(d)``, ``copy.deepcopy(d)``, membership testing "
"with the :keyword:`in` operator, and subscript references such as ``d[0]`` "
"to access the first element.  Indexed access is *O*\\ (1) at both ends but "
"slows to *O*\\ (*n*) in the middle.  For fast random access, use lists "
"instead."
msgstr ""

#: ../../library/collections.rst:591
msgid ""
"Starting in version 3.5, deques support ``__add__()``, ``__mul__()``, and "
"``__imul__()``."
msgstr ""
"Починаючи з версії 3.5, deques підтримують ``__add__()``, ``__mul__()`` і "
"``__imul__()``."

#: ../../library/collections.rst:594
msgid "Example:"
msgstr "приклад:"

#: ../../library/collections.rst:596
msgid ""
">>> from collections import deque\n"
">>> d = deque('ghi')                 # make a new deque with three items\n"
">>> for elem in d:                   # iterate over the deque's elements\n"
"...     print(elem.upper())\n"
"G\n"
"H\n"
"I\n"
"\n"
">>> d.append('j')                    # add a new entry to the right side\n"
">>> d.appendleft('f')                # add a new entry to the left side\n"
">>> d                                # show the representation of the deque\n"
"deque(['f', 'g', 'h', 'i', 'j'])\n"
"\n"
">>> d.pop()                          # return and remove the rightmost item\n"
"'j'\n"
">>> d.popleft()                      # return and remove the leftmost item\n"
"'f'\n"
">>> list(d)                          # list the contents of the deque\n"
"['g', 'h', 'i']\n"
">>> d[0]                             # peek at leftmost item\n"
"'g'\n"
">>> d[-1]                            # peek at rightmost item\n"
"'i'\n"
"\n"
">>> list(reversed(d))                # list the contents of a deque in reverse\n"
"['i', 'h', 'g']\n"
">>> 'h' in d                         # search the deque\n"
"True\n"
">>> d.extend('jkl')                  # add multiple elements at once\n"
">>> d\n"
"deque(['g', 'h', 'i', 'j', 'k', 'l'])\n"
">>> d.rotate(1)                      # right rotation\n"
">>> d\n"
"deque(['l', 'g', 'h', 'i', 'j', 'k'])\n"
">>> d.rotate(-1)                     # left rotation\n"
">>> d\n"
"deque(['g', 'h', 'i', 'j', 'k', 'l'])\n"
"\n"
">>> deque(reversed(d))               # make a new deque in reverse order\n"
"deque(['l', 'k', 'j', 'i', 'h', 'g'])\n"
">>> d.clear()                        # empty the deque\n"
">>> d.pop()                          # cannot pop from an empty deque\n"
"Traceback (most recent call last):\n"
"    File \"<pyshell#6>\", line 1, in -toplevel-\n"
"        d.pop()\n"
"IndexError: pop from an empty deque\n"
"\n"
">>> d.extendleft('abc')              # extendleft() reverses the input order\n"
">>> d\n"
"deque(['c', 'b', 'a'])"
msgstr ""

#: ../../library/collections.rst:651
msgid ":class:`deque` Recipes"
msgstr ":class:`deque` Рецепти"

#: ../../library/collections.rst:653
msgid "This section shows various approaches to working with deques."
msgstr "У цьому розділі показано різні підходи до роботи з deque."

#: ../../library/collections.rst:655
msgid ""
"Bounded length deques provide functionality similar to the ``tail`` filter "
"in Unix::"
msgstr ""
"Обмежена довжина двостороннього ряду забезпечує функціональність, подібну до"
" фільтра ``tail`` в Unix::"

#: ../../library/collections.rst:658
msgid ""
"def tail(filename, n=10):\n"
"    'Return the last n lines of a file'\n"
"    with open(filename) as f:\n"
"        return deque(f, n)"
msgstr ""

#: ../../library/collections.rst:663
msgid ""
"Another approach to using deques is to maintain a sequence of recently added"
" elements by appending to the right and popping to the left::"
msgstr ""
"Інший підхід до використання двох блоків полягає в підтримці послідовності "
"нещодавно доданих елементів шляхом додавання праворуч і висування ліворуч:"

#: ../../library/collections.rst:666
msgid ""
"def moving_average(iterable, n=3):\n"
"    # moving_average([40, 30, 50, 46, 39, 44]) --> 40.0 42.0 45.0 43.0\n"
"    # https://en.wikipedia.org/wiki/Moving_average\n"
"    it = iter(iterable)\n"
"    d = deque(itertools.islice(it, n-1))\n"
"    d.appendleft(0)\n"
"    s = sum(d)\n"
"    for elem in it:\n"
"        s += elem - d.popleft()\n"
"        d.append(elem)\n"
"        yield s / n"
msgstr ""

#: ../../library/collections.rst:678
msgid ""
"A `round-robin scheduler <https://en.wikipedia.org/wiki/Round-"
"robin_scheduling>`_ can be implemented with input iterators stored in a "
":class:`deque`.  Values are yielded from the active iterator in position "
"zero.  If that iterator is exhausted, it can be removed with "
":meth:`~deque.popleft`; otherwise, it can be cycled back to the end with the"
" :meth:`~deque.rotate` method::"
msgstr ""
"`Циклічний планувальник <https://en.wikipedia.org/wiki/Round-"
"robin_scheduling>`_ може бути реалізований за допомогою ітераторів введення,"
" що зберігаються в :class:`deque`. Значення виводяться з активного ітератора"
" в нульовій позиції. Якщо цей ітератор вичерпано, його можна видалити за "
"допомогою :meth:`~deque.popleft`; інакше його можна повернути до кінця за "
"допомогою методу :meth:`~deque.rotate`::"

#: ../../library/collections.rst:685
msgid ""
"def roundrobin(*iterables):\n"
"    \"roundrobin('ABC', 'D', 'EF') --> A D E B F C\"\n"
"    iterators = deque(map(iter, iterables))\n"
"    while iterators:\n"
"        try:\n"
"            while True:\n"
"                yield next(iterators[0])\n"
"                iterators.rotate(-1)\n"
"        except StopIteration:\n"
"            # Remove an exhausted iterator.\n"
"            iterators.popleft()"
msgstr ""

#: ../../library/collections.rst:697
msgid ""
"The :meth:`~deque.rotate` method provides a way to implement :class:`deque` "
"slicing and deletion.  For example, a pure Python implementation of ``del "
"d[n]`` relies on the ``rotate()`` method to position elements to be popped::"
msgstr ""
"Метод :meth:`~deque.rotate` забезпечує спосіб реалізації :class:`deque` "
"нарізки та видалення. Наприклад, чиста реалізація ``del d[n]`` на Python "
"покладається на метод ``rotate()`` для позиціонування елементів, які "
"потрібно відкрити:"

#: ../../library/collections.rst:701
msgid ""
"def delete_nth(d, n):\n"
"    d.rotate(-n)\n"
"    d.popleft()\n"
"    d.rotate(n)"
msgstr ""

#: ../../library/collections.rst:706
msgid ""
"To implement :class:`deque` slicing, use a similar approach applying "
":meth:`~deque.rotate` to bring a target element to the left side of the "
"deque. Remove old entries with :meth:`~deque.popleft`, add new entries with "
":meth:`~deque.extend`, and then reverse the rotation. With minor variations "
"on that approach, it is easy to implement Forth style stack manipulations "
"such as ``dup``, ``drop``, ``swap``, ``over``, ``pick``, ``rot``, and "
"``roll``."
msgstr ""
"Щоб реалізувати нарізку :class:`deque`, скористайтеся подібним підходом, "
"застосовуючи :meth:`~deque.rotate`, щоб перемістити цільовий елемент у ліву "
"сторону від deque. Видаліть старі записи за допомогою "
":meth:`~deque.popleft`, додайте нові за допомогою :meth:`~deque.extend`, а "
"потім змініть чергування. З незначними варіаціями цього підходу легко "
"реалізувати маніпуляції стеком у стилі Forth, такі як ``dup``, ``drop``, "
"``swap``, ``over``, ``pick``, ``rot`` і ``roll``."

#: ../../library/collections.rst:716
msgid ":class:`defaultdict` objects"
msgstr ":class:`defaultdict` об’єкти"

#: ../../library/collections.rst:720
msgid ""
"Return a new dictionary-like object.  :class:`defaultdict` is a subclass of "
"the built-in :class:`dict` class.  It overrides one method and adds one "
"writable instance variable.  The remaining functionality is the same as for "
"the :class:`dict` class and is not documented here."
msgstr ""
"Повернути новий об’єкт, схожий на словник. :class:`defaultdict` є підкласом "
"вбудованого класу :class:`dict`. Він замінює один метод і додає одну змінну "
"екземпляра, доступну для запису. Інші функції такі ж, як і для класу "
":class:`dict`, і тут не описані."

#: ../../library/collections.rst:725
msgid ""
"The first argument provides the initial value for the "
":attr:`default_factory` attribute; it defaults to ``None``. All remaining "
"arguments are treated the same as if they were passed to the :class:`dict` "
"constructor, including keyword arguments."
msgstr ""
"Перший аргумент надає початкове значення для атрибута "
":attr:`default_factory`; за замовчуванням ``None``. Усі решта аргументів "
"обробляються так само, як якщо б вони були передані конструктору "
":class:`dict`, включаючи аргументи ключових слів."

#: ../../library/collections.rst:731
msgid ""
":class:`defaultdict` objects support the following method in addition to the"
" standard :class:`dict` operations:"
msgstr ""
"Об’єкти :class:`defaultdict` підтримують наступний метод на додаток до "
"стандартних операцій :class:`dict`:"

#: ../../library/collections.rst:736
msgid ""
"If the :attr:`default_factory` attribute is ``None``, this raises a "
":exc:`KeyError` exception with the *key* as argument."
msgstr ""
"Якщо атрибут :attr:`default_factory` має значення ``None``, це викликає "
"виключення :exc:`KeyError` з *key* як аргументом."

#: ../../library/collections.rst:739
msgid ""
"If :attr:`default_factory` is not ``None``, it is called without arguments "
"to provide a default value for the given *key*, this value is inserted in "
"the dictionary for the *key*, and returned."
msgstr ""
"Якщо :attr:`default_factory` не є ``None``, він викликається без аргументів,"
" щоб надати значення за замовчуванням для даного *ключа*, це значення "
"вставляється в словник для *ключа* та повертається."

#: ../../library/collections.rst:743
msgid ""
"If calling :attr:`default_factory` raises an exception this exception is "
"propagated unchanged."
msgstr ""
"Якщо виклик :attr:`default_factory` викликає виняток, цей виняток "
"поширюється без змін."

#: ../../library/collections.rst:746
msgid ""
"This method is called by the :meth:`~object.__getitem__` method of the "
":class:`dict` class when the requested key is not found; whatever it returns"
" or raises is then returned or raised by :meth:`~object.__getitem__`."
msgstr ""

#: ../../library/collections.rst:750
msgid ""
"Note that :meth:`__missing__` is *not* called for any operations besides "
":meth:`~object.__getitem__`. This means that :meth:`get` will, like normal "
"dictionaries, return ``None`` as a default rather than using "
":attr:`default_factory`."
msgstr ""

#: ../../library/collections.rst:756
msgid ":class:`defaultdict` objects support the following instance variable:"
msgstr "Об’єкти :class:`defaultdict` підтримують таку змінну екземпляра:"

#: ../../library/collections.rst:761
msgid ""
"This attribute is used by the :meth:`__missing__` method; it is initialized "
"from the first argument to the constructor, if present, or to ``None``, if "
"absent."
msgstr ""
"Цей атрибут використовується методом :meth:`__missing__`; він "
"ініціалізується від першого аргументу до конструктора, якщо він присутній, "
"або до ``None``, якщо його немає."

#: ../../library/collections.rst:765 ../../library/collections.rst:1191
msgid ""
"Added merge (``|``) and update (``|=``) operators, specified in :pep:`584`."
msgstr ""
"Додано оператори злиття (``|``) і оновлення (``|=``), указані в :pep:`584`."

#: ../../library/collections.rst:771
msgid ":class:`defaultdict` Examples"
msgstr ":class:`defaultdict` Приклади"

#: ../../library/collections.rst:773
msgid ""
"Using :class:`list` as the :attr:`~defaultdict.default_factory`, it is easy "
"to group a sequence of key-value pairs into a dictionary of lists:"
msgstr ""
"Використовуючи :class:`list` як :attr:`~defaultdict.default_factory`, можна "
"легко згрупувати послідовність пар ключ-значення в словник списків:"

#: ../../library/collections.rst:784
msgid ""
"When each key is encountered for the first time, it is not already in the "
"mapping; so an entry is automatically created using the "
":attr:`~defaultdict.default_factory` function which returns an empty "
":class:`list`.  The :meth:`list.append` operation then attaches the value to"
" the new list.  When keys are encountered again, the look-up proceeds "
"normally (returning the list for that key) and the :meth:`list.append` "
"operation adds another value to the list. This technique is simpler and "
"faster than an equivalent technique using :meth:`dict.setdefault`:"
msgstr ""
"Коли кожен ключ зустрічається вперше, його ще немає у відображенні; тому "
"запис створюється автоматично за допомогою функції "
":attr:`~defaultdict.default_factory`, яка повертає порожній :class:`list`. "
"Потім операція :meth:`list.append` додає значення до нового списку. Коли "
"ключі зустрічаються знову, пошук триває нормально (повертається список для "
"цього ключа), а операція :meth:`list.append` додає інше значення до списку. "
"Ця техніка простіша та швидша, ніж еквівалентна техніка з використанням "
":meth:`dict.setdefault`:"

#: ../../library/collections.rst:799
msgid ""
"Setting the :attr:`~defaultdict.default_factory` to :class:`int` makes the "
":class:`defaultdict` useful for counting (like a bag or multiset in other "
"languages):"
msgstr ""
"Встановлення :attr:`~defaultdict.default_factory` на :class:`int` робить "
":class:`defaultdict` корисним для підрахунку (як сумка або мультинабір в "
"інших мовах):"

#: ../../library/collections.rst:811
msgid ""
"When a letter is first encountered, it is missing from the mapping, so the "
":attr:`~defaultdict.default_factory` function calls :func:`int` to supply a "
"default count of zero.  The increment operation then builds up the count for"
" each letter."
msgstr ""
"Коли буква зустрічається вперше, вона відсутня у відображенні, тому функція "
":attr:`~defaultdict.default_factory` викликає :func:`int`, щоб надати "
"нульову кількість за умовчанням. Потім операція збільшення створює кількість"
" для кожної літери."

#: ../../library/collections.rst:815
msgid ""
"The function :func:`int` which always returns zero is just a special case of"
" constant functions.  A faster and more flexible way to create constant "
"functions is to use a lambda function which can supply any constant value "
"(not just zero):"
msgstr ""
"Функція :func:`int`, яка завжди повертає нуль, є лише окремим випадком "
"постійних функцій. Швидший і більш гнучкий спосіб створення постійних "
"функцій полягає у використанні лямбда-функції, яка може надати будь-яке "
"постійне значення (не лише нуль):"

#: ../../library/collections.rst:828
msgid ""
"Setting the :attr:`~defaultdict.default_factory` to :class:`set` makes the "
":class:`defaultdict` useful for building a dictionary of sets:"
msgstr ""
"Встановлення :attr:`~defaultdict.default_factory` на :class:`set` робить "
":class:`defaultdict` корисним для створення словника наборів:"

#: ../../library/collections.rst:841
msgid ":func:`namedtuple` Factory Function for Tuples with Named Fields"
msgstr ":func:`namedtuple` Фабрична функція для кортежів з іменованими полями"

#: ../../library/collections.rst:843
msgid ""
"Named tuples assign meaning to each position in a tuple and allow for more "
"readable, self-documenting code.  They can be used wherever regular tuples "
"are used, and they add the ability to access fields by name instead of "
"position index."
msgstr ""
"Іменовані кортежі призначають значення кожній позиції в кортежі та "
"забезпечують більш читабельний самодокументований код. Їх можна "
"використовувати скрізь, де використовуються звичайні кортежі, і вони додають"
" можливість доступу до полів за назвою замість індексу позиції."

#: ../../library/collections.rst:849
msgid ""
"Returns a new tuple subclass named *typename*.  The new subclass is used to "
"create tuple-like objects that have fields accessible by attribute lookup as"
" well as being indexable and iterable.  Instances of the subclass also have "
"a helpful docstring (with typename and field_names) and a helpful "
":meth:`__repr__` method which lists the tuple contents in a ``name=value`` "
"format."
msgstr ""
"Повертає новий підклас кортежу з назвою *typename*. Новий підклас "
"використовується для створення кортежних об’єктів, які мають поля, доступні "
"за допомогою пошуку атрибутів, а також які можна індексувати та повторювати."
" Екземпляри підкласу також мають корисний рядок документації (з назвою типу "
"та іменами полів) і корисний метод :meth:`__repr__`, який перераховує вміст "
"кортежу у форматі ``ім'я=значення``."

#: ../../library/collections.rst:855
msgid ""
"The *field_names* are a sequence of strings such as ``['x', 'y']``. "
"Alternatively, *field_names* can be a single string with each fieldname "
"separated by whitespace and/or commas, for example ``'x y'`` or ``'x, y'``."
msgstr ""
"*Імена_полів* — це послідовність рядків, наприклад ``['x', 'y']``. Крім "
"того, *назви_полів* можуть бути одним рядком із назвою кожного поля, "
"розділеного пробілами та/або комами, наприклад ``'x y'`` або ``'x, y'``."

#: ../../library/collections.rst:859
msgid ""
"Any valid Python identifier may be used for a fieldname except for names "
"starting with an underscore.  Valid identifiers consist of letters, digits, "
"and underscores but do not start with a digit or underscore and cannot be a "
":mod:`keyword` such as *class*, *for*, *return*, *global*, *pass*, or "
"*raise*."
msgstr ""
"Для імені поля можна використовувати будь-який дійсний ідентифікатор Python,"
" за винятком імен, що починаються з підкреслення. Дійсні ідентифікатори "
"складаються з літер, цифр і підкреслення, але не починаються з цифри або "
"підкреслення і не можуть бути :mod:`keyword`, таким як *клас*, *для*, "
"*повернення*, *глобальний*, *перехід* , або *підняти*."

#: ../../library/collections.rst:865
msgid ""
"If *rename* is true, invalid fieldnames are automatically replaced with "
"positional names.  For example, ``['abc', 'def', 'ghi', 'abc']`` is "
"converted to ``['abc', '_1', 'ghi', '_3']``, eliminating the keyword ``def``"
" and the duplicate fieldname ``abc``."
msgstr ""
"Якщо *rename* має значення true, недійсні назви полів автоматично "
"замінюються позиційними іменами. Наприклад, ``['abc', 'def', 'ghi', 'abc']``"
" перетворюється на ``['abc', '_1', 'ghi', '_3']``, усуваючи ключове слово "
"``def`` і повторюване ім’я поля ``abc``."

#: ../../library/collections.rst:870
msgid ""
"*defaults* can be ``None`` or an :term:`iterable` of default values. Since "
"fields with a default value must come after any fields without a default, "
"the *defaults* are applied to the rightmost parameters.  For example, if the"
" fieldnames are ``['x', 'y', 'z']`` and the defaults are ``(1, 2)``, then "
"``x`` will be a required argument, ``y`` will default to ``1``, and ``z`` "
"will default to ``2``."
msgstr ""
"*defaults* може бути ``None`` або :term:`iterable` значень за замовчуванням."
" Оскільки поля зі значенням за замовчуванням мають бути після будь-яких "
"полів без значення за замовчуванням, *за замовчуванням* застосовуються до "
"крайніх правих параметрів. Наприклад, якщо імена полів ``['x', 'y', 'z']``, "
"а значення за умовчанням ``(1, 2)``, тоді ``x`` буде обов'язковим "
"аргументом, ``y`` за замовчуванням буде ``1``, а ``z`` буде ``2``."

#: ../../library/collections.rst:877
msgid ""
"If *module* is defined, the :attr:`~type.__module__` attribute of the named "
"tuple is set to that value."
msgstr ""

#: ../../library/collections.rst:880
msgid ""
"Named tuple instances do not have per-instance dictionaries, so they are "
"lightweight and require no more memory than regular tuples."
msgstr ""
"Іменовані екземпляри кортежу не мають словників для кожного екземпляра, тому"
" вони легкі та не вимагають більше пам’яті, ніж звичайні кортежі."

#: ../../library/collections.rst:883
msgid ""
"To support pickling, the named tuple class should be assigned to a variable "
"that matches *typename*."
msgstr ""
"Щоб підтримувати маринування, іменований клас кортежу має бути призначений "
"змінній, яка відповідає *typename*."

#: ../../library/collections.rst:886
msgid "Added support for *rename*."
msgstr "Додано підтримку *перейменування*."

#: ../../library/collections.rst:889
msgid ""
"The *verbose* and *rename* parameters became :ref:`keyword-only arguments "
"<keyword-only_parameter>`."
msgstr ""
"Параметри *verbose* і *rename* стали :ref:`аргументами лише для ключових "
"слів <keyword-only_parameter>`."

#: ../../library/collections.rst:893
msgid "Added the *module* parameter."
msgstr "Додано параметр *module*."

#: ../../library/collections.rst:896
msgid "Removed the *verbose* parameter and the :attr:`_source` attribute."
msgstr "Видалено параметр *verbose* і атрибут :attr:`_source`."

#: ../../library/collections.rst:899
msgid ""
"Added the *defaults* parameter and the :attr:`_field_defaults` attribute."
msgstr "Додано параметр *defaults* і атрибут :attr:`_field_defaults`."

#: ../../library/collections.rst:903
msgid ""
">>> # Basic example\n"
">>> Point = namedtuple('Point', ['x', 'y'])\n"
">>> p = Point(11, y=22)     # instantiate with positional or keyword arguments\n"
">>> p[0] + p[1]             # indexable like the plain tuple (11, 22)\n"
"33\n"
">>> x, y = p                # unpack like a regular tuple\n"
">>> x, y\n"
"(11, 22)\n"
">>> p.x + p.y               # fields also accessible by name\n"
"33\n"
">>> p                       # readable __repr__ with a name=value style\n"
"Point(x=11, y=22)"
msgstr ""

#: ../../library/collections.rst:919
msgid ""
"Named tuples are especially useful for assigning field names to result "
"tuples returned by the :mod:`csv` or :mod:`sqlite3` modules::"
msgstr ""
"Іменовані кортежі особливо корисні для призначення імен полів кортежам "
"результатів, які повертаються модулями :mod:`csv` або :mod:`sqlite3`::"

#: ../../library/collections.rst:922
msgid ""
"EmployeeRecord = namedtuple('EmployeeRecord', 'name, age, title, department, paygrade')\n"
"\n"
"import csv\n"
"for emp in map(EmployeeRecord._make, csv.reader(open(\"employees.csv\", \"rb\"))):\n"
"    print(emp.name, emp.title)\n"
"\n"
"import sqlite3\n"
"conn = sqlite3.connect('/companydata')\n"
"cursor = conn.cursor()\n"
"cursor.execute('SELECT name, age, title, department, paygrade FROM employees')\n"
"for emp in map(EmployeeRecord._make, cursor.fetchall()):\n"
"    print(emp.name, emp.title)"
msgstr ""

#: ../../library/collections.rst:935
msgid ""
"In addition to the methods inherited from tuples, named tuples support three"
" additional methods and two attributes.  To prevent conflicts with field "
"names, the method and attribute names start with an underscore."
msgstr ""
"На додаток до методів, успадкованих від кортежів, іменовані кортежі "
"підтримують три додаткові методи та два атрибути. Щоб запобігти конфліктам "
"імен полів, імена методів і атрибутів починаються зі знака підкреслення."

#: ../../library/collections.rst:941
msgid ""
"Class method that makes a new instance from an existing sequence or "
"iterable."
msgstr ""
"Метод класу, який створює новий екземпляр із існуючої послідовності або "
"повторюється."

#: ../../library/collections.rst:943
msgid ""
">>> t = [11, 22]\n"
">>> Point._make(t)\n"
"Point(x=11, y=22)"
msgstr ""

#: ../../library/collections.rst:951
msgid ""
"Return a new :class:`dict` which maps field names to their corresponding "
"values:"
msgstr ""
"Повертає новий :class:`dict`, який зіставляє назви полів з відповідними "
"значеннями:"

#: ../../library/collections.rst:954
msgid ""
">>> p = Point(x=11, y=22)\n"
">>> p._asdict()\n"
"{'x': 11, 'y': 22}"
msgstr ""

#: ../../library/collections.rst:960
msgid "Returns an :class:`OrderedDict` instead of a regular :class:`dict`."
msgstr "Повертає :class:`OrderedDict` замість звичайного :class:`dict`."

#: ../../library/collections.rst:963
msgid ""
"Returns a regular :class:`dict` instead of an :class:`OrderedDict`. As of "
"Python 3.7, regular dicts are guaranteed to be ordered.  If the extra "
"features of :class:`OrderedDict` are required, the suggested remediation is "
"to cast the result to the desired type: ``OrderedDict(nt._asdict())``."
msgstr ""
"Повертає звичайний :class:`dict` замість :class:`OrderedDict`. Починаючи з "
"Python 3.7, звичайні dicts гарантовано будуть упорядковані. Якщо потрібні "
"додаткові функції :class:`OrderedDict`, запропонованим виправленням є "
"приведення результату до потрібного типу: ``OrderedDict(nt._asdict())``."

#: ../../library/collections.rst:972
msgid ""
"Return a new instance of the named tuple replacing specified fields with new"
" values::"
msgstr ""
"Повертає новий екземпляр іменованого кортежу, замінюючи вказані поля новими "
"значеннями::"

#: ../../library/collections.rst:975
msgid ""
">>> p = Point(x=11, y=22)\n"
">>> p._replace(x=33)\n"
"Point(x=33, y=22)\n"
"\n"
">>> for partnum, record in inventory.items():\n"
"...     inventory[partnum] = record._replace(price=newprices[partnum], timestamp=time.now())"
msgstr ""

#: ../../library/collections.rst:982
msgid ""
"Named tuples are also supported by generic function :func:`copy.replace`."
msgstr ""

#: ../../library/collections.rst:984
msgid ""
"Raise :exc:`TypeError` instead of :exc:`ValueError` for invalid keyword "
"arguments."
msgstr ""

#: ../../library/collections.rst:990
msgid ""
"Tuple of strings listing the field names.  Useful for introspection and for "
"creating new named tuple types from existing named tuples."
msgstr ""
"Кортеж рядків із переліком імен полів. Корисно для самоаналізу та для "
"створення нових іменованих типів кортежів із існуючих іменованих кортежів."

#: ../../library/collections.rst:993
msgid ""
">>> p._fields            # view the field names\n"
"('x', 'y')\n"
"\n"
">>> Color = namedtuple('Color', 'red green blue')\n"
">>> Pixel = namedtuple('Pixel', Point._fields + Color._fields)\n"
">>> Pixel(11, 22, 128, 255, 0)\n"
"Pixel(x=11, y=22, red=128, green=255, blue=0)"
msgstr ""

#: ../../library/collections.rst:1005
msgid "Dictionary mapping field names to default values."
msgstr "Словник зіставляє назви полів зі значеннями за замовчуванням."

#: ../../library/collections.rst:1007
msgid ""
">>> Account = namedtuple('Account', ['type', 'balance'], defaults=[0])\n"
">>> Account._field_defaults\n"
"{'balance': 0}\n"
">>> Account('premium')\n"
"Account(type='premium', balance=0)"
msgstr ""

#: ../../library/collections.rst:1015
msgid ""
"To retrieve a field whose name is stored in a string, use the "
":func:`getattr` function:"
msgstr ""
"Щоб отримати поле, ім’я якого зберігається в рядку, використовуйте функцію "
":func:`getattr`:"

#: ../../library/collections.rst:1021
msgid ""
"To convert a dictionary to a named tuple, use the double-star-operator (as "
"described in :ref:`tut-unpacking-arguments`):"
msgstr ""
"Щоб перетворити словник на іменований кортеж, використовуйте оператор "
"подвійної зірочки (як описано в :ref:`tut-unpacking-arguments`):"

#: ../../library/collections.rst:1028
msgid ""
"Since a named tuple is a regular Python class, it is easy to add or change "
"functionality with a subclass.  Here is how to add a calculated field and a "
"fixed-width print format:"
msgstr ""
"Оскільки іменований кортеж є звичайним класом Python, його легко додати або "
"змінити функціональність за допомогою підкласу. Ось як додати обчислюване "
"поле та формат друку з фіксованою шириною:"

#: ../../library/collections.rst:1032
msgid ""
">>> class Point(namedtuple('Point', ['x', 'y'])):\n"
"...     __slots__ = ()\n"
"...     @property\n"
"...     def hypot(self):\n"
"...         return (self.x ** 2 + self.y ** 2) ** 0.5\n"
"...     def __str__(self):\n"
"...         return 'Point: x=%6.3f  y=%6.3f  hypot=%6.3f' % (self.x, self.y, self.hypot)\n"
"\n"
">>> for p in Point(3, 4), Point(14, 5/7):\n"
"...     print(p)\n"
"Point: x= 3.000  y= 4.000  hypot= 5.000\n"
"Point: x=14.000  y= 0.714  hypot=14.018"
msgstr ""

#: ../../library/collections.rst:1047
msgid ""
"The subclass shown above sets ``__slots__`` to an empty tuple.  This helps "
"keep memory requirements low by preventing the creation of instance "
"dictionaries."
msgstr ""
"Показаний вище підклас встановлює ``__slots__`` на порожній кортеж. Це "
"допомагає підтримувати низькі вимоги до пам’яті, запобігаючи створенню "
"словників примірників."

#: ../../library/collections.rst:1050
msgid ""
"Subclassing is not useful for adding new, stored fields.  Instead, simply "
"create a new named tuple type from the :attr:`~somenamedtuple._fields` "
"attribute:"
msgstr ""
"Підкласи не корисні для додавання нових збережених полів. Замість цього "
"просто створіть новий іменований тип кортежу з атрибута "
":attr:`~somenamedtuple._fields`:"

#: ../../library/collections.rst:1055
msgid ""
"Docstrings can be customized by making direct assignments to the ``__doc__``"
" fields:"
msgstr ""
"Рядки документів можна налаштувати шляхом прямого призначення полів "
"``__doc__``:"

#: ../../library/collections.rst:1064
msgid "Property docstrings became writeable."
msgstr "Документаційні рядки властивостей стали доступними для запису."

#: ../../library/collections.rst:1069
msgid ""
"See :class:`typing.NamedTuple` for a way to add type hints for named tuples."
"  It also provides an elegant notation using the :keyword:`class` keyword::"
msgstr ""
"Дивіться :class:`typing.NamedTuple`, щоб дізнатися, як додати підказки типу "
"для іменованих кортежів. Він також забезпечує елегантну нотацію за допомогою"
" ключового слова :keyword:`class`::"

#: ../../library/collections.rst:1073
msgid ""
"class Component(NamedTuple):\n"
"    part_number: int\n"
"    weight: float\n"
"    description: Optional[str] = None"
msgstr ""

#: ../../library/collections.rst:1078
msgid ""
"See :meth:`types.SimpleNamespace` for a mutable namespace based on an "
"underlying dictionary instead of a tuple."
msgstr ""
"Перегляньте :meth:`types.SimpleNamespace` для змінного простору імен, "
"заснованого на базовому словнику замість кортежу."

#: ../../library/collections.rst:1081
msgid ""
"The :mod:`dataclasses` module provides a decorator and functions for "
"automatically adding generated special methods to user-defined classes."
msgstr ""
"Модуль :mod:`dataclasses` надає декоратор і функції для автоматичного "
"додавання згенерованих спеціальних методів до визначених користувачем "
"класів."

#: ../../library/collections.rst:1086
msgid ":class:`OrderedDict` objects"
msgstr ":class:`OrderedDict` об’єкти"

#: ../../library/collections.rst:1088
msgid ""
"Ordered dictionaries are just like regular dictionaries but have some extra "
"capabilities relating to ordering operations.  They have become less "
"important now that the built-in :class:`dict` class gained the ability to "
"remember insertion order (this new behavior became guaranteed in Python "
"3.7)."
msgstr ""
"Упорядковані словники схожі на звичайні словники, але мають деякі додаткові "
"можливості, пов’язані з операціями впорядкування. Тепер вони стали менш "
"важливими, оскільки вбудований клас :class:`dict` отримав можливість "
"запам’ятовувати порядок вставки (ця нова поведінка стала гарантованою в "
"Python 3.7)."

#: ../../library/collections.rst:1094
msgid "Some differences from :class:`dict` still remain:"
msgstr "Деякі відмінності від :class:`dict` все ще залишаються:"

#: ../../library/collections.rst:1096
msgid ""
"The regular :class:`dict` was designed to be very good at mapping "
"operations.  Tracking insertion order was secondary."
msgstr ""
"Звичайний :class:`dict` був розроблений, щоб дуже добре виконувати операції "
"відображення. Відстеження порядку вставки було другорядним."

#: ../../library/collections.rst:1099
msgid ""
"The :class:`OrderedDict` was designed to be good at reordering operations. "
"Space efficiency, iteration speed, and the performance of update operations "
"were secondary."
msgstr ""
":class:`OrderedDict` був розроблений, щоб добре справлятися з операціями "
"зміни порядку. Ефективність простору, швидкість ітерації та продуктивність "
"операцій оновлення були другорядними."

#: ../../library/collections.rst:1103
msgid ""
"The :class:`OrderedDict` algorithm can handle frequent reordering operations"
" better than :class:`dict`.  As shown in the recipes below, this makes it "
"suitable for implementing various kinds of LRU caches."
msgstr ""
"Алгоритм :class:`OrderedDict` може виконувати часті операції зміни порядку "
"краще, ніж :class:`dict`. Як показано в наведених нижче рецептах, це робить "
"його придатним для реалізації різних видів кешів LRU."

#: ../../library/collections.rst:1107
msgid ""
"The equality operation for :class:`OrderedDict` checks for matching order."
msgstr ""
"Операція рівності для :class:`OrderedDict` перевіряє відповідність порядку."

#: ../../library/collections.rst:1109
msgid ""
"A regular :class:`dict` can emulate the order sensitive equality test with "
"``p == q and all(k1 == k2 for k1, k2 in zip(p, q))``."
msgstr ""
"Звичайний :class:`dict` може емулювати чутливий до порядку тест рівності з "
"``p == q і all(k1 == k2 для k1, k2 в zip(p, q))``."

#: ../../library/collections.rst:1112
msgid ""
"The :meth:`popitem` method of :class:`OrderedDict` has a different "
"signature.  It accepts an optional argument to specify which item is popped."
msgstr ""
"Метод :meth:`popitem` :class:`OrderedDict` має інший підпис. Він приймає "
"необов'язковий аргумент, щоб вказати, який елемент витягується."

#: ../../library/collections.rst:1115
msgid ""
"A regular :class:`dict` can emulate OrderedDict's ``od.popitem(last=True)`` "
"with ``d.popitem()`` which is guaranteed to pop the rightmost (last) item."
msgstr ""
"Звичайний :class:`dict` може емулювати OrderedDict ``od.popitem(last=True)``"
" за допомогою ``d.popitem()``, який гарантовано відкриває крайній правий "
"(останній) елемент."

#: ../../library/collections.rst:1118
msgid ""
"A regular :class:`dict` can emulate OrderedDict's ``od.popitem(last=False)``"
" with ``(k := next(iter(d)), d.pop(k))`` which will return and remove the "
"leftmost (first) item if it exists."
msgstr ""
"Звичайний :class:`dict` може емулювати OrderedDict "
"``od.popitem(last=False)`` з ``(k := next(iter(d)), d.pop(k))``, який "
"повертатиме і видаліть крайній лівий (перший) елемент, якщо він існує."

#: ../../library/collections.rst:1122
msgid ""
":class:`OrderedDict` has a :meth:`move_to_end` method to efficiently "
"reposition an element to an endpoint."
msgstr ""
":class:`OrderedDict` має метод :meth:`move_to_end` для ефективного "
"переміщення елемента в кінцеву точку."

#: ../../library/collections.rst:1125
msgid ""
"A regular :class:`dict` can emulate OrderedDict's ``od.move_to_end(k, "
"last=True)`` with ``d[k] = d.pop(k)`` which will move the key and its "
"associated value to the rightmost (last) position."
msgstr ""
"Звичайний :class:`dict` може емулювати OrderedDict ``od.move_to_end(k, "
"last=True)`` з ``d[k] = d.pop(k)``, який переміщуватиме ключ і його "
"пов’язане значення до крайньої правої (останньої) позиції."

#: ../../library/collections.rst:1129
msgid ""
"A regular :class:`dict` does not have an efficient equivalent for "
"OrderedDict's ``od.move_to_end(k, last=False)`` which moves the key and its "
"associated value to the leftmost (first) position."
msgstr ""
"Звичайний :class:`dict` не має ефективного еквівалента для OrderedDict "
"``od.move_to_end(k, last=False)``, який переміщує ключ і пов’язане з ним "
"значення в крайню ліву (першу) позицію."

#: ../../library/collections.rst:1133
msgid "Until Python 3.8, :class:`dict` lacked a :meth:`__reversed__` method."
msgstr "До Python 3.8 :class:`dict` не мав методу :meth:`__reversed__`."

#: ../../library/collections.rst:1138
msgid ""
"Return an instance of a :class:`dict` subclass that has methods specialized "
"for rearranging dictionary order."
msgstr ""
"Повертає екземпляр підкласу :class:`dict`, який має спеціалізовані методи "
"для зміни порядку словника."

#: ../../library/collections.rst:1145
msgid ""
"The :meth:`popitem` method for ordered dictionaries returns and removes a "
"(key, value) pair.  The pairs are returned in :abbr:`LIFO (last-in, first-"
"out)` order if *last* is true or :abbr:`FIFO (first-in, first-out)` order if"
" false."
msgstr ""
"Метод :meth:`popitem` для впорядкованих словників повертає та видаляє пару "
"(ключ, значення). Пари повертаються в порядку :abbr:`LIFO (останній прийшов,"
" перший вийшов)`, якщо *останній* має значення true, або :abbr:`FIFO (перший"
" прийшов, перший вийшов)`, якщо значення false."

#: ../../library/collections.rst:1152
msgid ""
"Move an existing *key* to either end of an ordered dictionary.  The item is "
"moved to the right end if *last* is true (the default) or to the beginning "
"if *last* is false.  Raises :exc:`KeyError` if the *key* does not exist:"
msgstr ""
"Перемістіть наявний *ключ* у будь-який кінець упорядкованого словника. "
"Елемент переміщується в правий кінець, якщо *last* має значення true (за "
"замовчуванням), або на початок, якщо *last* має значення false. Викликає "
":exc:`KeyError`, якщо *ключ* не існує:"

#: ../../library/collections.rst:1157
msgid ""
">>> d = OrderedDict.fromkeys('abcde')\n"
">>> d.move_to_end('b')\n"
">>> ''.join(d)\n"
"'acdeb'\n"
">>> d.move_to_end('b', last=False)\n"
">>> ''.join(d)\n"
"'bacde'"
msgstr ""

#: ../../library/collections.rst:1169
msgid ""
"In addition to the usual mapping methods, ordered dictionaries also support "
"reverse iteration using :func:`reversed`."
msgstr ""
"На додаток до звичайних методів відображення, упорядковані словники також "
"підтримують зворотну ітерацію за допомогою :func:`reversed`."

#: ../../library/collections.rst:1174
msgid ""
"Equality tests between :class:`OrderedDict` objects are order-sensitive and "
"are roughly equivalent to ``list(od1.items())==list(od2.items())``."
msgstr ""

#: ../../library/collections.rst:1177
msgid ""
"Equality tests between :class:`OrderedDict` objects and other "
":class:`~collections.abc.Mapping` objects are order-insensitive like regular"
" dictionaries.  This allows :class:`OrderedDict` objects to be substituted "
"anywhere a regular dictionary is used."
msgstr ""

#: ../../library/collections.rst:1182
msgid ""
"The items, keys, and values :term:`views <dictionary view>` of "
":class:`OrderedDict` now support reverse iteration using :func:`reversed`."
msgstr ""
"Елементи, ключі та значення :term:`views <dictionary view>` "
":class:`OrderedDict` тепер підтримують зворотну ітерацію за допомогою "
":func:`reversed`."

#: ../../library/collections.rst:1186
msgid ""
"With the acceptance of :pep:`468`, order is retained for keyword arguments "
"passed to the :class:`OrderedDict` constructor and its :meth:`update` "
"method."
msgstr ""
"З прийняттям :pep:`468` зберігається порядок для аргументів ключових слів, "
"які передаються конструктору :class:`OrderedDict` і його методу "
":meth:`update`."

#: ../../library/collections.rst:1196
msgid ":class:`OrderedDict` Examples and Recipes"
msgstr ":class:`OrderedDict` Приклади та рецепти"

#: ../../library/collections.rst:1198
msgid ""
"It is straightforward to create an ordered dictionary variant that remembers"
" the order the keys were *last* inserted. If a new entry overwrites an "
"existing entry, the original insertion position is changed and moved to the "
"end::"
msgstr ""
"Легко створити впорядкований варіант словника, який запам’ятовує порядок "
"*останнього* введення ключів. Якщо новий запис перезаписує існуючий запис, "
"початкова позиція вставки змінюється та переміщується в кінець::"

#: ../../library/collections.rst:1203
msgid ""
"class LastUpdatedOrderedDict(OrderedDict):\n"
"    'Store items in the order the keys were last added'\n"
"\n"
"    def __setitem__(self, key, value):\n"
"        super().__setitem__(key, value)\n"
"        self.move_to_end(key)"
msgstr ""

#: ../../library/collections.rst:1210
msgid ""
"An :class:`OrderedDict` would also be useful for implementing variants of "
":func:`functools.lru_cache`:"
msgstr ""
":class:`OrderedDict` також буде корисним для реалізації варіантів "
":func:`functools.lru_cache`:"

#: ../../library/collections.rst:1213
msgid ""
"from collections import OrderedDict\n"
"from time import time\n"
"\n"
"class TimeBoundedLRU:\n"
"    \"LRU Cache that invalidates and refreshes old entries.\"\n"
"\n"
"    def __init__(self, func, maxsize=128, maxage=30):\n"
"        self.cache = OrderedDict()      # { args : (timestamp, result)}\n"
"        self.func = func\n"
"        self.maxsize = maxsize\n"
"        self.maxage = maxage\n"
"\n"
"    def __call__(self, *args):\n"
"        if args in self.cache:\n"
"            self.cache.move_to_end(args)\n"
"            timestamp, result = self.cache[args]\n"
"            if time() - timestamp <= self.maxage:\n"
"                return result\n"
"        result = self.func(*args)\n"
"        self.cache[args] = time(), result\n"
"        if len(self.cache) > self.maxsize:\n"
"            self.cache.popitem(last=False)\n"
"        return result"
msgstr ""

#: ../../library/collections.rst:1240
msgid ""
"class MultiHitLRUCache:\n"
"    \"\"\" LRU cache that defers caching a result until\n"
"        it has been requested multiple times.\n"
"\n"
"        To avoid flushing the LRU cache with one-time requests,\n"
"        we don't cache until a request has been made more than once.\n"
"\n"
"    \"\"\"\n"
"\n"
"    def __init__(self, func, maxsize=128, maxrequests=4096, cache_after=1):\n"
"        self.requests = OrderedDict()   # { uncached_key : request_count }\n"
"        self.cache = OrderedDict()      # { cached_key : function_result }\n"
"        self.func = func\n"
"        self.maxrequests = maxrequests  # max number of uncached requests\n"
"        self.maxsize = maxsize          # max number of stored return values\n"
"        self.cache_after = cache_after\n"
"\n"
"    def __call__(self, *args):\n"
"        if args in self.cache:\n"
"            self.cache.move_to_end(args)\n"
"            return self.cache[args]\n"
"        result = self.func(*args)\n"
"        self.requests[args] = self.requests.get(args, 0) + 1\n"
"        if self.requests[args] <= self.cache_after:\n"
"            self.requests.move_to_end(args)\n"
"            if len(self.requests) > self.maxrequests:\n"
"                self.requests.popitem(last=False)\n"
"        else:\n"
"            self.requests.pop(args, None)\n"
"            self.cache[args] = result\n"
"            if len(self.cache) > self.maxsize:\n"
"                self.cache.popitem(last=False)\n"
"        return result"
msgstr ""

#: ../../library/collections.rst:1309
msgid ":class:`UserDict` objects"
msgstr ":class:`UserDict` об'єкти"

#: ../../library/collections.rst:1311
msgid ""
"The class, :class:`UserDict` acts as a wrapper around dictionary objects. "
"The need for this class has been partially supplanted by the ability to "
"subclass directly from :class:`dict`; however, this class can be easier to "
"work with because the underlying dictionary is accessible as an attribute."
msgstr ""
"Клас :class:`UserDict` діє як оболонка навколо об’єктів словника. Потреба в "
"цьому класі була частково витіснена можливістю створювати підклас "
"безпосередньо з :class:`dict`; однак з цим класом може бути легше працювати,"
" оскільки базовий словник доступний як атрибут."

#: ../../library/collections.rst:1319
msgid ""
"Class that simulates a dictionary.  The instance's contents are kept in a "
"regular dictionary, which is accessible via the :attr:`data` attribute of "
":class:`UserDict` instances.  If *initialdata* is provided, :attr:`data` is "
"initialized with its contents; note that a reference to *initialdata* will "
"not be kept, allowing it to be used for other purposes."
msgstr ""
"Клас, який імітує словник. Вміст екземпляра зберігається у звичайному "
"словнику, який доступний через атрибут :attr:`data` екземплярів "
":class:`UserDict`. Якщо надано *initialdata*, :attr:`data` ініціалізується "
"його вмістом; зауважте, що посилання на *ініціальні дані* не буде збережено,"
" що дозволить використовувати його для інших цілей."

#: ../../library/collections.rst:1325
msgid ""
"In addition to supporting the methods and operations of mappings, "
":class:`UserDict` instances provide the following attribute:"
msgstr ""
"На додаток до підтримки методів і операцій зіставлення, екземпляри "
":class:`UserDict` забезпечують такий атрибут:"

#: ../../library/collections.rst:1330
msgid ""
"A real dictionary used to store the contents of the :class:`UserDict` class."
msgstr ""
"Справжній словник, який використовується для зберігання вмісту класу "
":class:`UserDict`."

#: ../../library/collections.rst:1336
msgid ":class:`UserList` objects"
msgstr ":class:`UserList` об’єкти"

#: ../../library/collections.rst:1338
msgid ""
"This class acts as a wrapper around list objects.  It is a useful base class"
" for your own list-like classes which can inherit from them and override "
"existing methods or add new ones.  In this way, one can add new behaviors to"
" lists."
msgstr ""
"Цей клас діє як оболонка навколо об’єктів списку. Це корисний базовий клас "
"для ваших власних спископодібних класів, які можуть успадковувати їх і "
"перевизначати існуючі методи або додавати нові. Таким чином можна додавати "
"нові моделі поведінки до списків."

#: ../../library/collections.rst:1343
msgid ""
"The need for this class has been partially supplanted by the ability to "
"subclass directly from :class:`list`; however, this class can be easier to "
"work with because the underlying list is accessible as an attribute."
msgstr ""
"Потреба в цьому класі була частково витіснена можливістю створювати підкласи"
" безпосередньо з :class:`list`; однак з цим класом може бути легше "
"працювати, оскільки базовий список доступний як атрибут."

#: ../../library/collections.rst:1349
msgid ""
"Class that simulates a list.  The instance's contents are kept in a regular "
"list, which is accessible via the :attr:`data` attribute of "
":class:`UserList` instances.  The instance's contents are initially set to a"
" copy of *list*, defaulting to the empty list ``[]``.  *list* can be any "
"iterable, for example a real Python list or a :class:`UserList` object."
msgstr ""
"Клас, що імітує список. Вміст екземпляра зберігається у звичайному списку, "
"який доступний через атрибут :attr:`data` екземплярів :class:`UserList`. "
"Вміст екземпляра спочатку встановлено як копія *списку*, за замовчуванням — "
"порожній список ``[]``. *list* може бути будь-яким ітерованим, наприклад "
"справжнім списком Python або об’єктом :class:`UserList`."

#: ../../library/collections.rst:1355
msgid ""
"In addition to supporting the methods and operations of mutable sequences, "
":class:`UserList` instances provide the following attribute:"
msgstr ""
"На додаток до підтримки методів і операцій змінних послідовностей, "
"екземпляри :class:`UserList` забезпечують такий атрибут:"

#: ../../library/collections.rst:1360
msgid ""
"A real :class:`list` object used to store the contents of the "
":class:`UserList` class."
msgstr ""
"Справжній об’єкт :class:`list`, який використовується для зберігання вмісту "
"класу :class:`UserList`."

#: ../../library/collections.rst:1363
msgid ""
"**Subclassing requirements:** Subclasses of :class:`UserList` are expected "
"to offer a constructor which can be called with either no arguments or one "
"argument.  List operations which return a new sequence attempt to create an "
"instance of the actual implementation class.  To do so, it assumes that the "
"constructor can be called with a single parameter, which is a sequence "
"object used as a data source."
msgstr ""
"**Вимоги до підкласів:** Очікується, що підкласи :class:`UserList` "
"пропонуватимуть конструктор, який можна викликати без аргументів або з одним"
" аргументом. Список операцій, які повертають нову послідовність, намагається"
" створити екземпляр фактичного класу реалізації. Для цього передбачається, "
"що конструктор можна викликати за допомогою одного параметра, який є "
"об’єктом послідовності, що використовується як джерело даних."

#: ../../library/collections.rst:1370
msgid ""
"If a derived class does not wish to comply with this requirement, all of the"
" special methods supported by this class will need to be overridden; please "
"consult the sources for information about the methods which need to be "
"provided in that case."
msgstr ""
"Якщо похідний клас не бажає відповідати цій вимозі, всі спеціальні методи, "
"підтримувані цим класом, повинні бути перевизначені; будь ласка, зверніться "
"до джерел для отримання інформації про методи, які необхідно надати в такому"
" випадку."

#: ../../library/collections.rst:1376
msgid ":class:`UserString` objects"
msgstr ":class:`UserString` об’єкти"

#: ../../library/collections.rst:1378
msgid ""
"The class, :class:`UserString` acts as a wrapper around string objects. The "
"need for this class has been partially supplanted by the ability to subclass"
" directly from :class:`str`; however, this class can be easier to work with "
"because the underlying string is accessible as an attribute."
msgstr ""
"Клас :class:`UserString` діє як оболонка навколо рядкових об’єктів. Потреба "
"в цьому класі була частково витіснена можливістю створювати підклас "
"безпосередньо з :class:`str`; однак з цим класом може бути легше працювати, "
"оскільки базовий рядок доступний як атрибут."

#: ../../library/collections.rst:1386
msgid ""
"Class that simulates a string object.  The instance's content is kept in a "
"regular string object, which is accessible via the :attr:`data` attribute of"
" :class:`UserString` instances.  The instance's contents are initially set "
"to a copy of *seq*.  The *seq* argument can be any object which can be "
"converted into a string using the built-in :func:`str` function."
msgstr ""
"Клас, який імітує рядковий об'єкт. Вміст екземпляра зберігається у "
"звичайному рядковому об’єкті, який доступний через атрибут :attr:`data` "
"екземплярів :class:`UserString`. Для вмісту екземпляра спочатку встановлено "
"копію *seq*. Аргументом *seq* може бути будь-який об’єкт, який можна "
"перетворити на рядок за допомогою вбудованої функції :func:`str`."

#: ../../library/collections.rst:1393
msgid ""
"In addition to supporting the methods and operations of strings, "
":class:`UserString` instances provide the following attribute:"
msgstr ""
"На додаток до підтримки методів і операцій із рядками, екземпляри "
":class:`UserString` надають такий атрибут:"

#: ../../library/collections.rst:1398
msgid ""
"A real :class:`str` object used to store the contents of the "
":class:`UserString` class."
msgstr ""
"Справжній об’єкт :class:`str`, який використовується для зберігання вмісту "
"класу :class:`UserString`."

#: ../../library/collections.rst:1401
msgid ""
"New methods ``__getnewargs__``, ``__rmod__``, ``casefold``, ``format_map``, "
"``isprintable``, and ``maketrans``."
msgstr ""
"Нові методи ``__getnewargs__``, ``__rmod__``, ``casefold``, ``format_map``, "
"``isprintable`` і ``maketrans``."
