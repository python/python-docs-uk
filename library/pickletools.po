# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Dmytro Kazanzhy, 2022
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-11-19 01:00+0000\n"
"PO-Revision-Date: 2021-06-28 01:11+0000\n"
"Last-Translator: Dmytro Kazanzhy, 2022\n"
"Language-Team: Ukrainian (https://app.transifex.com/python-doc/teams/5390/uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != 11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % 100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || (n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

#: ../../library/pickletools.rst:2
msgid ":mod:`!pickletools` --- Tools for pickle developers"
msgstr ""

#: ../../library/pickletools.rst:8
msgid "**Source code:** :source:`Lib/pickletools.py`"
msgstr "**Вихідний код:** :source:`Lib/pickletools.py`"

#: ../../library/pickletools.rst:13
msgid ""
"This module contains various constants relating to the intimate details of "
"the :mod:`pickle` module, some lengthy comments about the implementation, "
"and a few useful functions for analyzing pickled data.  The contents of this"
" module are useful for Python core developers who are working on the "
":mod:`pickle`; ordinary users of the :mod:`pickle` module probably won't "
"find the :mod:`pickletools` module relevant."
msgstr ""
"Цей модуль містить різні константи, що стосуються інтимних деталей модуля "
":mod:`pickle`, деякі розлогі коментарі щодо реалізації та кілька корисних "
"функцій для аналізу маринованих даних. Вміст цього модуля корисний для "
"розробників ядра Python, які працюють над :mod:`pickle`; звичайні "
"користувачі модуля :mod:`pickle`, ймовірно, не знайдуть модуль "
":mod:`pickletools` доречним."

#: ../../library/pickletools.rst:23
msgid "Command line usage"
msgstr "Використання командного рядка"

#: ../../library/pickletools.rst:27
msgid ""
"When invoked from the command line, ``python -m pickletools`` will "
"disassemble the contents of one or more pickle files.  Note that if you want"
" to see the Python object stored in the pickle rather than the details of "
"pickle format, you may want to use ``-m pickle`` instead. However, when the "
"pickle file that you want to examine comes from an untrusted source, ``-m "
"pickletools`` is a safer option because it does not execute pickle bytecode."
msgstr ""
"При виклику з командного рядка ``python -m pickletools`` розбере вміст "
"одного або кількох файлів pickle. Зауважте, що якщо ви хочете бачити об’єкт "
"Python, який зберігається в pickle, а не деталі формату pickle, ви можете "
"замість цього використовувати ``-m pickle``. Однак, якщо файл pickle, який "
"ви хочете перевірити, походить із ненадійного джерела, ``-m pickletools`` є "
"безпечнішим варіантом, оскільки він не виконує байт-код pickle."

#: ../../library/pickletools.rst:35
msgid "For example, with a tuple ``(1, 2)`` pickled in file ``x.pickle``:"
msgstr "Наприклад, з кортежем ``(1, 2)``, маринованим у файлі ``x.pickle``:"

#: ../../library/pickletools.rst:37
msgid ""
"$ python -m pickle x.pickle\n"
"(1, 2)\n"
"\n"
"$ python -m pickletools x.pickle\n"
"    0: \\x80 PROTO      3\n"
"    2: K    BININT1    1\n"
"    4: K    BININT1    2\n"
"    6: \\x86 TUPLE2\n"
"    7: q    BINPUT     0\n"
"    9: .    STOP\n"
"highest protocol among opcodes = 2"
msgstr ""

#: ../../library/pickletools.rst:52
msgid "Command line options"
msgstr "Параметри командного рядка"

#: ../../library/pickletools.rst:58
msgid "Annotate each line with a short opcode description."
msgstr "Додайте до кожного рядка короткий опис коду операції."

#: ../../library/pickletools.rst:62
msgid "Name of a file where the output should be written."
msgstr "Ім'я файлу, куди слід записати вихідні дані."

#: ../../library/pickletools.rst:66
msgid "The number of blanks by which to indent a new MARK level."
msgstr "Кількість пробілів, на які потрібно відступити новий рівень MARK."

#: ../../library/pickletools.rst:70
msgid ""
"When multiple objects are disassembled, preserve memo between disassemblies."
msgstr "Коли кілька об’єктів розібрано, зберігайте пам’ятку між розбираннями."

#: ../../library/pickletools.rst:75
msgid ""
"When more than one pickle file are specified, print given preamble before "
"each disassembly."
msgstr ""
"Якщо вказано більше одного файлу pickle, друкуйте надану преамбулу перед "
"кожним розбиранням."

#: ../../library/pickletools.rst:81
msgid "Programmatic Interface"
msgstr "Програмний інтерфейс"

#: ../../library/pickletools.rst:86
msgid ""
"Outputs a symbolic disassembly of the pickle to the file-like object *out*, "
"defaulting to ``sys.stdout``.  *pickle* can be a string or a file-like "
"object.  *memo* can be a Python dictionary that will be used as the pickle's"
" memo; it can be used to perform disassemblies across multiple pickles "
"created by the same pickler. Successive levels, indicated by ``MARK`` "
"opcodes in the stream, are indented by *indentlevel* spaces.  If a nonzero "
"value is given to *annotate*, each opcode in the output is annotated with a "
"short description.  The value of *annotate* is used as a hint for the column"
" where annotation should start."
msgstr ""
"Виводить символічне розбирання pickle у файлоподібний об’єкт *out*, за "
"умовчанням ``sys.stdout``. *pickle* може бути рядком або файлоподібним "
"об’єктом. *memo* може бути словником Python, який використовуватиметься як "
"пам’ятка pickle; його можна використовувати для розбирання кількох "
"маринованих пікселів, створених одним піклером. Послідовні рівні, позначені "
"кодами операцій ``MARK`` у потоці, відступають пробілами *indentlevel*. Якщо"
" для *annotate* задано ненульове значення, кожен код операції у виведених "
"даних анотується коротким описом. Значення *annotate* використовується як "
"підказка для стовпця, з якого має починатися анотація."

#: ../../library/pickletools.rst:97
msgid "Added the *annotate* parameter."
msgstr ""

#: ../../library/pickletools.rst:102
msgid ""
"Provides an :term:`iterator` over all of the opcodes in a pickle, returning "
"a sequence of ``(opcode, arg, pos)`` triples.  *opcode* is an instance of an"
" :class:`OpcodeInfo` class; *arg* is the decoded value, as a Python object, "
"of the opcode's argument; *pos* is the position at which this opcode is "
"located. *pickle* can be a string or a file-like object."
msgstr ""
"Надає :term:`iterator` для всіх кодів операцій у pickle, повертаючи "
"послідовність ``(opcode, arg, pos)`` потрійок. *opcode* є екземпляром класу "
":class:`OpcodeInfo`; *arg* — це декодоване значення аргументу коду операції "
"як об’єкт Python; *pos* - це позиція, у якій знаходиться цей код операції. "
"*pickle* може бути рядком або файлоподібним об’єктом."

#: ../../library/pickletools.rst:110
msgid ""
"Returns a new equivalent pickle string after eliminating unused ``PUT`` "
"opcodes. The optimized pickle is shorter, takes less transmission time, "
"requires less storage space, and unpickles more efficiently."
msgstr ""
"Повертає новий еквівалентний рядок pickle після видалення невикористаних "
"кодів операцій ``PUT``. Оптимізоване маринування коротше, займає менше часу "
"на передачу, вимагає менше місця для зберігання та ефективніше знімає "
"травлення."
