# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Dmytro Kazanzhy, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-04-11 14:19+0000\n"
"PO-Revision-Date: 2021-06-28 01:08+0000\n"
"Last-Translator: Dmytro Kazanzhy, 2025\n"
"Language-Team: Ukrainian (https://app.transifex.com/python-doc/teams/5390/uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != 11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % 100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || (n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

#: ../../library/json.rst:2
msgid ":mod:`!json` --- JSON encoder and decoder"
msgstr ""

#: ../../library/json.rst:10
msgid "**Source code:** :source:`Lib/json/__init__.py`"
msgstr "**Вихідний код:** :source:`Lib/json/__init__.py`"

#: ../../library/json.rst:14
msgid ""
"`JSON (JavaScript Object Notation) <https://json.org>`_, specified by "
":rfc:`7159` (which obsoletes :rfc:`4627`) and by `ECMA-404 <https://ecma-"
"international.org/publications-and-standards/standards/ecma-404/>`_, is a "
"lightweight data interchange format inspired by `JavaScript "
"<https://en.wikipedia.org/wiki/JavaScript>`_ object literal syntax (although"
" it is not a strict subset of JavaScript [#rfc-errata]_ )."
msgstr ""

#: ../../library/json.rst:22
msgid ""
"Be cautious when parsing JSON data from untrusted sources. A malicious JSON "
"string may cause the decoder to consume considerable CPU and memory "
"resources. Limiting the size of data to be parsed is recommended."
msgstr ""

#: ../../library/json.rst:26
msgid ""
":mod:`json` exposes an API familiar to users of the standard library "
":mod:`marshal` and :mod:`pickle` modules."
msgstr ""
":mod:`json` надає API, знайомий користувачам модулів стандартної бібліотеки "
":mod:`marshal` і :mod:`pickle`."

#: ../../library/json.rst:29
msgid "Encoding basic Python object hierarchies::"
msgstr "Кодування основних ієрархій об’єктів Python::"

#: ../../library/json.rst:31
msgid ""
">>> import json\n"
">>> json.dumps(['foo', {'bar': ('baz', None, 1.0, 2)}])\n"
"'[\"foo\", {\"bar\": [\"baz\", null, 1.0, 2]}]'\n"
">>> print(json.dumps(\"\\\"foo\\bar\"))\n"
"\"\\\"foo\\bar\"\n"
">>> print(json.dumps('\\u1234'))\n"
"\"\\u1234\"\n"
">>> print(json.dumps('\\\\'))\n"
"\"\\\\\"\n"
">>> print(json.dumps({\"c\": 0, \"b\": 0, \"a\": 0}, sort_keys=True))\n"
"{\"a\": 0, \"b\": 0, \"c\": 0}\n"
">>> from io import StringIO\n"
">>> io = StringIO()\n"
">>> json.dump(['streaming API'], io)\n"
">>> io.getvalue()\n"
"'[\"streaming API\"]'"
msgstr ""

#: ../../library/json.rst:48
msgid "Compact encoding::"
msgstr "Компактне кодування::"

#: ../../library/json.rst:50
msgid ""
">>> import json\n"
">>> json.dumps([1, 2, 3, {'4': 5, '6': 7}], separators=(',', ':'))\n"
"'[1,2,3,{\"4\":5,\"6\":7}]'"
msgstr ""

#: ../../library/json.rst:54
msgid "Pretty printing::"
msgstr "Гарний друк::"

#: ../../library/json.rst:56
msgid ""
">>> import json\n"
">>> print(json.dumps({'6': 7, '4': 5}, sort_keys=True, indent=4))\n"
"{\n"
"    \"4\": 5,\n"
"    \"6\": 7\n"
"}"
msgstr ""

#: ../../library/json.rst:63
msgid "Specializing JSON object encoding::"
msgstr ""

#: ../../library/json.rst:65
msgid ""
">>> import json\n"
">>> def custom_json(obj):\n"
"...     if isinstance(obj, complex):\n"
"...         return {'__complex__': True, 'real': obj.real, 'imag': obj.imag}\n"
"...     raise TypeError(f'Cannot serialize object of {type(obj)}')\n"
"...\n"
">>> json.dumps(1 + 2j, default=custom_json)\n"
"'{\"__complex__\": true, \"real\": 1.0, \"imag\": 2.0}'"
msgstr ""

#: ../../library/json.rst:74
msgid "Decoding JSON::"
msgstr "Декодування JSON::"

#: ../../library/json.rst:76
msgid ""
">>> import json\n"
">>> json.loads('[\"foo\", {\"bar\":[\"baz\", null, 1.0, 2]}]')\n"
"['foo', {'bar': ['baz', None, 1.0, 2]}]\n"
">>> json.loads('\"\\\\\"foo\\\\bar\"')\n"
"'\"foo\\x08ar'\n"
">>> from io import StringIO\n"
">>> io = StringIO('[\"streaming API\"]')\n"
">>> json.load(io)\n"
"['streaming API']"
msgstr ""

#: ../../library/json.rst:86
msgid "Specializing JSON object decoding::"
msgstr "Спеціалізоване декодування об'єктів JSON::"

#: ../../library/json.rst:88
msgid ""
">>> import json\n"
">>> def as_complex(dct):\n"
"...     if '__complex__' in dct:\n"
"...         return complex(dct['real'], dct['imag'])\n"
"...     return dct\n"
"...\n"
">>> json.loads('{\"__complex__\": true, \"real\": 1, \"imag\": 2}',\n"
"...     object_hook=as_complex)\n"
"(1+2j)\n"
">>> import decimal\n"
">>> json.loads('1.1', parse_float=decimal.Decimal)\n"
"Decimal('1.1')"
msgstr ""

#: ../../library/json.rst:101
msgid "Extending :class:`JSONEncoder`::"
msgstr "Розширення :class:`JSONEncoder`::"

#: ../../library/json.rst:103
msgid ""
">>> import json\n"
">>> class ComplexEncoder(json.JSONEncoder):\n"
"...     def default(self, obj):\n"
"...         if isinstance(obj, complex):\n"
"...             return [obj.real, obj.imag]\n"
"...         # Let the base class default method raise the TypeError\n"
"...         return super().default(obj)\n"
"...\n"
">>> json.dumps(2 + 1j, cls=ComplexEncoder)\n"
"'[2.0, 1.0]'\n"
">>> ComplexEncoder().encode(2 + 1j)\n"
"'[2.0, 1.0]'\n"
">>> list(ComplexEncoder().iterencode(2 + 1j))\n"
"['[2.0', ', 1.0', ']']"
msgstr ""

#: ../../library/json.rst:119
msgid "Using :mod:`json.tool` from the shell to validate and pretty-print:"
msgstr ""
"Використання :mod:`json.tool` з оболонки для перевірки та красивого друку:"

#: ../../library/json.rst:121
msgid ""
"$ echo '{\"json\":\"obj\"}' | python -m json.tool\n"
"{\n"
"    \"json\": \"obj\"\n"
"}\n"
"$ echo '{1.2:3.4}' | python -m json.tool\n"
"Expecting property name enclosed in double quotes: line 1 column 2 (char 1)"
msgstr ""

#: ../../library/json.rst:130
msgid "See :ref:`json-commandline` for detailed documentation."
msgstr "Перегляньте :ref:`json-commandline` для детальної документації."

#: ../../library/json.rst:134
msgid ""
"JSON is a subset of `YAML <https://yaml.org/>`_ 1.2.  The JSON produced by "
"this module's default settings (in particular, the default *separators* "
"value) is also a subset of YAML 1.0 and 1.1.  This module can thus also be "
"used as a YAML serializer."
msgstr ""

#: ../../library/json.rst:141
msgid ""
"This module's encoders and decoders preserve input and output order by "
"default.  Order is only lost if the underlying containers are unordered."
msgstr ""
"Кодери та декодери цього модуля зберігають порядок введення та виведення за "
"замовчуванням. Порядок втрачається, лише якщо базові контейнери не "
"впорядковані."

#: ../../library/json.rst:146
msgid "Basic Usage"
msgstr "Основне використання"

#: ../../library/json.rst:153
msgid ""
"Serialize *obj* as a JSON formatted stream to *fp* (a "
"``.write()``-supporting :term:`file-like object`) using this :ref:`Python-"
"to-JSON conversion table <py-to-json-table>`."
msgstr ""

#: ../../library/json.rst:159
msgid ""
"Unlike :mod:`pickle` and :mod:`marshal`, JSON is not a framed protocol, so "
"trying to serialize multiple objects with repeated calls to :func:`dump` "
"using the same *fp* will result in an invalid JSON file."
msgstr ""
"На відміну від :mod:`pickle` і :mod:`marshal`, JSON не є фреймованим "
"протоколом, тому спроба серіалізувати кілька об’єктів за допомогою повторних"
" викликів :func:`dump` з використанням того самого *fp* призведе до "
"недійсного JSON файл."

#: ../../library/json.rst:0
msgid "Parameters"
msgstr "Параметри"

#: ../../library/json.rst:163
msgid "The Python object to be serialized."
msgstr ""

#: ../../library/json.rst:166
msgid ""
"The file-like object *obj* will be serialized to. The :mod:`!json` module "
"always produces :class:`str` objects, not :class:`bytes` objects, therefore "
"``fp.write()`` must support :class:`str` input."
msgstr ""

#: ../../library/json.rst:173
msgid ""
"If ``True``, keys that are not of a basic type (:class:`str`, :class:`int`, "
":class:`float`, :class:`bool`, ``None``) will be skipped instead of raising "
"a :exc:`TypeError`. Default ``False``."
msgstr ""

#: ../../library/json.rst:179
msgid ""
"If ``True`` (the default), the output is guaranteed to have all incoming "
"non-ASCII characters escaped. If ``False``, these characters will be "
"outputted as-is."
msgstr ""

#: ../../library/json.rst:184
msgid ""
"If ``False``, the circular reference check for container types is skipped "
"and a circular reference will result in a :exc:`RecursionError` (or worse). "
"Default ``True``."
msgstr ""

#: ../../library/json.rst:189
msgid ""
"If ``False``, serialization of out-of-range :class:`float` values (``nan``, "
"``inf``, ``-inf``) will result in a :exc:`ValueError`, in strict compliance "
"with the JSON specification. If ``True`` (the default), their JavaScript "
"equivalents (``NaN``, ``Infinity``, ``-Infinity``) are used."
msgstr ""

#: ../../library/json.rst:196
msgid ""
"If set, a custom JSON encoder with the :meth:`~JSONEncoder.default` method "
"overridden, for serializing into custom datatypes. If ``None`` (the "
"default), :class:`!JSONEncoder` is used."
msgstr ""

#: ../../library/json.rst:203
msgid ""
"If a positive integer or string, JSON array elements and object members will"
" be pretty-printed with that indent level. A positive integer indents that "
"many spaces per level; a string (such as ``\"\\t\"``) is used to indent each"
" level. If zero, negative, or ``\"\"`` (the empty string), only newlines are"
" inserted. If ``None`` (the default), the most compact representation is "
"used."
msgstr ""

#: ../../library/json.rst:213
msgid ""
"A two-tuple: ``(item_separator, key_separator)``. If ``None`` (the default),"
" *separators* defaults to ``(', ', ': ')`` if *indent* is ``None``, and "
"``(',', ': ')`` otherwise. For the most compact JSON, specify ``(',', ':')``"
" to eliminate whitespace."
msgstr ""

#: ../../library/json.rst:222
msgid ""
"A function that is called for objects that can't otherwise be serialized. It"
" should return a JSON encodable version of the object or raise a "
":exc:`TypeError`. If ``None`` (the default), :exc:`!TypeError` is raised."
msgstr ""

#: ../../library/json.rst:229
msgid ""
"If ``True``, dictionaries will be outputted sorted by key. Default "
"``False``."
msgstr ""

#: ../../library/json.rst:233 ../../library/json.rst:518
msgid "Allow strings for *indent* in addition to integers."
msgstr "Дозволити рядки для *відступу* на додаток до цілих чисел."

#: ../../library/json.rst:236 ../../library/json.rst:526
msgid "Use ``(',', ': ')`` as default if *indent* is not ``None``."
msgstr ""
"Використовуйте ``(',', ': ')`` за умовчанням, якщо *indent* не є ``None``."

#: ../../library/json.rst:239 ../../library/json.rst:338
msgid ""
"All optional parameters are now :ref:`keyword-only <keyword-"
"only_parameter>`."
msgstr ""
"Усі додаткові параметри тепер :ref:`лише для ключових слів <keyword-"
"only_parameter>`."

#: ../../library/json.rst:248
msgid ""
"Serialize *obj* to a JSON formatted :class:`str` using this :ref:`conversion"
" table <py-to-json-table>`.  The arguments have the same meaning as in "
":func:`dump`."
msgstr ""
"Серіалізуйте *obj* у JSON у форматі :class:`str` за допомогою цієї "
":ref:`таблиці перетворення <py-to-json-table>`. Аргументи мають те саме "
"значення, що й у :func:`dump`."

#: ../../library/json.rst:254
msgid ""
"Keys in key/value pairs of JSON are always of the type :class:`str`. When a "
"dictionary is converted into JSON, all the keys of the dictionary are "
"coerced to strings. As a result of this, if a dictionary is converted into "
"JSON and then back into a dictionary, the dictionary may not equal the "
"original one. That is, ``loads(dumps(x)) != x`` if x has non-string keys."
msgstr ""
"Ключі в парах ключ/значення JSON завжди мають тип :class:`str`. Коли словник"
" перетворюється на JSON, усі ключі словника перетворюються на рядки. У "
"результаті цього, якщо словник перетворюється на JSON, а потім знову на "
"словник, словник може не відповідати оригінальному. Тобто ``loads(dumps(x)) "
"!= x``, якщо x має нерядкові ключі."

#: ../../library/json.rst:265
msgid ""
"Deserialize *fp* to a Python object using the :ref:`JSON-to-Python "
"conversion table <json-to-py-table>`."
msgstr ""

#: ../../library/json.rst:268
msgid ""
"A ``.read()``-supporting :term:`text file` or :term:`binary file` containing"
" the JSON document to be deserialized."
msgstr ""

#: ../../library/json.rst:273
msgid ""
"If set, a custom JSON decoder. Additional keyword arguments to :func:`!load`"
" will be passed to the constructor of *cls*. If ``None`` (the default), "
":class:`!JSONDecoder` is used."
msgstr ""

#: ../../library/json.rst:280
msgid ""
"If set, a function that is called with the result of any object literal "
"decoded (a :class:`dict`). The return value of this function will be used "
"instead of the :class:`dict`. This feature can be used to implement custom "
"decoders, for example `JSON-RPC <https://www.jsonrpc.org>`_ class hinting. "
"Default ``None``."
msgstr ""

#: ../../library/json.rst:290
msgid ""
"If set, a function that is called with the result of any object literal "
"decoded with an ordered list of pairs. The return value of this function "
"will be used instead of the :class:`dict`. This feature can be used to "
"implement custom decoders. If *object_hook* is also set, *object_pairs_hook*"
" takes priority. Default ``None``."
msgstr ""

#: ../../library/json.rst:300
msgid ""
"If set, a function that is called with the string of every JSON float to be "
"decoded. If ``None`` (the default), it is equivalent to ``float(num_str)``. "
"This can be used to parse JSON floats into custom datatypes, for example "
":class:`decimal.Decimal`."
msgstr ""

#: ../../library/json.rst:308
msgid ""
"If set, a function that is called with the string of every JSON int to be "
"decoded. If ``None`` (the default), it is equivalent to ``int(num_str)``. "
"This can be used to parse JSON integers into custom datatypes, for example "
":class:`float`."
msgstr ""

#: ../../library/json.rst:316
msgid ""
"If set, a function that is called with one of the following strings: "
"``'-Infinity'``, ``'Infinity'``, or ``'NaN'``. This can be used to raise an "
"exception if invalid JSON numbers are encountered. Default ``None``."
msgstr ""

#: ../../library/json.rst:0
msgid "Raises"
msgstr ""

#: ../../library/json.rst:324
msgid "When the data being deserialized is not a valid JSON document."
msgstr ""

#: ../../library/json.rst:327
msgid ""
"When the data being deserialized does not contain UTF-8, UTF-16 or UTF-32 "
"encoded data."
msgstr ""

#: ../../library/json.rst:333
msgid "Added the optional *object_pairs_hook* parameter."
msgstr ""

#: ../../library/json.rst:334
msgid ""
"*parse_constant* doesn't get called on 'null', 'true', 'false' anymore."
msgstr "*parse_constant* більше не викликається на 'null', 'true', 'false'."

#: ../../library/json.rst:339
msgid ""
"*fp* can now be a :term:`binary file`. The input encoding should be UTF-8, "
"UTF-16 or UTF-32."
msgstr ""
"*fp* тепер може бути :term:`binary file`. Вхідне кодування має бути UTF-8, "
"UTF-16 або UTF-32."

#: ../../library/json.rst:342
msgid ""
"The default *parse_int* of :func:`int` now limits the maximum length of the "
"integer string via the interpreter's :ref:`integer string conversion length "
"limitation <int_max_str_digits>` to help avoid denial of service attacks."
msgstr ""

#: ../../library/json.rst:350
msgid ""
"Identical to :func:`load`, but instead of a file-like object, deserialize "
"*s* (a :class:`str`, :class:`bytes` or :class:`bytearray` instance "
"containing a JSON document) to a Python object using this :ref:`conversion "
"table <json-to-py-table>`."
msgstr ""

#: ../../library/json.rst:355
msgid ""
"*s* can now be of type :class:`bytes` or :class:`bytearray`. The input "
"encoding should be UTF-8, UTF-16 or UTF-32."
msgstr ""
"*s* тепер може бути типу :class:`bytes` або :class:`bytearray`. Вхідне "
"кодування має бути UTF-8, UTF-16 або UTF-32."

#: ../../library/json.rst:359
msgid "The keyword argument *encoding* has been removed."
msgstr "Аргумент ключового слова *кодування* видалено."

#: ../../library/json.rst:364
msgid "Encoders and Decoders"
msgstr "Кодери та декодери"

#: ../../library/json.rst:368
msgid "Simple JSON decoder."
msgstr "Простий декодер JSON."

#: ../../library/json.rst:370
msgid "Performs the following translations in decoding by default:"
msgstr "Виконує такі переклади в декодуванні за замовчуванням:"

#: ../../library/json.rst:375 ../../library/json.rst:463
msgid "JSON"
msgstr "JSON"

#: ../../library/json.rst:375 ../../library/json.rst:463
msgid "Python"
msgstr "Python"

#: ../../library/json.rst:377 ../../library/json.rst:465
msgid "object"
msgstr "об'єкт"

#: ../../library/json.rst:377 ../../library/json.rst:465
msgid "dict"
msgstr "дикт"

#: ../../library/json.rst:379 ../../library/json.rst:467
msgid "array"
msgstr "масив"

#: ../../library/json.rst:379
msgid "list"
msgstr "список"

#: ../../library/json.rst:381 ../../library/json.rst:469
msgid "string"
msgstr "рядок"

#: ../../library/json.rst:381 ../../library/json.rst:469
msgid "str"
msgstr "вул"

#: ../../library/json.rst:383
msgid "number (int)"
msgstr "число (ціле)"

#: ../../library/json.rst:383
msgid "int"
msgstr "внутр"

#: ../../library/json.rst:385
msgid "number (real)"
msgstr "число (дійсне)"

#: ../../library/json.rst:385
msgid "float"
msgstr "плавати"

#: ../../library/json.rst:387 ../../library/json.rst:473
msgid "true"
msgstr "правда"

#: ../../library/json.rst:387 ../../library/json.rst:473
msgid "True"
msgstr "правда"

#: ../../library/json.rst:389 ../../library/json.rst:475
msgid "false"
msgstr "помилковий"

#: ../../library/json.rst:389 ../../library/json.rst:475
msgid "False"
msgstr "помилковий"

#: ../../library/json.rst:391 ../../library/json.rst:477
msgid "null"
msgstr "нуль"

#: ../../library/json.rst:391 ../../library/json.rst:477
msgid "None"
msgstr "Жодного"

#: ../../library/json.rst:394
msgid ""
"It also understands ``NaN``, ``Infinity``, and ``-Infinity`` as their "
"corresponding ``float`` values, which is outside the JSON spec."
msgstr ""
"Він також розуміє ``NaN``, ``Infinity`` і ``-Infinity`` як їхні відповідні "
"значення ``float``, що виходить за межі специфікації JSON."

#: ../../library/json.rst:397
msgid ""
"*object_hook* is an optional function that will be called with the result of"
" every JSON object decoded and its return value will be used in place of the"
" given :class:`dict`.  This can be used to provide custom deserializations "
"(e.g. to support `JSON-RPC <https://www.jsonrpc.org>`_ class hinting)."
msgstr ""

#: ../../library/json.rst:402
msgid ""
"*object_pairs_hook* is an optional function that will be called with the "
"result of every JSON object decoded with an ordered list of pairs.  The "
"return value of *object_pairs_hook* will be used instead of the "
":class:`dict`.  This feature can be used to implement custom decoders.  If "
"*object_hook* is also defined, the *object_pairs_hook* takes priority."
msgstr ""

#: ../../library/json.rst:408
msgid "Added support for *object_pairs_hook*."
msgstr "Додано підтримку *object_pairs_hook*."

#: ../../library/json.rst:411
msgid ""
"*parse_float* is an optional function that will be called with the string of"
" every JSON float to be decoded.  By default, this is equivalent to "
"``float(num_str)``.  This can be used to use another datatype or parser for "
"JSON floats (e.g. :class:`decimal.Decimal`)."
msgstr ""

#: ../../library/json.rst:416
msgid ""
"*parse_int* is an optional function that will be called with the string of "
"every JSON int to be decoded.  By default, this is equivalent to "
"``int(num_str)``.  This can be used to use another datatype or parser for "
"JSON integers (e.g. :class:`float`)."
msgstr ""

#: ../../library/json.rst:421
msgid ""
"*parse_constant* is an optional function that will be called with one of the"
" following strings: ``'-Infinity'``, ``'Infinity'``, ``'NaN'``.  This can be"
" used to raise an exception if invalid JSON numbers are encountered."
msgstr ""

#: ../../library/json.rst:425
msgid ""
"If *strict* is false (``True`` is the default), then control characters will"
" be allowed inside strings.  Control characters in this context are those "
"with character codes in the 0--31 range, including ``'\\t'`` (tab), "
"``'\\n'``, ``'\\r'`` and ``'\\0'``."
msgstr ""
"Якщо *strict* має значення false (``True`` є значенням за замовчуванням), то"
" керуючі символи будуть дозволені всередині рядків. Контрольні символи в "
"цьому контексті — це символи з кодами символів у діапазоні 0--31, включаючи "
"``'\\t'`` (табуляція), ``'\\n'``, ``'\\r'`` і ``'\\0'``."

#: ../../library/json.rst:430
msgid ""
"If the data being deserialized is not a valid JSON document, a "
":exc:`JSONDecodeError` will be raised."
msgstr ""
"Якщо дані, які десеріалізуються, не є дійсним документом JSON, виникне "
":exc:`JSONDecodeError`."

#: ../../library/json.rst:433 ../../library/json.rst:534
msgid "All parameters are now :ref:`keyword-only <keyword-only_parameter>`."
msgstr ""
"Усі параметри тепер :ref:`лише для ключових слів <keyword-only_parameter>`."

#: ../../library/json.rst:438
msgid ""
"Return the Python representation of *s* (a :class:`str` instance containing "
"a JSON document)."
msgstr ""
"Повертає представлення Python *s* (екземпляр :class:`str`, що містить "
"документ JSON)."

#: ../../library/json.rst:441
msgid ""
":exc:`JSONDecodeError` will be raised if the given JSON document is not "
"valid."
msgstr ""
":exc:`JSONDecodeError` буде викликано, якщо вказаний документ JSON "
"недійсний."

#: ../../library/json.rst:446
msgid ""
"Decode a JSON document from *s* (a :class:`str` beginning with a JSON "
"document) and return a 2-tuple of the Python representation and the index in"
" *s* where the document ended."
msgstr ""
"Декодуйте документ JSON із *s* (:class:`str`, що починається з документа "
"JSON) і повертайте 2-кортеж представлення Python та індекс у *s*, де "
"документ закінчився."

#: ../../library/json.rst:450
msgid ""
"This can be used to decode a JSON document from a string that may have "
"extraneous data at the end."
msgstr ""
"Це можна використовувати для декодування документа JSON із рядка, який може "
"містити сторонні дані в кінці."

#: ../../library/json.rst:456
msgid "Extensible JSON encoder for Python data structures."
msgstr "Розширюваний кодувальник JSON для структур даних Python."

#: ../../library/json.rst:458
msgid "Supports the following objects and types by default:"
msgstr "За замовчуванням підтримує такі об’єкти та типи:"

#: ../../library/json.rst:467
msgid "list, tuple"
msgstr "список, кортеж"

#: ../../library/json.rst:471
msgid "int, float, int- & float-derived Enums"
msgstr "int, float, int- & float-derived Enums"

#: ../../library/json.rst:471
msgid "number"
msgstr "номер"

#: ../../library/json.rst:480
msgid "Added support for int- and float-derived Enum classes."
msgstr "Додано підтримку класів Enum, похідних від int і float."

#: ../../library/json.rst:483
msgid ""
"To extend this to recognize other objects, subclass and implement a "
":meth:`~JSONEncoder.default` method with another method that returns a "
"serializable object for ``o`` if possible, otherwise it should call the "
"superclass implementation (to raise :exc:`TypeError`)."
msgstr ""

#: ../../library/json.rst:488
msgid ""
"If *skipkeys* is false (the default), a :exc:`TypeError` will be raised when"
" trying to encode keys that are not :class:`str`, :class:`int`, "
":class:`float`, :class:`bool` or ``None``.  If *skipkeys* is true, such "
"items are simply skipped."
msgstr ""

#: ../../library/json.rst:492
msgid ""
"If *ensure_ascii* is true (the default), the output is guaranteed to have "
"all incoming non-ASCII characters escaped.  If *ensure_ascii* is false, "
"these characters will be output as-is."
msgstr ""
"Якщо *ensure_ascii* має значення true (за замовчуванням), вивід гарантовано "
"матиме екранування всіх вхідних символів, які не є ASCII. Якщо "
"*ensure_ascii* має значення false, ці символи виводитимуться як є."

#: ../../library/json.rst:496
msgid ""
"If *check_circular* is true (the default), then lists, dicts, and custom "
"encoded objects will be checked for circular references during encoding to "
"prevent an infinite recursion (which would cause a :exc:`RecursionError`). "
"Otherwise, no such check takes place."
msgstr ""

#: ../../library/json.rst:501
msgid ""
"If *allow_nan* is true (the default), then ``NaN``, ``Infinity``, and "
"``-Infinity`` will be encoded as such.  This behavior is not JSON "
"specification compliant, but is consistent with most JavaScript based "
"encoders and decoders.  Otherwise, it will be a :exc:`ValueError` to encode "
"such floats."
msgstr ""
"Якщо *allow_nan* має значення true (за замовчуванням), тоді ``NaN``, "
"``Infinity`` і ``-Infinity`` будуть закодовані як такі. Така поведінка не "
"відповідає специфікації JSON, але відповідає більшості кодувальників і "
"декодерів на основі JavaScript. В іншому випадку це буде :exc:`ValueError` "
"для кодування таких плаваючих значень."

#: ../../library/json.rst:507
msgid ""
"If *sort_keys* is true (default: ``False``), then the output of dictionaries"
" will be sorted by key; this is useful for regression tests to ensure that "
"JSON serializations can be compared on a day-to-day basis."
msgstr ""
"Якщо *sort_keys* має значення true (за замовчуванням: ``False``), тоді "
"вихідні дані словників будуть відсортовані за ключем; це корисно для "
"регресійних тестів, щоб гарантувати, що серіалізації JSON можна порівнювати "
"щодня."

#: ../../library/json.rst:511
msgid ""
"If *indent* is a non-negative integer or string, then JSON array elements "
"and object members will be pretty-printed with that indent level.  An indent"
" level of 0, negative, or ``\"\"`` will only insert newlines.  ``None`` (the"
" default) selects the most compact representation. Using a positive integer "
"indent indents that many spaces per level.  If *indent* is a string (such as"
" ``\"\\t\"``), that string is used to indent each level."
msgstr ""
"Якщо *indent* є невід’ємним цілим числом або рядком, елементи масиву JSON і "
"члени об’єкта будуть надруковані з таким рівнем відступу. Рівень відступу 0,"
" негативний або ``\"\"`` вставлятиме лише нові рядки. ``None`` (за "
"замовчуванням) вибирає найбільш компактне представлення. Використання "
"додатного цілого відступу робить стільки відступів на рівень. Якщо *indent* "
"є рядком (наприклад, ``\"\\t\"``), цей рядок використовується для відступу "
"кожного рівня."

#: ../../library/json.rst:521
msgid ""
"If specified, *separators* should be an ``(item_separator, key_separator)`` "
"tuple.  The default is ``(', ', ': ')`` if *indent* is ``None`` and ``(',', "
"': ')`` otherwise.  To get the most compact JSON representation, you should "
"specify ``(',', ':')`` to eliminate whitespace."
msgstr ""
"Якщо вказано, *роздільники* мають бути кортежем ``(item_separator, "
"key_separator)``. Типовим значенням є ``(', ', ': ')``, якщо *indent* має "
"значення ``None``, і ``(',', ': ')`` в іншому випадку. Щоб отримати найбільш"
" компактне представлення JSON, ви повинні вказати ``(',', ':')``, щоб "
"усунути пробіли."

#: ../../library/json.rst:529
msgid ""
"If specified, *default* should be a function that gets called for objects "
"that can't otherwise be serialized.  It should return a JSON encodable "
"version of the object or raise a :exc:`TypeError`.  If not specified, "
":exc:`TypeError` is raised."
msgstr ""
"Якщо вказано, *default* має бути функцією, яка викликається для об’єктів, "
"які не можуть бути серіалізовані інакше. Він має повертати кодовану JSON "
"версію об’єкта або викликати :exc:`TypeError`. Якщо не вказано, виникає "
":exc:`TypeError`."

#: ../../library/json.rst:540
msgid ""
"Implement this method in a subclass such that it returns a serializable "
"object for *o*, or calls the base implementation (to raise a "
":exc:`TypeError`)."
msgstr ""
"Реалізуйте цей метод у підкласі так, щоб він повертав серіалізований об’єкт "
"для *o* або викликав базову реалізацію (щоб викликати :exc:`TypeError`)."

#: ../../library/json.rst:544
msgid ""
"For example, to support arbitrary iterators, you could implement "
":meth:`~JSONEncoder.default` like this::"
msgstr ""

#: ../../library/json.rst:547
msgid ""
"def default(self, o):\n"
"   try:\n"
"       iterable = iter(o)\n"
"   except TypeError:\n"
"       pass\n"
"   else:\n"
"       return list(iterable)\n"
"   # Let the base class default method raise the TypeError\n"
"   return super().default(o)"
msgstr ""

#: ../../library/json.rst:560
msgid ""
"Return a JSON string representation of a Python data structure, *o*.  For "
"example::"
msgstr ""
"Повертає рядкове представлення JSON структури даних Python, *o*. Наприклад::"

#: ../../library/json.rst:563
msgid ""
">>> json.JSONEncoder().encode({\"foo\": [\"bar\", \"baz\"]})\n"
"'{\"foo\": [\"bar\", \"baz\"]}'"
msgstr ""

#: ../../library/json.rst:569
msgid ""
"Encode the given object, *o*, and yield each string representation as "
"available.  For example::"
msgstr ""
"Закодуйте вказаний об’єкт, *o*, і передайте кожне представлення рядка як "
"доступне. Наприклад::"

#: ../../library/json.rst:572
msgid ""
"for chunk in json.JSONEncoder().iterencode(bigobject):\n"
"    mysocket.write(chunk)"
msgstr ""

#: ../../library/json.rst:577
msgid "Exceptions"
msgstr "Винятки"

#: ../../library/json.rst:581
msgid ""
"Subclass of :exc:`ValueError` with the following additional attributes:"
msgstr "Підклас :exc:`ValueError` з такими додатковими атрибутами:"

#: ../../library/json.rst:585
msgid "The unformatted error message."
msgstr "Неформатне повідомлення про помилку."

#: ../../library/json.rst:589
msgid "The JSON document being parsed."
msgstr "Документ JSON аналізується."

#: ../../library/json.rst:593
msgid "The start index of *doc* where parsing failed."
msgstr "Початковий індекс *doc*, де синтаксичний аналіз не вдався."

#: ../../library/json.rst:597
msgid "The line corresponding to *pos*."
msgstr "Рядок, що відповідає *pos*."

#: ../../library/json.rst:601
msgid "The column corresponding to *pos*."
msgstr "Стовпець, що відповідає *pos*."

#: ../../library/json.rst:607
msgid "Standard Compliance and Interoperability"
msgstr "Відповідність стандартам і сумісність"

#: ../../library/json.rst:609
msgid ""
"The JSON format is specified by :rfc:`7159` and by `ECMA-404 <https://ecma-"
"international.org/publications-and-standards/standards/ecma-404/>`_. This "
"section details this module's level of compliance with the RFC. For "
"simplicity, :class:`JSONEncoder` and :class:`JSONDecoder` subclasses, and "
"parameters other than those explicitly mentioned, are not considered."
msgstr ""

#: ../../library/json.rst:615
msgid ""
"This module does not comply with the RFC in a strict fashion, implementing "
"some extensions that are valid JavaScript but not valid JSON.  In "
"particular:"
msgstr ""
"Цей модуль не повністю відповідає RFC, реалізуючи деякі розширення, які є "
"дійсним JavaScript, але не дійсним JSON. Зокрема:"

#: ../../library/json.rst:618
msgid "Infinite and NaN number values are accepted and output;"
msgstr "Нескінченні та NaN числові значення приймаються та виводяться;"

#: ../../library/json.rst:619
msgid ""
"Repeated names within an object are accepted, and only the value of the last"
" name-value pair is used."
msgstr ""
"Повторювані імена в межах об’єкта приймаються, і використовується лише "
"значення останньої пари ім’я-значення."

#: ../../library/json.rst:622
msgid ""
"Since the RFC permits RFC-compliant parsers to accept input texts that are "
"not RFC-compliant, this module's deserializer is technically RFC-compliant "
"under default settings."
msgstr ""
"Оскільки RFC дозволяє RFC-сумісним парсерам приймати вхідні тексти, які не є"
" RFC-сумісними, десеріалізатор цього модуля є технічно RFC-сумісним за "
"умовчанням."

#: ../../library/json.rst:627
msgid "Character Encodings"
msgstr "Кодування символів"

#: ../../library/json.rst:629
msgid ""
"The RFC requires that JSON be represented using either UTF-8, UTF-16, or "
"UTF-32, with UTF-8 being the recommended default for maximum "
"interoperability."
msgstr ""
"RFC вимагає, щоб JSON був представлений за допомогою UTF-8, UTF-16 або "
"UTF-32, причому UTF-8 є рекомендованим за замовчуванням для максимальної "
"сумісності."

#: ../../library/json.rst:632
msgid ""
"As permitted, though not required, by the RFC, this module's serializer sets"
" *ensure_ascii=True* by default, thus escaping the output so that the "
"resulting strings only contain ASCII characters."
msgstr ""
"Як це дозволено, хоча й не вимагається RFC, серіалізатор цього модуля "
"встановлює *ensure_ascii=True* за замовчуванням, таким чином усуваючи "
"вихідні дані, щоб кінцеві рядки містили лише символи ASCII."

#: ../../library/json.rst:636
msgid ""
"Other than the *ensure_ascii* parameter, this module is defined strictly in "
"terms of conversion between Python objects and :class:`Unicode strings "
"<str>`, and thus does not otherwise directly address the issue of character "
"encodings."
msgstr ""
"За винятком параметра *ensure_ascii*, цей модуль визначено суворо в термінах"
" перетворення між об’єктами Python і :class:`рядками Unicode <str>`, і, "
"отже, іншим чином безпосередньо не вирішує проблему кодування символів."

#: ../../library/json.rst:641
msgid ""
"The RFC prohibits adding a byte order mark (BOM) to the start of a JSON "
"text, and this module's serializer does not add a BOM to its output. The RFC"
" permits, but does not require, JSON deserializers to ignore an initial BOM "
"in their input.  This module's deserializer raises a :exc:`ValueError` when "
"an initial BOM is present."
msgstr ""
"RFC забороняє додавати позначку порядку байтів (BOM) на початок тексту JSON,"
" а серіалізатор цього модуля не додає BOM до свого виводу. RFC дозволяє, але"
" не вимагає, щоб десеріалізатори JSON ігнорували початкову специфікацію у "
"своїх вхідних даних. Десеріалізатор цього модуля викликає :exc:`ValueError`,"
" коли присутня початкова специфікація."

#: ../../library/json.rst:647
msgid ""
"The RFC does not explicitly forbid JSON strings which contain byte sequences"
" that don't correspond to valid Unicode characters (e.g. unpaired UTF-16 "
"surrogates), but it does note that they may cause interoperability problems."
" By default, this module accepts and outputs (when present in the original "
":class:`str`) code points for such sequences."
msgstr ""
"RFC явно не забороняє рядки JSON, які містять послідовності байтів, які не "
"відповідають дійсним символам Unicode (наприклад, непарні сурогати UTF-16), "
"але зазначається, що вони можуть спричинити проблеми взаємодії. За "
"замовчуванням цей модуль приймає та виводить (якщо є в оригінальному "
":class:`str`) кодові точки для таких послідовностей."

#: ../../library/json.rst:655
msgid "Infinite and NaN Number Values"
msgstr "Нескінченні значення чисел NaN"

#: ../../library/json.rst:657
msgid ""
"The RFC does not permit the representation of infinite or NaN number values."
" Despite that, by default, this module accepts and outputs ``Infinity``, "
"``-Infinity``, and ``NaN`` as if they were valid JSON number literal "
"values::"
msgstr ""
"RFC не дозволяє подання нескінченних значень чи чисел NaN. Незважаючи на це,"
" за замовчуванням цей модуль приймає та виводить ``Infinity``, ``-Infinity``"
" і ``NaN`` так, якби вони були дійсними літеральними значеннями номерів "
"JSON::"

#: ../../library/json.rst:661
msgid ""
">>> # Neither of these calls raises an exception, but the results are not valid JSON\n"
">>> json.dumps(float('-inf'))\n"
"'-Infinity'\n"
">>> json.dumps(float('nan'))\n"
"'NaN'\n"
">>> # Same when deserializing\n"
">>> json.loads('-Infinity')\n"
"-inf\n"
">>> json.loads('NaN')\n"
"nan"
msgstr ""

#: ../../library/json.rst:672
msgid ""
"In the serializer, the *allow_nan* parameter can be used to alter this "
"behavior.  In the deserializer, the *parse_constant* parameter can be used "
"to alter this behavior."
msgstr ""
"У серіалізаторі можна використовувати параметр *allow_nan*, щоб змінити цю "
"поведінку. У десеріалізаторі можна використовувати параметр "
"*parse_constant*, щоб змінити цю поведінку."

#: ../../library/json.rst:678
msgid "Repeated Names Within an Object"
msgstr "Повторювані імена в межах об’єкта"

#: ../../library/json.rst:680
msgid ""
"The RFC specifies that the names within a JSON object should be unique, but "
"does not mandate how repeated names in JSON objects should be handled.  By "
"default, this module does not raise an exception; instead, it ignores all "
"but the last name-value pair for a given name::"
msgstr ""
"RFC визначає, що імена в об’єкті JSON мають бути унікальними, але не "
"визначає, як слід обробляти повторювані імена в об’єктах JSON. За "
"замовчуванням цей модуль не викликає винятку; замість цього він ігнорує все,"
" окрім пари прізвище-значення для даного імені::"

#: ../../library/json.rst:685
msgid ""
">>> weird_json = '{\"x\": 1, \"x\": 2, \"x\": 3}'\n"
">>> json.loads(weird_json)\n"
"{'x': 3}"
msgstr ""

#: ../../library/json.rst:689
msgid "The *object_pairs_hook* parameter can be used to alter this behavior."
msgstr ""
"Параметр *object_pairs_hook* можна використовувати, щоб змінити цю "
"поведінку."

#: ../../library/json.rst:693
msgid "Top-level Non-Object, Non-Array Values"
msgstr "Необ’єктні та немасивні значення верхнього рівня"

#: ../../library/json.rst:695
msgid ""
"The old version of JSON specified by the obsolete :rfc:`4627` required that "
"the top-level value of a JSON text must be either a JSON object or array "
"(Python :class:`dict` or :class:`list`), and could not be a JSON null, "
"boolean, number, or string value.  :rfc:`7159` removed that restriction, and"
" this module does not and has never implemented that restriction in either "
"its serializer or its deserializer."
msgstr ""
"Стара версія JSON, визначена застарілим :rfc:`4627`, вимагала, щоб значення "
"верхнього рівня тексту JSON було або об’єктом JSON, або масивом (Python "
":class:`dict` або :class:`list`) і не може бути нульовим, логічним, числовим"
" або рядковим значенням JSON. :rfc:`7159` видалив це обмеження, і цей модуль"
" не реалізував і ніколи не реалізував це обмеження ні в серіалізаторі, ні в "
"десеріалізаторі."

#: ../../library/json.rst:702
msgid ""
"Regardless, for maximum interoperability, you may wish to voluntarily adhere"
" to the restriction yourself."
msgstr ""
"Незважаючи на це, для максимальної сумісності ви можете самостійно "
"добровільно дотримуватися цього обмеження."

#: ../../library/json.rst:707
msgid "Implementation Limitations"
msgstr "Обмеження реалізації"

#: ../../library/json.rst:709
msgid "Some JSON deserializer implementations may set limits on:"
msgstr ""
"Деякі реалізації десеріалізатора JSON можуть встановлювати обмеження на:"

#: ../../library/json.rst:711
msgid "the size of accepted JSON texts"
msgstr "розмір прийнятих текстів JSON"

#: ../../library/json.rst:712
msgid "the maximum level of nesting of JSON objects and arrays"
msgstr "максимальний рівень вкладеності об'єктів і масивів JSON"

#: ../../library/json.rst:713
msgid "the range and precision of JSON numbers"
msgstr "діапазон і точність чисел JSON"

#: ../../library/json.rst:714
msgid "the content and maximum length of JSON strings"
msgstr "вміст і максимальну довжину рядків JSON"

#: ../../library/json.rst:716
msgid ""
"This module does not impose any such limits beyond those of the relevant "
"Python datatypes themselves or the Python interpreter itself."
msgstr ""
"Цей модуль не накладає жодних таких обмежень, окрім обмежень відповідних "
"типів даних Python або самого інтерпретатора Python."

#: ../../library/json.rst:719
msgid ""
"When serializing to JSON, beware any such limitations in applications that "
"may consume your JSON.  In particular, it is common for JSON numbers to be "
"deserialized into IEEE 754 double precision numbers and thus subject to that"
" representation's range and precision limitations.  This is especially "
"relevant when serializing Python :class:`int` values of extremely large "
"magnitude, or when serializing instances of \"exotic\" numerical types such "
"as :class:`decimal.Decimal`."
msgstr ""
"Під час серіалізації в JSON уникайте таких обмежень у програмах, які можуть "
"використовувати ваш JSON. Зокрема, зазвичай числа JSON десеріалізуються в "
"числа подвійної точності IEEE 754 і, таким чином, підпадають під обмеження "
"діапазону представлення та точності. Це особливо важливо під час "
"серіалізації Python :class:`int` значень надзвичайно великої величини або "
"під час серіалізації екзотичних числових типів, таких як "
":class:`decimal.Decimal`."

#: ../../library/json.rst:732
msgid "Command Line Interface"
msgstr "Інтерфейс командного рядка"

#: ../../library/json.rst:737
msgid "**Source code:** :source:`Lib/json/tool.py`"
msgstr "**Вихідний код:** :source:`Lib/json/tool.py`"

#: ../../library/json.rst:741
msgid ""
"The :mod:`json.tool` module provides a simple command line interface to "
"validate and pretty-print JSON objects."
msgstr ""
"Модуль :mod:`json.tool` забезпечує простий інтерфейс командного рядка для "
"перевірки та красивого друку об’єктів JSON."

#: ../../library/json.rst:744
msgid ""
"If the optional ``infile`` and ``outfile`` arguments are not specified, "
":data:`sys.stdin` and :data:`sys.stdout` will be used respectively:"
msgstr ""

#: ../../library/json.rst:747
msgid ""
"$ echo '{\"json\": \"obj\"}' | python -m json.tool\n"
"{\n"
"    \"json\": \"obj\"\n"
"}\n"
"$ echo '{1.2:3.4}' | python -m json.tool\n"
"Expecting property name enclosed in double quotes: line 1 column 2 (char 1)"
msgstr ""

#: ../../library/json.rst:756
msgid ""
"The output is now in the same order as the input. Use the :option:`--sort-"
"keys` option to sort the output of dictionaries alphabetically by key."
msgstr ""
"Вихід тепер у такому самому порядку, як і вхід. Використовуйте опцію "
":option:`--sort-keys`, щоб відсортувати вихідні дані словників за алфавітом "
"за ключем."

#: ../../library/json.rst:763
msgid "Command line options"
msgstr "Параметри командного рядка"

#: ../../library/json.rst:767
msgid "The JSON file to be validated or pretty-printed:"
msgstr "Файл JSON, який потрібно перевірити або роздрукувати:"

#: ../../library/json.rst:769
msgid ""
"$ python -m json.tool mp_films.json\n"
"[\n"
"    {\n"
"        \"title\": \"And Now for Something Completely Different\",\n"
"        \"year\": 1971\n"
"    },\n"
"    {\n"
"        \"title\": \"Monty Python and the Holy Grail\",\n"
"        \"year\": 1975\n"
"    }\n"
"]"
msgstr ""

#: ../../library/json.rst:783
msgid "If *infile* is not specified, read from :data:`sys.stdin`."
msgstr ""

#: ../../library/json.rst:787
msgid ""
"Write the output of the *infile* to the given *outfile*. Otherwise, write it"
" to :data:`sys.stdout`."
msgstr ""

#: ../../library/json.rst:792
msgid "Sort the output of dictionaries alphabetically by key."
msgstr "Сортувати вихідні дані словників за алфавітом за ключем."

#: ../../library/json.rst:798
msgid ""
"Disable escaping of non-ascii characters, see :func:`json.dumps` for more "
"information."
msgstr ""
"Вимкніть екранування символів, відмінних від ASCII, див. :func:`json.dumps` "
"для отримання додаткової інформації."

#: ../../library/json.rst:804
msgid "Parse every input line as separate JSON object."
msgstr "Проаналізуйте кожен рядок введення як окремий об’єкт JSON."

#: ../../library/json.rst:810
msgid "Mutually exclusive options for whitespace control."
msgstr "Взаємовиключні параметри керування пробілами."

#: ../../library/json.rst:816
msgid "Show the help message."
msgstr "Показати довідкове повідомлення."

#: ../../library/json.rst:820
msgid "Footnotes"
msgstr "Виноски"

#: ../../library/json.rst:821
msgid ""
"As noted in `the errata for RFC 7159 <https://www.rfc-"
"editor.org/errata_search.php?rfc=7159>`_, JSON permits literal U+2028 (LINE "
"SEPARATOR) and U+2029 (PARAGRAPH SEPARATOR) characters in strings, whereas "
"JavaScript (as of ECMAScript Edition 5.1) does not."
msgstr ""
"Як зазначено в `виправленнях для RFC 7159 <https://www.rfc-"
"editor.org/errata_search.php?rfc=7159>`_, JSON дозволяє літерали U+2028 "
"(РОЗДІЛЮВАЧ РЯДКУ) і U+2029 (РОЗДІЛЮВАЧ ПАРАГРАФА) у рядках, тоді як "
"JavaScript (починаючи з версії ECMAScript 5.1) не допускає."
