# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Dmytro Kazanzhy, 2022
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-11-19 01:00+0000\n"
"PO-Revision-Date: 2021-06-28 00:54+0000\n"
"Last-Translator: Dmytro Kazanzhy, 2022\n"
"Language-Team: Ukrainian (https://app.transifex.com/python-doc/teams/5390/uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != 11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % 100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || (n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

#: ../../library/asyncio-dev.rst:7
msgid "Developing with asyncio"
msgstr "Розробка з asyncio"

#: ../../library/asyncio-dev.rst:9
msgid ""
"Asynchronous programming is different from classic \"sequential\" "
"programming."
msgstr ""
"Асинхронне програмування відрізняється від класичного \"послідовного\" "
"програмування."

#: ../../library/asyncio-dev.rst:12
msgid ""
"This page lists common mistakes and traps and explains how to avoid them."
msgstr ""
"На цій сторінці наведено типові помилки та пастки та пояснено, як їх "
"уникнути."

#: ../../library/asyncio-dev.rst:19
msgid "Debug Mode"
msgstr "Режим налагодження"

#: ../../library/asyncio-dev.rst:21
msgid ""
"By default asyncio runs in production mode.  In order to ease the "
"development asyncio has a *debug mode*."
msgstr ""
"За замовчуванням asyncio працює у робочому режимі. Щоб полегшити розробку, "
"asyncio має *режим налагодження*."

#: ../../library/asyncio-dev.rst:24
msgid "There are several ways to enable asyncio debug mode:"
msgstr "Є кілька способів увімкнути асинхронний режим налагодження:"

#: ../../library/asyncio-dev.rst:26
msgid ""
"Setting the :envvar:`PYTHONASYNCIODEBUG` environment variable to ``1``."
msgstr ""
"Встановлення змінної середовища :envvar:`PYTHONASYNCIODEBUG` на ``1``."

#: ../../library/asyncio-dev.rst:28
msgid "Using the :ref:`Python Development Mode <devmode>`."
msgstr "Використання :ref:`режиму розробки Python <devmode>`."

#: ../../library/asyncio-dev.rst:30
msgid "Passing ``debug=True`` to :func:`asyncio.run`."
msgstr "Передача ``debug=True`` до :func:`asyncio.run`."

#: ../../library/asyncio-dev.rst:32
msgid "Calling :meth:`loop.set_debug`."
msgstr "Виклик :meth:`loop.set_debug`."

#: ../../library/asyncio-dev.rst:34
msgid "In addition to enabling the debug mode, consider also:"
msgstr "Окрім увімкнення режиму налагодження, враховуйте також:"

#: ../../library/asyncio-dev.rst:36
msgid ""
"setting the log level of the :ref:`asyncio logger <asyncio-logger>` to "
":py:const:`logging.DEBUG`, for example the following snippet of code can be "
"run at startup of the application::"
msgstr ""

#: ../../library/asyncio-dev.rst:40
msgid "logging.basicConfig(level=logging.DEBUG)"
msgstr ""

#: ../../library/asyncio-dev.rst:42
msgid ""
"configuring the :mod:`warnings` module to display :exc:`ResourceWarning` "
"warnings.  One way of doing that is by using the :option:`-W` ``default`` "
"command line option."
msgstr ""
"налаштування модуля :mod:`warnings` для відображення попереджень "
":exc:`ResourceWarning`. Один із способів зробити це — скористатися "
"параметром командного рядка :option:`-W` ``default``."

#: ../../library/asyncio-dev.rst:47
msgid "When the debug mode is enabled:"
msgstr "Коли ввімкнено режим налагодження:"

#: ../../library/asyncio-dev.rst:49
msgid ""
"asyncio checks for :ref:`coroutines that were not awaited <asyncio-"
"coroutine-not-scheduled>` and logs them; this mitigates the \"forgotten "
"await\" pitfall."
msgstr ""
"asyncio перевіряє :ref:`співпрограми, які не були очікувані <asyncio-"
"coroutine-not-scheduled>`, і записує їх у журнал; це пом'якшує помилку "
"\"забутого очікування\"."

#: ../../library/asyncio-dev.rst:53
msgid ""
"Many non-threadsafe asyncio APIs (such as :meth:`loop.call_soon` and "
":meth:`loop.call_at` methods) raise an exception if they are called from a "
"wrong thread."
msgstr ""
"Багато небезпечних для потоків асинхронних API (таких як методи "
":meth:`loop.call_soon` і :meth:`loop.call_at`) викликають виняток, якщо вони"
" викликаються з неправильного потоку."

#: ../../library/asyncio-dev.rst:57
msgid ""
"The execution time of the I/O selector is logged if it takes too long to "
"perform an I/O operation."
msgstr ""
"Час виконання селектора введення-виведення реєструється, якщо виконання "
"операції введення-виведення займає надто багато часу."

#: ../../library/asyncio-dev.rst:60
msgid ""
"Callbacks taking longer than 100 milliseconds are logged.  The "
":attr:`loop.slow_callback_duration` attribute can be used to set the minimum"
" execution duration in seconds that is considered \"slow\"."
msgstr ""

#: ../../library/asyncio-dev.rst:68
msgid "Concurrency and Multithreading"
msgstr "Паралельність і багатопотоковість"

#: ../../library/asyncio-dev.rst:70
msgid ""
"An event loop runs in a thread (typically the main thread) and executes all "
"callbacks and Tasks in its thread.  While a Task is running in the event "
"loop, no other Tasks can run in the same thread.  When a Task executes an "
"``await`` expression, the running Task gets suspended, and the event loop "
"executes the next Task."
msgstr ""
"Цикл подій виконується в потоці (зазвичай головному) і виконує всі зворотні "
"виклики та завдання у своєму потоці. Поки Завдання виконується в циклі "
"подій, жодні інші Завдання не можуть виконуватися в тому самому потоці. Коли"
" Завдання виконує вираз ``очікування``, запущене Завдання призупиняється, а "
"цикл подій виконує наступне Завдання."

#: ../../library/asyncio-dev.rst:76
msgid ""
"To schedule a :term:`callback` from another OS thread, the "
":meth:`loop.call_soon_threadsafe` method should be used. Example::"
msgstr ""
"Щоб запланувати :term:`callback` з іншого потоку ОС, слід використовувати "
"метод :meth:`loop.call_soon_threadsafe`. Приклад::"

#: ../../library/asyncio-dev.rst:79
msgid "loop.call_soon_threadsafe(callback, *args)"
msgstr ""

#: ../../library/asyncio-dev.rst:81
msgid ""
"Almost all asyncio objects are not thread safe, which is typically not a "
"problem unless there is code that works with them from outside of a Task or "
"a callback.  If there's a need for such code to call a low-level asyncio "
"API, the :meth:`loop.call_soon_threadsafe` method should be used, e.g.::"
msgstr ""
"Майже всі асинхронні об’єкти не є потокобезпечними, що зазвичай не є "
"проблемою, якщо немає коду, який працює з ними поза Завданням або зворотним "
"викликом. Якщо існує потреба в такому коді для виклику низькорівневого "
"асинхронного API, слід використовувати метод "
":meth:`loop.call_soon_threadsafe`, наприклад::"

#: ../../library/asyncio-dev.rst:87
msgid "loop.call_soon_threadsafe(fut.cancel)"
msgstr ""

#: ../../library/asyncio-dev.rst:89
msgid ""
"To schedule a coroutine object from a different OS thread, the "
":func:`run_coroutine_threadsafe` function should be used. It returns a "
":class:`concurrent.futures.Future` to access the result::"
msgstr ""
"Щоб запланувати об’єкт співпрограми з іншого потоку ОС, слід використати "
"функцію :func:`run_coroutine_threadsafe`. Він повертає "
":class:`concurrent.futures.Future` для доступу до результату::"

#: ../../library/asyncio-dev.rst:93
msgid ""
"async def coro_func():\n"
"     return await asyncio.sleep(1, 42)\n"
"\n"
"# Later in another OS thread:\n"
"\n"
"future = asyncio.run_coroutine_threadsafe(coro_func(), loop)\n"
"# Wait for the result:\n"
"result = future.result()"
msgstr ""

#: ../../library/asyncio-dev.rst:102
msgid "To handle signals the event loop must be run in the main thread."
msgstr ""

#: ../../library/asyncio-dev.rst:105
msgid ""
"The :meth:`loop.run_in_executor` method can be used with a "
":class:`concurrent.futures.ThreadPoolExecutor` to execute blocking code in a"
" different OS thread without blocking the OS thread that the event loop runs"
" in."
msgstr ""
"Метод :meth:`loop.run_in_executor` можна використовувати з "
":class:`concurrent.futures.ThreadPoolExecutor` для виконання коду блокування"
" в іншому потоці ОС, не блокуючи потік ОС, у якому виконується цикл подій."

#: ../../library/asyncio-dev.rst:110
msgid ""
"There is currently no way to schedule coroutines or callbacks directly from "
"a different process (such as one started with :mod:`multiprocessing`). The "
":ref:`asyncio-event-loop-methods` section lists APIs that can read from "
"pipes and watch file descriptors without blocking the event loop. In "
"addition, asyncio's :ref:`Subprocess <asyncio-subprocess>` APIs provide a "
"way to start a process and communicate with it from the event loop. Lastly, "
"the aforementioned :meth:`loop.run_in_executor` method can also be used with"
" a :class:`concurrent.futures.ProcessPoolExecutor` to execute code in a "
"different process."
msgstr ""

#: ../../library/asyncio-dev.rst:124
msgid "Running Blocking Code"
msgstr "Запуск коду блокування"

#: ../../library/asyncio-dev.rst:126
msgid ""
"Blocking (CPU-bound) code should not be called directly.  For example, if a "
"function performs a CPU-intensive calculation for 1 second, all concurrent "
"asyncio Tasks and IO operations would be delayed by 1 second."
msgstr ""
"Код блокування (прив’язаний до процесора) не слід викликати безпосередньо. "
"Наприклад, якщо функція виконує інтенсивне обчислення ЦП протягом 1 секунди,"
" усі одночасні асинхронні завдання та операції введення-виведення будуть "
"відкладені на 1 секунду."

#: ../../library/asyncio-dev.rst:131
msgid ""
"An executor can be used to run a task in a different thread or even in a "
"different process to avoid blocking the OS thread with the event loop.  See "
"the :meth:`loop.run_in_executor` method for more details."
msgstr ""
"Виконавець можна використовувати для запуску завдання в іншому потоці або "
"навіть в іншому процесі, щоб уникнути блокування потоку ОС за допомогою "
"циклу подій. Додаткову інформацію див. у методі "
":meth:`loop.run_in_executor`."

#: ../../library/asyncio-dev.rst:140
msgid "Logging"
msgstr "Лісозаготівля"

#: ../../library/asyncio-dev.rst:142
msgid ""
"asyncio uses the :mod:`logging` module and all logging is performed via the "
"``\"asyncio\"`` logger."
msgstr ""
"asyncio використовує модуль :mod:`logging`, і все журналювання виконується "
"через ``\"asyncio\"`` реєстратор."

#: ../../library/asyncio-dev.rst:145
msgid ""
"The default log level is :py:const:`logging.INFO`, which can be easily "
"adjusted::"
msgstr ""

#: ../../library/asyncio-dev.rst:148
msgid "logging.getLogger(\"asyncio\").setLevel(logging.WARNING)"
msgstr ""

#: ../../library/asyncio-dev.rst:151
msgid ""
"Network logging can block the event loop. It is recommended to use a "
"separate thread for handling logs or use non-blocking IO. For example, see "
":ref:`blocking-handlers`."
msgstr ""

#: ../../library/asyncio-dev.rst:159
msgid "Detect never-awaited coroutines"
msgstr "Виявляти ніколи не очікувані співпрограми"

#: ../../library/asyncio-dev.rst:161
msgid ""
"When a coroutine function is called, but not awaited (e.g. ``coro()`` "
"instead of ``await coro()``) or the coroutine is not scheduled with "
":meth:`asyncio.create_task`, asyncio will emit a :exc:`RuntimeWarning`::"
msgstr ""
"Коли функція співпрограми викликається, але не очікується (наприклад, "
"``coro()`` замість ``await coro()``) або співпрограма не запланована за "
"допомогою :meth:`asyncio.create_task`, asyncio видасть "
":exc:`RuntimeWarning`::"

#: ../../library/asyncio-dev.rst:166
msgid ""
"import asyncio\n"
"\n"
"async def test():\n"
"    print(\"never scheduled\")\n"
"\n"
"async def main():\n"
"    test()\n"
"\n"
"asyncio.run(main())"
msgstr ""

#: ../../library/asyncio-dev.rst:176 ../../library/asyncio-dev.rst:221
msgid "Output::"
msgstr "Вихід::"

#: ../../library/asyncio-dev.rst:178
msgid ""
"test.py:7: RuntimeWarning: coroutine 'test' was never awaited\n"
"  test()"
msgstr ""

#: ../../library/asyncio-dev.rst:181 ../../library/asyncio-dev.rst:237
msgid "Output in debug mode::"
msgstr "Вивід у режимі налагодження::"

#: ../../library/asyncio-dev.rst:183
msgid ""
"test.py:7: RuntimeWarning: coroutine 'test' was never awaited\n"
"Coroutine created at (most recent call last)\n"
"  File \"../t.py\", line 9, in <module>\n"
"    asyncio.run(main(), debug=True)\n"
"\n"
"  < .. >\n"
"\n"
"  File \"../t.py\", line 7, in main\n"
"    test()\n"
"  test()"
msgstr ""

#: ../../library/asyncio-dev.rst:194
msgid ""
"The usual fix is to either await the coroutine or call the "
":meth:`asyncio.create_task` function::"
msgstr ""
"Звичайним виправленням є або очікування співпрограми, або виклик функції "
":meth:`asyncio.create_task`::"

#: ../../library/asyncio-dev.rst:197
msgid ""
"async def main():\n"
"    await test()"
msgstr ""

#: ../../library/asyncio-dev.rst:202
msgid "Detect never-retrieved exceptions"
msgstr "Виявлення ніколи не отриманих винятків"

#: ../../library/asyncio-dev.rst:204
msgid ""
"If a :meth:`Future.set_exception` is called but the Future object is never "
"awaited on, the exception would never be propagated to the user code.  In "
"this case, asyncio would emit a log message when the Future object is "
"garbage collected."
msgstr ""
"Якщо викликається :meth:`Future.set_exception`, але об’єкт Future ніколи не "
"очікується, виняток ніколи не поширюватиметься на код користувача. У цьому "
"випадку asyncio створюватиме повідомлення журналу, коли об’єкт Future "
"збиратиме сміття."

#: ../../library/asyncio-dev.rst:209
msgid "Example of an unhandled exception::"
msgstr "Приклад необробленого винятку::"

#: ../../library/asyncio-dev.rst:211
msgid ""
"import asyncio\n"
"\n"
"async def bug():\n"
"    raise Exception(\"not consumed\")\n"
"\n"
"async def main():\n"
"    asyncio.create_task(bug())\n"
"\n"
"asyncio.run(main())"
msgstr ""

#: ../../library/asyncio-dev.rst:223
msgid ""
"Task exception was never retrieved\n"
"future: <Task finished coro=<bug() done, defined at test.py:3>\n"
"  exception=Exception('not consumed')>\n"
"\n"
"Traceback (most recent call last):\n"
"  File \"test.py\", line 4, in bug\n"
"    raise Exception(\"not consumed\")\n"
"Exception: not consumed"
msgstr ""

#: ../../library/asyncio-dev.rst:232
msgid ""
":ref:`Enable the debug mode <asyncio-debug-mode>` to get the traceback where"
" the task was created::"
msgstr ""
":ref:`Увімкніть режим налагодження <asyncio-debug-mode>`, щоб отримати "
"відстеження місця створення завдання:"

#: ../../library/asyncio-dev.rst:235
msgid "asyncio.run(main(), debug=True)"
msgstr ""

#: ../../library/asyncio-dev.rst:239
msgid ""
"Task exception was never retrieved\n"
"future: <Task finished coro=<bug() done, defined at test.py:3>\n"
"    exception=Exception('not consumed') created at asyncio/tasks.py:321>\n"
"\n"
"source_traceback: Object created at (most recent call last):\n"
"  File \"../t.py\", line 9, in <module>\n"
"    asyncio.run(main(), debug=True)\n"
"\n"
"< .. >\n"
"\n"
"Traceback (most recent call last):\n"
"  File \"../t.py\", line 4, in bug\n"
"    raise Exception(\"not consumed\")\n"
"Exception: not consumed"
msgstr ""
