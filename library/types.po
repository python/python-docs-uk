# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Dmytro Kazanzhy, 2024
# Yuliia Shevchenko, 2024
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-11-22 14:17+0000\n"
"PO-Revision-Date: 2021-06-28 01:16+0000\n"
"Last-Translator: Yuliia Shevchenko, 2024\n"
"Language-Team: Ukrainian (https://app.transifex.com/python-doc/teams/5390/uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != 11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % 100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || (n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

#: ../../library/types.rst:2
msgid ":mod:`!types` --- Dynamic type creation and names for built-in types"
msgstr ""

#: ../../library/types.rst:7
msgid "**Source code:** :source:`Lib/types.py`"
msgstr "**Вихідний код:** :source:`Lib/types.py`"

#: ../../library/types.rst:11
msgid ""
"This module defines utility functions to assist in dynamic creation of new "
"types."
msgstr ""
"Цей модуль визначає службові функції, які допомагають у динамічному "
"створенні нових типів."

#: ../../library/types.rst:14
msgid ""
"It also defines names for some object types that are used by the standard "
"Python interpreter, but not exposed as builtins like :class:`int` or "
":class:`str` are."
msgstr ""
"Він також визначає імена для деяких типів об’єктів, які використовуються "
"стандартним інтерпретатором Python, але не представлені у вигляді вбудованих"
" елементів, таких як :class:`int` або :class:`str`."

#: ../../library/types.rst:18
msgid ""
"Finally, it provides some additional type-related utility classes and "
"functions that are not fundamental enough to be builtins."
msgstr ""
"Нарешті, він надає деякі додаткові пов’язані з типами службові класи та "
"функції, які недостатньо фундаментальні, щоб бути вбудованими."

#: ../../library/types.rst:23
msgid "Dynamic Type Creation"
msgstr "Динамічне створення типів"

#: ../../library/types.rst:27
msgid "Creates a class object dynamically using the appropriate metaclass."
msgstr "Динамічно створює об’єкт класу за допомогою відповідного метакласу."

#: ../../library/types.rst:29
msgid ""
"The first three arguments are the components that make up a class definition"
" header: the class name, the base classes (in order), the keyword arguments "
"(such as ``metaclass``)."
msgstr ""
"Перші три аргументи є компонентами, які складають заголовок визначення "
"класу: ім’я класу, базові класи (по порядку), ключові аргументи (такі як "
"``метаклас``)."

#: ../../library/types.rst:33
msgid ""
"The *exec_body* argument is a callback that is used to populate the freshly "
"created class namespace. It should accept the class namespace as its sole "
"argument and update the namespace directly with the class contents. If no "
"callback is provided, it has the same effect as passing in ``lambda ns: "
"None``."
msgstr ""
"Аргумент *exec_body* є зворотним викликом, який використовується для "
"заповнення щойно створеного простору імен класу. Він повинен приймати "
"простір імен класу як єдиний аргумент і оновлювати простір імен "
"безпосередньо вмістом класу. Якщо зворотний виклик не надано, це матиме той "
"самий ефект, що й передача ``lambda ns: None``."

#: ../../library/types.rst:43
msgid "Calculates the appropriate metaclass and creates the class namespace."
msgstr "Обчислює відповідний метаклас і створює простір імен класу."

#: ../../library/types.rst:45
msgid ""
"The arguments are the components that make up a class definition header: the"
" class name, the base classes (in order) and the keyword arguments (such as "
"``metaclass``)."
msgstr ""
"Аргументи — це компоненти, які складають заголовок визначення класу: ім’я "
"класу, базові класи (по порядку) і ключові аргументи (такі як ``метаклас``)."

#: ../../library/types.rst:49
msgid "The return value is a 3-tuple: ``metaclass, namespace, kwds``"
msgstr ""
"Повернене значення є кортежем із трьох: ``metaclass, namespace, kwds``"

#: ../../library/types.rst:51
msgid ""
"*metaclass* is the appropriate metaclass, *namespace* is the prepared class "
"namespace and *kwds* is an updated copy of the passed in *kwds* argument "
"with any ``'metaclass'`` entry removed. If no *kwds* argument is passed in, "
"this will be an empty dict."
msgstr ""
"*metaclass* — відповідний метаклас, *namespace* — це підготовлений простір "
"імен класу, а *kwds* — це оновлена копія переданого аргументу *kwds* із "
"видаленням будь-якого запису ``'metaclass'``. Якщо аргумент *kwds* не "
"передано, це буде порожній dict."

#: ../../library/types.rst:60
msgid ""
"The default value for the ``namespace`` element of the returned tuple has "
"changed.  Now an insertion-order-preserving mapping is used when the "
"metaclass does not have a ``__prepare__`` method."
msgstr ""
"Значення за замовчуванням для елемента ``простір імен`` повернутого кортежу "
"змінено. Тепер відображення збереження порядку вставки використовується, "
"коли метаклас не має методу ``__prepare__``."

#: ../../library/types.rst:66
msgid ":ref:`metaclasses`"
msgstr ":ref:`metaclasses`"

#: ../../library/types.rst:67
msgid ""
"Full details of the class creation process supported by these functions"
msgstr "Повні відомості про процес створення класу, який підтримує ці функції"

#: ../../library/types.rst:69
msgid ":pep:`3115` - Metaclasses in Python 3000"
msgstr ":pep:`3115` - Метакласи в Python 3000"

#: ../../library/types.rst:70
msgid "Introduced the ``__prepare__`` namespace hook"
msgstr "Представлено хук простору імен ``__prepare__``"

#: ../../library/types.rst:74
msgid "Resolve MRO entries dynamically as specified by :pep:`560`."
msgstr "Динамічно вирішувати записи MRO, як зазначено :pep:`560`."

#: ../../library/types.rst:76
msgid ""
"This function looks for items in *bases* that are not instances of "
":class:`type`, and returns a tuple where each such object that has an "
":meth:`~object.__mro_entries__` method is replaced with an unpacked result "
"of calling this method.  If a *bases* item is an instance of :class:`type`, "
"or it doesn't have an :meth:`!__mro_entries__` method, then it is included "
"in the return tuple unchanged."
msgstr ""

#: ../../library/types.rst:87
msgid ""
"Return the tuple of objects originally given as the bases of *cls* before "
"the :meth:`~object.__mro_entries__` method has been called on any bases "
"(following the mechanisms laid out in :pep:`560`). This is useful for "
"introspecting :ref:`Generics <user-defined-generics>`."
msgstr ""

#: ../../library/types.rst:92
msgid ""
"For classes that have an ``__orig_bases__`` attribute, this function returns"
" the value of ``cls.__orig_bases__``. For classes without the "
"``__orig_bases__`` attribute, :attr:`cls.__bases__ <type.__bases__>` is "
"returned."
msgstr ""

#: ../../library/types.rst:97
msgid "Examples::"
msgstr "Приклади::"

#: ../../library/types.rst:99
msgid ""
"from typing import TypeVar, Generic, NamedTuple, TypedDict\n"
"\n"
"T = TypeVar(\"T\")\n"
"class Foo(Generic[T]): ...\n"
"class Bar(Foo[int], float): ...\n"
"class Baz(list[str]): ...\n"
"Eggs = NamedTuple(\"Eggs\", [(\"a\", int), (\"b\", str)])\n"
"Spam = TypedDict(\"Spam\", {\"a\": int, \"b\": str})\n"
"\n"
"assert Bar.__bases__ == (Foo, float)\n"
"assert get_original_bases(Bar) == (Foo[int], float)\n"
"\n"
"assert Baz.__bases__ == (list,)\n"
"assert get_original_bases(Baz) == (list[str],)\n"
"\n"
"assert Eggs.__bases__ == (tuple,)\n"
"assert get_original_bases(Eggs) == (NamedTuple,)\n"
"\n"
"assert Spam.__bases__ == (dict,)\n"
"assert get_original_bases(Spam) == (TypedDict,)\n"
"\n"
"assert int.__bases__ == (object,)\n"
"assert get_original_bases(int) == (object,)"
msgstr ""

#: ../../library/types.rst:127
msgid ":pep:`560` - Core support for typing module and generic types"
msgstr ":pep:`560` - Основна підтримка модуля введення та загальних типів"

#: ../../library/types.rst:131
msgid "Standard Interpreter Types"
msgstr "Типи стандартних інтерпретаторів"

#: ../../library/types.rst:133
msgid ""
"This module provides names for many of the types that are required to "
"implement a Python interpreter. It deliberately avoids including some of the"
" types that arise only incidentally during processing such as the "
"``listiterator`` type."
msgstr ""
"Цей модуль надає назви для багатьох типів, необхідних для реалізації "
"інтерпретатора Python. Він навмисно уникає включення деяких типів, які "
"виникають лише випадково під час обробки, таких як тип ``listiterator``."

#: ../../library/types.rst:138
msgid ""
"Typical use of these names is for :func:`isinstance` or :func:`issubclass` "
"checks."
msgstr ""
"Зазвичай ці імена використовуються для перевірок :func:`isinstance` або "
":func:`issubclass`."

#: ../../library/types.rst:142
msgid ""
"If you instantiate any of these types, note that signatures may vary between"
" Python versions."
msgstr ""
"Якщо ви створюєте екземпляр будь-якого з цих типів, зауважте, що підписи "
"можуть відрізнятися в різних версіях Python."

#: ../../library/types.rst:144
msgid "Standard names are defined for the following types:"
msgstr "Стандартні імена визначені для таких типів:"

#: ../../library/types.rst:148
msgid "The type of :data:`None`."
msgstr "Тип :data:`None`."

#: ../../library/types.rst:156
msgid ""
"The type of user-defined functions and functions created by "
":keyword:`lambda`  expressions."
msgstr ""
"Тип визначених користувачем функцій і функцій, створених виразами "
":keyword:`lambda`."

#: ../../library/types.rst:159
msgid ""
"Raises an :ref:`auditing event <auditing>` ``function.__new__`` with "
"argument ``code``."
msgstr ""
"Викликає :ref:`подію аудиту <auditing>` ``function.__new__`` з аргументом "
"``code``."

#: ../../library/types.rst:161
msgid ""
"The audit event only occurs for direct instantiation of function objects, "
"and is not raised for normal compilation."
msgstr ""
"Подія аудиту виникає лише для прямого створення екземплярів функціональних "
"об’єктів і не виникає для звичайної компіляції."

#: ../../library/types.rst:167
msgid ""
"The type of :term:`generator`-iterator objects, created by generator "
"functions."
msgstr ""
"Тип об’єктів :term:`generator`-iterator, створених функціями генератора."

#: ../../library/types.rst:173
msgid ""
"The type of :term:`coroutine` objects, created by :keyword:`async def` "
"functions."
msgstr ""
"Тип об’єктів :term:`coroutine`, створених функціями :keyword:`async def`."

#: ../../library/types.rst:181
msgid ""
"The type of :term:`asynchronous generator`-iterator objects, created by "
"asynchronous generator functions."
msgstr ""
"Тип об’єктів :term:`asynchronous generator`-iterator, створених функціями "
"асинхронного генератора."

#: ../../library/types.rst:191
msgid ""
"The type of :ref:`code objects <code-objects>` such as returned by "
":func:`compile`."
msgstr ""

#: ../../library/types.rst:193
msgid ""
"Raises an :ref:`auditing event <auditing>` ``code.__new__`` with arguments "
"``code``, ``filename``, ``name``, ``argcount``, ``posonlyargcount``, "
"``kwonlyargcount``, ``nlocals``, ``stacksize``, ``flags``."
msgstr ""
"Викликає :ref:`подію аудиту <auditing>` ``code.__new__`` з аргументами "
"``code``, ``filename``, ``name``, ``argcount``, "
"``posonlyargcount``,``kwonlyargcount``, ``nlocals``, ``stacksize``, "
"``flags``."

#: ../../library/types.rst:195
msgid ""
"Note that the audited arguments may not match the names or positions "
"required by the initializer.  The audit event only occurs for direct "
"instantiation of code objects, and is not raised for normal compilation."
msgstr ""
"Зауважте, що перевірені аргументи можуть не відповідати іменам або позиціям,"
" які вимагає ініціалізатор. Подія аудиту виникає лише для прямого створення "
"екземпляра об’єктів коду та не виникає для звичайної компіляції."

#: ../../library/types.rst:201
msgid ""
"The type for cell objects: such objects are used as containers for a "
"function's :term:`closure variables <closure variable>`."
msgstr ""

#: ../../library/types.rst:209
msgid "The type of methods of user-defined class instances."
msgstr "Тип методів екземплярів класу, визначеного користувачем."

#: ../../library/types.rst:215
msgid ""
"The type of built-in functions like :func:`len` or :func:`sys.exit`, and "
"methods of built-in classes.  (Here, the term \"built-in\" means \"written "
"in C\".)"
msgstr ""
"Тип вбудованих функцій, таких як :func:`len` або :func:`sys.exit`, і методи "
"вбудованих класів. (Тут термін \"вбудований\" означає \"написаний на C\".)"

#: ../../library/types.rst:222
msgid ""
"The type of methods of some built-in data types and base classes such as "
":meth:`object.__init__` or :meth:`object.__lt__`."
msgstr ""
"Тип методів деяких вбудованих типів даних і базових класів, таких як "
":meth:`object.__init__` або :meth:`object.__lt__`."

#: ../../library/types.rst:230
msgid ""
"The type of *bound* methods of some built-in data types and base classes. "
"For example it is the type of :code:`object().__str__`."
msgstr ""
"Тип *зв'язаних* методів деяких вбудованих типів даних і базових класів. "
"Наприклад, це тип :code:`object().__str__`."

#: ../../library/types.rst:238
msgid "The type of :data:`NotImplemented`."
msgstr "Тип :data:`NotImplemented`."

#: ../../library/types.rst:245
msgid ""
"The type of methods of some built-in data types such as :meth:`str.join`."
msgstr "Тип методів деяких вбудованих типів даних, таких як :meth:`str.join`."

#: ../../library/types.rst:252
msgid ""
"The type of *unbound* class methods of some built-in data types such as "
"``dict.__dict__['fromkeys']``."
msgstr ""
"Тип *незв’язаних* методів класу деяких вбудованих типів даних, таких як "
"``dict.__dict__['fromkeys']``."

#: ../../library/types.rst:260
msgid ""
"The type of :term:`modules <module>`. The constructor takes the name of the "
"module to be created and optionally its :term:`docstring`."
msgstr ""
"Тип :term:`modules <module>`. Конструктор приймає назву модуля, який буде "
"створено, і, за бажанням, його :term:`docstring`."

#: ../../library/types.rst:265
msgid ":ref:`Documentation on module objects <module-objects>`"
msgstr ""

#: ../../library/types.rst:266
msgid ""
"Provides details on the special attributes that can be found on instances of"
" :class:`!ModuleType`."
msgstr ""

#: ../../library/types.rst:269
msgid ":func:`importlib.util.module_from_spec`"
msgstr ""

#: ../../library/types.rst:270
msgid ""
"Modules created using the :class:`!ModuleType` constructor are created with "
"many of their special attributes unset or set to default values. "
":func:`!module_from_spec` provides a more robust way of creating "
":class:`!ModuleType` instances which ensures the various attributes are set "
"appropriately."
msgstr ""

#: ../../library/types.rst:278
msgid "The type of :data:`Ellipsis`."
msgstr "Тип :data:`Ellipsis`."

#: ../../library/types.rst:284
msgid ""
"The type of :ref:`parameterized generics <types-genericalias>` such as "
"``list[int]``."
msgstr ""
"Тип :ref:`параметризованих генериків <types-genericalias>`, наприклад "
"``list[int]``."

#: ../../library/types.rst:287
msgid ""
"``t_origin`` should be a non-parameterized generic class, such as ``list``, "
"``tuple`` or ``dict``.  ``t_args`` should be a :class:`tuple` (possibly of "
"length 1) of types which parameterize ``t_origin``::"
msgstr ""
"``t_origin`` має бути непараметризованим загальним класом, таким як "
"``list``, ``tuple`` або ``dict``. ``t_args`` має бути :class:`tuple` "
"(можливо, довжиною 1) типів, які параметризують ``t_origin``::"

#: ../../library/types.rst:291
msgid ""
">>> from types import GenericAlias\n"
"\n"
">>> list[int] == GenericAlias(list, (int,))\n"
"True\n"
">>> dict[str, int] == GenericAlias(dict, (str, int))\n"
"True"
msgstr ""

#: ../../library/types.rst:300
msgid "This type can now be subclassed."
msgstr "Цей тип тепер може бути підкласом."

#: ../../library/types.rst:305
msgid ":ref:`Generic Alias Types<types-genericalias>`"
msgstr ":ref:`Загальні типи псевдонімів <types-genericalias>`"

#: ../../library/types.rst:306
msgid "In-depth documentation on instances of :class:`!types.GenericAlias`"
msgstr ""

#: ../../library/types.rst:308
msgid ":pep:`585` - Type Hinting Generics In Standard Collections"
msgstr ":pep:`585` - Універсальні підказки типів у стандартних колекціях"

#: ../../library/types.rst:309
msgid "Introducing the :class:`!types.GenericAlias` class"
msgstr ""

#: ../../library/types.rst:313
msgid "The type of :ref:`union type expressions<types-union>`."
msgstr "Тип :ref:`виразів типу union <types-union>`."

#: ../../library/types.rst:319
msgid ""
"The type of traceback objects such as found in "
"``sys.exception().__traceback__``."
msgstr ""

#: ../../library/types.rst:321
msgid ""
"See :ref:`the language reference <traceback-objects>` for details of the "
"available attributes and operations, and guidance on creating tracebacks "
"dynamically."
msgstr ""
"Перегляньте :ref:`мовну довідку <traceback-objects>`, щоб отримати детальну "
"інформацію про доступні атрибути та операції, а також вказівки щодо "
"динамічного створення трасування."

#: ../../library/types.rst:328
msgid ""
"The type of :ref:`frame objects <frame-objects>` such as found in "
":attr:`tb.tb_frame <traceback.tb_frame>` if ``tb`` is a traceback object."
msgstr ""

#: ../../library/types.rst:334
msgid ""
"The type of objects defined in extension modules with ``PyGetSetDef``, such "
"as :attr:`FrameType.f_locals <frame.f_locals>` or ``array.array.typecode``. "
"This type is used as descriptor for object attributes; it has the same "
"purpose as the :class:`property` type, but for classes defined in extension "
"modules."
msgstr ""

#: ../../library/types.rst:343
msgid ""
"The type of objects defined in extension modules with ``PyMemberDef``, such "
"as ``datetime.timedelta.days``.  This type is used as descriptor for simple "
"C data members which use standard conversion functions; it has the same "
"purpose as the :class:`property` type, but for classes defined in extension "
"modules."
msgstr ""
"Тип об’єктів, визначених у модулях розширення за допомогою ``PyMemberDef``, "
"наприклад ``datetime.timedelta.days``. Цей тип використовується як "
"дескриптор для простих елементів даних C, які використовують стандартні "
"функції перетворення; він має те саме призначення, що й тип "
":class:`property`, але для класів, визначених у модулях розширення."

#: ../../library/types.rst:348
msgid ""
"In addition, when a class is defined with a :attr:`~object.__slots__` "
"attribute, then for each slot, an instance of :class:`!MemberDescriptorType`"
" will be added as an attribute on the class. This allows the slot to appear "
"in the class's :attr:`~type.__dict__`."
msgstr ""

#: ../../library/types.rst:354
msgid ""
"In other implementations of Python, this type may be identical to "
"``GetSetDescriptorType``."
msgstr ""
"В інших реалізаціях Python цей тип може бути ідентичним "
"``GetSetDescriptorType``."

#: ../../library/types.rst:359
msgid ""
"Read-only proxy of a mapping. It provides a dynamic view on the mapping's "
"entries, which means that when the mapping changes, the view reflects these "
"changes."
msgstr ""
"Проксі зіставлення лише для читання. Він забезпечує динамічний перегляд "
"записів відображення, що означає, що коли відображення змінюється, подання "
"відображає ці зміни."

#: ../../library/types.rst:367
msgid ""
"Updated to support the new union (``|``) operator from :pep:`584`, which "
"simply delegates to the underlying mapping."
msgstr ""
"Оновлено для підтримки нового оператора об’єднання (``|``) з :pep:`584`, "
"який просто делегує базове відображення."

#: ../../library/types.rst:372
msgid ""
"Return ``True`` if the underlying mapping has a key *key*, else ``False``."
msgstr ""
"Повертає ``True``, якщо базове зіставлення має ключ *key*, інакше ``False``."

#: ../../library/types.rst:377
msgid ""
"Return the item of the underlying mapping with key *key*.  Raises a "
":exc:`KeyError` if *key* is not in the underlying mapping."
msgstr ""
"Поверніть елемент основного відображення за допомогою ключа *key*. Викликає "
":exc:`KeyError`, якщо *key* не в базовому відображенні."

#: ../../library/types.rst:382
msgid ""
"Return an iterator over the keys of the underlying mapping.  This is a "
"shortcut for ``iter(proxy.keys())``."
msgstr ""
"Повертає ітератор над ключами основного відображення. Це ярлик для "
"``iter(proxy.keys())``."

#: ../../library/types.rst:387
msgid "Return the number of items in the underlying mapping."
msgstr "Повертає кількість елементів у базовому відображенні."

#: ../../library/types.rst:391
msgid "Return a shallow copy of the underlying mapping."
msgstr "Повернути поверхневу копію основного відображення."

#: ../../library/types.rst:395
msgid ""
"Return the value for *key* if *key* is in the underlying mapping, else "
"*default*.  If *default* is not given, it defaults to ``None``, so that this"
" method never raises a :exc:`KeyError`."
msgstr ""
"Повертає значення для *key*, якщо *key* є в базовому відображенні, інакше "
"*за замовчуванням*. Якщо *default* не вказано, за замовчуванням буде "
"``None``, тому цей метод ніколи не викликає :exc:`KeyError`."

#: ../../library/types.rst:401
msgid ""
"Return a new view of the underlying mapping's items (``(key, value)`` "
"pairs)."
msgstr ""
"Повертає нове подання базових елементів зіставлення (пар \"(ключ, "
"значення)\")."

#: ../../library/types.rst:406
msgid "Return a new view of the underlying mapping's keys."
msgstr "Повернути нове подання ключів основного зіставлення."

#: ../../library/types.rst:410
msgid "Return a new view of the underlying mapping's values."
msgstr "Повернути нове подання значень основного зіставлення."

#: ../../library/types.rst:414
msgid "Return a reverse iterator over the keys of the underlying mapping."
msgstr "Повертає зворотний ітератор над ключами основного відображення."

#: ../../library/types.rst:420
msgid "Return a hash of the underlying mapping."
msgstr ""

#: ../../library/types.rst:426
msgid "The type of :ref:`capsule objects <capsules>`."
msgstr ""

#: ../../library/types.rst:432
msgid "Additional Utility Classes and Functions"
msgstr "Додаткові корисні класи та функції"

#: ../../library/types.rst:436
msgid ""
"A simple :class:`object` subclass that provides attribute access to its "
"namespace, as well as a meaningful repr."
msgstr ""
"Простий підклас :class:`object`, який забезпечує доступ атрибутів до свого "
"простору імен, а також значуще відображення."

#: ../../library/types.rst:439
msgid ""
"Unlike :class:`object`, with :class:`!SimpleNamespace` you can add and "
"remove attributes."
msgstr ""

#: ../../library/types.rst:442
msgid ""
":py:class:`SimpleNamespace` objects may be initialized in the same way as "
":class:`dict`: either with keyword arguments, with a single positional "
"argument, or with both. When initialized with keyword arguments, those are "
"directly added to the underlying namespace. Alternatively, when initialized "
"with a positional argument, the underlying namespace will be updated with "
"key-value pairs from that argument (either a mapping object or an "
":term:`iterable` object producing key-value pairs). All such keys must be "
"strings."
msgstr ""

#: ../../library/types.rst:453
msgid "The type is roughly equivalent to the following code::"
msgstr "Тип приблизно еквівалентний такому коду::"

#: ../../library/types.rst:455
msgid ""
"class SimpleNamespace:\n"
"    def __init__(self, mapping_or_iterable=(), /, **kwargs):\n"
"        self.__dict__.update(mapping_or_iterable)\n"
"        self.__dict__.update(kwargs)\n"
"\n"
"    def __repr__(self):\n"
"        items = (f\"{k}={v!r}\" for k, v in self.__dict__.items())\n"
"        return \"{}({})\".format(type(self).__name__, \", \".join(items))\n"
"\n"
"    def __eq__(self, other):\n"
"        if isinstance(self, SimpleNamespace) and isinstance(other, SimpleNamespace):\n"
"           return self.__dict__ == other.__dict__\n"
"        return NotImplemented"
msgstr ""

#: ../../library/types.rst:469
msgid ""
"``SimpleNamespace`` may be useful as a replacement for ``class NS: pass``. "
"However, for a structured record type use :func:`~collections.namedtuple` "
"instead."
msgstr ""
"``SimpleNamespace`` може бути корисним як заміна ``class NS: pass``. Однак "
"для структурованого типу запису замість цього використовуйте "
":func:`~collections.namedtuple`."

#: ../../library/types.rst:473
msgid ""
":class:`!SimpleNamespace` objects are supported by :func:`copy.replace`."
msgstr ""

#: ../../library/types.rst:477
msgid ""
"Attribute order in the repr changed from alphabetical to insertion (like "
"``dict``)."
msgstr ""
"Порядок атрибутів у відображенні змінено з алфавітного на вставлення "
"(наприклад, ``dict``)."

#: ../../library/types.rst:481
msgid "Added support for an optional positional argument."
msgstr ""

#: ../../library/types.rst:486
msgid "Route attribute access on a class to __getattr__."
msgstr "Направте доступ до атрибутів класу до __getattr__."

#: ../../library/types.rst:488
msgid ""
"This is a descriptor, used to define attributes that act differently when "
"accessed through an instance and through a class.  Instance access remains "
"normal, but access to an attribute through a class will be routed to the "
"class's __getattr__ method; this is done by raising AttributeError."
msgstr ""
"Це дескриптор, який використовується для визначення атрибутів, які діють по-"
"різному при доступі через примірник і через клас. Доступ до екземпляра "
"залишається звичайним, але доступ до атрибута через клас буде направлено до "
"методу __getattr__ класу; це робиться шляхом виклику AttributeError."

#: ../../library/types.rst:493
msgid ""
"This allows one to have properties active on an instance, and have virtual "
"attributes on the class with the same name (see :class:`enum.Enum` for an "
"example)."
msgstr ""
"Це дозволяє мати активні властивості в екземплярі та мати віртуальні "
"атрибути в класі з таким же іменем (див. :class:`enum.Enum` для прикладу)."

#: ../../library/types.rst:500
msgid "Coroutine Utility Functions"
msgstr "Корисні функції співпрограми"

#: ../../library/types.rst:504
msgid ""
"This function transforms a :term:`generator` function into a "
":term:`coroutine function` which returns a generator-based coroutine. The "
"generator-based coroutine is still a :term:`generator iterator`, but is also"
" considered to be a :term:`coroutine` object and is :term:`awaitable`.  "
"However, it may not necessarily implement the :meth:`~object.__await__` "
"method."
msgstr ""

#: ../../library/types.rst:511
msgid "If *gen_func* is a generator function, it will be modified in-place."
msgstr "Якщо *gen_func* є функцією генератора, її буде змінено на місці."

#: ../../library/types.rst:513
msgid ""
"If *gen_func* is not a generator function, it will be wrapped. If it returns"
" an instance of :class:`collections.abc.Generator`, the instance will be "
"wrapped in an *awaitable* proxy object.  All other types of objects will be "
"returned as is."
msgstr ""
"Якщо *gen_func* не є функцією генератора, її буде загорнуто. Якщо він "
"повертає екземпляр :class:`collections.abc.Generator`, екземпляр буде "
"загорнутий в *очікуваний* проксі-об’єкт. Усі інші типи об’єктів буде "
"повернено як є."

#: ../../library/types.rst:189
msgid "built-in function"
msgstr "вбудована функція"

#: ../../library/types.rst:189
msgid "compile"
msgstr ""
