# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Dmytro Kazanzhy, 2024
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-11-19 01:00+0000\n"
"PO-Revision-Date: 2021-06-28 01:11+0000\n"
"Last-Translator: Dmytro Kazanzhy, 2024\n"
"Language-Team: Ukrainian (https://app.transifex.com/python-doc/teams/5390/uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != 11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % 100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || (n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

#: ../../library/pty.rst:2
msgid ":mod:`!pty` --- Pseudo-terminal utilities"
msgstr ""

#: ../../library/pty.rst:11
msgid "**Source code:** :source:`Lib/pty.py`"
msgstr "**Вихідний код:** :source:`Lib/pty.py`"

#: ../../library/pty.rst:15
msgid ""
"The :mod:`pty` module defines operations for handling the pseudo-terminal "
"concept: starting another process and being able to write to and read from "
"its controlling terminal programmatically."
msgstr ""
"Модуль :mod:`pty` визначає операції для обробки концепції псевдотерміналу: "
"запуск іншого процесу та можливість програмно записувати та читати з його "
"керуючого терміналу."

#: ../../library/pty.rst:19
msgid "Availability"
msgstr ""

#: ../../library/pty.rst:21
msgid ""
"Pseudo-terminal handling is highly platform dependent. This code is mainly "
"tested on Linux, FreeBSD, and macOS (it is supposed to work on other POSIX "
"platforms but it's not been thoroughly tested)."
msgstr ""
"Робота з псевдотерміналом сильно залежить від платформи. Цей код в основному"
" тестується на Linux, FreeBSD і macOS (передбачається, що він працює на "
"інших платформах POSIX, але не був ретельно протестований)."

#: ../../library/pty.rst:25
msgid "The :mod:`pty` module defines the following functions:"
msgstr "Модуль :mod:`pty` визначає такі функції:"

#: ../../library/pty.rst:30
msgid ""
"Fork. Connect the child's controlling terminal to a pseudo-terminal. Return "
"value is ``(pid, fd)``. Note that the child  gets *pid* 0, and the *fd* is "
"*invalid*. The parent's return value is the *pid* of the child, and *fd* is "
"a file descriptor connected to the child's controlling terminal (and also to"
" the child's standard input and output)."
msgstr ""
"Вилка. Підключіть керуючий термінал дитини до псевдотерміналу. Повернене "
"значення: ``(pid, fd)``. Зверніть увагу, що дитина отримує *pid* 0, а *fd* є"
" *недійсним*. Значенням, що повертає батьківський елемент, є *pid* "
"дочірнього, а *fd* — це дескриптор файлу, підключений до керуючого терміналу"
" дочірнього (а також до стандартного введення та виведення дочірнього)."

#: ../../library/pty.rst:36
msgid ""
"On macOS the use of this function is unsafe when mixed with using higher-"
"level system APIs, and that includes using :mod:`urllib.request`."
msgstr ""

#: ../../library/pty.rst:42
msgid ""
"Open a new pseudo-terminal pair, using :func:`os.openpty` if possible, or "
"emulation code for generic Unix systems. Return a pair of file descriptors "
"``(master, slave)``, for the master and the slave end, respectively."
msgstr ""
"Відкрийте нову пару псевдотерміналів, використовуючи :func:`os.openpty`, "
"якщо можливо, або код емуляції для загальних систем Unix. Повертає пару "
"файлових дескрипторів ``(master, slave)`` для головного та підлеглого кінця "
"відповідно."

#: ../../library/pty.rst:49
msgid ""
"Spawn a process, and connect its controlling terminal with the current "
"process's standard io. This is often used to baffle programs which insist on"
" reading from the controlling terminal. It is expected that the process "
"spawned behind the pty will eventually terminate, and when it does *spawn* "
"will return."
msgstr ""
"Створіть процес і підключіть його керуючий термінал до стандартного io "
"поточного процесу. Це часто використовується, щоб збентежити програми, які "
"наполягають на читанні з керуючого терміналу. Очікується, що процес, "
"породжений за pty, зрештою завершиться, і коли це станеться, *spawn* "
"повернеться."

#: ../../library/pty.rst:55
msgid ""
"A loop copies STDIN of the current process to the child and data received "
"from the child to STDOUT of the current process. It is not signaled to the "
"child if STDIN of the current process closes down."
msgstr ""
"Цикл копіює STDIN поточного процесу до дочірнього процесу, а дані, отримані "
"від дочірнього процесу, до STDOUT поточного процесу. Дочірній процес не "
"повідомляється, якщо STDIN поточного процесу закривається."

#: ../../library/pty.rst:59
msgid ""
"The functions *master_read* and *stdin_read* are passed a file descriptor "
"which they should read from, and they should always return a byte string. In"
" order to force spawn to return before the child process exits an empty byte"
" array should be returned to signal end of file."
msgstr ""
"Функціям *master_read* і *stdin_read* передається дескриптор файлу, з якого "
"вони повинні читати, і вони завжди повинні повертати рядок байтів. Щоб "
"змусити spawn повернутися до того, як дочірній процес завершить роботу, слід"
" повернути порожній масив байтів до кінця файлу."

#: ../../library/pty.rst:64
msgid ""
"The default implementation for both functions will read and return up to "
"1024 bytes each time the function is called. The *master_read* callback is "
"passed the pseudoterminal’s master file descriptor to read output from the "
"child process, and *stdin_read* is passed file descriptor 0, to read from "
"the parent process's standard input."
msgstr ""
"Реалізація за замовчуванням для обох функцій буде читати та повертати до "
"1024 байтів кожного разу, коли функція викликається. Зворотний виклик "
"*master_read* передається дескриптору головного файлу псевдотерміналу для "
"читання виводу з дочірнього процесу, а *stdin_read* передається дескриптор "
"файлу 0 для читання зі стандартного введення батьківського процесу."

#: ../../library/pty.rst:70
msgid ""
"Returning an empty byte string from either callback is interpreted as an "
"end-of-file (EOF) condition, and that callback will not be called after "
"that. If *stdin_read* signals EOF the controlling terminal can no longer "
"communicate with the parent process OR the child process. Unless the child "
"process will quit without any input, *spawn* will then loop forever. If "
"*master_read* signals EOF the same behavior results (on linux at least)."
msgstr ""
"Повернення порожнього байтового рядка з будь-якого зворотного виклику "
"інтерпретується як умова кінця файлу (EOF), і цей зворотний виклик не буде "
"викликано після цього. Якщо *stdin_read* сигналізує EOF, керуючий термінал "
"більше не може спілкуватися з батьківським процесом АБО дочірнім процесом. "
"Якщо дочірній процес не завершить роботу без будь-яких вхідних даних, "
"*spawn* буде зациклюватися назавжди. Якщо *master_read* сигналізує EOF, це "
"призводить до такої ж поведінки (принаймні в Linux)."

#: ../../library/pty.rst:77
msgid ""
"Return the exit status value from :func:`os.waitpid` on the child process."
msgstr ""
"Повертає значення статусу виходу з :func:`os.waitpid` дочірнього процесу."

#: ../../library/pty.rst:79
msgid ""
":func:`os.waitstatus_to_exitcode` can be used to convert the exit status "
"into an exit code."
msgstr ""

#: ../../library/pty.rst:82
msgid ""
"Raises an :ref:`auditing event <auditing>` ``pty.spawn`` with argument "
"``argv``."
msgstr ""
"Викликає :ref:`подію аудиту <auditing>` ``pty.spawn`` з аргументом ``argv``."

#: ../../library/pty.rst:84
msgid ""
":func:`spawn` now returns the status value from :func:`os.waitpid` on the "
"child process."
msgstr ""
":func:`spawn` тепер повертає значення стану з :func:`os.waitpid` дочірнього "
"процесу."

#: ../../library/pty.rst:89
msgid "Example"
msgstr "приклад"

#: ../../library/pty.rst:93
msgid ""
"The following program acts like the Unix command :manpage:`script(1)`, using"
" a pseudo-terminal to record all input and output of a terminal session in a"
" \"typescript\". ::"
msgstr ""
"Наступна програма діє як команда Unix :manpage:`script(1)`, використовуючи "
"псевдотермінал для запису всіх вхідних і вихідних даних сеансу терміналу в "
"\"typescript\". ::"

#: ../../library/pty.rst:97
msgid ""
"import argparse\n"
"import os\n"
"import pty\n"
"import sys\n"
"import time\n"
"\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument('-a', dest='append', action='store_true')\n"
"parser.add_argument('-p', dest='use_python', action='store_true')\n"
"parser.add_argument('filename', nargs='?', default='typescript')\n"
"options = parser.parse_args()\n"
"\n"
"shell = sys.executable if options.use_python else os.environ.get('SHELL', 'sh')\n"
"filename = options.filename\n"
"mode = 'ab' if options.append else 'wb'\n"
"\n"
"with open(filename, mode) as script:\n"
"    def read(fd):\n"
"        data = os.read(fd, 1024)\n"
"        script.write(data)\n"
"        return data\n"
"\n"
"    print('Script started, file is', filename)\n"
"    script.write(('Script started on %s\\n' % time.asctime()).encode())\n"
"\n"
"    pty.spawn(shell, read)\n"
"\n"
"    script.write(('Script done on %s\\n' % time.asctime()).encode())\n"
"    print('Script done, file is', filename)"
msgstr ""
