# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Dmytro Kazanzhy, 2022
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-11-19 01:00+0000\n"
"PO-Revision-Date: 2021-06-28 01:10+0000\n"
"Last-Translator: Dmytro Kazanzhy, 2022\n"
"Language-Team: Ukrainian (https://app.transifex.com/python-doc/teams/5390/uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != 11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % 100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || (n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

#: ../../library/numbers.rst:2
msgid ":mod:`!numbers` --- Numeric abstract base classes"
msgstr ""

#: ../../library/numbers.rst:7
msgid "**Source code:** :source:`Lib/numbers.py`"
msgstr "**Вихідний код:** :source:`Lib/numbers.py`"

#: ../../library/numbers.rst:11
msgid ""
"The :mod:`!numbers` module (:pep:`3141`) defines a hierarchy of numeric "
":term:`abstract base classes <abstract base class>` which progressively "
"define more operations.  None of the types defined in this module are "
"intended to be instantiated."
msgstr ""

#: ../../library/numbers.rst:18
msgid ""
"The root of the numeric hierarchy. If you just want to check if an argument "
"*x* is a number, without caring what kind, use ``isinstance(x, Number)``."
msgstr ""
"Корінь числової ієрархії. Якщо ви просто хочете перевірити, чи є аргумент "
"*x* числом, не звертаючи уваги на те, якого типу, використовуйте "
"``isinstance(x, Number)``."

#: ../../library/numbers.rst:23
msgid "The numeric tower"
msgstr "Числова вежа"

#: ../../library/numbers.rst:27
msgid ""
"Subclasses of this type describe complex numbers and include the operations "
"that work on the built-in :class:`complex` type. These are: conversions to "
":class:`complex` and :class:`bool`, :attr:`.real`, :attr:`.imag`, ``+``, "
"``-``, ``*``, ``/``, ``**``, :func:`abs`, :meth:`conjugate`, ``==``, and "
"``!=``. All except ``-`` and ``!=`` are abstract."
msgstr ""
"Підкласи цього типу описують комплексні числа та включають операції, які "
"працюють із вбудованим типом :class:`complex`. Це: перетворення на "
":class:`complex` і :class:`bool`, :attr:`.real`, :attr:`.imag`, ``+``, "
"``-``, ``* ``, ``/``, ``**``, :func:`abs`, :meth:`conjugate`, ``==`` і "
"``!=``. Усі, крім ``-`` і ``!=``, є абстрактними."

#: ../../library/numbers.rst:35
msgid "Abstract. Retrieves the real component of this number."
msgstr "Анотація. Отримує дійсний компонент цього числа."

#: ../../library/numbers.rst:39
msgid "Abstract. Retrieves the imaginary component of this number."
msgstr "Анотація. Отримує уявний компонент цього числа."

#: ../../library/numbers.rst:43
msgid ""
"Abstract. Returns the complex conjugate. For example, ``(1+3j).conjugate() "
"== (1-3j)``."
msgstr ""
"Анотація. Повертає комплексне сполучення. Наприклад, ``(1+3j).conjugate() =="
" (1-3j)``."

#: ../../library/numbers.rst:48
msgid ""
"To :class:`Complex`, :class:`!Real` adds the operations that work on real "
"numbers."
msgstr ""

#: ../../library/numbers.rst:51
msgid ""
"In short, those are: a conversion to :class:`float`, :func:`math.trunc`, "
":func:`round`, :func:`math.floor`, :func:`math.ceil`, :func:`divmod`, "
"``//``, ``%``, ``<``, ``<=``, ``>``, and ``>=``."
msgstr ""
"Якщо коротко, це: перетворення на :class:`float`, :func:`math.trunc`, "
":func:`round`, :func:`math.floor`, :func:`math.ceil`, :func:`divmod`, "
"``//``, ``%``, ``<``, ``<=``, ``>`` і ``>=``."

#: ../../library/numbers.rst:55
msgid ""
"Real also provides defaults for :func:`complex`, :attr:`~Complex.real`, "
":attr:`~Complex.imag`, and :meth:`~Complex.conjugate`."
msgstr ""
"Real також надає значення за замовчуванням для :func:`complex`, "
":attr:`~Complex.real`, :attr:`~Complex.imag` і :meth:`~Complex.conjugate`."

#: ../../library/numbers.rst:61
msgid ""
"Subtypes :class:`Real` and adds :attr:`~Rational.numerator` and "
":attr:`~Rational.denominator` properties. It also provides a default for "
":func:`float`."
msgstr ""

#: ../../library/numbers.rst:65
msgid ""
"The :attr:`~Rational.numerator` and :attr:`~Rational.denominator` values "
"should be instances of :class:`Integral` and should be in lowest terms with "
":attr:`~Rational.denominator` positive."
msgstr ""

#: ../../library/numbers.rst:71 ../../library/numbers.rst:75
msgid "Abstract."
msgstr "Анотація."

#: ../../library/numbers.rst:80
msgid ""
"Subtypes :class:`Rational` and adds a conversion to :class:`int`.  Provides "
"defaults for :func:`float`, :attr:`~Rational.numerator`, and "
":attr:`~Rational.denominator`.  Adds abstract methods for :func:`pow` with "
"modulus and bit-string operations: ``<<``, ``>>``, ``&``, ``^``, ``|``, "
"``~``."
msgstr ""
"Підтипує :class:`Rational` і додає перетворення до :class:`int`. Надає "
"значення за замовчуванням для :func:`float`, :attr:`~Rational.numerator` і "
":attr:`~Rational.denominator`. Додає абстрактні методи для :func:`pow` з "
"операціями модуля та бітового рядка: ``<<``, ``>>``, ``&``, ``^``, ``|``, "
"``~``."

#: ../../library/numbers.rst:88
msgid "Notes for type implementers"
msgstr ""

#: ../../library/numbers.rst:90
msgid ""
"Implementers should be careful to make equal numbers equal and hash them to "
"the same values. This may be subtle if there are two different extensions of"
" the real numbers. For example, :class:`fractions.Fraction` implements "
":func:`hash` as follows::"
msgstr ""

#: ../../library/numbers.rst:95
msgid ""
"def __hash__(self):\n"
"    if self.denominator == 1:\n"
"        # Get integers right.\n"
"        return hash(self.numerator)\n"
"    # Expensive check, but definitely correct.\n"
"    if self == float(self):\n"
"        return hash(float(self))\n"
"    else:\n"
"        # Use tuple's hash to avoid a high collision rate on\n"
"        # simple fractions.\n"
"        return hash((self.numerator, self.denominator))"
msgstr ""

#: ../../library/numbers.rst:109
msgid "Adding More Numeric ABCs"
msgstr "Додавання додаткових числових букв"

#: ../../library/numbers.rst:111
msgid ""
"There are, of course, more possible ABCs for numbers, and this would be a "
"poor hierarchy if it precluded the possibility of adding those. You can add "
"``MyFoo`` between :class:`Complex` and :class:`Real` with::"
msgstr ""
"Звичайно, існує більше можливих азбуки для чисел, і це була б погана "
"ієрархія, якби вона виключала можливість їх додавання. Ви можете додати "
"``MyFoo`` між :class:`Complex` і :class:`Real` за допомогою::"

#: ../../library/numbers.rst:116
msgid ""
"class MyFoo(Complex): ...\n"
"MyFoo.register(Real)"
msgstr ""

#: ../../library/numbers.rst:123
msgid "Implementing the arithmetic operations"
msgstr "Реалізація арифметичних дій"

#: ../../library/numbers.rst:125
msgid ""
"We want to implement the arithmetic operations so that mixed-mode operations"
" either call an implementation whose author knew about the types of both "
"arguments, or convert both to the nearest built in type and do the operation"
" there. For subtypes of :class:`Integral`, this means that "
":meth:`~object.__add__` and :meth:`~object.__radd__` should be defined as::"
msgstr ""

#: ../../library/numbers.rst:132
msgid ""
"class MyIntegral(Integral):\n"
"\n"
"    def __add__(self, other):\n"
"        if isinstance(other, MyIntegral):\n"
"            return do_my_adding_stuff(self, other)\n"
"        elif isinstance(other, OtherTypeIKnowAbout):\n"
"            return do_my_other_adding_stuff(self, other)\n"
"        else:\n"
"            return NotImplemented\n"
"\n"
"    def __radd__(self, other):\n"
"        if isinstance(other, MyIntegral):\n"
"            return do_my_adding_stuff(other, self)\n"
"        elif isinstance(other, OtherTypeIKnowAbout):\n"
"            return do_my_other_adding_stuff(other, self)\n"
"        elif isinstance(other, Integral):\n"
"            return int(other) + int(self)\n"
"        elif isinstance(other, Real):\n"
"            return float(other) + float(self)\n"
"        elif isinstance(other, Complex):\n"
"            return complex(other) + complex(self)\n"
"        else:\n"
"            return NotImplemented"
msgstr ""

#: ../../library/numbers.rst:157
msgid ""
"There are 5 different cases for a mixed-type operation on subclasses of "
":class:`Complex`. I'll refer to all of the above code that doesn't refer to "
"``MyIntegral`` and ``OtherTypeIKnowAbout`` as \"boilerplate\". ``a`` will be"
" an instance of ``A``, which is a subtype of :class:`Complex` (``a : A <: "
"Complex``), and ``b : B <: Complex``. I'll consider ``a + b``:"
msgstr ""
"Є 5 різних випадків для операції змішаного типу над підкласами "
":class:`Complex`. Я буду називати весь наведений вище код, який не "
"посилається на ``MyIntegral`` і ``OtherTypeIKnowAbout``, як \"шаблонний\". "
"``a`` буде екземпляром ``A``, який є підтипом :class:`Complex` (``a : A <: "
"Complex``), і ``b : B <: Complex``. Я розглядаю ``a + b``:"

#: ../../library/numbers.rst:164
msgid ""
"If ``A`` defines an :meth:`~object.__add__` which accepts ``b``, all is "
"well."
msgstr ""

#: ../../library/numbers.rst:166
msgid ""
"If ``A`` falls back to the boilerplate code, and it were to return a value "
"from :meth:`~object.__add__`, we'd miss the possibility that ``B`` defines a"
" more intelligent :meth:`~object.__radd__`, so the boilerplate should return"
" :data:`NotImplemented` from :meth:`!__add__`. (Or ``A`` may not implement "
":meth:`!__add__` at all.)"
msgstr ""

#: ../../library/numbers.rst:172
msgid ""
"Then ``B``'s :meth:`~object.__radd__` gets a chance. If it accepts ``a``, "
"all is well."
msgstr ""

#: ../../library/numbers.rst:174
msgid ""
"If it falls back to the boilerplate, there are no more possible methods to "
"try, so this is where the default implementation should live."
msgstr ""
"Якщо він повернеться до шаблону, більше не буде можливих методів, які можна "
"спробувати, тому тут має бути реалізація за замовчуванням."

#: ../../library/numbers.rst:177
msgid ""
"If ``B <: A``, Python tries ``B.__radd__`` before ``A.__add__``. This is ok,"
" because it was implemented with knowledge of ``A``, so it can handle those "
"instances before delegating to :class:`Complex`."
msgstr ""
"Якщо ``B <: A``, Python намагається ``B.__radd__`` перед ``A.__add__``. Це "
"нормально, тому що його було реалізовано зі знанням ``A``, тому він може "
"обробити ці випадки перед делегуванням :class:`Complex`."

#: ../../library/numbers.rst:182
msgid ""
"If ``A <: Complex`` and ``B <: Real`` without sharing any other knowledge, "
"then the appropriate shared operation is the one involving the built in "
":class:`complex`, and both :meth:`~object.__radd__` s land there, so ``a+b "
"== b+a``."
msgstr ""

#: ../../library/numbers.rst:187
msgid ""
"Because most of the operations on any given type will be very similar, it "
"can be useful to define a helper function which generates the forward and "
"reverse instances of any given operator. For example, "
":class:`fractions.Fraction` uses::"
msgstr ""
"Оскільки більшість операцій над будь-яким заданим типом будуть дуже схожими,"
" може бути корисним визначити допоміжну функцію, яка генерує прямі та "
"зворотні екземпляри будь-якого даного оператора. Наприклад, "
":class:`fractions.Fraction` використовує::"

#: ../../library/numbers.rst:192
msgid ""
"def _operator_fallbacks(monomorphic_operator, fallback_operator):\n"
"    def forward(a, b):\n"
"        if isinstance(b, (int, Fraction)):\n"
"            return monomorphic_operator(a, b)\n"
"        elif isinstance(b, float):\n"
"            return fallback_operator(float(a), b)\n"
"        elif isinstance(b, complex):\n"
"            return fallback_operator(complex(a), b)\n"
"        else:\n"
"            return NotImplemented\n"
"    forward.__name__ = '__' + fallback_operator.__name__ + '__'\n"
"    forward.__doc__ = monomorphic_operator.__doc__\n"
"\n"
"    def reverse(b, a):\n"
"        if isinstance(a, Rational):\n"
"            # Includes ints.\n"
"            return monomorphic_operator(a, b)\n"
"        elif isinstance(a, Real):\n"
"            return fallback_operator(float(a), float(b))\n"
"        elif isinstance(a, Complex):\n"
"            return fallback_operator(complex(a), complex(b))\n"
"        else:\n"
"            return NotImplemented\n"
"    reverse.__name__ = '__r' + fallback_operator.__name__ + '__'\n"
"    reverse.__doc__ = monomorphic_operator.__doc__\n"
"\n"
"    return forward, reverse\n"
"\n"
"def _add(a, b):\n"
"    \"\"\"a + b\"\"\"\n"
"    return Fraction(a.numerator * b.denominator +\n"
"                    b.numerator * a.denominator,\n"
"                    a.denominator * b.denominator)\n"
"\n"
"__add__, __radd__ = _operator_fallbacks(_add, operator.add)\n"
"\n"
"# ..."
msgstr ""
