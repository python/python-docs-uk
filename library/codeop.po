# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Dmytro Kazanzhy, 2022
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-11-22 14:17+0000\n"
"PO-Revision-Date: 2021-06-28 00:56+0000\n"
"Last-Translator: Dmytro Kazanzhy, 2022\n"
"Language-Team: Ukrainian (https://app.transifex.com/python-doc/teams/5390/uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != 11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % 100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || (n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

#: ../../library/codeop.rst:2
msgid ":mod:`!codeop` --- Compile Python code"
msgstr ""

#: ../../library/codeop.rst:10
msgid "**Source code:** :source:`Lib/codeop.py`"
msgstr "**Вихідний код:** :source:`Lib/codeop.py`"

#: ../../library/codeop.rst:14
msgid ""
"The :mod:`codeop` module provides utilities upon which the Python read-eval-"
"print loop can be emulated, as is done in the :mod:`code` module.  As a "
"result, you probably don't want to use the module directly; if you want to "
"include such a loop in your program you probably want to use the :mod:`code`"
" module instead."
msgstr ""
"Модуль :mod:`codeop` надає утиліти, за допомогою яких можна емулювати цикл "
"читання-оцінки-друку Python, як це робиться в модулі :mod:`code`. У "
"результаті ви, ймовірно, не захочете використовувати модуль безпосередньо; "
"якщо ви хочете включити такий цикл у свою програму, ви, ймовірно, захочете "
"використовувати замість нього модуль :mod:`code`."

#: ../../library/codeop.rst:20
msgid "There are two parts to this job:"
msgstr "У цій роботі є дві частини:"

#: ../../library/codeop.rst:22
msgid ""
"Being able to tell if a line of input completes a Python statement: in "
"short, telling whether to print '``>>>``' or '``...``' next."
msgstr ""

#: ../../library/codeop.rst:25
msgid ""
"Remembering which future statements the user has entered, so subsequent "
"input can be compiled with these in effect."
msgstr ""

#: ../../library/codeop.rst:28
msgid ""
"The :mod:`codeop` module provides a way of doing each of these things, and a"
" way of doing them both."
msgstr ""
"Модуль :mod:`codeop` забезпечує спосіб виконання кожної з цих речей, а також"
" спосіб виконання обох."

#: ../../library/codeop.rst:31
msgid "To do just the former:"
msgstr "Щоб зробити лише перше:"

#: ../../library/codeop.rst:35
msgid ""
"Tries to compile *source*, which should be a string of Python code and "
"return a code object if *source* is valid Python code.  In that case, the "
"filename attribute of the code object will be *filename*, which defaults to "
"``'<input>'``.  Returns ``None`` if *source* is *not* valid Python code, but"
" is a prefix of valid Python code."
msgstr ""

#: ../../library/codeop.rst:41
msgid ""
"If there is a problem with *source*, an exception will be raised. "
":exc:`SyntaxError` is raised if there is invalid Python syntax, and "
":exc:`OverflowError` or :exc:`ValueError` if there is an invalid literal."
msgstr ""
"Якщо є проблема з *source*, буде створено виняток. :exc:`SyntaxError` "
"виникає, якщо є недійсний синтаксис Python, і :exc:`OverflowError` або "
":exc:`ValueError`, якщо є недійсний літерал."

#: ../../library/codeop.rst:45
msgid ""
"The *symbol* argument determines whether *source* is compiled as a statement"
" (``'single'``, the default), as a sequence of :term:`statement` "
"(``'exec'``) or as an :term:`expression` (``'eval'``).  Any other value will"
" cause :exc:`ValueError` to be raised."
msgstr ""

#: ../../library/codeop.rst:52
msgid ""
"It is possible (but not likely) that the parser stops parsing with a "
"successful outcome before reaching the end of the source; in this case, "
"trailing symbols may be ignored instead of causing an error.  For example, a"
" backslash followed by two newlines may be followed by arbitrary garbage. "
"This will be fixed once the API for the parser is better."
msgstr ""
"Можливо (але малоймовірно), що синтаксичний аналізатор припиняє синтаксичний"
" аналіз із успішним результатом до того, як досягне кінця джерела; у цьому "
"випадку кінцеві символи можуть ігноруватися замість того, щоб викликати "
"помилку. Наприклад, після зворотної скісної риски, за якою слідують два "
"символи нового рядка, може стояти довільне сміття. Це буде виправлено, коли "
"API для аналізатора стане кращим."

#: ../../library/codeop.rst:61
msgid ""
"Instances of this class have :meth:`~object.__call__` methods identical in "
"signature to the built-in function :func:`compile`, but with the difference "
"that if the instance compiles program text containing a :mod:`__future__` "
"statement, the instance 'remembers' and compiles all subsequent program "
"texts with the statement in force."
msgstr ""

#: ../../library/codeop.rst:70
msgid ""
"Instances of this class have :meth:`~object.__call__` methods identical in "
"signature to :func:`compile_command`; the difference is that if the instance"
" compiles program text containing a :mod:`__future__` statement, the "
"instance 'remembers' and compiles all subsequent program texts with the "
"statement in force."
msgstr ""
