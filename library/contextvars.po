# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Dmytro Kazanzhy, 2024
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-11-19 01:00+0000\n"
"PO-Revision-Date: 2021-06-28 00:57+0000\n"
"Last-Translator: Dmytro Kazanzhy, 2024\n"
"Language-Team: Ukrainian (https://app.transifex.com/python-doc/teams/5390/uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != 11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % 100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || (n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

#: ../../library/contextvars.rst:2
msgid ":mod:`!contextvars` --- Context Variables"
msgstr ""

#: ../../library/contextvars.rst:11
msgid ""
"This module provides APIs to manage, store, and access context-local state."
"  The :class:`~contextvars.ContextVar` class is used to declare and work "
"with *Context Variables*.  The :func:`~contextvars.copy_context` function "
"and the :class:`~contextvars.Context` class should be used to manage the "
"current context in asynchronous frameworks."
msgstr ""
"Цей модуль надає API для керування, зберігання та доступу до контекстно-"
"локального стану. Клас :class:`~contextvars.ContextVar` використовується для"
" оголошення *контекстних змінних* і роботи з ними. Функцію "
":func:`~contextvars.copy_context` і клас :class:`~contextvars.Context` слід "
"використовувати для керування поточним контекстом в асинхронних структурах."

#: ../../library/contextvars.rst:17
msgid ""
"Context managers that have state should use Context Variables instead of "
":func:`threading.local` to prevent their state from bleeding to other code "
"unexpectedly, when used in concurrent code."
msgstr ""

#: ../../library/contextvars.rst:21
msgid "See also :pep:`567` for additional details."
msgstr "Дивіться також :pep:`567` для отримання додаткової інформації."

#: ../../library/contextvars.rst:27
msgid "Context Variables"
msgstr "Контекстні змінні"

#: ../../library/contextvars.rst:31
msgid "This class is used to declare a new Context Variable, e.g.::"
msgstr ""
"Цей клас використовується для оголошення нової змінної контексту, "
"наприклад::"

#: ../../library/contextvars.rst:33
msgid "var: ContextVar[int] = ContextVar('var', default=42)"
msgstr ""

#: ../../library/contextvars.rst:35
msgid ""
"The required *name* parameter is used for introspection and debug purposes."
msgstr ""
"Необхідний параметр *name* використовується для самоаналізу та налагодження."

#: ../../library/contextvars.rst:38
msgid ""
"The optional keyword-only *default* parameter is returned by "
":meth:`ContextVar.get` when no value for the variable is found in the "
"current context."
msgstr ""
"Необов’язковий параметр *default*, що містить лише ключове слово, "
"повертається :meth:`ContextVar.get`, якщо значення для змінної не знайдено в"
" поточному контексті."

#: ../../library/contextvars.rst:42
msgid ""
"**Important:** Context Variables should be created at the top module level "
"and never in closures.  :class:`Context` objects hold strong references to "
"context variables which prevents context variables from being properly "
"garbage collected."
msgstr ""
"**Важливо:** Змінні контексту слід створювати на верхньому рівні модуля, а "
"не в закриттях. Об’єкти :class:`Context` містять сильні посилання на змінні "
"контексту, що перешкоджає правильному збиранню сміття змінним контексту."

#: ../../library/contextvars.rst:49
msgid "The name of the variable.  This is a read-only property."
msgstr "Ім'я змінної. Це властивість лише для читання."

#: ../../library/contextvars.rst:55
msgid "Return a value for the context variable for the current context."
msgstr "Повертає значення контекстної змінної для поточного контексту."

#: ../../library/contextvars.rst:57
msgid ""
"If there is no value for the variable in the current context, the method "
"will:"
msgstr "Якщо для змінної немає значення в поточному контексті, метод:"

#: ../../library/contextvars.rst:60
msgid ""
"return the value of the *default* argument of the method, if provided; or"
msgstr "повертає значення аргументу *default* методу, якщо він надається; або"

#: ../../library/contextvars.rst:63
msgid ""
"return the default value for the context variable, if it was created with "
"one; or"
msgstr ""
"повертає значення за замовчуванням для контекстної змінної, якщо вона була "
"створена за допомогою такої; або"

#: ../../library/contextvars.rst:66
msgid "raise a :exc:`LookupError`."
msgstr "викликає :exc:`LookupError`."

#: ../../library/contextvars.rst:70
msgid ""
"Call to set a new value for the context variable in the current context."
msgstr ""
"Виклик, щоб встановити нове значення для контекстної змінної в поточному "
"контексті."

#: ../../library/contextvars.rst:73
msgid ""
"The required *value* argument is the new value for the context variable."
msgstr ""
"Обов’язковий аргумент *значення* — це нове значення для контекстної змінної."

#: ../../library/contextvars.rst:76
msgid ""
"Returns a :class:`~contextvars.Token` object that can be used to restore the"
" variable to its previous value via the :meth:`ContextVar.reset` method."
msgstr ""
"Повертає об’єкт :class:`~contextvars.Token`, який можна використовувати для "
"відновлення попереднього значення змінної за допомогою методу "
":meth:`ContextVar.reset`."

#: ../../library/contextvars.rst:82
msgid ""
"Reset the context variable to the value it had before the "
":meth:`ContextVar.set` that created the *token* was used."
msgstr ""
"Скиньте контекстну змінну до значення, яке воно мало до використання "
":meth:`ContextVar.set`, який створив *токен*."

#: ../../library/contextvars.rst:85
msgid "For example::"
msgstr "Наприклад::"

#: ../../library/contextvars.rst:87
msgid ""
"var = ContextVar('var')\n"
"\n"
"token = var.set('new value')\n"
"# code that uses 'var'; var.get() returns 'new value'.\n"
"var.reset(token)\n"
"\n"
"# After the reset call the var has no value again, so\n"
"# var.get() would raise a LookupError."
msgstr ""

#: ../../library/contextvars.rst:99
msgid ""
"*Token* objects are returned by the :meth:`ContextVar.set` method. They can "
"be passed to the :meth:`ContextVar.reset` method to revert the value of the "
"variable to what it was before the corresponding *set*."
msgstr ""
"Об’єкти *Token* повертаються методом :meth:`ContextVar.set`. Їх можна "
"передати в метод :meth:`ContextVar.reset`, щоб повернути значення змінної до"
" того, яким воно було до відповідного *set*."

#: ../../library/contextvars.rst:106
msgid ""
"A read-only property.  Points to the :class:`ContextVar` object that created"
" the token."
msgstr ""
"Властивість лише для читання. Вказує на об’єкт :class:`ContextVar`, який "
"створив маркер."

#: ../../library/contextvars.rst:111
msgid ""
"A read-only property.  Set to the value the variable had before the "
":meth:`ContextVar.set` method call that created the token. It points to "
":attr:`Token.MISSING` if the variable was not set before the call."
msgstr ""

#: ../../library/contextvars.rst:118
msgid "A marker object used by :attr:`Token.old_value`."
msgstr "Об’єкт-маркер, який використовується :attr:`Token.old_value`."

#: ../../library/contextvars.rst:122
msgid "Manual Context Management"
msgstr "Ручне керування контекстом"

#: ../../library/contextvars.rst:126
msgid "Returns a copy of the current :class:`~contextvars.Context` object."
msgstr "Повертає копію поточного об’єкта :class:`~contextvars.Context`."

#: ../../library/contextvars.rst:128
msgid ""
"The following snippet gets a copy of the current context and prints all "
"variables and their values that are set in it::"
msgstr ""
"Наступний фрагмент коду отримує копію поточного контексту та друкує всі "
"змінні та їхні значення, встановлені в ньому:"

#: ../../library/contextvars.rst:131
msgid ""
"ctx: Context = copy_context()\n"
"print(list(ctx.items()))"
msgstr ""

#: ../../library/contextvars.rst:134
msgid ""
"The function has an *O*\\ (1) complexity, i.e. works equally fast for "
"contexts with a few context variables and for contexts that have a lot of "
"them."
msgstr ""

#: ../../library/contextvars.rst:141
msgid "A mapping of :class:`ContextVars <ContextVar>` to their values."
msgstr "Відображення :class:`ContextVars <ContextVar>` на їхні значення."

#: ../../library/contextvars.rst:143
msgid ""
"``Context()`` creates an empty context with no values in it. To get a copy "
"of the current context use the :func:`~contextvars.copy_context` function."
msgstr ""
"``Context()`` створює порожній контекст без значень у ньому. Щоб отримати "
"копію поточного контексту, використовуйте функцію "
":func:`~contextvars.copy_context`."

#: ../../library/contextvars.rst:147
msgid ""
"Each thread has its own effective stack of :class:`!Context` objects.  The "
":term:`current context` is the :class:`!Context` object at the top of the "
"current thread's stack.  All :class:`!Context` objects in the stacks are "
"considered to be *entered*."
msgstr ""

#: ../../library/contextvars.rst:152
msgid ""
"*Entering* a context, which can be done by calling its :meth:`~Context.run` "
"method, makes the context the current context by pushing it onto the top of "
"the current thread's context stack."
msgstr ""

#: ../../library/contextvars.rst:156
msgid ""
"*Exiting* from the current context, which can be done by returning from the "
"callback passed to the :meth:`~Context.run` method, restores the current "
"context to what it was before the context was entered by popping the context"
" off the top of the context stack."
msgstr ""

#: ../../library/contextvars.rst:161
msgid ""
"Since each thread has its own context stack, :class:`ContextVar` objects "
"behave in a similar fashion to :func:`threading.local` when values are "
"assigned in different threads."
msgstr ""

#: ../../library/contextvars.rst:165
msgid ""
"Attempting to enter an already entered context, including contexts entered "
"in other threads, raises a :exc:`RuntimeError`."
msgstr ""

#: ../../library/contextvars.rst:168
msgid "After exiting a context, it can later be re-entered (from any thread)."
msgstr ""

#: ../../library/contextvars.rst:170
msgid ""
"Any changes to :class:`ContextVar` values via the :meth:`ContextVar.set` "
"method are recorded in the current context.  The :meth:`ContextVar.get` "
"method returns the value associated with the current context.  Exiting a "
"context effectively reverts any changes made to context variables while the "
"context was entered (if needed, the values can be restored by re-entering "
"the context)."
msgstr ""

#: ../../library/contextvars.rst:177
msgid "Context implements the :class:`collections.abc.Mapping` interface."
msgstr "Context реалізує інтерфейс :class:`collections.abc.Mapping`."

#: ../../library/contextvars.rst:181
msgid ""
"Enters the Context, executes ``callable(*args, **kwargs)``, then exits the "
"Context.  Returns *callable*'s return value, or propagates an exception if "
"one occurred."
msgstr ""

#: ../../library/contextvars.rst:185
msgid "Example:"
msgstr "приклад:"

#: ../../library/contextvars.rst:187
msgid ""
"import contextvars\n"
"\n"
"var = contextvars.ContextVar('var')\n"
"var.set('spam')\n"
"print(var.get())  # 'spam'\n"
"\n"
"ctx = contextvars.copy_context()\n"
"\n"
"def main():\n"
"    # 'var' was set to 'spam' before\n"
"    # calling 'copy_context()' and 'ctx.run(main)', so:\n"
"    print(var.get())  # 'spam'\n"
"    print(ctx[var])  # 'spam'\n"
"\n"
"    var.set('ham')\n"
"\n"
"    # Now, after setting 'var' to 'ham':\n"
"    print(var.get())  # 'ham'\n"
"    print(ctx[var])  # 'ham'\n"
"\n"
"# Any changes that the 'main' function makes to 'var'\n"
"# will be contained in 'ctx'.\n"
"ctx.run(main)\n"
"\n"
"# The 'main()' function was run in the 'ctx' context,\n"
"# so changes to 'var' are contained in it:\n"
"print(ctx[var])  # 'ham'\n"
"\n"
"# However, outside of 'ctx', 'var' is still set to 'spam':\n"
"print(var.get())  # 'spam'"
msgstr ""

#: ../../library/contextvars.rst:233
msgid "Return a shallow copy of the context object."
msgstr "Повертає поверхневу копію об’єкта контексту."

#: ../../library/contextvars.rst:237
msgid ""
"Return ``True`` if the *context* has a value for *var* set; return ``False``"
" otherwise."
msgstr ""
"Повертає ``True``, якщо *контекст* має встановлене значення *var*; інакше "
"поверніть ``False``."

#: ../../library/contextvars.rst:242
msgid ""
"Return the value of the *var* :class:`ContextVar` variable. If the variable "
"is not set in the context object, a :exc:`KeyError` is raised."
msgstr ""
"Повертає значення змінної *var* :class:`ContextVar`. Якщо змінна не "
"встановлена в об’єкті контексту, виникає :exc:`KeyError`."

#: ../../library/contextvars.rst:248
msgid ""
"Return the value for *var* if *var* has the value in the context object.  "
"Return *default* otherwise.  If *default* is not given, return ``None``."
msgstr ""
"Повертає значення для *var*, якщо *var* має значення в об’єкті контексту. "
"Повернути *за замовчуванням* інакше. Якщо *default* не вказано, поверніть "
"``None``."

#: ../../library/contextvars.rst:254
msgid "Return an iterator over the variables stored in the context object."
msgstr "Повертає ітератор над змінними, що зберігаються в об’єкті контексту."

#: ../../library/contextvars.rst:259
msgid "Return the number of variables set in the context object."
msgstr "Повертає кількість змінних, встановлених в об’єкті контексту."

#: ../../library/contextvars.rst:263
msgid "Return a list of all variables in the context object."
msgstr "Повертає список усіх змінних в об’єкті контексту."

#: ../../library/contextvars.rst:267
msgid "Return a list of all variables' values in the context object."
msgstr "Повертає список усіх значень змінних в об’єкті контексту."

#: ../../library/contextvars.rst:272
msgid ""
"Return a list of 2-tuples containing all variables and their values in the "
"context object."
msgstr ""
"Повертає список 2-кортежів, що містить усі змінні та їхні значення в "
"контекстному об’єкті."

#: ../../library/contextvars.rst:277
msgid "asyncio support"
msgstr "підтримка asyncio"

#: ../../library/contextvars.rst:279
msgid ""
"Context variables are natively supported in :mod:`asyncio` and are ready to "
"be used without any extra configuration.  For example, here is a simple echo"
" server, that uses a context variable to make the address of a remote client"
" available in the Task that handles that client::"
msgstr ""
"Контекстні змінні підтримуються в :mod:`asyncio` і готові до використання "
"без додаткового налаштування. Наприклад, ось простий ехо-сервер, який "
"використовує контекстну змінну, щоб зробити адресу віддаленого клієнта "
"доступною в Завданні, яке обробляє цього клієнта:"

#: ../../library/contextvars.rst:285
msgid ""
"import asyncio\n"
"import contextvars\n"
"\n"
"client_addr_var = contextvars.ContextVar('client_addr')\n"
"\n"
"def render_goodbye():\n"
"    # The address of the currently handled client can be accessed\n"
"    # without passing it explicitly to this function.\n"
"\n"
"    client_addr = client_addr_var.get()\n"
"    return f'Good bye, client @ {client_addr}\\r\\n'.encode()\n"
"\n"
"async def handle_request(reader, writer):\n"
"    addr = writer.transport.get_extra_info('socket').getpeername()\n"
"    client_addr_var.set(addr)\n"
"\n"
"    # In any code that we call is now possible to get\n"
"    # client's address by calling 'client_addr_var.get()'.\n"
"\n"
"    while True:\n"
"        line = await reader.readline()\n"
"        print(line)\n"
"        if not line.strip():\n"
"            break\n"
"\n"
"    writer.write(b'HTTP/1.1 200 OK\\r\\n')  # status line\n"
"    writer.write(b'\\r\\n')  # headers\n"
"    writer.write(render_goodbye())  # body\n"
"    writer.close()\n"
"\n"
"async def main():\n"
"    srv = await asyncio.start_server(\n"
"        handle_request, '127.0.0.1', 8081)\n"
"\n"
"    async with srv:\n"
"        await srv.serve_forever()\n"
"\n"
"asyncio.run(main())\n"
"\n"
"# To test it you can use telnet or curl:\n"
"#     telnet 127.0.0.1 8081\n"
"#     curl 127.0.0.1:8081"
msgstr ""
