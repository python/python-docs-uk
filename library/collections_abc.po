# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Dmytro Kazanzhy, 2022
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-11-12 08:36+0000\n"
"PO-Revision-Date: 2021-06-28 00:56+0000\n"
"Last-Translator: Dmytro Kazanzhy, 2022\n"
"Language-Team: Ukrainian (https://app.transifex.com/python-doc/teams/5390/uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != 11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % 100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || (n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

#: ../../library/collections.abc.rst:2
msgid ":mod:`!collections.abc` --- Abstract Base Classes for Containers"
msgstr ""

#: ../../library/collections.abc.rst:10
msgid "Formerly, this module was part of the :mod:`collections` module."
msgstr "Раніше цей модуль був частиною модуля :mod:`collections`."

#: ../../library/collections.abc.rst:13
msgid "**Source code:** :source:`Lib/_collections_abc.py`"
msgstr "**Вихідний код:** :source:`Lib/_collections_abc.py`"

#: ../../library/collections.abc.rst:23
msgid ""
"This module provides :term:`abstract base classes <abstract base class>` "
"that can be used to test whether a class provides a particular interface; "
"for example, whether it is :term:`hashable` or whether it is a "
":term:`mapping`."
msgstr ""

#: ../../library/collections.abc.rst:27
msgid ""
"An :func:`issubclass` or :func:`isinstance` test for an interface works in "
"one of three ways."
msgstr ""
"Тест :func:`issubclass` або :func:`isinstance` для інтерфейсу працює одним "
"із трьох способів."

#: ../../library/collections.abc.rst:30
msgid ""
"1) A newly written class can inherit directly from one of the abstract base "
"classes.  The class must supply the required abstract methods.  The "
"remaining mixin methods come from inheritance and can be overridden if "
"desired.  Other methods may be added as needed:"
msgstr ""
"1) Щойно написаний клас може успадкувати безпосередньо від одного з "
"абстрактних базових класів. Клас повинен надавати необхідні абстрактні "
"методи. Решта методів mixin походять із успадкування та можуть бути замінені"
" за бажанням. За потреби можна додати інші методи:"

#: ../../library/collections.abc.rst:35
msgid ""
"class C(Sequence):                      # Direct inheritance\n"
"    def __init__(self): ...             # Extra method not required by the ABC\n"
"    def __getitem__(self, index):  ...  # Required abstract method\n"
"    def __len__(self):  ...             # Required abstract method\n"
"    def count(self, value): ...         # Optionally override a mixin method"
msgstr ""

#: ../../library/collections.abc.rst:43
msgid ""
">>> issubclass(C, Sequence)\n"
"True\n"
">>> isinstance(C(), Sequence)\n"
"True"
msgstr ""

#: ../../library/collections.abc.rst:50
msgid ""
"2) Existing classes and built-in classes can be registered as \"virtual "
"subclasses\" of the ABCs.  Those classes should define the full API "
"including all of the abstract methods and all of the mixin methods. This "
"lets users rely on :func:`issubclass` or :func:`isinstance` tests to "
"determine whether the full interface is supported.  The exception to this "
"rule is for methods that are automatically inferred from the rest of the "
"API:"
msgstr ""
"2) Існуючі класи та вбудовані класи можуть бути зареєстровані як "
"\"віртуальні підкласи\" ABC. Ці класи повинні визначати повний API, "
"включаючи всі абстрактні методи та всі методи mixin. Це дозволяє "
"користувачам покладатися на тести :func:`issubclass` або :func:`isinstance`,"
" щоб визначити, чи підтримується повний інтерфейс. Винятком із цього правила"
" є методи, які автоматично виводяться з решти API:"

#: ../../library/collections.abc.rst:58
msgid ""
"class D:                                 # No inheritance\n"
"    def __init__(self): ...              # Extra method not required by the ABC\n"
"    def __getitem__(self, index):  ...   # Abstract method\n"
"    def __len__(self):  ...              # Abstract method\n"
"    def count(self, value): ...          # Mixin method\n"
"    def index(self, value): ...          # Mixin method\n"
"\n"
"Sequence.register(D)                     # Register instead of inherit"
msgstr ""

#: ../../library/collections.abc.rst:69
msgid ""
">>> issubclass(D, Sequence)\n"
"True\n"
">>> isinstance(D(), Sequence)\n"
"True"
msgstr ""

#: ../../library/collections.abc.rst:76
msgid ""
"In this example, class :class:`!D` does not need to define ``__contains__``,"
" ``__iter__``, and ``__reversed__`` because the :ref:`in-operator "
"<comparisons>`, the :term:`iteration <iterable>` logic, and the "
":func:`reversed` function automatically fall back to using ``__getitem__`` "
"and ``__len__``."
msgstr ""

#: ../../library/collections.abc.rst:82
msgid ""
"3) Some simple interfaces are directly recognizable by the presence of the "
"required methods (unless those methods have been set to :const:`None`):"
msgstr ""
"3) Деякі прості інтерфейси можна безпосередньо розпізнати за наявністю "
"необхідних методів (якщо для цих методів не встановлено значення "
":const:`None`):"

#: ../../library/collections.abc.rst:86
msgid ""
"class E:\n"
"    def __iter__(self): ...\n"
"    def __next__(self): ..."
msgstr ""

#: ../../library/collections.abc.rst:92
msgid ""
">>> issubclass(E, Iterable)\n"
"True\n"
">>> isinstance(E(), Iterable)\n"
"True"
msgstr ""

#: ../../library/collections.abc.rst:99
msgid ""
"Complex interfaces do not support this last technique because an interface "
"is more than just the presence of method names.  Interfaces specify "
"semantics and relationships between methods that cannot be inferred solely "
"from the presence of specific method names.  For example, knowing that a "
"class supplies ``__getitem__``, ``__len__``, and ``__iter__`` is "
"insufficient for distinguishing a :class:`Sequence` from a :class:`Mapping`."
msgstr ""
"Складні інтерфейси не підтримують цю останню техніку, оскільки інтерфейс — "
"це більше, ніж просто наявність назв методів. Інтерфейси визначають "
"семантику та зв’язки між методами, які не можуть бути виведені лише з "
"наявності конкретних імен методів. Наприклад, відомості про те, що клас "
"надає ``__getitem__``, ``__len__`` і ``__iter__``, недостатньо для того, щоб"
" відрізнити :class:`Sequence` від :class:`Mapping`."

#: ../../library/collections.abc.rst:107
msgid ""
"These abstract classes now support ``[]``. See :ref:`types-genericalias` and"
" :pep:`585`."
msgstr ""
"Ці абстрактні класи тепер підтримують ``[]``. Див. :ref:`types-genericalias`"
" і :pep:`585`."

#: ../../library/collections.abc.rst:114
msgid "Collections Abstract Base Classes"
msgstr "Колекції Абстрактні базові класи"

#: ../../library/collections.abc.rst:116
msgid ""
"The collections module offers the following :term:`ABCs <abstract base "
"class>`:"
msgstr "Модуль колекцій пропонує наступне :term:`ABCs <abstract base class>`:"

#: ../../library/collections.abc.rst:121
msgid "ABC"
msgstr "ABC"

#: ../../library/collections.abc.rst:121
msgid "Inherits from"
msgstr "Успадковує від"

#: ../../library/collections.abc.rst:121
msgid "Abstract Methods"
msgstr "Методи реферату"

#: ../../library/collections.abc.rst:121
msgid "Mixin Methods"
msgstr "Методи Міксіна"

#: ../../library/collections.abc.rst:123
msgid ":class:`Container` [1]_"
msgstr ":class:`Container` [1]_"

#: ../../library/collections.abc.rst:123
msgid "``__contains__``"
msgstr "``__contains__``"

#: ../../library/collections.abc.rst:124
msgid ":class:`Hashable` [1]_"
msgstr ":class:`Hashable` [1]_"

#: ../../library/collections.abc.rst:124
msgid "``__hash__``"
msgstr "``__hash__``"

#: ../../library/collections.abc.rst:125
msgid ":class:`Iterable` [1]_ [2]_"
msgstr ":class:`Iterable` [1]_ [2]_"

#: ../../library/collections.abc.rst:125 ../../library/collections.abc.rst:126
msgid "``__iter__``"
msgstr "``__iter__``"

#: ../../library/collections.abc.rst:126
msgid ":class:`Iterator` [1]_"
msgstr ":class:`Iterator` [1]_"

#: ../../library/collections.abc.rst:126 ../../library/collections.abc.rst:127
msgid ":class:`Iterable`"
msgstr ":class:`Iterable`"

#: ../../library/collections.abc.rst:126
msgid "``__next__``"
msgstr "``__next__``"

#: ../../library/collections.abc.rst:127
msgid ":class:`Reversible` [1]_"
msgstr ":class:`Reversible` [1]_"

#: ../../library/collections.abc.rst:127
msgid "``__reversed__``"
msgstr "``__reversed__``"

#: ../../library/collections.abc.rst:128
msgid ":class:`Generator`  [1]_"
msgstr ":class:`Generator` [1]_"

#: ../../library/collections.abc.rst:128
msgid ":class:`Iterator`"
msgstr ":class:`Iterator`"

#: ../../library/collections.abc.rst:128 ../../library/collections.abc.rst:176
msgid "``send``, ``throw``"
msgstr "``відправити``, ``кинути``"

#: ../../library/collections.abc.rst:128
msgid "``close``, ``__iter__``, ``__next__``"
msgstr "``закрити``, ``__iter__``, ``__next__``"

#: ../../library/collections.abc.rst:129
msgid ":class:`Sized`  [1]_"
msgstr ":class:`Sized` [1]_"

#: ../../library/collections.abc.rst:129 ../../library/collections.abc.rst:168
msgid "``__len__``"
msgstr "``__len__``"

#: ../../library/collections.abc.rst:130
msgid ":class:`Callable`  [1]_"
msgstr ":class:`Callable` [1]_"

#: ../../library/collections.abc.rst:130
msgid "``__call__``"
msgstr "``__call__``"

#: ../../library/collections.abc.rst:131
msgid ":class:`Collection`  [1]_"
msgstr ":class:`Collection` [1]_"

#: ../../library/collections.abc.rst:131
msgid ":class:`Sized`, :class:`Iterable`, :class:`Container`"
msgstr ":class:`Sized`, :class:`Iterable`, :class:`Container`"

#: ../../library/collections.abc.rst:131 ../../library/collections.abc.rst:147
msgid "``__contains__``, ``__iter__``, ``__len__``"
msgstr "``__contains__``, ``__iter__``, ``__len__``"

#: ../../library/collections.abc.rst:135 ../../library/collections.abc.rst:138
#: ../../library/collections.abc.rst:144
msgid ":class:`Sequence`"
msgstr ":class:`Sequence`"

#: ../../library/collections.abc.rst:135
msgid ":class:`Reversible`, :class:`Collection`"
msgstr ":class:`Reversible`, :class:`Collection`"

#: ../../library/collections.abc.rst:135 ../../library/collections.abc.rst:144
msgid "``__getitem__``, ``__len__``"
msgstr "``__getitem__``, ``__len__``"

#: ../../library/collections.abc.rst:135
msgid ""
"``__contains__``, ``__iter__``, ``__reversed__``, ``index``, and ``count``"
msgstr ""
"``__contains__``, ``__iter__``, ``__reversed__``, ``index`` і ``count``"

#: ../../library/collections.abc.rst:138
msgid ":class:`MutableSequence`"
msgstr ":class:`MutableSequence`"

#: ../../library/collections.abc.rst:138
msgid ""
"``__getitem__``, ``__setitem__``, ``__delitem__``, ``__len__``, ``insert``"
msgstr ""
"``__getitem__``, ``__setitem__``, ``__delitem__``, ``__len__``, ``вставити``"

#: ../../library/collections.abc.rst:138
msgid ""
"Inherited :class:`Sequence` methods and ``append``, ``clear``, ``reverse``, "
"``extend``, ``pop``, ``remove``, and ``__iadd__``"
msgstr ""

#: ../../library/collections.abc.rst:144
msgid ":class:`ByteString`"
msgstr ":class:`ByteString`"

#: ../../library/collections.abc.rst:144
msgid "Inherited :class:`Sequence` methods"
msgstr "Успадковані методи :class:`Sequence`"

#: ../../library/collections.abc.rst:147 ../../library/collections.abc.rst:151
msgid ":class:`Set`"
msgstr ":class:`Set`"

#: ../../library/collections.abc.rst:147 ../../library/collections.abc.rst:157
msgid ":class:`Collection`"
msgstr ":class:`Collection`"

#: ../../library/collections.abc.rst:147
msgid ""
"``__le__``, ``__lt__``, ``__eq__``, ``__ne__``, ``__gt__``, ``__ge__``, "
"``__and__``, ``__or__``, ``__sub__``, ``__xor__``, and ``isdisjoint``"
msgstr ""
"``__le__``, ``__lt__``, ``__eq__``, ``__ne__``, ``__gt__``, ``__ge__``, "
"``__and__``, ``__or__``, ``__sub__``, ``__xor__`` і ``isdisjoint``"

#: ../../library/collections.abc.rst:151
msgid ":class:`MutableSet`"
msgstr ":class:`MutableSet`"

#: ../../library/collections.abc.rst:151
msgid "``__contains__``, ``__iter__``, ``__len__``, ``add``, ``discard``"
msgstr "``__contains__``, ``__iter__``, ``__len__``, ``add``, ``discard``"

#: ../../library/collections.abc.rst:151
msgid ""
"Inherited :class:`Set` methods and ``clear``, ``pop``, ``remove``, "
"``__ior__``, ``__iand__``, ``__ixor__``, and ``__isub__``"
msgstr ""
"Успадковані методи :class:`Set` і ``clear``, ``pop``, ``remove``, "
"``__ior__``, ``__iand__``, ``__ixor__`` та ``__isub__``"

#: ../../library/collections.abc.rst:157 ../../library/collections.abc.rst:161
msgid ":class:`Mapping`"
msgstr ":class:`Mapping`"

#: ../../library/collections.abc.rst:157
msgid "``__getitem__``, ``__iter__``, ``__len__``"
msgstr "``__getitem__``, ``__iter__``, ``__len__``"

#: ../../library/collections.abc.rst:157
msgid ""
"``__contains__``, ``keys``, ``items``, ``values``, ``get``, ``__eq__``, and "
"``__ne__``"
msgstr ""
"``__contains__``, ``keys``, ``items``, ``values``, ``get``, ``__eq__`` і "
"``__ne__``"

#: ../../library/collections.abc.rst:161
msgid ":class:`MutableMapping`"
msgstr ":class:`MutableMapping`"

#: ../../library/collections.abc.rst:161
msgid ""
"``__getitem__``, ``__setitem__``, ``__delitem__``, ``__iter__``, ``__len__``"
msgstr ""
"``__getitem__``, ``__setitem__``, ``__delitem__``, ``__iter__``, ``__len__``"

#: ../../library/collections.abc.rst:161
msgid ""
"Inherited :class:`Mapping` methods and ``pop``, ``popitem``, ``clear``, "
"``update``, and ``setdefault``"
msgstr ""
"Успадковані методи :class:`Mapping` і ``pop``, ``popitem``, ``clear``, "
"``update`` і ``setdefault``"

#: ../../library/collections.abc.rst:168
msgid ":class:`MappingView`"
msgstr ":class:`MappingView`"

#: ../../library/collections.abc.rst:168
msgid ":class:`Sized`"
msgstr ":class:`Sized`"

#: ../../library/collections.abc.rst:169
msgid ":class:`ItemsView`"
msgstr ":class:`ItemsView`"

#: ../../library/collections.abc.rst:169 ../../library/collections.abc.rst:171
msgid ":class:`MappingView`, :class:`Set`"
msgstr ":class:`MappingView`, :class:`Set`"

#: ../../library/collections.abc.rst:169 ../../library/collections.abc.rst:171
#: ../../library/collections.abc.rst:173
msgid "``__contains__``, ``__iter__``"
msgstr "``__contains__``, ``__iter__``"

#: ../../library/collections.abc.rst:171
msgid ":class:`KeysView`"
msgstr ":class:`KeysView`"

#: ../../library/collections.abc.rst:173
msgid ":class:`ValuesView`"
msgstr ":class:`ValuesView`"

#: ../../library/collections.abc.rst:173
msgid ":class:`MappingView`, :class:`Collection`"
msgstr ":class:`MappingView`, :class:`Collection`"

#: ../../library/collections.abc.rst:175
msgid ":class:`Awaitable` [1]_"
msgstr ":class:`Awaitable` [1]_"

#: ../../library/collections.abc.rst:175
msgid "``__await__``"
msgstr "``__await__``"

#: ../../library/collections.abc.rst:176
msgid ":class:`Coroutine` [1]_"
msgstr ":class:`Coroutine` [1]_"

#: ../../library/collections.abc.rst:176
msgid ":class:`Awaitable`"
msgstr ":class:`Awaitable`"

#: ../../library/collections.abc.rst:176
msgid "``close``"
msgstr "``закрити``"

#: ../../library/collections.abc.rst:177
msgid ":class:`AsyncIterable` [1]_"
msgstr ":class:`AsyncIterable` [1]_"

#: ../../library/collections.abc.rst:177 ../../library/collections.abc.rst:178
msgid "``__aiter__``"
msgstr "``__aiter__``"

#: ../../library/collections.abc.rst:178
msgid ":class:`AsyncIterator` [1]_"
msgstr ":class:`AsyncIterator` [1]_"

#: ../../library/collections.abc.rst:178
msgid ":class:`AsyncIterable`"
msgstr ":class:`AsyncIterable`"

#: ../../library/collections.abc.rst:178
msgid "``__anext__``"
msgstr "``__anext__``"

#: ../../library/collections.abc.rst:179
msgid ":class:`AsyncGenerator` [1]_"
msgstr ":class:`AsyncGenerator` [1]_"

#: ../../library/collections.abc.rst:179
msgid ":class:`AsyncIterator`"
msgstr ":class:`AsyncIterator`"

#: ../../library/collections.abc.rst:179
msgid "``asend``, ``athrow``"
msgstr "``asend``, ``athrow``"

#: ../../library/collections.abc.rst:179
msgid "``aclose``, ``__aiter__``, ``__anext__``"
msgstr "``aclose``, ``__aiter__``, ``__anext__``"

#: ../../library/collections.abc.rst:180
msgid ":class:`Buffer` [1]_"
msgstr ""

#: ../../library/collections.abc.rst:180
msgid "``__buffer__``"
msgstr ""

#: ../../library/collections.abc.rst:185
msgid "Footnotes"
msgstr "Виноски"

#: ../../library/collections.abc.rst:186
msgid ""
"These ABCs override :meth:`~abc.ABCMeta.__subclasshook__` to support testing"
" an interface by verifying the required methods are present and have not "
"been set to :const:`None`.  This only works for simple interfaces.  More "
"complex interfaces require registration or direct subclassing."
msgstr ""

#: ../../library/collections.abc.rst:192
msgid ""
"Checking ``isinstance(obj, Iterable)`` detects classes that are registered "
"as :class:`Iterable` or that have an :meth:`~container.__iter__` method, but"
" it does not detect classes that iterate with the "
":meth:`~object.__getitem__` method.  The only reliable way to determine "
"whether an object is :term:`iterable` is to call ``iter(obj)``."
msgstr ""

#: ../../library/collections.abc.rst:200
msgid "Collections Abstract Base Classes -- Detailed Descriptions"
msgstr "Колекції абстрактних базових класів -- докладні описи"

#: ../../library/collections.abc.rst:205
msgid "ABC for classes that provide the :meth:`~object.__contains__` method."
msgstr ""

#: ../../library/collections.abc.rst:209
msgid "ABC for classes that provide the :meth:`~object.__hash__` method."
msgstr ""

#: ../../library/collections.abc.rst:213
msgid "ABC for classes that provide the :meth:`~object.__len__` method."
msgstr ""

#: ../../library/collections.abc.rst:217
msgid "ABC for classes that provide the :meth:`~object.__call__` method."
msgstr ""

#: ../../library/collections.abc.rst:219
msgid ""
"See :ref:`annotating-callables` for details on how to use :class:`!Callable`"
" in type annotations."
msgstr ""

#: ../../library/collections.abc.rst:224
msgid "ABC for classes that provide the :meth:`~container.__iter__` method."
msgstr ""

#: ../../library/collections.abc.rst:226
msgid ""
"Checking ``isinstance(obj, Iterable)`` detects classes that are registered "
"as :class:`Iterable` or that have an :meth:`~container.__iter__` method, but"
" it does not detect classes that iterate with the "
":meth:`~object.__getitem__` method. The only reliable way to determine "
"whether an object is :term:`iterable` is to call ``iter(obj)``."
msgstr ""

#: ../../library/collections.abc.rst:235
msgid "ABC for sized iterable container classes."
msgstr "ABC для класів ітерованих контейнерів розміру."

#: ../../library/collections.abc.rst:241
msgid ""
"ABC for classes that provide the :meth:`~iterator.__iter__` and "
":meth:`~iterator.__next__` methods.  See also the definition of "
":term:`iterator`."
msgstr ""
"ABC для класів, які забезпечують методи :meth:`~iterator.__iter__` і "
":meth:`~iterator.__next__`. Дивіться також визначення :term:`iterator`."

#: ../../library/collections.abc.rst:247
msgid ""
"ABC for iterable classes that also provide the :meth:`~object.__reversed__` "
"method."
msgstr ""

#: ../../library/collections.abc.rst:254
msgid ""
"ABC for :term:`generator` classes that implement the protocol defined in "
":pep:`342` that extends :term:`iterators <iterator>` with the "
":meth:`~generator.send`, :meth:`~generator.throw` and "
":meth:`~generator.close` methods."
msgstr ""

#: ../../library/collections.abc.rst:259
msgid ""
"See :ref:`annotating-generators-and-coroutines` for details on using "
":class:`!Generator` in type annotations."
msgstr ""

#: ../../library/collections.abc.rst:268
msgid "ABCs for read-only and mutable :term:`sequences <sequence>`."
msgstr ""
"Азбука для доступних лише для читання та змінних :term:`послідовностей "
"<sequence>`."

#: ../../library/collections.abc.rst:270
msgid ""
"Implementation note: Some of the mixin methods, such as "
":meth:`~container.__iter__`, :meth:`~object.__reversed__` and :meth:`index`,"
" make repeated calls to the underlying :meth:`~object.__getitem__` method. "
"Consequently, if :meth:`~object.__getitem__` is implemented with constant "
"access speed, the mixin methods will have linear performance; however, if "
"the underlying method is linear (as it would be with a linked list), the "
"mixins will have quadratic performance and will likely need to be "
"overridden."
msgstr ""

#: ../../library/collections.abc.rst:279
msgid "The index() method added support for *stop* and *start* arguments."
msgstr "Метод index() додав підтримку аргументів *stop* і *start*."

#: ../../library/collections.abc.rst:283
msgid ""
"The :class:`ByteString` ABC has been deprecated. For use in typing, prefer a"
" union, like ``bytes | bytearray``, or :class:`collections.abc.Buffer`. For "
"use as an ABC, prefer :class:`Sequence` or :class:`collections.abc.Buffer`."
msgstr ""

#: ../../library/collections.abc.rst:292
msgid "ABCs for read-only and mutable :ref:`sets <types-set>`."
msgstr ""

#: ../../library/collections.abc.rst:297
msgid "ABCs for read-only and mutable :term:`mappings <mapping>`."
msgstr "Азбука лише для читання та змінних :term:`відображення <mapping>`."

#: ../../library/collections.abc.rst:304
msgid ""
"ABCs for mapping, items, keys, and values :term:`views <dictionary view>`."
msgstr ""
"Азбука зіставлення, елементів, ключів і значень :term:`views <dictionary "
"view>`."

#: ../../library/collections.abc.rst:308
msgid ""
"ABC for :term:`awaitable` objects, which can be used in :keyword:`await` "
"expressions.  Custom implementations must provide the "
":meth:`~object.__await__` method."
msgstr ""

#: ../../library/collections.abc.rst:312
msgid ""
":term:`Coroutine <coroutine>` objects and instances of the "
":class:`~collections.abc.Coroutine` ABC are all instances of this ABC."
msgstr ""
":term:`Coroutine <coroutine>` об’єкти та екземпляри "
":class:`~collections.abc.Coroutine` ABC є екземплярами цього ABC."

#: ../../library/collections.abc.rst:316
msgid ""
"In CPython, generator-based coroutines (:term:`generators <generator>` "
"decorated with :func:`@types.coroutine <types.coroutine>`) are *awaitables*,"
" even though they do not have an :meth:`~object.__await__` method. Using "
"``isinstance(gencoro, Awaitable)`` for them will return ``False``. Use "
":func:`inspect.isawaitable` to detect them."
msgstr ""

#: ../../library/collections.abc.rst:326
msgid ""
"ABC for :term:`coroutine` compatible classes.  These implement the following"
" methods, defined in :ref:`coroutine-objects`: :meth:`~coroutine.send`, "
":meth:`~coroutine.throw`, and :meth:`~coroutine.close`.  Custom "
"implementations must also implement :meth:`~object.__await__`.  All "
":class:`Coroutine` instances are also instances of :class:`Awaitable`."
msgstr ""

#: ../../library/collections.abc.rst:334
msgid ""
"In CPython, generator-based coroutines (:term:`generators <generator>` "
"decorated with :func:`@types.coroutine <types.coroutine>`) are *awaitables*,"
" even though they do not have an :meth:`~object.__await__` method. Using "
"``isinstance(gencoro, Coroutine)`` for them will return ``False``. Use "
":func:`inspect.isawaitable` to detect them."
msgstr ""

#: ../../library/collections.abc.rst:340
msgid ""
"See :ref:`annotating-generators-and-coroutines` for details on using "
":class:`!Coroutine` in type annotations. The variance and order of type "
"parameters correspond to those of :class:`Generator`."
msgstr ""

#: ../../library/collections.abc.rst:349
msgid ""
"ABC for classes that provide an ``__aiter__`` method.  See also the "
"definition of :term:`asynchronous iterable`."
msgstr ""

#: ../../library/collections.abc.rst:356
msgid ""
"ABC for classes that provide ``__aiter__`` and ``__anext__`` methods.  See "
"also the definition of :term:`asynchronous iterator`."
msgstr ""
"ABC для класів, які надають методи ``__aiter__`` і ``__anext__``. Дивіться "
"також визначення :term:`asynchronous iterator`."

#: ../../library/collections.abc.rst:363
msgid ""
"ABC for :term:`asynchronous generator` classes that implement the protocol "
"defined in :pep:`525` and :pep:`492`."
msgstr ""

#: ../../library/collections.abc.rst:366
msgid ""
"See :ref:`annotating-generators-and-coroutines` for details on using "
":class:`!AsyncGenerator` in type annotations."
msgstr ""

#: ../../library/collections.abc.rst:373
msgid ""
"ABC for classes that provide the :meth:`~object.__buffer__` method, "
"implementing the :ref:`buffer protocol <bufferobjects>`. See :pep:`688`."
msgstr ""

#: ../../library/collections.abc.rst:379
msgid "Examples and Recipes"
msgstr "Приклади та рецепти"

#: ../../library/collections.abc.rst:381
msgid ""
"ABCs allow us to ask classes or instances if they provide particular "
"functionality, for example::"
msgstr ""
"ABC дозволяє нам запитувати класи чи екземпляри, чи надають вони певну "
"функціональність, наприклад:"

#: ../../library/collections.abc.rst:384
msgid ""
"size = None\n"
"if isinstance(myvar, collections.abc.Sized):\n"
"    size = len(myvar)"
msgstr ""

#: ../../library/collections.abc.rst:388
msgid ""
"Several of the ABCs are also useful as mixins that make it easier to develop"
" classes supporting container APIs.  For example, to write a class "
"supporting the full :class:`Set` API, it is only necessary to supply the "
"three underlying abstract methods: :meth:`~object.__contains__`, "
":meth:`~container.__iter__`, and :meth:`~object.__len__`. The ABC supplies "
"the remaining methods such as :meth:`!__and__` and "
":meth:`~frozenset.isdisjoint`::"
msgstr ""

#: ../../library/collections.abc.rst:395
msgid ""
"class ListBasedSet(collections.abc.Set):\n"
"    ''' Alternate set implementation favoring space over speed\n"
"        and not requiring the set elements to be hashable. '''\n"
"    def __init__(self, iterable):\n"
"        self.elements = lst = []\n"
"        for value in iterable:\n"
"            if value not in lst:\n"
"                lst.append(value)\n"
"\n"
"    def __iter__(self):\n"
"        return iter(self.elements)\n"
"\n"
"    def __contains__(self, value):\n"
"        return value in self.elements\n"
"\n"
"    def __len__(self):\n"
"        return len(self.elements)\n"
"\n"
"s1 = ListBasedSet('abcdef')\n"
"s2 = ListBasedSet('defghi')\n"
"overlap = s1 & s2            # The __and__() method is supported automatically"
msgstr ""

#: ../../library/collections.abc.rst:417
msgid "Notes on using :class:`Set` and :class:`MutableSet` as a mixin:"
msgstr ""
"Примітки щодо використання :class:`Set` і :class:`MutableSet` як міксину:"

#: ../../library/collections.abc.rst:420
msgid ""
"Since some set operations create new sets, the default mixin methods need a "
"way to create new instances from an :term:`iterable`. The class constructor "
"is assumed to have a signature in the form ``ClassName(iterable)``. That "
"assumption is factored-out to an internal :class:`classmethod` called "
":meth:`!_from_iterable` which calls ``cls(iterable)`` to produce a new set. "
"If the :class:`Set` mixin is being used in a class with a different "
"constructor signature, you will need to override :meth:`!_from_iterable` "
"with a classmethod or regular method that can construct new instances from "
"an iterable argument."
msgstr ""

#: ../../library/collections.abc.rst:431
msgid ""
"To override the comparisons (presumably for speed, as the semantics are "
"fixed), redefine :meth:`~object.__le__` and :meth:`~object.__ge__`, then the"
" other operations will automatically follow suit."
msgstr ""

#: ../../library/collections.abc.rst:437
msgid ""
"The :class:`Set` mixin provides a :meth:`!_hash` method to compute a hash "
"value for the set; however, :meth:`~object.__hash__` is not defined because "
"not all sets are :term:`hashable` or immutable.  To add set hashability "
"using mixins, inherit from both :meth:`Set` and :meth:`Hashable`, then "
"define ``__hash__ = Set._hash``."
msgstr ""

#: ../../library/collections.abc.rst:445
msgid ""
"`OrderedSet recipe <https://code.activestate.com/recipes/576694/>`_ for an "
"example built on :class:`MutableSet`."
msgstr ""
"`Рецепт OrderedSet <https://code.activestate.com/recipes/576694/>`_ для "
"прикладу, побудованого на :class:`MutableSet`."

#: ../../library/collections.abc.rst:448
msgid "For more about ABCs, see the :mod:`abc` module and :pep:`3119`."
msgstr ""
"Щоб дізнатися більше про ABC, перегляньте модуль :mod:`abc` і :pep:`3119`."
