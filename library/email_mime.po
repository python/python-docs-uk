# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Dmytro Kazanzhy, 2022
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-11-22 14:17+0000\n"
"PO-Revision-Date: 2021-06-28 01:05+0000\n"
"Last-Translator: Dmytro Kazanzhy, 2022\n"
"Language-Team: Ukrainian (https://app.transifex.com/python-doc/teams/5390/uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != 11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % 100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || (n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

#: ../../library/email.mime.rst:2
msgid ":mod:`!email.mime`: Creating email and MIME objects from scratch"
msgstr ""

#: ../../library/email.mime.rst:7
msgid "**Source code:** :source:`Lib/email/mime/`"
msgstr "**Вихідний код:** :source:`Lib/email/mime/`"

#: ../../library/email.mime.rst:11
msgid ""
"This module is part of the legacy (``Compat32``) email API.  Its "
"functionality is partially replaced by the :mod:`~email.contentmanager` in "
"the new API, but in certain applications these classes may still be useful, "
"even in non-legacy code."
msgstr ""
"Цей модуль є частиною застарілого (``Compat32``) API електронної пошти. Його"
" функціональні можливості частково замінено на :mod:`~email.contentmanager` "
"у новому API, але в деяких програмах ці класи все ще можуть бути корисними, "
"навіть у коді, що не є застарілим."

#: ../../library/email.mime.rst:16
msgid ""
"Ordinarily, you get a message object structure by passing a file or some "
"text to a parser, which parses the text and returns the root message object."
"  However you can also build a complete message structure from scratch, or "
"even individual :class:`~email.message.Message` objects by hand.  In fact, "
"you can also take an existing structure and add new "
":class:`~email.message.Message` objects, move them around, etc.  This makes "
"a very convenient interface for slicing-and-dicing MIME messages."
msgstr ""
"Зазвичай ви отримуєте структуру об’єкта повідомлення, передаючи файл або "
"деякий текст синтаксичному аналізатору, який аналізує текст і повертає "
"кореневий об’єкт повідомлення. Однак ви також можете створити повну "
"структуру повідомлення з нуля або навіть окремі об’єкти "
":class:`~email.message.Message` вручну. Фактично, ви також можете взяти "
"існуючу структуру та додати нові об’єкти :class:`~email.message.Message`, "
"перемістити їх тощо. Це робить дуже зручний інтерфейс для нарізання та "
"нарізання повідомлень MIME."

#: ../../library/email.mime.rst:24
msgid ""
"You can create a new object structure by creating "
":class:`~email.message.Message` instances, adding attachments and all the "
"appropriate headers manually.  For MIME messages though, the :mod:`email` "
"package provides some convenient subclasses to make things easier."
msgstr ""
"Ви можете створити нову структуру об’єктів, створивши екземпляри "
":class:`~email.message.Message`, додавши вкладення та всі відповідні "
"заголовки вручну. Однак для повідомлень MIME пакет :mod:`email` надає кілька"
" зручних підкласів, щоб полегшити роботу."

#: ../../library/email.mime.rst:29
msgid "Here are the classes:"
msgstr "Ось класи:"

#: ../../library/email.mime.rst:35
msgid "Module: :mod:`email.mime.base`"
msgstr "Модуль: :mod:`email.mime.base`"

#: ../../library/email.mime.rst:37
msgid ""
"This is the base class for all the MIME-specific subclasses of "
":class:`~email.message.Message`.  Ordinarily you won't create instances "
"specifically of :class:`MIMEBase`, although you could.  :class:`MIMEBase` is"
" provided primarily as a convenient base class for more specific MIME-aware "
"subclasses."
msgstr ""
"Це базовий клас для всіх специфічних для MIME підкласів "
":class:`~email.message.Message`. Зазвичай ви не будете створювати екземпляри"
" конкретно :class:`MIMEBase`, хоча можете. :class:`MIMEBase` надається в "
"основному як зручний базовий клас для більш конкретних підкласів, що "
"підтримують MIME."

#: ../../library/email.mime.rst:43
msgid ""
"*_maintype* is the :mailheader:`Content-Type` major type (e.g. "
":mimetype:`text` or :mimetype:`image`), and *_subtype* is the "
":mailheader:`Content-Type` minor type  (e.g. :mimetype:`plain` or "
":mimetype:`gif`).  *_params* is a parameter key/value dictionary and is "
"passed directly to :meth:`Message.add_header "
"<email.message.Message.add_header>`."
msgstr ""
"*_maintype* — це основний тип :mailheader:`Content-Type` (наприклад, "
":mimetype:`text` або :mimetype:`image`), а *_subtype* — другорядний тип "
":mailheader:`Content-Type` (напр. :mimetype:`plain` або :mimetype:`gif`). "
"*_params* — це словник ключ/значення параметра, який передається "
"безпосередньо до :meth:`Message.add_header "
"<email.message.Message.add_header>`."

#: ../../library/email.mime.rst:49
msgid ""
"If *policy* is specified, (defaults to the :class:`compat32 "
"<email.policy.Compat32>` policy) it will be passed to "
":class:`~email.message.Message`."
msgstr ""
"Якщо вказано *політику* (за замовчуванням політика :class:`compat32 "
"<email.policy.Compat32>`), вона буде передана в "
":class:`~email.message.Message`."

#: ../../library/email.mime.rst:53
msgid ""
"The :class:`MIMEBase` class always adds a :mailheader:`Content-Type` header "
"(based on *_maintype*, *_subtype*, and *_params*), and a :mailheader:`MIME-"
"Version` header (always set to ``1.0``)."
msgstr ""
"Клас :class:`MIMEBase` завжди додає заголовок :mailheader:`Content-Type` (на"
" основі *_maintype*, *_subtype* і *_params*) і заголовок :mailheader:`MIME-"
"Version` (завжди встановити значення ``1.0``)."

#: ../../library/email.mime.rst:57 ../../library/email.mime.rst:104
#: ../../library/email.mime.rst:135 ../../library/email.mime.rst:169
#: ../../library/email.mime.rst:205 ../../library/email.mime.rst:225
#: ../../library/email.mime.rst:259
msgid "Added *policy* keyword-only parameter."
msgstr "Додано параметр *policy* лише для ключового слова."

#: ../../library/email.mime.rst:65
msgid "Module: :mod:`email.mime.nonmultipart`"
msgstr "Модуль: :mod:`email.mime.nonmultipart`"

#: ../../library/email.mime.rst:67
msgid ""
"A subclass of :class:`~email.mime.base.MIMEBase`, this is an intermediate "
"base class for MIME messages that are not :mimetype:`multipart`.  The "
"primary purpose of this class is to prevent the use of the "
":meth:`~email.message.Message.attach` method, which only makes sense for "
":mimetype:`multipart` messages.  If :meth:`~email.message.Message.attach` is"
" called, a :exc:`~email.errors.MultipartConversionError` exception is "
"raised."
msgstr ""
"Підклас :class:`~email.mime.base.MIMEBase`, це проміжний базовий клас для "
"повідомлень MIME, які не є :mimetype:`multipart`. Основною метою цього класу"
" є запобігання використанню методу :meth:`~email.message.Message.attach`, "
"який має сенс лише для повідомлень :mimetype:`multipart`. Якщо викликається "
":meth:`~email.message.Message.attach`, виникає виняток "
":exc:`~email.errors.MultipartConversionError`."

#: ../../library/email.mime.rst:80
msgid "Module: :mod:`email.mime.multipart`"
msgstr "Модуль: :mod:`email.mime.multipart`"

#: ../../library/email.mime.rst:82
msgid ""
"A subclass of :class:`~email.mime.base.MIMEBase`, this is an intermediate "
"base class for MIME messages that are :mimetype:`multipart`.  Optional "
"*_subtype* defaults to :mimetype:`mixed`, but can be used to specify the "
"subtype of the message.  A :mailheader:`Content-Type` header of "
":mimetype:`multipart/_subtype` will be added to the message object.  A "
":mailheader:`MIME-Version` header will also be added."
msgstr ""
"Підклас :class:`~email.mime.base.MIMEBase`, це проміжний базовий клас для "
"повідомлень MIME, які є :mimetype:`multipart`. Необов’язковий *_subtype* за "
"умовчанням має значення :mimetype:`mixed`, але його можна використовувати "
"для визначення підтипу повідомлення. Заголовок :mailheader:`Content-Type` "
":mimetype:`multipart/_subtype` буде додано до об’єкта повідомлення. Також "
"буде додано заголовок :mailheader:`MIME-Version`."

#: ../../library/email.mime.rst:89
msgid ""
"Optional *boundary* is the multipart boundary string.  When ``None`` (the "
"default), the boundary is calculated when needed (for example, when the "
"message is serialized)."
msgstr ""
"Необов’язковий *межа* — це обмежувальний рядок із кількох частин. Якщо "
"``None`` (за замовчуванням), межа обчислюється за потреби (наприклад, коли "
"повідомлення серіалізовано)."

#: ../../library/email.mime.rst:93
msgid ""
"*_subparts* is a sequence of initial subparts for the payload.  It must be "
"possible to convert this sequence to a list.  You can always attach new "
"subparts to the message by using the :meth:`Message.attach "
"<email.message.Message.attach>` method."
msgstr ""
"*_subparts* — це послідовність початкових підчастин для корисного "
"навантаження. Має бути можливість перетворити цю послідовність на список. Ви"
" завжди можете додати нові частини до повідомлення за допомогою методу "
":meth:`Message.attach <email.message.Message.attach>`."

#: ../../library/email.mime.rst:98 ../../library/email.mime.rst:131
#: ../../library/email.mime.rst:165 ../../library/email.mime.rst:200
#: ../../library/email.mime.rst:223 ../../library/email.mime.rst:254
msgid ""
"Optional *policy* argument defaults to :class:`compat32 "
"<email.policy.Compat32>`."
msgstr ""
"Додатковий аргумент *policy* за умовчанням має значення :class:`compat32 "
"<email.policy.Compat32>`."

#: ../../library/email.mime.rst:100
msgid ""
"Additional parameters for the :mailheader:`Content-Type` header are taken "
"from the keyword arguments, or passed into the *_params* argument, which is "
"a keyword dictionary."
msgstr ""
"Додаткові параметри для заголовка :mailheader:`Content-Type` беруться з "
"аргументів ключових слів або передаються в аргумент *_params*, який є "
"словником ключових слів."

#: ../../library/email.mime.rst:113
msgid "Module: :mod:`email.mime.application`"
msgstr "Модуль: :mod:`email.mime.application`"

#: ../../library/email.mime.rst:115
msgid ""
"A subclass of :class:`~email.mime.nonmultipart.MIMENonMultipart`, the "
":class:`MIMEApplication` class is used to represent MIME message objects of "
"major type :mimetype:`application`.  *_data* contains the bytes for the raw "
"application data.  Optional *_subtype* specifies the MIME subtype and "
"defaults to :mimetype:`octet-stream`."
msgstr ""

#: ../../library/email.mime.rst:121
msgid ""
"Optional *_encoder* is a callable (i.e. function) which will perform the "
"actual encoding of the data for transport.  This callable takes one "
"argument, which is the :class:`MIMEApplication` instance. It should use "
":meth:`~email.message.Message.get_payload` and "
":meth:`~email.message.Message.set_payload` to change the payload to encoded "
"form.  It should also add any :mailheader:`Content-Transfer-Encoding` or "
"other headers to the message object as necessary.  The default encoding is "
"base64.  See the :mod:`email.encoders` module for a list of the built-in "
"encoders."
msgstr ""
"Необов’язковий *_encoder* — це виклик (тобто функція), яка виконуватиме "
"фактичне кодування даних для транспортування. Цей виклик приймає один "
"аргумент, який є екземпляром :class:`MIMEApplication`. Він має "
"використовувати :meth:`~email.message.Message.get_payload` і "
":meth:`~email.message.Message.set_payload`, щоб змінити корисне навантаження"
" на закодовану форму. Він також має додати будь-які :mailheader:`Content-"
"Transfer-Encoding` або інші заголовки до об’єкта повідомлення за потреби. "
"Стандартне кодування — base64. Перегляньте список вбудованих кодувальників у"
" модулі :mod:`email.encoders`."

#: ../../library/email.mime.rst:133 ../../library/email.mime.rst:167
msgid "*_params* are passed straight through to the base class constructor."
msgstr "*_params* передаються прямо до конструктора базового класу."

#: ../../library/email.mime.rst:144
msgid "Module: :mod:`email.mime.audio`"
msgstr "Модуль: :mod:`email.mime.audio`"

#: ../../library/email.mime.rst:146
msgid ""
"A subclass of :class:`~email.mime.nonmultipart.MIMENonMultipart`, the "
":class:`MIMEAudio` class is used to create MIME message objects of major "
"type :mimetype:`audio`. *_audiodata* contains the bytes for the raw audio "
"data.  If this data can be decoded as au, wav, aiff, or aifc, then the "
"subtype will be automatically included in the :mailheader:`Content-Type` "
"header. Otherwise you can explicitly specify the audio subtype via the "
"*_subtype* argument.  If the minor type could not be guessed and *_subtype* "
"was not given, then :exc:`TypeError` is raised."
msgstr ""

#: ../../library/email.mime.rst:155
msgid ""
"Optional *_encoder* is a callable (i.e. function) which will perform the "
"actual encoding of the audio data for transport.  This callable takes one "
"argument, which is the :class:`MIMEAudio` instance. It should use "
":meth:`~email.message.Message.get_payload` and "
":meth:`~email.message.Message.set_payload` to change the payload to encoded "
"form.  It should also add any :mailheader:`Content-Transfer-Encoding` or "
"other headers to the message object as necessary.  The default encoding is "
"base64.  See the :mod:`email.encoders` module for a list of the built-in "
"encoders."
msgstr ""
"Необов’язковий *_encoder* — це виклик (тобто функція), яка виконуватиме "
"фактичне кодування аудіоданих для транспортування. Цей виклик приймає один "
"аргумент, який є екземпляром :class:`MIMEAudio`. Він має використовувати "
":meth:`~email.message.Message.get_payload` і "
":meth:`~email.message.Message.set_payload`, щоб змінити корисне навантаження"
" на закодовану форму. Він також має додати будь-які :mailheader:`Content-"
"Transfer-Encoding` або інші заголовки до об’єкта повідомлення за потреби. "
"Стандартне кодування — base64. Перегляньте список вбудованих кодувальників у"
" модулі :mod:`email.encoders`."

#: ../../library/email.mime.rst:178
msgid "Module: :mod:`email.mime.image`"
msgstr "Модуль: :mod:`email.mime.image`"

#: ../../library/email.mime.rst:180
msgid ""
"A subclass of :class:`~email.mime.nonmultipart.MIMENonMultipart`, the "
":class:`MIMEImage` class is used to create MIME message objects of major "
"type :mimetype:`image`. *_imagedata* contains the bytes for the raw image "
"data.  If this data type can be detected (jpeg, png, gif, tiff, rgb, pbm, "
"pgm, ppm, rast, xbm, bmp, webp, and exr attempted), then the subtype will be"
" automatically included in the :mailheader:`Content-Type` header. Otherwise "
"you can explicitly specify the image subtype via the *_subtype* argument. If"
" the minor type could not be guessed and *_subtype* was not given, then "
":exc:`TypeError` is raised."
msgstr ""

#: ../../library/email.mime.rst:190
msgid ""
"Optional *_encoder* is a callable (i.e. function) which will perform the "
"actual encoding of the image data for transport.  This callable takes one "
"argument, which is the :class:`MIMEImage` instance. It should use "
":meth:`~email.message.Message.get_payload` and "
":meth:`~email.message.Message.set_payload` to change the payload to encoded "
"form.  It should also add any :mailheader:`Content-Transfer-Encoding` or "
"other headers to the message object as necessary.  The default encoding is "
"base64.  See the :mod:`email.encoders` module for a list of the built-in "
"encoders."
msgstr ""
"Необов’язковий *_encoder* — це виклик (тобто функція), яка виконуватиме "
"фактичне кодування даних зображення для транспортування. Цей виклик приймає "
"один аргумент, який є екземпляром :class:`MIMEImage`. Він має "
"використовувати :meth:`~email.message.Message.get_payload` і "
":meth:`~email.message.Message.set_payload`, щоб змінити корисне навантаження"
" на закодовану форму. Він також має додати будь-які :mailheader:`Content-"
"Transfer-Encoding` або інші заголовки до об’єкта повідомлення за потреби. "
"Стандартне кодування — base64. Перегляньте список вбудованих кодувальників у"
" модулі :mod:`email.encoders`."

#: ../../library/email.mime.rst:202
msgid ""
"*_params* are passed straight through to the "
":class:`~email.mime.base.MIMEBase` constructor."
msgstr ""
"*_параметри* передаються безпосередньо до конструктора "
":class:`~email.mime.base.MIMEBase`."

#: ../../library/email.mime.rst:212
msgid "Module: :mod:`email.mime.message`"
msgstr "Модуль: :mod:`email.mime.message`"

#: ../../library/email.mime.rst:214
msgid ""
"A subclass of :class:`~email.mime.nonmultipart.MIMENonMultipart`, the "
":class:`MIMEMessage` class is used to create MIME objects of main type "
":mimetype:`message`. *_msg* is used as the payload, and must be an instance "
"of class :class:`~email.message.Message` (or a subclass thereof), otherwise "
"a :exc:`TypeError` is raised."
msgstr ""
"Підклас :class:`~email.mime.nonmultipart.MIMENonMultipart`, клас "
":class:`MIMEMessage` використовується для створення об’єктів MIME основного "
"типу :mimetype:`message`. *_msg* використовується як корисне навантаження та"
" має бути екземпляром класу :class:`~email.message.Message` (або його "
"підкласу), інакше виникає :exc:`TypeError`."

#: ../../library/email.mime.rst:220
msgid ""
"Optional *_subtype* sets the subtype of the message; it defaults to "
":mimetype:`rfc822`."
msgstr ""
"Додатково *_subtype* встановлює підтип повідомлення; за замовчуванням "
":mimetype:`rfc822`."

#: ../../library/email.mime.rst:232
msgid "Module: :mod:`email.mime.text`"
msgstr "Модуль: :mod:`email.mime.text`"

#: ../../library/email.mime.rst:234
msgid ""
"A subclass of :class:`~email.mime.nonmultipart.MIMENonMultipart`, the "
":class:`MIMEText` class is used to create MIME objects of major type "
":mimetype:`text`. *_text* is the string for the payload.  *_subtype* is the "
"minor type and defaults to :mimetype:`plain`.  *_charset* is the character "
"set of the text and is passed as an argument to the "
":class:`~email.mime.nonmultipart.MIMENonMultipart` constructor; it defaults "
"to ``us-ascii`` if the string contains only ``ascii`` code points, and "
"``utf-8`` otherwise.  The *_charset* parameter accepts either a string or a "
":class:`~email.charset.Charset` instance."
msgstr ""
"Підклас :class:`~email.mime.nonmultipart.MIMENonMultipart`, клас "
":class:`MIMEText` використовується для створення об’єктів MIME основного "
"типу :mimetype:`text`. *_text* — це рядок корисного навантаження. *_subtype*"
" є другорядним типом і за замовчуванням :mimetype:`plain`. *_charset* — це "
"набір символів тексту, який передається як аргумент конструктору "
":class:`~email.mime.nonmultipart.MIMENonMultipart`; за замовчуванням "
"встановлено ``us-ascii``, якщо рядок містить лише ``ascii`` кодові точки, і "
"``utf-8`` інакше. Параметр *_charset* приймає або рядок, або екземпляр "
":class:`~email.charset.Charset`."

#: ../../library/email.mime.rst:244
msgid ""
"Unless the *_charset* argument is explicitly set to ``None``, the MIMEText "
"object created will have both a :mailheader:`Content-Type` header with a "
"``charset`` parameter, and a :mailheader:`Content-Transfer-Encoding` header."
"  This means that a subsequent ``set_payload`` call will not result in an "
"encoded payload, even if a charset is passed in the ``set_payload`` command."
"  You can \"reset\" this behavior by deleting the ``Content-Transfer-"
"Encoding`` header, after which a ``set_payload`` call will automatically "
"encode the new payload (and add a new :mailheader:`Content-Transfer-"
"Encoding` header)."
msgstr ""
"Якщо для аргументу *_charset* явно не встановлено значення ``None``, "
"створений об’єкт MIMEText матиме як заголовок :mailheader:`Content-Type` з "
"параметром ``charset``, так і Заголовок :mailheader:`Content-Transfer-"
"Encoding`. Це означає, що наступний виклик ``set_payload`` не призведе до "
"закодованого корисного навантаження, навіть якщо кодування передано в "
"команді ``set_payload``. Ви можете \"скинути\" цю поведінку, видаливши "
"заголовок ``Content-Transfer-Encoding``, після чого виклик ``set_payload`` "
"автоматично закодує нове корисне навантаження (і додасть нове "
":mailheader:`Content-Transfer-Encoding` заголовок)."

#: ../../library/email.mime.rst:256
msgid "*_charset* also accepts :class:`~email.charset.Charset` instances."
msgstr "*_charset* також приймає екземпляри :class:`~email.charset.Charset`."
