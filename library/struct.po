# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Dmytro Kazanzhy, 2024
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-11-08 14:16+0000\n"
"PO-Revision-Date: 2021-06-28 01:14+0000\n"
"Last-Translator: Dmytro Kazanzhy, 2024\n"
"Language-Team: Ukrainian (https://app.transifex.com/python-doc/teams/5390/uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != 11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % 100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || (n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

#: ../../library/struct.rst:2
msgid ":mod:`!struct` --- Interpret bytes as packed binary data"
msgstr ""

#: ../../library/struct.rst:11
msgid "**Source code:** :source:`Lib/struct.py`"
msgstr "**Вихідний код:** :source:`Lib/struct.py`"

#: ../../library/struct.rst:19
msgid ""
"This module converts between Python values and C structs represented as "
"Python :class:`bytes` objects.  Compact :ref:`format strings <struct-format-"
"strings>` describe the intended conversions to/from Python values. The "
"module's functions and objects can be used for two largely distinct "
"applications, data exchange with external sources (files or network "
"connections), or data transfer between the Python application and the C "
"layer."
msgstr ""

#: ../../library/struct.rst:29
msgid ""
"When no prefix character is given, native mode is the default. It packs or "
"unpacks data based on the platform and compiler on which the Python "
"interpreter was built. The result of packing a given C struct includes pad "
"bytes which maintain proper alignment for the C types involved; similarly, "
"alignment is taken into account when unpacking.  In contrast, when "
"communicating data between external sources, the programmer is responsible "
"for defining byte ordering and padding between elements. See :ref:`struct-"
"alignment` for details."
msgstr ""

#: ../../library/struct.rst:39
msgid ""
"Several :mod:`struct` functions (and methods of :class:`Struct`) take a "
"*buffer* argument.  This refers to objects that implement the "
":ref:`bufferobjects` and provide either a readable or read-writable buffer."
"  The most common types used for that purpose are :class:`bytes` and "
":class:`bytearray`, but many other types that can be viewed as an array of "
"bytes implement the buffer protocol, so that they can be read/filled without"
" additional copying from a :class:`bytes` object."
msgstr ""
"Кілька функцій :mod:`struct` (та методи :class:`Struct`) приймають аргумент "
"*buffer*. Це відноситься до об’єктів, які реалізують :ref:`bufferobjects` і "
"забезпечують доступний для читання чи запису буфер. Найпоширенішими типами, "
"які використовуються для цієї мети, є :class:`bytes` і :class:`bytearray`, "
"але багато інших типів, які можна розглядати як масив байтів, реалізують "
"протокол буфера, тому їх можна читати/заповнювати без додаткове копіювання з"
" об'єкта :class:`bytes`."

#: ../../library/struct.rst:48
msgid "Functions and Exceptions"
msgstr "Функції та винятки"

#: ../../library/struct.rst:50
msgid "The module defines the following exception and functions:"
msgstr "Модуль визначає такі винятки та функції:"

#: ../../library/struct.rst:55
msgid ""
"Exception raised on various occasions; argument is a string describing what "
"is wrong."
msgstr ""
"Виняток, що виникає з різних приводів; аргумент - це рядок, що описує те, що"
" є неправильним."

#: ../../library/struct.rst:61
msgid ""
"Return a bytes object containing the values *v1*, *v2*, ... packed according"
" to the format string *format*.  The arguments must match the values "
"required by the format exactly."
msgstr ""
"Повертає об’єкт bytes, що містить значення *v1*, *v2*, ... упаковані "
"відповідно до рядка формату *format*. Аргументи мають точно відповідати "
"значенням, які вимагає формат."

#: ../../library/struct.rst:68
msgid ""
"Pack the values *v1*, *v2*, ... according to the format string *format* and "
"write the packed bytes into the writable buffer *buffer* starting at "
"position *offset*.  Note that *offset* is a required argument."
msgstr ""
"Упакуйте значення *v1*, *v2*, ... відповідно до рядка формату *format* і "
"запишіть упаковані байти в записуваний буфер *buffer*, починаючи з позиції "
"*offset*. Зауважте, що *offset* є обов’язковим аргументом."

#: ../../library/struct.rst:75
msgid ""
"Unpack from the buffer *buffer* (presumably packed by ``pack(format, ...)``)"
" according to the format string *format*.  The result is a tuple even if it "
"contains exactly one item.  The buffer's size in bytes must match the size "
"required by the format, as reflected by :func:`calcsize`."
msgstr ""
"Розпакуйте з буфера *buffer* (імовірно запакованого ``pack(format, ...)``) "
"відповідно до рядка формату *format*. Результатом є кортеж, навіть якщо він "
"містить рівно один елемент. Розмір буфера в байтах має відповідати розміру, "
"який вимагає формат, як це відображається :func:`calcsize`."

#: ../../library/struct.rst:83
msgid ""
"Unpack from *buffer* starting at position *offset*, according to the format "
"string *format*.  The result is a tuple even if it contains exactly one "
"item.  The buffer's size in bytes, starting at position *offset*, must be at"
" least the size required by the format, as reflected by :func:`calcsize`."
msgstr ""
"Розпакуйте з *buffer*, починаючи з позиції *offset*, відповідно до рядка "
"формату *format*. Результатом є кортеж, навіть якщо він містить рівно один "
"елемент. Розмір буфера в байтах, починаючи з позиції *offset*, має бути "
"принаймні розміром, який вимагається форматом, що відображається "
":func:`calcsize`."

#: ../../library/struct.rst:91
msgid ""
"Iteratively unpack from the buffer *buffer* according to the format string "
"*format*.  This function returns an iterator which will read equally sized "
"chunks from the buffer until all its contents have been consumed.  The "
"buffer's size in bytes must be a multiple of the size required by the "
"format, as reflected by :func:`calcsize`."
msgstr ""

#: ../../library/struct.rst:97
msgid "Each iteration yields a tuple as specified by the format string."
msgstr "Кожна ітерація дає кортеж, як зазначено в рядку формату."

#: ../../library/struct.rst:104
msgid ""
"Return the size of the struct (and hence of the bytes object produced by "
"``pack(format, ...)``) corresponding to the format string *format*."
msgstr ""
"Повертає розмір структури (і, отже, об’єкта bytes, створеного ``pack(format,"
" ...)``), що відповідає рядку формату *format*."

#: ../../library/struct.rst:111
msgid "Format Strings"
msgstr "Форматувати рядки"

#: ../../library/struct.rst:113
msgid ""
"Format strings describe the data layout when packing and unpacking data.  "
"They are built up from :ref:`format characters<format-characters>`, which "
"specify the type of data being packed/unpacked.  In addition, special "
"characters control the :ref:`byte order, size and alignment<struct-"
"alignment>`. Each format string consists of an optional prefix character "
"which describes the overall properties of the data and one or more format "
"characters which describe the actual data values and padding."
msgstr ""

#: ../../library/struct.rst:125
msgid "Byte Order, Size, and Alignment"
msgstr "Порядок байтів, розмір і вирівнювання"

#: ../../library/struct.rst:127
msgid ""
"By default, C types are represented in the machine's native format and byte "
"order, and properly aligned by skipping pad bytes if necessary (according to"
" the rules used by the C compiler). This behavior is chosen so that the "
"bytes of a packed struct correspond exactly to the memory layout of the "
"corresponding C struct. Whether to use native byte ordering and padding or "
"standard formats depends on the application."
msgstr ""

#: ../../library/struct.rst:143
msgid ""
"Alternatively, the first character of the format string can be used to "
"indicate the byte order, size and alignment of the packed data, according to"
" the following table:"
msgstr ""
"Крім того, перший символ рядка формату можна використовувати для вказівки "
"порядку байтів, розміру та вирівнювання упакованих даних згідно з наведеною "
"нижче таблицею:"

#: ../../library/struct.rst:148
msgid "Character"
msgstr "характер"

#: ../../library/struct.rst:148
msgid "Byte order"
msgstr "Порядок байтів"

#: ../../library/struct.rst:148
msgid "Size"
msgstr "Розмір"

#: ../../library/struct.rst:148
msgid "Alignment"
msgstr "Вирівнювання"

#: ../../library/struct.rst:150
msgid "``@``"
msgstr "``@``"

#: ../../library/struct.rst:150 ../../library/struct.rst:152
msgid "native"
msgstr "рідний"

#: ../../library/struct.rst:152
msgid "``=``"
msgstr "``=``"

#: ../../library/struct.rst:152 ../../library/struct.rst:154
#: ../../library/struct.rst:156 ../../library/struct.rst:158
msgid "standard"
msgstr "стандарт"

#: ../../library/struct.rst:152 ../../library/struct.rst:154
#: ../../library/struct.rst:156 ../../library/struct.rst:158
msgid "none"
msgstr "немає"

#: ../../library/struct.rst:154
msgid "``<``"
msgstr "``<``"

#: ../../library/struct.rst:154
msgid "little-endian"
msgstr "маленький байт"

#: ../../library/struct.rst:156
msgid "``>``"
msgstr "``>``"

#: ../../library/struct.rst:156
msgid "big-endian"
msgstr "великий байт"

#: ../../library/struct.rst:158
msgid "``!``"
msgstr "``!``"

#: ../../library/struct.rst:158
msgid "network (= big-endian)"
msgstr "мережа (= порядок байтів)"

#: ../../library/struct.rst:161
msgid "If the first character is not one of these, ``'@'`` is assumed."
msgstr "Якщо перший символ не є одним із цих, передбачається ``'@'``."

#: ../../library/struct.rst:165
msgid ""
"The number 1023 (``0x3ff`` in hexadecimal) has the following byte "
"representations:"
msgstr ""

#: ../../library/struct.rst:167
msgid "``03 ff`` in big-endian (``>``)"
msgstr ""

#: ../../library/struct.rst:168
msgid "``ff 03`` in little-endian (``<``)"
msgstr ""

#: ../../library/struct.rst:170
msgid "Python example:"
msgstr ""

#: ../../library/struct.rst:178
msgid ""
"Native byte order is big-endian or little-endian, depending on the host "
"system. For example, Intel x86, AMD64 (x86-64), and Apple M1 are little-"
"endian; IBM z and many legacy architectures are big-endian. Use "
":data:`sys.byteorder` to check the endianness of your system."
msgstr ""

#: ../../library/struct.rst:183
msgid ""
"Native size and alignment are determined using the C compiler's ``sizeof`` "
"expression.  This is always combined with native byte order."
msgstr ""
"Власний розмір і вирівнювання визначаються за допомогою виразу ``sizeof`` "
"компілятора C. Це завжди поєднується з рідним порядком байтів."

#: ../../library/struct.rst:186
msgid ""
"Standard size depends only on the format character;  see the table in the "
":ref:`format-characters` section."
msgstr ""
"Стандартний розмір залежить тільки від символу формату; див. таблицю в "
"розділі :ref:`format-characters`."

#: ../../library/struct.rst:189
msgid ""
"Note the difference between ``'@'`` and ``'='``: both use native byte order,"
" but the size and alignment of the latter is standardized."
msgstr ""
"Зверніть увагу на різницю між ``'@'`` і ``'='``: обидва використовують "
"власний порядок байтів, але розмір і вирівнювання останнього "
"стандартизовані."

#: ../../library/struct.rst:192
msgid ""
"The form ``'!'`` represents the network byte order which is always big-"
"endian as defined in `IETF RFC 1700 <IETF RFC 1700_>`_."
msgstr ""
"Форма ``'!'`` представляє мережевий порядок байтів, який завжди є старшим "
"байтом, як визначено в `IETF RFC 1700 <IETF RFC 1700_>`_."

#: ../../library/struct.rst:195
msgid ""
"There is no way to indicate non-native byte order (force byte-swapping); use"
" the appropriate choice of ``'<'`` or ``'>'``."
msgstr ""
"Немає способу вказати невласний порядок байтів (примусова заміна байтів); "
"використовуйте відповідний вибір ``' <'`` or ``'> ''``."

#: ../../library/struct.rst:198 ../../library/struct.rst:277
msgid "Notes:"
msgstr "Примітки:"

#: ../../library/struct.rst:200
msgid ""
"Padding is only automatically added between successive structure members. No"
" padding is added at the beginning or the end of the encoded struct."
msgstr ""
"Відступи автоматично додаються лише між послідовними елементами структури. "
"Заповнення не додається на початку або в кінці закодованої структури."

#: ../../library/struct.rst:203
msgid ""
"No padding is added when using non-native size and alignment, e.g. with '<',"
" '>', '=', and '!'."
msgstr ""
"Під час використання невласного розміру та вирівнювання відступи не "
"додаються, напр. з \"<', '>\", \"=\" і \"!\"."

#: ../../library/struct.rst:206
msgid ""
"To align the end of a structure to the alignment requirement of a particular"
" type, end the format with the code for that type with a repeat count of "
"zero.  See :ref:`struct-examples`."
msgstr ""
"Щоб вирівняти кінець структури відповідно до вимог вирівнювання певного "
"типу, завершіть формат кодом для цього типу з нульовою кількістю повторів. "
"Див. :ref:`struct-examples`."

#: ../../library/struct.rst:214
msgid "Format Characters"
msgstr "Формат символів"

#: ../../library/struct.rst:216
msgid ""
"Format characters have the following meaning; the conversion between C and "
"Python values should be obvious given their types.  The 'Standard size' "
"column refers to the size of the packed value in bytes when using standard "
"size; that is, when the format string starts with one of ``'<'``, ``'>'``, "
"``'!'`` or ``'='``.  When using native size, the size of the packed value is"
" platform-dependent."
msgstr ""
"Символи форматування мають таке значення; перетворення між значеннями C і "
"Python повинно бути очевидним, враховуючи їхні типи. Стовпець \"Стандартний "
"розмір\" стосується розміру упакованого значення в байтах при використанні "
"стандартного розміру; тобто, коли форматний рядок починається з одного з ``'"
" <'``, ``'> ''``, ``'!''`` або ``'='``. При використанні рідного розміру "
"розмір упакованого значення залежить від платформи."

#: ../../library/struct.rst:224
msgid "Format"
msgstr "Формат"

#: ../../library/struct.rst:224
msgid "C Type"
msgstr "C Тип"

#: ../../library/struct.rst:224
msgid "Python type"
msgstr "Тип Python"

#: ../../library/struct.rst:224
msgid "Standard size"
msgstr "Стандартний розмір"

#: ../../library/struct.rst:224
msgid "Notes"
msgstr "Примітки"

#: ../../library/struct.rst:226
msgid "``x``"
msgstr "``x``"

#: ../../library/struct.rst:226
msgid "pad byte"
msgstr "pad byte"

#: ../../library/struct.rst:226
msgid "no value"
msgstr "немає значення"

#: ../../library/struct.rst:226
msgid "\\(7)"
msgstr "\\(7)"

#: ../../library/struct.rst:228
msgid "``c``"
msgstr "``c``"

#: ../../library/struct.rst:228
msgid ":c:expr:`char`"
msgstr ""

#: ../../library/struct.rst:228
msgid "bytes of length 1"
msgstr "байти довжиною 1"

#: ../../library/struct.rst:228 ../../library/struct.rst:230
#: ../../library/struct.rst:232 ../../library/struct.rst:234
msgid "1"
msgstr "1"

#: ../../library/struct.rst:230
msgid "``b``"
msgstr "``b``"

#: ../../library/struct.rst:230
msgid ":c:expr:`signed char`"
msgstr ""

#: ../../library/struct.rst:230 ../../library/struct.rst:232
#: ../../library/struct.rst:236 ../../library/struct.rst:238
#: ../../library/struct.rst:240 ../../library/struct.rst:242
#: ../../library/struct.rst:244 ../../library/struct.rst:246
#: ../../library/struct.rst:248 ../../library/struct.rst:250
#: ../../library/struct.rst:253 ../../library/struct.rst:255
#: ../../library/struct.rst:267
msgid "integer"
msgstr "ціле число"

#: ../../library/struct.rst:230
msgid "\\(1), \\(2)"
msgstr "\\(1), \\(2)"

#: ../../library/struct.rst:232
msgid "``B``"
msgstr "``B``"

#: ../../library/struct.rst:232
msgid ":c:expr:`unsigned char`"
msgstr ""

#: ../../library/struct.rst:232 ../../library/struct.rst:236
#: ../../library/struct.rst:238 ../../library/struct.rst:240
#: ../../library/struct.rst:242 ../../library/struct.rst:244
#: ../../library/struct.rst:246 ../../library/struct.rst:248
#: ../../library/struct.rst:250
msgid "\\(2)"
msgstr "\\(2)"

#: ../../library/struct.rst:234
msgid "``?``"
msgstr "``?``"

#: ../../library/struct.rst:234
msgid ":c:expr:`_Bool`"
msgstr ""

#: ../../library/struct.rst:234
msgid "bool"
msgstr "bool"

#: ../../library/struct.rst:234
msgid "\\(1)"
msgstr "\\(1)"

#: ../../library/struct.rst:236
msgid "``h``"
msgstr "``h``"

#: ../../library/struct.rst:236
msgid ":c:expr:`short`"
msgstr ""

#: ../../library/struct.rst:236 ../../library/struct.rst:238
#: ../../library/struct.rst:257
msgid "2"
msgstr "2"

#: ../../library/struct.rst:238
msgid "``H``"
msgstr "``H``"

#: ../../library/struct.rst:238
msgid ":c:expr:`unsigned short`"
msgstr ""

#: ../../library/struct.rst:240
msgid "``i``"
msgstr "``я``"

#: ../../library/struct.rst:240
msgid ":c:expr:`int`"
msgstr ""

#: ../../library/struct.rst:240 ../../library/struct.rst:242
#: ../../library/struct.rst:244 ../../library/struct.rst:246
#: ../../library/struct.rst:259
msgid "4"
msgstr "4"

#: ../../library/struct.rst:242
msgid "``I``"
msgstr "``Я``"

#: ../../library/struct.rst:242
msgid ":c:expr:`unsigned int`"
msgstr ""

#: ../../library/struct.rst:244
msgid "``l``"
msgstr "``l``"

#: ../../library/struct.rst:244
msgid ":c:expr:`long`"
msgstr ""

#: ../../library/struct.rst:246
msgid "``L``"
msgstr "``L``"

#: ../../library/struct.rst:246
msgid ":c:expr:`unsigned long`"
msgstr ""

#: ../../library/struct.rst:248
msgid "``q``"
msgstr "``q``"

#: ../../library/struct.rst:248
msgid ":c:expr:`long long`"
msgstr ""

#: ../../library/struct.rst:248 ../../library/struct.rst:250
#: ../../library/struct.rst:261
msgid "8"
msgstr "8"

#: ../../library/struct.rst:250
msgid "``Q``"
msgstr "``Q``"

#: ../../library/struct.rst:250
msgid ":c:expr:`unsigned long long`"
msgstr ""

#: ../../library/struct.rst:253
msgid "``n``"
msgstr "``n``"

#: ../../library/struct.rst:253
msgid ":c:type:`ssize_t`"
msgstr ":c:type:`ssize_t`"

#: ../../library/struct.rst:253 ../../library/struct.rst:255
msgid "\\(3)"
msgstr "\\(3)"

#: ../../library/struct.rst:255
msgid "``N``"
msgstr "``N``"

#: ../../library/struct.rst:255
msgid ":c:type:`size_t`"
msgstr ":c:type:`size_t`"

#: ../../library/struct.rst:257
msgid "``e``"
msgstr "``e``"

#: ../../library/struct.rst:257
msgid "\\(6)"
msgstr "\\(6)"

#: ../../library/struct.rst:257 ../../library/struct.rst:259
#: ../../library/struct.rst:261
msgid "float"
msgstr "плавати"

#: ../../library/struct.rst:257 ../../library/struct.rst:259
#: ../../library/struct.rst:261
msgid "\\(4)"
msgstr "\\(4)"

#: ../../library/struct.rst:259
msgid "``f``"
msgstr "``f``"

#: ../../library/struct.rst:259
msgid ":c:expr:`float`"
msgstr ""

#: ../../library/struct.rst:261
msgid "``d``"
msgstr "``d``"

#: ../../library/struct.rst:261
msgid ":c:expr:`double`"
msgstr ""

#: ../../library/struct.rst:263
msgid "``s``"
msgstr "``s``"

#: ../../library/struct.rst:263 ../../library/struct.rst:265
msgid ":c:expr:`char[]`"
msgstr ""

#: ../../library/struct.rst:263 ../../library/struct.rst:265
msgid "bytes"
msgstr "байтів"

#: ../../library/struct.rst:263
msgid "\\(9)"
msgstr "\\(9)"

#: ../../library/struct.rst:265
msgid "``p``"
msgstr "``p``"

#: ../../library/struct.rst:265
msgid "\\(8)"
msgstr "\\(8)"

#: ../../library/struct.rst:267
msgid "``P``"
msgstr "``P``"

#: ../../library/struct.rst:267
msgid ":c:expr:`void \\*`"
msgstr ""

#: ../../library/struct.rst:267
msgid "\\(5)"
msgstr "\\(5)"

#: ../../library/struct.rst:270
msgid "Added support for the ``'n'`` and ``'N'`` formats."
msgstr "Додано підтримку форматів ``'n'`` і ``'N'``."

#: ../../library/struct.rst:273
msgid "Added support for the ``'e'`` format."
msgstr "Додано підтримку формату ``'e''``."

#: ../../library/struct.rst:282
msgid ""
"The ``'?'`` conversion code corresponds to the :c:expr:`_Bool` type defined "
"by C standards since C99.  In standard mode, it is represented by one byte."
msgstr ""

#: ../../library/struct.rst:287
msgid ""
"When attempting to pack a non-integer using any of the integer conversion "
"codes, if the non-integer has a :meth:`~object.__index__` method then that "
"method is called to convert the argument to an integer before packing."
msgstr ""

#: ../../library/struct.rst:291
msgid "Added use of the :meth:`~object.__index__` method for non-integers."
msgstr ""

#: ../../library/struct.rst:295
msgid ""
"The ``'n'`` and ``'N'`` conversion codes are only available for the native "
"size (selected as the default or with the ``'@'`` byte order character). For"
" the standard size, you can use whichever of the other integer formats fits "
"your application."
msgstr ""
"Коди перетворення ``'n'`` і ``'N'`` доступні лише для рідного розміру "
"(вибрано як типовий або з символом порядку байтів ``'@''``). Для "
"стандартного розміру ви можете використовувати будь-який з інших форматів "
"цілих чисел, який підходить для вашої програми."

#: ../../library/struct.rst:301
msgid ""
"For the ``'f'``, ``'d'`` and ``'e'`` conversion codes, the packed "
"representation uses the IEEE 754 binary32, binary64 or binary16 format (for "
"``'f'``, ``'d'`` or ``'e'`` respectively), regardless of the floating-point "
"format used by the platform."
msgstr ""
"Для кодів перетворення ``'f'``, ``'d'`` і ``'e'`` упаковане представлення "
"використовує формат IEEE 754 binary32, binary64 або binary16 (для ``'f''`` ,"
" ``'d'`` або ``'e'`` відповідно), незалежно від формату з плаваючою комою, "
"який використовується платформою."

#: ../../library/struct.rst:307
msgid ""
"The ``'P'`` format character is only available for the native byte ordering "
"(selected as the default or with the ``'@'`` byte order character). The byte"
" order character ``'='`` chooses to use little- or big-endian ordering based"
" on the host system. The struct module does not interpret this as native "
"ordering, so the ``'P'`` format is not available."
msgstr ""
"Символ формату ``'P'`` доступний лише для власного порядку байтів (вибрано "
"як типовий або з символом порядку байтів ``'@'``). Символ порядку байтів "
"``'='`` вибирає порядок використання малого або великого порядку байтів на "
"основі головної системи. Модуль struct не інтерпретує це як рідне "
"впорядкування, тому формат ``'P'`` недоступний."

#: ../../library/struct.rst:314
msgid ""
"The IEEE 754 binary16 \"half precision\" type was introduced in the 2008 "
"revision of the `IEEE 754 standard <ieee 754 standard_>`_. It has a sign "
"bit, a 5-bit exponent and 11-bit precision (with 10 bits explicitly stored),"
" and can represent numbers between approximately ``6.1e-05`` and ``6.5e+04``"
" at full precision. This type is not widely supported by C compilers: on a "
"typical machine, an unsigned short can be used for storage, but not for math"
" operations. See the Wikipedia page on the `half-precision floating-point "
"format <half precision format_>`_ for more information."
msgstr ""
"Двійковий тип16 IEEE 754 із \"половиною точності\" було введено в редакції "
"2008 року `стандарту IEEE 754 <ieee 754 standard_>`_. Він має знаковий біт, "
"5-бітний експоненту та 11-бітну точність (з 10 бітами, збереженими явно), і "
"може представляти числа приблизно від ``6.1e-05`` до ``6.5e+04`` з повною "
"точністю. . Цей тип не широко підтримується компіляторами C: на типовій "
"машині беззнаковий короткий можна використовувати для зберігання, але не для"
" математичних операцій. Перегляньте сторінку Вікіпедії про `формат числа з "
"плаваючою комою половинної точності <half precision format_>`_ для отримання"
" додаткової інформації."

#: ../../library/struct.rst:324
msgid "When packing, ``'x'`` inserts one NUL byte."
msgstr ""

#: ../../library/struct.rst:327
msgid ""
"The ``'p'`` format character encodes a \"Pascal string\", meaning a short "
"variable-length string stored in a *fixed number of bytes*, given by the "
"count. The first byte stored is the length of the string, or 255, whichever "
"is smaller.  The bytes of the string follow.  If the string passed in to "
":func:`pack` is too long (longer than the count minus 1), only the leading "
"``count-1`` bytes of the string are stored.  If the string is shorter than "
"``count-1``, it is padded with null bytes so that exactly count bytes in all"
" are used.  Note that for :func:`unpack`, the ``'p'`` format character "
"consumes ``count`` bytes, but that the string returned can never contain "
"more than 255 bytes."
msgstr ""
"Символ формату ``'p'`` кодує \"рядок Pascal\", що означає короткий рядок "
"змінної довжини, що зберігається у *фіксованій кількості байтів*, визначеній"
" підрахунком. Перший збережений байт — це довжина рядка або 255, залежно від"
" того, що менше. Далі йдуть байти рядка. Якщо рядок, переданий у "
":func:`pack`, задовгий (довший за лічильник мінус 1), зберігаються лише "
"перші байти ``count-1`` рядка. Якщо рядок коротший за ``count-1``, він "
"доповнюється нульовими байтами, щоб використати рівно кількість байтів. "
"Зверніть увагу, що для :func:`unpack` символ формату ``'p'`` споживає "
"``count`` байтів, але що повернутий рядок ніколи не може містити більше 255 "
"байтів."

#: ../../library/struct.rst:339
msgid ""
"For the ``'s'`` format character, the count is interpreted as the length of "
"the bytes, not a repeat count like for the other format characters; for "
"example, ``'10s'`` means a single 10-byte string mapping to or from a single"
" Python byte string, while ``'10c'`` means 10 separate one byte character "
"elements (e.g., ``cccccccccc``) mapping to or from ten different Python byte"
" objects. (See :ref:`struct-examples` for a concrete demonstration of the "
"difference.) If a count is not given, it defaults to 1.  For packing, the "
"string is truncated or padded with null bytes as appropriate to make it fit."
" For unpacking, the resulting bytes object always has exactly the specified "
"number of bytes.  As a special case, ``'0s'`` means a single, empty string "
"(while ``'0c'`` means 0 characters)."
msgstr ""

#: ../../library/struct.rst:352
msgid ""
"A format character may be preceded by an integral repeat count.  For "
"example, the format string ``'4h'`` means exactly the same as ``'hhhh'``."
msgstr ""
"Символу форматування може передувати цілий підрахунок повторів. Наприклад, "
"рядок формату ``'4h''`` означає те саме, що ``'hhhh'``."

#: ../../library/struct.rst:355
msgid ""
"Whitespace characters between formats are ignored; a count and its format "
"must not contain whitespace though."
msgstr ""
"Пробіли між форматами ігноруються; кількість і його формат не повинні "
"містити пробіли."

#: ../../library/struct.rst:358
msgid ""
"When packing a value ``x`` using one of the integer formats (``'b'``, "
"``'B'``, ``'h'``, ``'H'``, ``'i'``, ``'I'``, ``'l'``, ``'L'``, ``'q'``, "
"``'Q'``), if ``x`` is outside the valid range for that format then "
":exc:`struct.error` is raised."
msgstr ""
"Під час пакування значення ``x`` з використанням одного з цілочисельних "
"форматів (``'b'``, ``'B'``, ``'h'``, ``'H'``, ``'i'``, ``'I'``, ``'l'``, "
"``'L'``, ``'q'``, ``'Q'``), якщо ``x`` знаходиться за межами допустимого "
"діапазону для цього формату, тоді виникає :exc:`struct.error`."

#: ../../library/struct.rst:363
msgid ""
"Previously, some of the integer formats wrapped out-of-range values and "
"raised :exc:`DeprecationWarning` instead of :exc:`struct.error`."
msgstr ""
"Раніше деякі цілочисельні формати обгортали значення поза діапазоном і "
"викликали :exc:`DeprecationWarning` замість :exc:`struct.error`."

#: ../../library/struct.rst:369
msgid ""
"For the ``'?'`` format character, the return value is either :const:`True` "
"or :const:`False`. When packing, the truth value of the argument object is "
"used. Either 0 or 1 in the native or standard bool representation will be "
"packed, and any non-zero value will be ``True`` when unpacking."
msgstr ""
"Для символу формату ``'?'`` повертається значення :const:`True` або "
":const:`False`. При упаковці використовується значення істинності об'єкта "
"аргументу. Буде запаковано 0 або 1 у нативному або стандартному логічному "
"представленні, а будь-яке ненульове значення під час розпакування буде "
"``True``."

#: ../../library/struct.rst:379
msgid "Examples"
msgstr "Приклади"

#: ../../library/struct.rst:382
msgid ""
"Native byte order examples (designated by the ``'@'`` format prefix or lack "
"of any prefix character) may not match what the reader's machine produces as"
" that depends on the platform and compiler."
msgstr ""

#: ../../library/struct.rst:387
msgid ""
"Pack and unpack integers of three different sizes, using big endian "
"ordering::"
msgstr ""

#: ../../library/struct.rst:390
msgid ""
">>> from struct import *\n"
">>> pack(\">bhl\", 1, 2, 3)\n"
"b'\\x01\\x00\\x02\\x00\\x00\\x00\\x03'\n"
">>> unpack('>bhl', b'\\x01\\x00\\x02\\x00\\x00\\x00\\x03')\n"
"(1, 2, 3)\n"
">>> calcsize('>bhl')\n"
"7"
msgstr ""

#: ../../library/struct.rst:398
msgid "Attempt to pack an integer which is too large for the defined field::"
msgstr ""

#: ../../library/struct.rst:400
msgid ""
">>> pack(\">h\", 99999)\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"struct.error: 'h' format requires -32768 <= number <= 32767"
msgstr ""

#: ../../library/struct.rst:405
msgid ""
"Demonstrate the difference between ``'s'`` and ``'c'`` format characters::"
msgstr ""

#: ../../library/struct.rst:408
msgid ""
">>> pack(\"@ccc\", b'1', b'2', b'3')\n"
"b'123'\n"
">>> pack(\"@3s\", b'123')\n"
"b'123'"
msgstr ""

#: ../../library/struct.rst:413
msgid ""
"Unpacked fields can be named by assigning them to variables or by wrapping "
"the result in a named tuple::"
msgstr ""
"Розпаковані поля можна назвати, призначивши їх змінним або загорнувши "
"результат у іменований кортеж::"

#: ../../library/struct.rst:416
msgid ""
">>> record = b'raymond   \\x32\\x12\\x08\\x01\\x08'\n"
">>> name, serialnum, school, gradelevel = unpack('<10sHHb', record)\n"
"\n"
">>> from collections import namedtuple\n"
">>> Student = namedtuple('Student', 'name serialnum school gradelevel')\n"
">>> Student._make(unpack('<10sHHb', record))\n"
"Student(name=b'raymond   ', serialnum=4658, school=264, gradelevel=8)"
msgstr ""

#: ../../library/struct.rst:424
msgid ""
"The ordering of format characters may have an impact on size in native mode "
"since padding is implicit. In standard mode, the user is responsible for "
"inserting any desired padding. Note in the first ``pack`` call below that "
"three NUL bytes were added after the packed ``'#'`` to align the following "
"integer on a four-byte boundary. In this example, the output was produced on"
" a little endian machine::"
msgstr ""

#: ../../library/struct.rst:432
msgid ""
">>> pack('@ci', b'#', 0x12131415)\n"
"b'#\\x00\\x00\\x00\\x15\\x14\\x13\\x12'\n"
">>> pack('@ic', 0x12131415, b'#')\n"
"b'\\x15\\x14\\x13\\x12#'\n"
">>> calcsize('@ci')\n"
"8\n"
">>> calcsize('@ic')\n"
"5"
msgstr ""

#: ../../library/struct.rst:441
msgid ""
"The following format ``'llh0l'`` results in two pad bytes being added at the"
" end, assuming the platform's longs are aligned on 4-byte boundaries::"
msgstr ""

#: ../../library/struct.rst:444
msgid ""
">>> pack('@llh0l', 1, 2, 3)\n"
"b'\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x02\\x00\\x03\\x00\\x00'"
msgstr ""

#: ../../library/struct.rst:450
msgid "Module :mod:`array`"
msgstr "Модуль :mod:`array`"

#: ../../library/struct.rst:451
msgid "Packed binary storage of homogeneous data."
msgstr "Упаковане двійкове сховище однорідних даних."

#: ../../library/struct.rst:453
msgid "Module :mod:`json`"
msgstr "Модуль :mod:`json`"

#: ../../library/struct.rst:454
msgid "JSON encoder and decoder."
msgstr ""

#: ../../library/struct.rst:456
msgid "Module :mod:`pickle`"
msgstr "Модуль :mod:`pickle`"

#: ../../library/struct.rst:457
msgid "Python object serialization."
msgstr ""

#: ../../library/struct.rst:463
msgid "Applications"
msgstr ""

#: ../../library/struct.rst:465
msgid ""
"Two main applications for the :mod:`struct` module exist, data interchange "
"between Python and C code within an application or another application "
"compiled using the same compiler (:ref:`native formats<struct-native-"
"formats>`), and data interchange between applications using agreed upon data"
" layout (:ref:`standard formats<struct-standard-formats>`).  Generally "
"speaking, the format strings constructed for these two domains are distinct."
msgstr ""

#: ../../library/struct.rst:476
msgid "Native Formats"
msgstr ""

#: ../../library/struct.rst:478
msgid ""
"When constructing format strings which mimic native layouts, the compiler "
"and machine architecture determine byte ordering and padding. In such cases,"
" the ``@`` format character should be used to specify native byte ordering "
"and data sizes.  Internal pad bytes are normally inserted automatically.  It"
" is possible that a zero-repeat format code will be needed at the end of a "
"format string to round up to the correct byte boundary for proper alignment "
"of consecutive chunks of data."
msgstr ""

#: ../../library/struct.rst:486
msgid ""
"Consider these two simple examples (on a 64-bit, little-endian machine)::"
msgstr ""

#: ../../library/struct.rst:489
msgid ""
">>> calcsize('@lhl')\n"
"24\n"
">>> calcsize('@llh')\n"
"18"
msgstr ""

#: ../../library/struct.rst:494
msgid ""
"Data is not padded to an 8-byte boundary at the end of the second format "
"string without the use of extra padding.  A zero-repeat format code solves "
"that problem::"
msgstr ""

#: ../../library/struct.rst:498
msgid ""
">>> calcsize('@llh0l')\n"
"24"
msgstr ""

#: ../../library/struct.rst:501
msgid ""
"The ``'x'`` format code can be used to specify the repeat, but for native "
"formats it is better to use a zero-repeat format like ``'0l'``."
msgstr ""

#: ../../library/struct.rst:504
msgid ""
"By default, native byte ordering and alignment is used, but it is better to "
"be explicit and use the ``'@'`` prefix character."
msgstr ""

#: ../../library/struct.rst:511
msgid "Standard Formats"
msgstr ""

#: ../../library/struct.rst:513
msgid ""
"When exchanging data beyond your process such as networking or storage, be "
"precise.  Specify the exact byte order, size, and alignment.  Do not assume "
"they match the native order of a particular machine. For example, network "
"byte order is big-endian, while many popular CPUs are little-endian.  By "
"defining this explicitly, the user need not care about the specifics of the "
"platform their code is running on. The first character should typically be "
"``<`` or ``>`` (or ``!``).  Padding is the responsibility of the programmer."
"  The zero-repeat format character won't work.  Instead, the user must "
"explicitly add ``'x'`` pad bytes where needed.  Revisiting the examples from"
" the previous section, we have::"
msgstr ""

#: ../../library/struct.rst:525
msgid ""
">>> calcsize('<qh6xq')\n"
"24\n"
">>> pack('<qh6xq', 1, 2, 3) == pack('@lhl', 1, 2, 3)\n"
"True\n"
">>> calcsize('@llh')\n"
"18\n"
">>> pack('@llh', 1, 2, 3) == pack('<qqh', 1, 2, 3)\n"
"True\n"
">>> calcsize('<qqh6x')\n"
"24\n"
">>> calcsize('@llh0l')\n"
"24\n"
">>> pack('@llh0l', 1, 2, 3) == pack('<qqh6x', 1, 2, 3)\n"
"True"
msgstr ""

#: ../../library/struct.rst:540
msgid ""
"The above results (executed on a 64-bit machine) aren't guaranteed to match "
"when executed on different machines.  For example, the examples below were "
"executed on a 32-bit machine::"
msgstr ""

#: ../../library/struct.rst:544
msgid ""
">>> calcsize('<qqh6x')\n"
"24\n"
">>> calcsize('@llh0l')\n"
"12\n"
">>> pack('@llh0l', 1, 2, 3) == pack('<qqh6x', 1, 2, 3)\n"
"False"
msgstr ""

#: ../../library/struct.rst:555
msgid "Classes"
msgstr "Класи"

#: ../../library/struct.rst:557
msgid "The :mod:`struct` module also defines the following type:"
msgstr "Модуль :mod:`struct` також визначає наступний тип:"

#: ../../library/struct.rst:562
msgid ""
"Return a new Struct object which writes and reads binary data according to "
"the format string *format*.  Creating a ``Struct`` object once and calling "
"its methods is more efficient than calling module-level functions with the "
"same format since the format string is only compiled once."
msgstr ""

#: ../../library/struct.rst:569
msgid ""
"The compiled versions of the most recent format strings passed to the "
"module-level functions are cached, so programs that use only a few format "
"strings needn't worry about reusing a single :class:`Struct` instance."
msgstr ""

#: ../../library/struct.rst:574
msgid "Compiled Struct objects support the following methods and attributes:"
msgstr "Зкомпільовані об’єкти Struct підтримують наступні методи та атрибути:"

#: ../../library/struct.rst:578
msgid ""
"Identical to the :func:`pack` function, using the compiled format. "
"(``len(result)`` will equal :attr:`size`.)"
msgstr ""
"Ідентична функції :func:`pack`, використовуючи скомпільований формат. "
"(``len(result)`` дорівнюватиме :attr:`size`.)"

#: ../../library/struct.rst:584
msgid ""
"Identical to the :func:`pack_into` function, using the compiled format."
msgstr ""
"Ідентична функції :func:`pack_into`, використовуючи скомпільований формат."

#: ../../library/struct.rst:589
msgid ""
"Identical to the :func:`unpack` function, using the compiled format. The "
"buffer's size in bytes must equal :attr:`size`."
msgstr ""
"Ідентична функції :func:`unpack`, використовуючи скомпільований формат. "
"Розмір буфера в байтах має дорівнювати :attr:`size`."

#: ../../library/struct.rst:595
msgid ""
"Identical to the :func:`unpack_from` function, using the compiled format. "
"The buffer's size in bytes, starting at position *offset*, must be at least "
":attr:`size`."
msgstr ""
"Ідентична функції :func:`unpack_from`, використовуючи скомпільований формат."
" Розмір буфера в байтах, починаючи з позиції *offset*, має бути не менше "
":attr:`size`."

#: ../../library/struct.rst:602
msgid ""
"Identical to the :func:`iter_unpack` function, using the compiled format. "
"The buffer's size in bytes must be a multiple of :attr:`size`."
msgstr ""
"Ідентична функції :func:`iter_unpack`, використовуючи скомпільований формат."
" Розмір буфера в байтах має бути кратним :attr:`size`."

#: ../../library/struct.rst:609
msgid "The format string used to construct this Struct object."
msgstr ""
"Рядок формату, який використовується для створення цього об’єкта Struct."

#: ../../library/struct.rst:611
msgid "The format string type is now :class:`str` instead of :class:`bytes`."
msgstr "Тип рядка формату тепер :class:`str` замість :class:`bytes`."

#: ../../library/struct.rst:616
msgid ""
"The calculated size of the struct (and hence of the bytes object produced by"
" the :meth:`pack` method) corresponding to :attr:`format`."
msgstr ""
"Розрахований розмір структури (і, отже, об’єкта bytes, створеного методом "
":meth:`pack`), що відповідає :attr:`format`."

#: ../../library/struct.rst:619
msgid "The *repr()* of structs has changed.  It is now:"
msgstr ""

#: ../../library/struct.rst:13
msgid "C"
msgstr "C"

#: ../../library/struct.rst:13
msgid "structures"
msgstr ""

#: ../../library/struct.rst:13
msgid "packing"
msgstr ""

#: ../../library/struct.rst:13
msgid "binary"
msgstr ""

#: ../../library/struct.rst:13
msgid "data"
msgstr "даних"

#: ../../library/struct.rst:136
msgid "@ (at)"
msgstr ""

#: ../../library/struct.rst:136 ../../library/struct.rst:280
#: ../../library/struct.rst:367
msgid "in struct format strings"
msgstr ""

#: ../../library/struct.rst:136
msgid "= (equals)"
msgstr ""

#: ../../library/struct.rst:136
msgid "< (less)"
msgstr ""

#: ../../library/struct.rst:136
msgid "> (greater)"
msgstr ""

#: ../../library/struct.rst:136
msgid "! (exclamation)"
msgstr "! (знак оклику)"

#: ../../library/struct.rst:280 ../../library/struct.rst:367
msgid "? (question mark)"
msgstr "? (знак питання)"
