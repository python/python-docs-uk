# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Dmytro Kazanzhy, 2022
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-11-19 01:00+0000\n"
"PO-Revision-Date: 2021-06-28 01:04+0000\n"
"Last-Translator: Dmytro Kazanzhy, 2022\n"
"Language-Team: Ukrainian (https://app.transifex.com/python-doc/teams/5390/uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != 11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % 100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || (n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

#: ../../library/devmode.rst:4
msgid "Python Development Mode"
msgstr "Режим розробки Python"

#: ../../library/devmode.rst:8
msgid ""
"The Python Development Mode introduces additional runtime checks that are "
"too expensive to be enabled by default. It should not be more verbose than "
"the default if the code is correct; new warnings are only emitted when an "
"issue is detected."
msgstr ""
"Режим розробки Python вводить додаткові перевірки під час виконання, які "
"занадто дорогі, щоб їх можна було ввімкнути за замовчуванням. Якщо код "
"правильний, він не повинен бути більш детальним, ніж стандартний; нові "
"попередження видаються лише тоді, коли виявляється проблема."

#: ../../library/devmode.rst:13
msgid ""
"It can be enabled using the :option:`-X dev <-X>` command line option or by "
"setting the :envvar:`PYTHONDEVMODE` environment variable to ``1``."
msgstr ""
"Його можна ввімкнути за допомогою параметра командного рядка :option:`-X dev"
" <-X>` або встановивши для змінної середовища :envvar:`PYTHONDEVMODE` "
"значення ``1``."

#: ../../library/devmode.rst:16
msgid "See also :ref:`Python debug build <debug-build>`."
msgstr "Дивіться також :ref:`Python debug build <debug-build>`."

#: ../../library/devmode.rst:19
msgid "Effects of the Python Development Mode"
msgstr "Ефекти режиму розробки Python"

#: ../../library/devmode.rst:21
msgid ""
"Enabling the Python Development Mode is similar to the following command, "
"but with additional effects described below::"
msgstr ""
"Увімкнення режиму розробки Python подібне до наступної команди, але з "
"додатковими ефектами, описаними нижче:"

#: ../../library/devmode.rst:24
msgid ""
"PYTHONMALLOC=debug PYTHONASYNCIODEBUG=1 python -W default -X faulthandler"
msgstr ""

#: ../../library/devmode.rst:26
msgid "Effects of the Python Development Mode:"
msgstr "Наслідки режиму розробки Python:"

#: ../../library/devmode.rst:28
msgid ""
"Add ``default`` :ref:`warning filter <describing-warning-filters>`. The "
"following warnings are shown:"
msgstr ""
"Додайте ``за замовчуванням`` :ref:`фільтр попереджень <describing-warning-"
"filters>`. Відображаються такі попередження:"

#: ../../library/devmode.rst:31
msgid ":exc:`DeprecationWarning`"
msgstr ":exc:`DeprecationWarning`"

#: ../../library/devmode.rst:32
msgid ":exc:`ImportWarning`"
msgstr ":exc:`ImportWarning`"

#: ../../library/devmode.rst:33
msgid ":exc:`PendingDeprecationWarning`"
msgstr ":exc:`PendingDeprecationWarning`"

#: ../../library/devmode.rst:34
msgid ":exc:`ResourceWarning`"
msgstr ":exc:`ResourceWarning`"

#: ../../library/devmode.rst:36
msgid ""
"Normally, the above warnings are filtered by the default :ref:`warning "
"filters <describing-warning-filters>`."
msgstr ""
"Зазвичай наведені вище попередження фільтруються стандартними "
":ref:`фільтрами попереджень <describing-warning-filters>`."

#: ../../library/devmode.rst:39
msgid ""
"It behaves as if the :option:`-W default <-W>` command line option is used."
msgstr ""
"Він поводиться так, ніби використовується параметр командного рядка "
":option:`-W за замовчуванням <-W>`."

#: ../../library/devmode.rst:41
msgid ""
"Use the :option:`-W error <-W>` command line option or set the "
":envvar:`PYTHONWARNINGS` environment variable to ``error`` to treat warnings"
" as errors."
msgstr ""
"Використовуйте параметр командного рядка :option:`-W error <-W>` або "
"встановіть для змінної середовища :envvar:`PYTHONWARNINGS` значення "
"``error``, щоб розглядати попередження як помилки."

#: ../../library/devmode.rst:45
msgid "Install debug hooks on memory allocators to check for:"
msgstr ""
"Встановіть перехоплювачі налагодження на розподілювачі пам’яті, щоб "
"перевірити:"

#: ../../library/devmode.rst:47
msgid "Buffer underflow"
msgstr "Недоповнення буфера"

#: ../../library/devmode.rst:48
msgid "Buffer overflow"
msgstr "Переповнення буфера"

#: ../../library/devmode.rst:49
msgid "Memory allocator API violation"
msgstr "Порушення API розподілювача пам'яті"

#: ../../library/devmode.rst:50
msgid "Unsafe usage of the GIL"
msgstr "Небезпечне використання GIL"

#: ../../library/devmode.rst:52
msgid "See the :c:func:`PyMem_SetupDebugHooks` C function."
msgstr "Перегляньте функцію C :c:func:`PyMem_SetupDebugHooks`."

#: ../../library/devmode.rst:54
msgid ""
"It behaves as if the :envvar:`PYTHONMALLOC` environment variable is set to "
"``debug``."
msgstr ""
"Він поводиться так, ніби для змінної середовища :envvar:`PYTHONMALLOC` "
"встановлено значення ``debug``."

#: ../../library/devmode.rst:57
msgid ""
"To enable the Python Development Mode without installing debug hooks on "
"memory allocators, set the :envvar:`PYTHONMALLOC` environment variable to "
"``default``."
msgstr ""
"Щоб увімкнути режим розробки Python, не встановлюючи налагоджувальні засоби "
"розподілення пам’яті, встановіть для змінної середовища "
":envvar:`PYTHONMALLOC` значення ``default``."

#: ../../library/devmode.rst:61
msgid ""
"Call :func:`faulthandler.enable` at Python startup to install handlers for "
"the :const:`~signal.SIGSEGV`, :const:`~signal.SIGFPE`, "
":const:`~signal.SIGABRT`, :const:`~signal.SIGBUS` and "
":const:`~signal.SIGILL` signals to dump the Python traceback on a crash."
msgstr ""

#: ../../library/devmode.rst:66
msgid ""
"It behaves as if the :option:`-X faulthandler <-X>` command line option is "
"used or if the :envvar:`PYTHONFAULTHANDLER` environment variable is set to "
"``1``."
msgstr ""
"Він поводиться так, ніби використовується параметр командного рядка "
":option:`-X faulthandler <-X>` або якщо змінна середовища "
":envvar:`PYTHONFAULTHANDLER` має значення ``1``."

#: ../../library/devmode.rst:70
msgid ""
"Enable :ref:`asyncio debug mode <asyncio-debug-mode>`. For example, "
":mod:`asyncio` checks for coroutines that were not awaited and logs them."
msgstr ""
"Увімкнути :ref:`асинхронний режим налагодження <asyncio-debug-mode>`. "
"Наприклад, :mod:`asyncio` перевіряє співпрограми, які не були очікувані, і "
"реєструє їх."

#: ../../library/devmode.rst:73
msgid ""
"It behaves as if the :envvar:`PYTHONASYNCIODEBUG` environment variable is "
"set to ``1``."
msgstr ""
"Він поводиться так, ніби для змінної середовища :envvar:`PYTHONASYNCIODEBUG`"
" встановлено значення ``1``."

#: ../../library/devmode.rst:76
msgid ""
"Check the *encoding* and *errors* arguments for string encoding and decoding"
" operations. Examples: :func:`open`, :meth:`str.encode` and "
":meth:`bytes.decode`."
msgstr ""
"Перевірте аргументи *encoding* і *errors* для операцій кодування та "
"декодування рядків. Приклади: :func:`open`, :meth:`str.encode` і "
":meth:`bytes.decode`."

#: ../../library/devmode.rst:80
msgid ""
"By default, for best performance, the *errors* argument is only checked at "
"the first encoding/decoding error and the *encoding* argument is sometimes "
"ignored for empty strings."
msgstr ""
"За замовчуванням для найкращої продуктивності аргумент *errors* "
"перевіряється лише при першій помилці кодування/декодування, а аргумент "
"*encoding* іноді ігнорується для порожніх рядків."

#: ../../library/devmode.rst:84
msgid "The :class:`io.IOBase` destructor logs ``close()`` exceptions."
msgstr "Деструктор :class:`io.IOBase` реєструє винятки ``close()``."

#: ../../library/devmode.rst:85
msgid ""
"Set the :attr:`~sys.flags.dev_mode` attribute of :data:`sys.flags` to "
"``True``."
msgstr ""

#: ../../library/devmode.rst:88
msgid ""
"The Python Development Mode does not enable the :mod:`tracemalloc` module by"
" default, because the overhead cost (to performance and memory) would be too"
" large. Enabling the :mod:`tracemalloc` module provides additional "
"information on the origin of some errors. For example, "
":exc:`ResourceWarning` logs the traceback where the resource was allocated, "
"and a buffer overflow error logs the traceback where the memory block was "
"allocated."
msgstr ""
"Режим розробки Python не вмикає модуль :mod:`tracemalloc` за замовчуванням, "
"оскільки накладні витрати (для продуктивності та пам’яті) будуть занадто "
"великими. Увімкнення модуля :mod:`tracemalloc` надає додаткову інформацію "
"про походження деяких помилок. Наприклад, :exc:`ResourceWarning` реєструє "
"відстеження, де було виділено ресурс, а помилка переповнення буфера реєструє"
" відстеження, де було виділено блок пам’яті."

#: ../../library/devmode.rst:95
msgid ""
"The Python Development Mode does not prevent the :option:`-O` command line "
"option from removing :keyword:`assert` statements nor from setting "
":const:`__debug__` to ``False``."
msgstr ""
"Режим розробки Python не заважає параметру командного рядка :option:`-O` "
"видаляти оператори :keyword:`assert` або встановлювати :const:`__debug__` "
"значення ``False``."

#: ../../library/devmode.rst:99
msgid ""
"The Python Development Mode can only be enabled at the Python startup. Its "
"value can be read from :data:`sys.flags.dev_mode <sys.flags>`."
msgstr ""
"Режим розробки Python можна ввімкнути лише під час запуску Python. Його "
"значення можна прочитати з :data:`sys.flags.dev_mode <sys.flags>`."

#: ../../library/devmode.rst:102
msgid "The :class:`io.IOBase` destructor now logs ``close()`` exceptions."
msgstr "Деструктор :class:`io.IOBase` тепер реєструє винятки ``close()``."

#: ../../library/devmode.rst:105
msgid ""
"The *encoding* and *errors* arguments are now checked for string encoding "
"and decoding operations."
msgstr ""
"Аргументи *encoding* і *errors* тепер перевіряються на наявність операцій "
"кодування та декодування рядків."

#: ../../library/devmode.rst:111
msgid "ResourceWarning Example"
msgstr "Приклад ResourceWarning"

#: ../../library/devmode.rst:113
msgid ""
"Example of a script counting the number of lines of the text file specified "
"in the command line::"
msgstr ""
"Приклад сценарію підрахунку кількості рядків текстового файлу, вказаного в "
"командному рядку:"

#: ../../library/devmode.rst:116
msgid ""
"import sys\n"
"\n"
"def main():\n"
"    fp = open(sys.argv[1])\n"
"    nlines = len(fp.readlines())\n"
"    print(nlines)\n"
"    # The file is closed implicitly\n"
"\n"
"if __name__ == \"__main__\":\n"
"    main()"
msgstr ""

#: ../../library/devmode.rst:127
msgid ""
"The script does not close the file explicitly. By default, Python does not "
"emit any warning. Example using README.txt, which has 269 lines:"
msgstr ""
"Сценарій не закриває файл явно. За замовчуванням Python не видає жодних "
"попереджень. Приклад використання README.txt, який містить 269 рядків:"

#: ../../library/devmode.rst:130
msgid ""
"$ python script.py README.txt\n"
"269"
msgstr ""

#: ../../library/devmode.rst:135
msgid ""
"Enabling the Python Development Mode displays a :exc:`ResourceWarning` "
"warning:"
msgstr ""
"Увімкнення режиму розробки Python відображає попередження "
":exc:`ResourceWarning`:"

#: ../../library/devmode.rst:137
msgid ""
"$ python -X dev script.py README.txt\n"
"269\n"
"script.py:10: ResourceWarning: unclosed file <_io.TextIOWrapper name='README.rst' mode='r' encoding='UTF-8'>\n"
"  main()\n"
"ResourceWarning: Enable tracemalloc to get the object allocation traceback"
msgstr ""

#: ../../library/devmode.rst:145
msgid ""
"In addition, enabling :mod:`tracemalloc` shows the line where the file was "
"opened:"
msgstr ""
"Крім того, увімкнення :mod:`tracemalloc` показує рядок, де було відкрито "
"файл:"

#: ../../library/devmode.rst:148
msgid ""
"$ python -X dev -X tracemalloc=5 script.py README.rst\n"
"269\n"
"script.py:10: ResourceWarning: unclosed file <_io.TextIOWrapper name='README.rst' mode='r' encoding='UTF-8'>\n"
"  main()\n"
"Object allocated at (most recent call last):\n"
"  File \"script.py\", lineno 10\n"
"    main()\n"
"  File \"script.py\", lineno 4\n"
"    fp = open(sys.argv[1])"
msgstr ""

#: ../../library/devmode.rst:160
msgid ""
"The fix is to close explicitly the file. Example using a context manager::"
msgstr ""
"Виправлення полягає в тому, щоб явно закрити файл. Приклад використання "
"контекстного менеджера::"

#: ../../library/devmode.rst:162
msgid ""
"def main():\n"
"    # Close the file explicitly when exiting the with block\n"
"    with open(sys.argv[1]) as fp:\n"
"        nlines = len(fp.readlines())\n"
"    print(nlines)"
msgstr ""

#: ../../library/devmode.rst:168
msgid ""
"Not closing a resource explicitly can leave a resource open for way longer "
"than expected; it can cause severe issues upon exiting Python. It is bad in "
"CPython, but it is even worse in PyPy. Closing resources explicitly makes an"
" application more deterministic and more reliable."
msgstr ""
"Якщо ресурс не закрити явно, він може залишитися відкритим набагато довше, "
"ніж очікувалося; це може спричинити серйозні проблеми після виходу з Python."
" Це погано в CPython, але ще гірше в PyPy. Закриття ресурсів явно робить "
"додаток більш детермінованим і надійнішим."

#: ../../library/devmode.rst:175
msgid "Bad file descriptor error example"
msgstr "Приклад помилки неправильного дескриптора файлу"

#: ../../library/devmode.rst:177
msgid "Script displaying the first line of itself::"
msgstr "Сценарій, що відображає перший рядок самого себе::"

#: ../../library/devmode.rst:179
msgid ""
"import os\n"
"\n"
"def main():\n"
"    fp = open(__file__)\n"
"    firstline = fp.readline()\n"
"    print(firstline.rstrip())\n"
"    os.close(fp.fileno())\n"
"    # The file is closed implicitly\n"
"\n"
"main()"
msgstr ""

#: ../../library/devmode.rst:190
msgid "By default, Python does not emit any warning:"
msgstr "За замовчуванням Python не видає жодного попередження:"

#: ../../library/devmode.rst:192
msgid ""
"$ python script.py\n"
"import os"
msgstr ""

#: ../../library/devmode.rst:197
msgid ""
"The Python Development Mode shows a :exc:`ResourceWarning` and logs a \"Bad "
"file descriptor\" error when finalizing the file object:"
msgstr ""
"Режим розробки Python показує :exc:`ResourceWarning` і реєструє помилку "
"\"Поганий дескриптор файлу\" під час завершення об’єкта файлу:"

#: ../../library/devmode.rst:200
msgid ""
"$ python -X dev script.py\n"
"import os\n"
"script.py:10: ResourceWarning: unclosed file <_io.TextIOWrapper name='script.py' mode='r' encoding='UTF-8'>\n"
"  main()\n"
"ResourceWarning: Enable tracemalloc to get the object allocation traceback\n"
"Exception ignored in: <_io.TextIOWrapper name='script.py' mode='r' encoding='UTF-8'>\n"
"Traceback (most recent call last):\n"
"  File \"script.py\", line 10, in <module>\n"
"    main()\n"
"OSError: [Errno 9] Bad file descriptor"
msgstr ""

#: ../../library/devmode.rst:213
msgid ""
"``os.close(fp.fileno())`` closes the file descriptor. When the file object "
"finalizer tries to close the file descriptor again, it fails with the ``Bad "
"file descriptor`` error. A file descriptor must be closed only once. In the "
"worst case scenario, closing it twice can lead to a crash (see "
":issue:`18748` for an example)."
msgstr ""
"``os.close(fp.fileno())`` закриває дескриптор файлу. Коли фіналізатор "
"файлового об’єкта знову намагається закрити файловий дескриптор, це не "
"вдається з помилкою ``Поганий файловий дескриптор``. Файловий дескриптор має"
" бути закрито лише один раз. У гіршому випадку подвійне закриття може "
"призвести до збою (див. :issue:`18748` для прикладу)."

#: ../../library/devmode.rst:219
msgid ""
"The fix is to remove the ``os.close(fp.fileno())`` line, or open the file "
"with ``closefd=False``."
msgstr ""
"Виправлення полягає у видаленні рядка ``os.close(fp.fileno())`` або "
"відкритті файлу ``closefd=False``."
