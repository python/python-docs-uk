# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Dmytro Kazanzhy, 2024
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-11-22 14:17+0000\n"
"PO-Revision-Date: 2021-06-28 00:54+0000\n"
"Last-Translator: Dmytro Kazanzhy, 2024\n"
"Language-Team: Ukrainian (https://app.transifex.com/python-doc/teams/5390/uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != 11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % 100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || (n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

#: ../../library/argparse.rst:2
msgid ""
":mod:`!argparse` --- Parser for command-line options, arguments and "
"subcommands"
msgstr ""

#: ../../library/argparse.rst:12
msgid "**Source code:** :source:`Lib/argparse.py`"
msgstr "**Вихідний код:** :source:`Lib/argparse.py`"

#: ../../library/argparse.rst-1
msgid "Tutorial"
msgstr "Підручник"

#: ../../library/argparse.rst:18
msgid ""
"This page contains the API reference information. For a more gentle "
"introduction to Python command-line parsing, have a look at the "
":ref:`argparse tutorial <argparse-tutorial>`."
msgstr ""
"Ця сторінка містить довідкову інформацію про API. Для більш обережного "
"ознайомлення з розбором командного рядка Python перегляньте :ref:`argparse "
"tutorial <argparse-tutorial>`."

#: ../../library/argparse.rst:22
msgid ""
"The :mod:`!argparse` module makes it easy to write user-friendly command-"
"line interfaces. The program defines what arguments it requires, and "
":mod:`!argparse` will figure out how to parse those out of :data:`sys.argv`."
"  The :mod:`!argparse` module also automatically generates help and usage "
"messages.  The module will also issue errors when users give the program "
"invalid arguments."
msgstr ""

#: ../../library/argparse.rst:28
msgid ""
"The :mod:`!argparse` module's support for command-line interfaces is built "
"around an instance of :class:`argparse.ArgumentParser`.  It is a container "
"for argument specifications and has options that apply to the parser as "
"whole::"
msgstr ""

#: ../../library/argparse.rst:32
msgid ""
"parser = argparse.ArgumentParser(\n"
"                    prog='ProgramName',\n"
"                    description='What the program does',\n"
"                    epilog='Text at the bottom of help')"
msgstr ""

#: ../../library/argparse.rst:37
msgid ""
"The :meth:`ArgumentParser.add_argument` method attaches individual argument "
"specifications to the parser.  It supports positional arguments, options "
"that accept values, and on/off flags::"
msgstr ""

#: ../../library/argparse.rst:41
msgid ""
"parser.add_argument('filename')           # positional argument\n"
"parser.add_argument('-c', '--count')      # option that takes a value\n"
"parser.add_argument('-v', '--verbose',\n"
"                    action='store_true')  # on/off flag"
msgstr ""

#: ../../library/argparse.rst:46
msgid ""
"The :meth:`ArgumentParser.parse_args` method runs the parser and places the "
"extracted data in a :class:`argparse.Namespace` object::"
msgstr ""

#: ../../library/argparse.rst:49
msgid ""
"args = parser.parse_args()\n"
"print(args.filename, args.count, args.verbose)"
msgstr ""

#: ../../library/argparse.rst:53
msgid ""
"If you're looking for a guide about how to upgrade :mod:`optparse` code to "
":mod:`!argparse`, see :ref:`Upgrading Optparse Code <upgrading-optparse-"
"code>`."
msgstr ""

#: ../../library/argparse.rst:57
msgid "ArgumentParser objects"
msgstr "Об’єкти ArgumentParser"

#: ../../library/argparse.rst:66
msgid ""
"Create a new :class:`ArgumentParser` object. All parameters should be passed"
" as keyword arguments. Each parameter has its own more detailed description "
"below, but in short they are:"
msgstr ""
"Створіть новий об’єкт :class:`ArgumentParser`. Усі параметри слід передати "
"як аргументи ключового слова. Кожен параметр має власний більш детальний "
"опис нижче, але коротко вони:"

#: ../../library/argparse.rst:70
msgid ""
"prog_ - The name of the program (default: ``os.path.basename(sys.argv[0])``)"
msgstr ""
"prog_ - назва програми (за замовчуванням: ``os.path.basename(sys.argv[0])``)"

#: ../../library/argparse.rst:73
msgid ""
"usage_ - The string describing the program usage (default: generated from "
"arguments added to parser)"
msgstr ""
"usage_ - рядок, що описує використання програми (за замовчуванням: "
"генерується з аргументів, доданих до аналізатора)"

#: ../../library/argparse.rst:76
msgid ""
"description_ - Text to display before the argument help (by default, no "
"text)"
msgstr ""

#: ../../library/argparse.rst:79
msgid ""
"epilog_ - Text to display after the argument help (by default, no text)"
msgstr ""

#: ../../library/argparse.rst:81
msgid ""
"parents_ - A list of :class:`ArgumentParser` objects whose arguments should "
"also be included"
msgstr ""
"Parents_ - список об'єктів :class:`ArgumentParser`, аргументи яких також "
"мають бути включені"

#: ../../library/argparse.rst:84
msgid "formatter_class_ - A class for customizing the help output"
msgstr "formatter_class_ - клас для налаштування виведення довідки"

#: ../../library/argparse.rst:86
msgid ""
"prefix_chars_ - The set of characters that prefix optional arguments "
"(default: '-')"
msgstr ""
"prefix_chars_ - набір символів, які є префіксом необов'язкових аргументів "
"(за замовчуванням: '-')"

#: ../../library/argparse.rst:89
msgid ""
"fromfile_prefix_chars_ - The set of characters that prefix files from which "
"additional arguments should be read (default: ``None``)"
msgstr ""
"fromfile_prefix_chars_ - набір символів, які є префіксами файлів, з яких "
"слід читати додаткові аргументи (за замовчуванням: ``None``)"

#: ../../library/argparse.rst:92
msgid ""
"argument_default_ - The global default value for arguments (default: "
"``None``)"
msgstr ""
"argument_default_ - глобальне значення за замовчуванням для аргументів (за "
"замовчуванням: ``None``)"

#: ../../library/argparse.rst:95
msgid ""
"conflict_handler_ - The strategy for resolving conflicting optionals "
"(usually unnecessary)"
msgstr ""
"конфлікт_обробник_ - стратегія вирішення конфліктних опцій (зазвичай "
"непотрібних)"

#: ../../library/argparse.rst:98
msgid ""
"add_help_ - Add a ``-h/--help`` option to the parser (default: ``True``)"
msgstr ""
"add_help_ - додає опцію ``-h/--help`` до аналізатора (за замовчуванням: "
"``True``)"

#: ../../library/argparse.rst:100
msgid ""
"allow_abbrev_ - Allows long options to be abbreviated if the abbreviation is"
" unambiguous. (default: ``True``)"
msgstr ""
"allow_abbrev_ - Дозволяє скорочувати довгі параметри, якщо скорочення є "
"однозначним. (за замовчуванням: ``True``)"

#: ../../library/argparse.rst:103
msgid ""
"exit_on_error_ - Determines whether or not :class:`!ArgumentParser` exits "
"with error info when an error occurs. (default: ``True``)"
msgstr ""

#: ../../library/argparse.rst:106
msgid "*allow_abbrev* parameter was added."
msgstr "Додано параметр *allow_abbrev*."

#: ../../library/argparse.rst:109
msgid ""
"In previous versions, *allow_abbrev* also disabled grouping of short flags "
"such as ``-vv`` to mean ``-v -v``."
msgstr ""
"У попередніх версіях *allow_abbrev* також вимикав групування коротких "
"прапорців, таких як ``-vv``, щоб означати ``-v -v``."

#: ../../library/argparse.rst:113
msgid "*exit_on_error* parameter was added."
msgstr "Додано параметр *exit_on_error*."

#: ../../library/argparse.rst:116 ../../library/argparse.rst:598
msgid "The following sections describe how each of these are used."
msgstr "У наступних розділах описано, як використовується кожен із них."

#: ../../library/argparse.rst:122
msgid "prog"
msgstr "прог"

#: ../../library/argparse.rst:125
msgid ""
"By default, :class:`ArgumentParser` calculates the name of the program to "
"display in help messages depending on the way the Python interpreter was "
"run:"
msgstr ""

#: ../../library/argparse.rst:128
msgid ""
"The :func:`base name <os.path.basename>` of ``sys.argv[0]`` if a file was "
"passed as argument."
msgstr ""

#: ../../library/argparse.rst:130
msgid ""
"The Python interpreter name followed by ``sys.argv[0]`` if a directory or a "
"zipfile was passed as argument."
msgstr ""

#: ../../library/argparse.rst:132
msgid ""
"The Python interpreter name followed by ``-m`` followed by the module or "
"package name if the :option:`-m` option was used."
msgstr ""

#: ../../library/argparse.rst:135
msgid ""
"This default is almost always desirable because it will make the help "
"messages match the string that was used to invoke the program on the command"
" line. However, to change this default behavior, another value can be "
"supplied using the ``prog=`` argument to :class:`ArgumentParser`::"
msgstr ""

#: ../../library/argparse.rst:140
msgid ""
">>> parser = argparse.ArgumentParser(prog='myprogram')\n"
">>> parser.print_help()\n"
"usage: myprogram [-h]\n"
"\n"
"options:\n"
" -h, --help  show this help message and exit"
msgstr ""

#: ../../library/argparse.rst:147
msgid ""
"Note that the program name, whether determined from ``sys.argv[0]`` or from "
"the ``prog=`` argument, is available to help messages using the ``%(prog)s``"
" format specifier."
msgstr ""
"Зауважте, що ім’я програми, незалежно від того, чи визначається з "
"``sys.argv[0]`` або з ``prog=`` аргументу, доступне для довідкових "
"повідомлень за допомогою специфікатора формату ``%(prog)s``."

#: ../../library/argparse.rst:153
msgid ""
">>> parser = argparse.ArgumentParser(prog='myprogram')\n"
">>> parser.add_argument('--foo', help='foo of the %(prog)s program')\n"
">>> parser.print_help()\n"
"usage: myprogram [-h] [--foo FOO]\n"
"\n"
"options:\n"
" -h, --help  show this help message and exit\n"
" --foo FOO   foo of the myprogram program"
msgstr ""

#: ../../library/argparse.rst:164
msgid "usage"
msgstr "використання"

#: ../../library/argparse.rst:166
msgid ""
"By default, :class:`ArgumentParser` calculates the usage message from the "
"arguments it contains. The default message can be overridden with the "
"``usage=`` keyword argument::"
msgstr ""

#: ../../library/argparse.rst:170
msgid ""
">>> parser = argparse.ArgumentParser(prog='PROG', usage='%(prog)s [options]')\n"
">>> parser.add_argument('--foo', nargs='?', help='foo help')\n"
">>> parser.add_argument('bar', nargs='+', help='bar help')\n"
">>> parser.print_help()\n"
"usage: PROG [options]\n"
"\n"
"positional arguments:\n"
" bar          bar help\n"
"\n"
"options:\n"
" -h, --help   show this help message and exit\n"
" --foo [FOO]  foo help"
msgstr ""

#: ../../library/argparse.rst:183
msgid ""
"The ``%(prog)s`` format specifier is available to fill in the program name "
"in your usage messages."
msgstr ""
"Специфікатор формату ``%(prog)s`` доступний для заповнення назви програми у "
"ваших повідомленнях про використання."

#: ../../library/argparse.rst:190
msgid "description"
msgstr "опис"

#: ../../library/argparse.rst:192
msgid ""
"Most calls to the :class:`ArgumentParser` constructor will use the "
"``description=`` keyword argument.  This argument gives a brief description "
"of what the program does and how it works.  In help messages, the "
"description is displayed between the command-line usage string and the help "
"messages for the various arguments."
msgstr ""

#: ../../library/argparse.rst:198
msgid ""
"By default, the description will be line-wrapped so that it fits within the "
"given space.  To change this behavior, see the formatter_class_ argument."
msgstr ""
"За замовчуванням опис буде перенесено на рядок, щоб він поміщався в заданий "
"простір. Щоб змінити цю поведінку, перегляньте аргумент formatter_class_."

#: ../../library/argparse.rst:203
msgid "epilog"
msgstr "епілог"

#: ../../library/argparse.rst:205
msgid ""
"Some programs like to display additional description of the program after "
"the description of the arguments.  Such text can be specified using the "
"``epilog=`` argument to :class:`ArgumentParser`::"
msgstr ""
"Деякі програми люблять відображати додатковий опис програми після опису "
"аргументів. Такий текст можна вказати за допомогою аргументу ``epilog=`` для"
" :class:`ArgumentParser`::"

#: ../../library/argparse.rst:209
msgid ""
">>> parser = argparse.ArgumentParser(\n"
"...     description='A foo that bars',\n"
"...     epilog=\"And that's how you'd foo a bar\")\n"
">>> parser.print_help()\n"
"usage: argparse.py [-h]\n"
"\n"
"A foo that bars\n"
"\n"
"options:\n"
" -h, --help  show this help message and exit\n"
"\n"
"And that's how you'd foo a bar"
msgstr ""

#: ../../library/argparse.rst:222
msgid ""
"As with the description_ argument, the ``epilog=`` text is by default line-"
"wrapped, but this behavior can be adjusted with the formatter_class_ "
"argument to :class:`ArgumentParser`."
msgstr ""
"Як і в випадку з аргументом description_, текст ``epilog=`` за замовчуванням"
" переносить рядки, але цю поведінку можна налаштувати за допомогою аргументу"
" formatter_class_ на :class:`ArgumentParser`."

#: ../../library/argparse.rst:228
msgid "parents"
msgstr "батьки"

#: ../../library/argparse.rst:230
msgid ""
"Sometimes, several parsers share a common set of arguments. Rather than "
"repeating the definitions of these arguments, a single parser with all the "
"shared arguments and passed to ``parents=`` argument to "
":class:`ArgumentParser` can be used.  The ``parents=`` argument takes a list"
" of :class:`ArgumentParser` objects, collects all the positional and "
"optional actions from them, and adds these actions to the "
":class:`ArgumentParser` object being constructed::"
msgstr ""
"Іноді кілька аналізаторів використовують загальний набір аргументів. Замість"
" того, щоб повторювати визначення цих аргументів, можна використати єдиний "
"синтаксичний аналізатор із усіма спільними аргументами та переданим "
"аргументом ``parents=`` для :class:`ArgumentParser`. Аргумент ``parents=`` "
"бере список об’єктів :class:`ArgumentParser`, збирає всі позиційні та "
"необов’язкові дії з них і додає ці дії до об’єкта :class:`ArgumentParser`, "
"який створюється::"

#: ../../library/argparse.rst:237
msgid ""
">>> parent_parser = argparse.ArgumentParser(add_help=False)\n"
">>> parent_parser.add_argument('--parent', type=int)\n"
"\n"
">>> foo_parser = argparse.ArgumentParser(parents=[parent_parser])\n"
">>> foo_parser.add_argument('foo')\n"
">>> foo_parser.parse_args(['--parent', '2', 'XXX'])\n"
"Namespace(foo='XXX', parent=2)\n"
"\n"
">>> bar_parser = argparse.ArgumentParser(parents=[parent_parser])\n"
">>> bar_parser.add_argument('--bar')\n"
">>> bar_parser.parse_args(['--bar', 'YYY'])\n"
"Namespace(bar='YYY', parent=None)"
msgstr ""

#: ../../library/argparse.rst:250
msgid ""
"Note that most parent parsers will specify ``add_help=False``.  Otherwise, "
"the :class:`ArgumentParser` will see two ``-h/--help`` options (one in the "
"parent and one in the child) and raise an error."
msgstr ""
"Зауважте, що більшість батьківських аналізаторів вказуватимуть "
"``add_help=False``. Інакше :class:`ArgumentParser` побачить два параметри "
"``-h/--help`` (один у батьківському і один у дочірньому) і викличе помилку."

#: ../../library/argparse.rst:255
msgid ""
"You must fully initialize the parsers before passing them via ``parents=``. "
"If you change the parent parsers after the child parser, those changes will "
"not be reflected in the child."
msgstr ""
"Ви повинні повністю ініціалізувати аналізатори перед тим, як передавати їх "
"через ``parents=``. Якщо ви змінюєте батьківські аналізатори після "
"дочірнього, ці зміни не відображатимуться в дочірньому."

#: ../../library/argparse.rst:263
msgid "formatter_class"
msgstr "formatter_class"

#: ../../library/argparse.rst:265
msgid ""
":class:`ArgumentParser` objects allow the help formatting to be customized "
"by specifying an alternate formatting class.  Currently, there are four such"
" classes:"
msgstr ""
"Об’єкти :class:`ArgumentParser` дозволяють налаштувати форматування довідки "
"шляхом визначення альтернативного класу форматування. На даний момент існує "
"чотири таких класи:"

#: ../../library/argparse.rst:274
msgid ""
":class:`RawDescriptionHelpFormatter` and :class:`RawTextHelpFormatter` give "
"more control over how textual descriptions are displayed. By default, "
":class:`ArgumentParser` objects line-wrap the description_ and epilog_ texts"
" in command-line help messages::"
msgstr ""
":class:`RawDescriptionHelpFormatter` і :class:`RawTextHelpFormatter` дають "
"більше контролю над тим, як відображаються текстові описи. За замовчуванням "
"об’єкти :class:`ArgumentParser` переносять тексти description_ і epilog_ у "
"довідкові повідомлення командного рядка:"

#: ../../library/argparse.rst:279
msgid ""
">>> parser = argparse.ArgumentParser(\n"
"...     prog='PROG',\n"
"...     description='''this description\n"
"...         was indented weird\n"
"...             but that is okay''',\n"
"...     epilog='''\n"
"...             likewise for this epilog whose whitespace will\n"
"...         be cleaned up and whose words will be wrapped\n"
"...         across a couple lines''')\n"
">>> parser.print_help()\n"
"usage: PROG [-h]\n"
"\n"
"this description was indented weird but that is okay\n"
"\n"
"options:\n"
" -h, --help  show this help message and exit\n"
"\n"
"likewise for this epilog whose whitespace will be cleaned up and whose words\n"
"will be wrapped across a couple lines"
msgstr ""

#: ../../library/argparse.rst:299
msgid ""
"Passing :class:`RawDescriptionHelpFormatter` as ``formatter_class=`` "
"indicates that description_ and epilog_ are already correctly formatted and "
"should not be line-wrapped::"
msgstr ""
"Передача :class:`RawDescriptionHelpFormatter` як ``formatter_class=`` вказує"
" на те, що description_ і epilog_ вже правильно відформатовані і не повинні "
"бути перенесені в рядок::"

#: ../../library/argparse.rst:303
msgid ""
">>> parser = argparse.ArgumentParser(\n"
"...     prog='PROG',\n"
"...     formatter_class=argparse.RawDescriptionHelpFormatter,\n"
"...     description=textwrap.dedent('''\\\n"
"...         Please do not mess up this text!\n"
"...         --------------------------------\n"
"...             I have indented it\n"
"...             exactly the way\n"
"...             I want it\n"
"...         '''))\n"
">>> parser.print_help()\n"
"usage: PROG [-h]\n"
"\n"
"Please do not mess up this text!\n"
"--------------------------------\n"
"   I have indented it\n"
"   exactly the way\n"
"   I want it\n"
"\n"
"options:\n"
" -h, --help  show this help message and exit"
msgstr ""

#: ../../library/argparse.rst:325
msgid ""
":class:`RawTextHelpFormatter` maintains whitespace for all sorts of help "
"text, including argument descriptions. However, multiple newlines are "
"replaced with one. If you wish to preserve multiple blank lines, add spaces "
"between the newlines."
msgstr ""

#: ../../library/argparse.rst:330
msgid ""
":class:`ArgumentDefaultsHelpFormatter` automatically adds information about "
"default values to each of the argument help messages::"
msgstr ""
":class:`ArgumentDefaultsHelpFormatter` автоматично додає інформацію про "
"значення за замовчуванням до кожного довідкового повідомлення аргументу::"

#: ../../library/argparse.rst:333
msgid ""
">>> parser = argparse.ArgumentParser(\n"
"...     prog='PROG',\n"
"...     formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n"
">>> parser.add_argument('--foo', type=int, default=42, help='FOO!')\n"
">>> parser.add_argument('bar', nargs='*', default=[1, 2, 3], help='BAR!')\n"
">>> parser.print_help()\n"
"usage: PROG [-h] [--foo FOO] [bar ...]\n"
"\n"
"positional arguments:\n"
" bar         BAR! (default: [1, 2, 3])\n"
"\n"
"options:\n"
" -h, --help  show this help message and exit\n"
" --foo FOO   FOO! (default: 42)"
msgstr ""

#: ../../library/argparse.rst:348
msgid ""
":class:`MetavarTypeHelpFormatter` uses the name of the type_ argument for "
"each argument as the display name for its values (rather than using the "
"dest_ as the regular formatter does)::"
msgstr ""
":class:`MetavarTypeHelpFormatter` використовує ім’я аргументу type_ для "
"кожного аргументу як відображуване ім’я для його значень (замість "
"використання dest_, як це робить звичайний засіб форматування):"

#: ../../library/argparse.rst:352
msgid ""
">>> parser = argparse.ArgumentParser(\n"
"...     prog='PROG',\n"
"...     formatter_class=argparse.MetavarTypeHelpFormatter)\n"
">>> parser.add_argument('--foo', type=int)\n"
">>> parser.add_argument('bar', type=float)\n"
">>> parser.print_help()\n"
"usage: PROG [-h] [--foo int] float\n"
"\n"
"positional arguments:\n"
"  float\n"
"\n"
"options:\n"
"  -h, --help  show this help message and exit\n"
"  --foo int"
msgstr ""

#: ../../library/argparse.rst:369
msgid "prefix_chars"
msgstr "prefix_chars"

#: ../../library/argparse.rst:371
msgid ""
"Most command-line options will use ``-`` as the prefix, e.g. ``-f/--foo``. "
"Parsers that need to support different or additional prefix characters, e.g."
" for options like ``+f`` or ``/foo``, may specify them using the "
"``prefix_chars=`` argument to the :class:`ArgumentParser` constructor::"
msgstr ""

#: ../../library/argparse.rst:377
msgid ""
">>> parser = argparse.ArgumentParser(prog='PROG', prefix_chars='-+')\n"
">>> parser.add_argument('+f')\n"
">>> parser.add_argument('++bar')\n"
">>> parser.parse_args('+f X ++bar Y'.split())\n"
"Namespace(bar='Y', f='X')"
msgstr ""

#: ../../library/argparse.rst:383
msgid ""
"The ``prefix_chars=`` argument defaults to ``'-'``. Supplying a set of "
"characters that does not include ``-`` will cause ``-f/--foo`` options to be"
" disallowed."
msgstr ""
"Аргумент ``prefix_chars=`` за умовчанням має значення ``'-'``. Якщо вказати "
"набір символів, який не містить ``-``, параметри ``-f/--foo`` будуть "
"заборонені."

#: ../../library/argparse.rst:389
msgid "fromfile_prefix_chars"
msgstr "fromfile_prefix_chars"

#: ../../library/argparse.rst:391
msgid ""
"Sometimes, when dealing with a particularly long argument list, it may make "
"sense to keep the list of arguments in a file rather than typing it out at "
"the command line.  If the ``fromfile_prefix_chars=`` argument is given to "
"the :class:`ArgumentParser` constructor, then arguments that start with any "
"of the specified characters will be treated as files, and will be replaced "
"by the arguments they contain.  For example::"
msgstr ""

#: ../../library/argparse.rst:398
msgid ""
">>> with open('args.txt', 'w', encoding=sys.getfilesystemencoding()) as fp:\n"
"...     fp.write('-f\\nbar')\n"
"...\n"
">>> parser = argparse.ArgumentParser(fromfile_prefix_chars='@')\n"
">>> parser.add_argument('-f')\n"
">>> parser.parse_args(['-f', 'foo', '@args.txt'])\n"
"Namespace(f='bar')"
msgstr ""

#: ../../library/argparse.rst:406
msgid ""
"Arguments read from a file must by default be one per line (but see also "
":meth:`~ArgumentParser.convert_arg_line_to_args`) and are treated as if they"
" were in the same place as the original file referencing argument on the "
"command line.  So in the example above, the expression ``['-f', 'foo', "
"'@args.txt']`` is considered equivalent to the expression ``['-f', 'foo', "
"'-f', 'bar']``."
msgstr ""
"Аргументи, зчитані з файлу, за замовчуванням мають бути по одному на рядок "
"(але дивіться також :meth:`~ArgumentParser.convert_arg_line_to_args`) і "
"обробляються так, ніби вони знаходяться в тому самому місці, що й вихідний "
"аргумент посилання на файл у командному рядку. Отже, у наведеному вище "
"прикладі вираз ``['-f', 'foo', '@args.txt']`` вважається еквівалентним "
"виразу ``['-f', 'foo', '-f ', 'бар']``."

#: ../../library/argparse.rst:412
msgid ""
":class:`ArgumentParser` uses :term:`filesystem encoding and error handler` "
"to read the file containing arguments."
msgstr ""

#: ../../library/argparse.rst:415
msgid ""
"The ``fromfile_prefix_chars=`` argument defaults to ``None``, meaning that "
"arguments will never be treated as file references."
msgstr ""
"Аргумент ``fromfile_prefix_chars=`` за умовчанням має значення ``None``, що "
"означає, що аргументи ніколи не розглядатимуться як посилання на файли."

#: ../../library/argparse.rst:418
msgid ""
":class:`ArgumentParser` changed encoding and errors to read arguments files "
"from default (e.g. :func:`locale.getpreferredencoding(False) "
"<locale.getpreferredencoding>` and ``\"strict\"``) to the :term:`filesystem "
"encoding and error handler`. Arguments file should be encoded in UTF-8 "
"instead of ANSI Codepage on Windows."
msgstr ""

#: ../../library/argparse.rst:426
msgid "argument_default"
msgstr "аргумент_за замовчуванням"

#: ../../library/argparse.rst:428
msgid ""
"Generally, argument defaults are specified either by passing a default to "
":meth:`~ArgumentParser.add_argument` or by calling the "
":meth:`~ArgumentParser.set_defaults` methods with a specific set of name-"
"value pairs.  Sometimes however, it may be useful to specify a single "
"parser-wide default for arguments.  This can be accomplished by passing the "
"``argument_default=`` keyword argument to :class:`ArgumentParser`.  For "
"example, to globally suppress attribute creation on "
":meth:`~ArgumentParser.parse_args` calls, we supply "
"``argument_default=SUPPRESS``::"
msgstr ""
"Як правило, параметри за замовчуванням вказуються або передачею значення за "
"замовчуванням :meth:`~ArgumentParser.add_argument`, або викликом методів "
":meth:`~ArgumentParser.set_defaults` із певним набором пар ім’я-значення. "
"Іноді, однак, може бути корисно вказати єдине значення за замовчуванням для "
"параметрів аналізатора. Це можна зробити, передавши аргумент ключового слова"
" ``argument_default=`` до :class:`ArgumentParser`. Наприклад, щоб глобально "
"заборонити створення атрибутів у викликах "
":meth:`~ArgumentParser.parse_args`, ми надаємо "
"``argument_default=SUPPRESS``::"

#: ../../library/argparse.rst:437
msgid ""
">>> parser = argparse.ArgumentParser(argument_default=argparse.SUPPRESS)\n"
">>> parser.add_argument('--foo')\n"
">>> parser.add_argument('bar', nargs='?')\n"
">>> parser.parse_args(['--foo', '1', 'BAR'])\n"
"Namespace(bar='BAR', foo='1')\n"
">>> parser.parse_args([])\n"
"Namespace()"
msgstr ""

#: ../../library/argparse.rst:448
msgid "allow_abbrev"
msgstr "дозволити_скорочене"

#: ../../library/argparse.rst:450
msgid ""
"Normally, when you pass an argument list to the "
":meth:`~ArgumentParser.parse_args` method of an :class:`ArgumentParser`, it "
":ref:`recognizes abbreviations <prefix-matching>` of long options."
msgstr ""
"Зазвичай, коли ви передаєте список аргументів у метод "
":meth:`~ArgumentParser.parse_args` :class:`ArgumentParser`, він "
":ref:`розпізнає абревіатури <prefix-matching>` довгих параметрів."

#: ../../library/argparse.rst:454
msgid ""
"This feature can be disabled by setting ``allow_abbrev`` to ``False``::"
msgstr ""
"Цю функцію можна вимкнути, встановивши для параметра ``allow_abbrev`` "
"значення ``False``::"

#: ../../library/argparse.rst:456
msgid ""
">>> parser = argparse.ArgumentParser(prog='PROG', allow_abbrev=False)\n"
">>> parser.add_argument('--foobar', action='store_true')\n"
">>> parser.add_argument('--foonley', action='store_false')\n"
">>> parser.parse_args(['--foon'])\n"
"usage: PROG [-h] [--foobar] [--foonley]\n"
"PROG: error: unrecognized arguments: --foon"
msgstr ""

#: ../../library/argparse.rst:467
msgid "conflict_handler"
msgstr "обробник_конфлікту"

#: ../../library/argparse.rst:469
msgid ""
":class:`ArgumentParser` objects do not allow two actions with the same "
"option string.  By default, :class:`ArgumentParser` objects raise an "
"exception if an attempt is made to create an argument with an option string "
"that is already in use::"
msgstr ""
"Об’єкти :class:`ArgumentParser` не дозволяють дві дії з однаковим рядком "
"параметрів. За замовчуванням об’єкти :class:`ArgumentParser` викликають "
"виняток, якщо робиться спроба створити аргумент із рядком параметрів, який "
"уже використовується:"

#: ../../library/argparse.rst:474
msgid ""
">>> parser = argparse.ArgumentParser(prog='PROG')\n"
">>> parser.add_argument('-f', '--foo', help='old foo help')\n"
">>> parser.add_argument('--foo', help='new foo help')\n"
"Traceback (most recent call last):\n"
" ..\n"
"ArgumentError: argument --foo: conflicting option string(s): --foo"
msgstr ""

#: ../../library/argparse.rst:481
msgid ""
"Sometimes (e.g. when using parents_) it may be useful to simply override any"
" older arguments with the same option string.  To get this behavior, the "
"value ``'resolve'`` can be supplied to the ``conflict_handler=`` argument of"
" :class:`ArgumentParser`::"
msgstr ""
"Іноді (наприклад, під час використання батьків_) може бути корисним просто "
"замінити будь-які старіші аргументи тим самим рядком параметрів. Щоб "
"отримати таку поведінку, значення ``'resolve'`` можна надати аргументу "
"``conflict_handler=`` :class:`ArgumentParser`::"

#: ../../library/argparse.rst:486
msgid ""
">>> parser = argparse.ArgumentParser(prog='PROG', conflict_handler='resolve')\n"
">>> parser.add_argument('-f', '--foo', help='old foo help')\n"
">>> parser.add_argument('--foo', help='new foo help')\n"
">>> parser.print_help()\n"
"usage: PROG [-h] [-f FOO] [--foo FOO]\n"
"\n"
"options:\n"
" -h, --help  show this help message and exit\n"
" -f FOO      old foo help\n"
" --foo FOO   new foo help"
msgstr ""

#: ../../library/argparse.rst:497
msgid ""
"Note that :class:`ArgumentParser` objects only remove an action if all of "
"its option strings are overridden.  So, in the example above, the old "
"``-f/--foo`` action is retained as the ``-f`` action, because only the "
"``--foo`` option string was overridden."
msgstr ""
"Зауважте, що об’єкти :class:`ArgumentParser` видаляють дію лише в тому "
"випадку, якщо перевизначено всі рядки параметрів. Отже, у наведеному вище "
"прикладі стара дія ``-f/--foo`` зберігається як дія ``-f``, тому що було "
"замінено лише рядок опції ``--foo``."

#: ../../library/argparse.rst:504
msgid "add_help"
msgstr "add_help"

#: ../../library/argparse.rst:506
msgid ""
"By default, :class:`ArgumentParser` objects add an option which simply "
"displays the parser's help message. If ``-h`` or ``--help`` is supplied at "
"the command line, the :class:`!ArgumentParser` help will be printed."
msgstr ""

#: ../../library/argparse.rst:510
msgid ""
"Occasionally, it may be useful to disable the addition of this help option. "
"This can be achieved by passing ``False`` as the ``add_help=`` argument to "
":class:`ArgumentParser`::"
msgstr ""
"Іноді може бути корисним вимкнути додавання цієї опції довідки. Цього можна "
"досягти, передавши ``False`` як аргумент ``add_help=`` до "
":class:`ArgumentParser`::"

#: ../../library/argparse.rst:514
msgid ""
">>> parser = argparse.ArgumentParser(prog='PROG', add_help=False)\n"
">>> parser.add_argument('--foo', help='foo help')\n"
">>> parser.print_help()\n"
"usage: PROG [--foo FOO]\n"
"\n"
"options:\n"
" --foo FOO  foo help"
msgstr ""

#: ../../library/argparse.rst:522
msgid ""
"The help option is typically ``-h/--help``. The exception to this is if the "
"``prefix_chars=`` is specified and does not include ``-``, in which case "
"``-h`` and ``--help`` are not valid options.  In this case, the first "
"character in ``prefix_chars`` is used to prefix the help options::"
msgstr ""
"Параметром довідки зазвичай є ``-h/--help``. Винятком є те, що "
"``prefix_chars=`` указано і не містить ``-``, у цьому випадку ``-h`` і "
"``--help`` не є дійсними параметрами. У цьому випадку перший символ у "
"``prefix_chars`` використовується для префіксу параметрів довідки::"

#: ../../library/argparse.rst:528
msgid ""
">>> parser = argparse.ArgumentParser(prog='PROG', prefix_chars='+/')\n"
">>> parser.print_help()\n"
"usage: PROG [+h]\n"
"\n"
"options:\n"
"  +h, ++help  show this help message and exit"
msgstr ""

#: ../../library/argparse.rst:537
msgid "exit_on_error"
msgstr "exit_on_error"

#: ../../library/argparse.rst:539
msgid ""
"Normally, when you pass an invalid argument list to the "
":meth:`~ArgumentParser.parse_args` method of an :class:`ArgumentParser`, it "
"will print a *message* to :data:`sys.stderr` and exit with a status code of "
"2."
msgstr ""

#: ../../library/argparse.rst:543
msgid ""
"If the user would like to catch errors manually, the feature can be enabled "
"by setting ``exit_on_error`` to ``False``::"
msgstr ""
"Якщо користувач хоче виловлювати помилки вручну, цю функцію можна ввімкнути,"
" встановивши для ``exit_on_error`` значення ``False``::"

#: ../../library/argparse.rst:546
msgid ""
">>> parser = argparse.ArgumentParser(exit_on_error=False)\n"
">>> parser.add_argument('--integers', type=int)\n"
"_StoreAction(option_strings=['--integers'], dest='integers', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help=None, metavar=None)\n"
">>> try:\n"
"...     parser.parse_args('--integers a'.split())\n"
"... except argparse.ArgumentError:\n"
"...     print('Catching an argumentError')\n"
"...\n"
"Catching an argumentError"
msgstr ""

#: ../../library/argparse.rst:560
msgid "The add_argument() method"
msgstr "Метод add_argument()."

#: ../../library/argparse.rst:566
msgid ""
"Define how a single command-line argument should be parsed.  Each parameter "
"has its own more detailed description below, but in short they are:"
msgstr ""
"Визначте, як слід аналізувати один аргумент командного рядка. Кожен параметр"
" має власний більш детальний опис нижче, але коротко вони:"

#: ../../library/argparse.rst:569
msgid ""
"`name or flags`_ - Either a name or a list of option strings, e.g. ``'foo'``"
" or ``'-f', '--foo'``."
msgstr ""

#: ../../library/argparse.rst:572
msgid ""
"action_ - The basic type of action to be taken when this argument is "
"encountered at the command line."
msgstr ""
"action_ - основний тип дії, яку потрібно виконати, коли цей аргумент "
"зустрічається в командному рядку."

#: ../../library/argparse.rst:575
msgid "nargs_ - The number of command-line arguments that should be consumed."
msgstr ""
"nargs_ – кількість аргументів командного рядка, які мають бути використані."

#: ../../library/argparse.rst:577
msgid ""
"const_ - A constant value required by some action_ and nargs_ selections."
msgstr ""
"const_ – постійне значення, необхідне для вибору деяких action_ і nargs_."

#: ../../library/argparse.rst:579
msgid ""
"default_ - The value produced if the argument is absent from the command "
"line and if it is absent from the namespace object."
msgstr ""
"default_ – значення, створене, якщо аргумент відсутній у командному рядку та"
" якщо він відсутній в об’єкті простору імен."

#: ../../library/argparse.rst:582
msgid ""
"type_ - The type to which the command-line argument should be converted."
msgstr "type_ – тип, до якого потрібно перетворити аргумент командного рядка."

#: ../../library/argparse.rst:584
msgid "choices_ - A sequence of the allowable values for the argument."
msgstr ""

#: ../../library/argparse.rst:586
msgid ""
"required_ - Whether or not the command-line option may be omitted (optionals"
" only)."
msgstr ""
"required_ – чи можна пропустити параметр командного рядка (тільки "
"необов’язковий)."

#: ../../library/argparse.rst:589
msgid "help_ - A brief description of what the argument does."
msgstr "help_ - короткий опис того, що робить аргумент."

#: ../../library/argparse.rst:591
msgid "metavar_ - A name for the argument in usage messages."
msgstr "metavar_ – назва аргументу в повідомленнях про використання."

#: ../../library/argparse.rst:593
msgid ""
"dest_ - The name of the attribute to be added to the object returned by "
":meth:`parse_args`."
msgstr ""
"dest_ – ім’я атрибута, який буде додано до об’єкта, повернутого "
":meth:`parse_args`."

#: ../../library/argparse.rst:596
msgid "deprecated_ - Whether or not use of the argument is deprecated."
msgstr ""

#: ../../library/argparse.rst:604
msgid "name or flags"
msgstr "назву чи прапори"

#: ../../library/argparse.rst:606
msgid ""
"The :meth:`~ArgumentParser.add_argument` method must know whether an "
"optional argument, like ``-f`` or ``--foo``, or a positional argument, like "
"a list of filenames, is expected.  The first arguments passed to "
":meth:`~ArgumentParser.add_argument` must therefore be either a series of "
"flags, or a simple argument name."
msgstr ""

#: ../../library/argparse.rst:612
msgid "For example, an optional argument could be created like::"
msgstr ""

#: ../../library/argparse.rst:614
msgid ">>> parser.add_argument('-f', '--foo')"
msgstr ""

#: ../../library/argparse.rst:616
msgid "while a positional argument could be created like::"
msgstr "тоді як позиційний аргумент може бути створений таким чином::"

#: ../../library/argparse.rst:618
msgid ">>> parser.add_argument('bar')"
msgstr ""

#: ../../library/argparse.rst:620
msgid ""
"When :meth:`~ArgumentParser.parse_args` is called, optional arguments will "
"be identified by the ``-`` prefix, and the remaining arguments will be "
"assumed to be positional::"
msgstr ""
"Під час виклику :meth:`~ArgumentParser.parse_args` необов’язкові аргументи "
"ідентифікуються префіксом ``-``, а решта аргументів вважатиметься "
"позиційними:"

#: ../../library/argparse.rst:624
msgid ""
">>> parser = argparse.ArgumentParser(prog='PROG')\n"
">>> parser.add_argument('-f', '--foo')\n"
">>> parser.add_argument('bar')\n"
">>> parser.parse_args(['BAR'])\n"
"Namespace(bar='BAR', foo=None)\n"
">>> parser.parse_args(['BAR', '--foo', 'FOO'])\n"
"Namespace(bar='BAR', foo='FOO')\n"
">>> parser.parse_args(['--foo', 'FOO'])\n"
"usage: PROG [-h] [-f FOO] bar\n"
"PROG: error: the following arguments are required: bar"
msgstr ""

#: ../../library/argparse.rst:639
msgid "action"
msgstr "дію"

#: ../../library/argparse.rst:641
msgid ""
":class:`ArgumentParser` objects associate command-line arguments with "
"actions.  These actions can do just about anything with the command-line "
"arguments associated with them, though most actions simply add an attribute "
"to the object returned by :meth:`~ArgumentParser.parse_args`.  The "
"``action`` keyword argument specifies how the command-line arguments should "
"be handled. The supplied actions are:"
msgstr ""
"Об’єкти :class:`ArgumentParser` пов’язують аргументи командного рядка з "
"діями. Ці дії можуть робити що завгодно з пов’язаними з ними аргументами "
"командного рядка, хоча більшість дій просто додають атрибут до об’єкта, який"
" повертає :meth:`~ArgumentParser.parse_args`. Аргумент ключового слова "
"``action`` визначає, як слід обробляти аргументи командного рядка. Надані "
"дії:"

#: ../../library/argparse.rst:647
msgid ""
"``'store'`` - This just stores the argument's value.  This is the default "
"action."
msgstr ""

#: ../../library/argparse.rst:650
msgid ""
"``'store_const'`` - This stores the value specified by the const_ keyword "
"argument; note that the const_ keyword argument defaults to ``None``.  The "
"``'store_const'`` action is most commonly used with optional arguments that "
"specify some sort of flag.  For example::"
msgstr ""

#: ../../library/argparse.rst:655
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--foo', action='store_const', const=42)\n"
">>> parser.parse_args(['--foo'])\n"
"Namespace(foo=42)"
msgstr ""

#: ../../library/argparse.rst:660
msgid ""
"``'store_true'`` and ``'store_false'`` - These are special cases of "
"``'store_const'`` used for storing the values ``True`` and ``False`` "
"respectively.  In addition, they create default values of ``False`` and "
"``True`` respectively::"
msgstr ""

#: ../../library/argparse.rst:665
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--foo', action='store_true')\n"
">>> parser.add_argument('--bar', action='store_false')\n"
">>> parser.add_argument('--baz', action='store_false')\n"
">>> parser.parse_args('--foo --bar'.split())\n"
"Namespace(foo=True, bar=False, baz=True)"
msgstr ""

#: ../../library/argparse.rst:672
msgid ""
"``'append'`` - This stores a list, and appends each argument value to the "
"list. It is useful to allow an option to be specified multiple times. If the"
" default value is non-empty, the default elements will be present in the "
"parsed value for the option, with any values from the command line appended "
"after those default values. Example usage::"
msgstr ""

#: ../../library/argparse.rst:678
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--foo', action='append')\n"
">>> parser.parse_args('--foo 1 --foo 2'.split())\n"
"Namespace(foo=['1', '2'])"
msgstr ""

#: ../../library/argparse.rst:683
msgid ""
"``'append_const'`` - This stores a list, and appends the value specified by "
"the const_ keyword argument to the list; note that the const_ keyword "
"argument defaults to ``None``. The ``'append_const'`` action is typically "
"useful when multiple arguments need to store constants to the same list. For"
" example::"
msgstr ""

#: ../../library/argparse.rst:689
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--str', dest='types', action='append_const', const=str)\n"
">>> parser.add_argument('--int', dest='types', action='append_const', const=int)\n"
">>> parser.parse_args('--str --int'.split())\n"
"Namespace(types=[<class 'str'>, <class 'int'>])"
msgstr ""

#: ../../library/argparse.rst:695
msgid ""
"``'extend'`` - This stores a list and appends each item from the multi-value"
" argument list to it. The ``'extend'`` action is typically used with the "
"nargs_ keyword argument value ``'+'`` or ``'*'``. Note that when nargs_ is "
"``None`` (the default) or ``'?'``, each character of the argument string "
"will be appended to the list. Example usage::"
msgstr ""

#: ../../library/argparse.rst:703
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument(\"--foo\", action=\"extend\", nargs=\"+\", type=str)\n"
">>> parser.parse_args([\"--foo\", \"f1\", \"--foo\", \"f2\", \"f3\", \"f4\"])\n"
"Namespace(foo=['f1', 'f2', 'f3', 'f4'])"
msgstr ""

#: ../../library/argparse.rst:710
msgid ""
"``'count'`` - This counts the number of times a keyword argument occurs. For"
" example, this is useful for increasing verbosity levels::"
msgstr ""
"``'count'`` – підраховує кількість разів, коли виникає аргумент ключового "
"слова. Наприклад, це корисно для збільшення рівнів докладності:"

#: ../../library/argparse.rst:713
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--verbose', '-v', action='count', default=0)\n"
">>> parser.parse_args(['-vvv'])\n"
"Namespace(verbose=3)"
msgstr ""

#: ../../library/argparse.rst:718
msgid "Note, the *default* will be ``None`` unless explicitly set to *0*."
msgstr ""
"Зауважте, *за замовчуванням* буде ``None``, якщо явно не встановлено *0*."

#: ../../library/argparse.rst:720
msgid ""
"``'help'`` - This prints a complete help message for all the options in the "
"current parser and then exits. By default a help action is automatically "
"added to the parser. See :class:`ArgumentParser` for details of how the "
"output is created."
msgstr ""
"``'help'`` - друкує повне повідомлення довідки для всіх параметрів у "
"поточному парсері, а потім завершує роботу. За замовчуванням дія довідки "
"автоматично додається до аналізатора. Дивіться :class:`ArgumentParser` для "
"детальної інформації про те, як створюється вихід."

#: ../../library/argparse.rst:725
msgid ""
"``'version'`` - This expects a ``version=`` keyword argument in the "
":meth:`~ArgumentParser.add_argument` call, and prints version information "
"and exits when invoked::"
msgstr ""
"``'version'`` – очікується ключовий аргумент ``version=`` у виклику "
":meth:`~ArgumentParser.add_argument`, друкується інформація про версію та "
"завершується після виклику::"

#: ../../library/argparse.rst:729
msgid ""
">>> import argparse\n"
">>> parser = argparse.ArgumentParser(prog='PROG')\n"
">>> parser.add_argument('--version', action='version', version='%(prog)s 2.0')\n"
">>> parser.parse_args(['--version'])\n"
"PROG 2.0"
msgstr ""

#: ../../library/argparse.rst:735
msgid ""
"Only actions that consume command-line arguments (e.g. ``'store'``, "
"``'append'`` or ``'extend'``) can be used with positional arguments."
msgstr ""

#: ../../library/argparse.rst:740
msgid ""
"You may also specify an arbitrary action by passing an :class:`Action` "
"subclass or other object that implements the same interface. The "
":class:`!BooleanOptionalAction` is available in :mod:`!argparse` and adds "
"support for boolean actions such as ``--foo`` and ``--no-foo``::"
msgstr ""

#: ../../library/argparse.rst:745
msgid ""
">>> import argparse\n"
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--foo', action=argparse.BooleanOptionalAction)\n"
">>> parser.parse_args(['--no-foo'])\n"
"Namespace(foo=False)"
msgstr ""

#: ../../library/argparse.rst:753
msgid ""
"The recommended way to create a custom action is to extend :class:`Action`, "
"overriding the :meth:`!__call__` method and optionally the :meth:`!__init__`"
" and :meth:`!format_usage` methods. You can also register custom actions "
"using the :meth:`~ArgumentParser.register` method and reference them by "
"their registered name."
msgstr ""

#: ../../library/argparse.rst:758
msgid "An example of a custom action::"
msgstr "Приклад спеціальної дії::"

#: ../../library/argparse.rst:760
msgid ""
">>> class FooAction(argparse.Action):\n"
"...     def __init__(self, option_strings, dest, nargs=None, **kwargs):\n"
"...         if nargs is not None:\n"
"...             raise ValueError(\"nargs not allowed\")\n"
"...         super().__init__(option_strings, dest, **kwargs)\n"
"...     def __call__(self, parser, namespace, values, option_string=None):\n"
"...         print('%r %r %r' % (namespace, values, option_string))\n"
"...         setattr(namespace, self.dest, values)\n"
"...\n"
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--foo', action=FooAction)\n"
">>> parser.add_argument('bar', action=FooAction)\n"
">>> args = parser.parse_args('1 --foo 2'.split())\n"
"Namespace(bar=None, foo=None) '1' None\n"
"Namespace(bar='1', foo=None) '2' '--foo'\n"
">>> args\n"
"Namespace(bar='1', foo='2')"
msgstr ""

#: ../../library/argparse.rst:778
msgid "For more details, see :class:`Action`."
msgstr "Для отримання додаткової інформації див. :class:`Action`."

#: ../../library/argparse.rst:784
msgid "nargs"
msgstr "наргс"

#: ../../library/argparse.rst:786
msgid ""
":class:`ArgumentParser` objects usually associate a single command-line "
"argument with a single action to be taken.  The ``nargs`` keyword argument "
"associates a different number of command-line arguments with a single "
"action. See also :ref:`specifying-ambiguous-arguments`. The supported values"
" are:"
msgstr ""

#: ../../library/argparse.rst:791
msgid ""
"``N`` (an integer).  ``N`` arguments from the command line will be gathered "
"together into a list.  For example::"
msgstr ""
"``N`` (ціле число). ``N`` аргументів з командного рядка буде зібрано разом у"
" список. Наприклад::"

#: ../../library/argparse.rst:794
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--foo', nargs=2)\n"
">>> parser.add_argument('bar', nargs=1)\n"
">>> parser.parse_args('c --foo a b'.split())\n"
"Namespace(bar=['c'], foo=['a', 'b'])"
msgstr ""

#: ../../library/argparse.rst:800
msgid ""
"Note that ``nargs=1`` produces a list of one item.  This is different from "
"the default, in which the item is produced by itself."
msgstr ""
"Зауважте, що ``nargs=1`` створює список з одного елемента. Це відрізняється "
"від типового, коли елемент створюється сам по собі."

#: ../../library/argparse.rst:805
msgid ""
"``'?'``. One argument will be consumed from the command line if possible, "
"and produced as a single item.  If no command-line argument is present, the "
"value from default_ will be produced.  Note that for optional arguments, "
"there is an additional case - the option string is present but not followed "
"by a command-line argument.  In this case the value from const_ will be "
"produced.  Some examples to illustrate this::"
msgstr ""
"``'?'``. Один аргумент буде використано з командного рядка, якщо це можливо,"
" і створено як окремий елемент. Якщо аргумент командного рядка відсутній, "
"буде отримано значення з default_. Зауважте, що для необов’язкових "
"аргументів існує додатковий випадок – рядок параметрів присутній, але не "
"слідує за аргументом командного рядка. У цьому випадку буде отримано "
"значення з const_. Деякі приклади для ілюстрації:"

#: ../../library/argparse.rst:812
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--foo', nargs='?', const='c', default='d')\n"
">>> parser.add_argument('bar', nargs='?', default='d')\n"
">>> parser.parse_args(['XX', '--foo', 'YY'])\n"
"Namespace(bar='XX', foo='YY')\n"
">>> parser.parse_args(['XX', '--foo'])\n"
"Namespace(bar='XX', foo='c')\n"
">>> parser.parse_args([])\n"
"Namespace(bar='d', foo='d')"
msgstr ""

#: ../../library/argparse.rst:822
msgid ""
"One of the more common uses of ``nargs='?'`` is to allow optional input and "
"output files::"
msgstr ""
"Одне з найпоширеніших застосувань ``nargs='?''`` — дозволити додаткові файли"
" введення та виведення:"

#: ../../library/argparse.rst:825
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('infile', nargs='?', type=argparse.FileType('r'),\n"
"...                     default=sys.stdin)\n"
">>> parser.add_argument('outfile', nargs='?', type=argparse.FileType('w'),\n"
"...                     default=sys.stdout)\n"
">>> parser.parse_args(['input.txt', 'output.txt'])\n"
"Namespace(infile=<_io.TextIOWrapper name='input.txt' encoding='UTF-8'>,\n"
"          outfile=<_io.TextIOWrapper name='output.txt' encoding='UTF-8'>)\n"
">>> parser.parse_args([])\n"
"Namespace(infile=<_io.TextIOWrapper name='<stdin>' encoding='UTF-8'>,\n"
"          outfile=<_io.TextIOWrapper name='<stdout>' encoding='UTF-8'>)"
msgstr ""

#: ../../library/argparse.rst:839
msgid ""
"``'*'``.  All command-line arguments present are gathered into a list.  Note"
" that it generally doesn't make much sense to have more than one positional "
"argument with ``nargs='*'``, but multiple optional arguments with "
"``nargs='*'`` is possible.  For example::"
msgstr ""
"``'*'``. Усі присутні аргументи командного рядка збираються у список. "
"Зауважте, що зазвичай не має сенсу мати більше одного позиційного аргументу "
"з ``nargs='*'``, але кілька необов'язкових аргументів з ``nargs='*'`` "
"можливі. Наприклад::"

#: ../../library/argparse.rst:844
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--foo', nargs='*')\n"
">>> parser.add_argument('--bar', nargs='*')\n"
">>> parser.add_argument('baz', nargs='*')\n"
">>> parser.parse_args('a b --foo x y --bar 1 2'.split())\n"
"Namespace(bar=['1', '2'], baz=['a', 'b'], foo=['x', 'y'])"
msgstr ""

#: ../../library/argparse.rst:853
msgid ""
"``'+'``. Just like ``'*'``, all command-line args present are gathered into "
"a list.  Additionally, an error message will be generated if there wasn't at"
" least one command-line argument present.  For example::"
msgstr ""
"``'+'``. Подібно до ``'*'``, усі наявні аргументи командного рядка "
"збираються в список. Крім того, буде створено повідомлення про помилку, якщо"
" не було принаймні одного аргументу командного рядка. Наприклад::"

#: ../../library/argparse.rst:857
msgid ""
">>> parser = argparse.ArgumentParser(prog='PROG')\n"
">>> parser.add_argument('foo', nargs='+')\n"
">>> parser.parse_args(['a', 'b'])\n"
"Namespace(foo=['a', 'b'])\n"
">>> parser.parse_args([])\n"
"usage: PROG [-h] foo [foo ...]\n"
"PROG: error: the following arguments are required: foo"
msgstr ""

#: ../../library/argparse.rst:865
msgid ""
"If the ``nargs`` keyword argument is not provided, the number of arguments "
"consumed is determined by the action_.  Generally this means a single "
"command-line argument will be consumed and a single item (not a list) will "
"be produced. Actions that do not consume command-line arguments (e.g. "
"``'store_const'``) set ``nargs=0``."
msgstr ""

#: ../../library/argparse.rst:875
msgid "const"
msgstr "конст"

#: ../../library/argparse.rst:877
msgid ""
"The ``const`` argument of :meth:`~ArgumentParser.add_argument` is used to "
"hold constant values that are not read from the command line but are "
"required for the various :class:`ArgumentParser` actions.  The two most "
"common uses of it are:"
msgstr ""
"Аргумент ``const`` :meth:`~ArgumentParser.add_argument` використовується для"
" зберігання постійних значень, які не читаються з командного рядка, але "
"потрібні для різних дій :class:`ArgumentParser`. Два найпоширеніші його "
"використання:"

#: ../../library/argparse.rst:881
msgid ""
"When :meth:`~ArgumentParser.add_argument` is called with "
"``action='store_const'`` or ``action='append_const'``.  These actions add "
"the ``const`` value to one of the attributes of the object returned by "
":meth:`~ArgumentParser.parse_args`. See the action_ description for "
"examples. If ``const`` is not provided to "
":meth:`~ArgumentParser.add_argument`, it will receive a default value of "
"``None``."
msgstr ""

#: ../../library/argparse.rst:889
msgid ""
"When :meth:`~ArgumentParser.add_argument` is called with option strings "
"(like ``-f`` or ``--foo``) and ``nargs='?'``.  This creates an optional "
"argument that can be followed by zero or one command-line arguments. When "
"parsing the command line, if the option string is encountered with no "
"command-line argument following it, the value of ``const`` will be assumed "
"to be ``None`` instead.  See the nargs_ description for examples."
msgstr ""

#: ../../library/argparse.rst:896
msgid ""
"``const=None`` by default, including when ``action='append_const'`` or "
"``action='store_const'``."
msgstr ""

#: ../../library/argparse.rst:903
msgid "default"
msgstr "за замовчуванням"

#: ../../library/argparse.rst:905
msgid ""
"All optional arguments and some positional arguments may be omitted at the "
"command line.  The ``default`` keyword argument of "
":meth:`~ArgumentParser.add_argument`, whose value defaults to ``None``, "
"specifies what value should be used if the command-line argument is not "
"present. For optional arguments, the ``default`` value is used when the "
"option string was not present at the command line::"
msgstr ""
"Усі додаткові аргументи та деякі позиційні аргументи можна пропустити в "
"командному рядку. Аргумент ключового слова ``default`` "
":meth:`~ArgumentParser.add_argument`, значення якого за замовчуванням "
"``None``, визначає, яке значення слід використовувати, якщо аргумент "
"командного рядка відсутній. Для необов’язкових аргументів використовується "
"значення ``за замовчуванням``, якщо рядок параметрів відсутній у командному "
"рядку::"

#: ../../library/argparse.rst:912
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--foo', default=42)\n"
">>> parser.parse_args(['--foo', '2'])\n"
"Namespace(foo='2')\n"
">>> parser.parse_args([])\n"
"Namespace(foo=42)"
msgstr ""

#: ../../library/argparse.rst:919
msgid ""
"If the target namespace already has an attribute set, the action *default* "
"will not overwrite it::"
msgstr ""

#: ../../library/argparse.rst:922
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--foo', default=42)\n"
">>> parser.parse_args([], namespace=argparse.Namespace(foo=101))\n"
"Namespace(foo=101)"
msgstr ""

#: ../../library/argparse.rst:927
msgid ""
"If the ``default`` value is a string, the parser parses the value as if it "
"were a command-line argument.  In particular, the parser applies any type_ "
"conversion argument, if provided, before setting the attribute on the "
":class:`Namespace` return value.  Otherwise, the parser uses the value as "
"is::"
msgstr ""
"Якщо значенням ``default`` є рядок, синтаксичний аналізатор аналізує "
"значення так, ніби це аргумент командного рядка. Зокрема, синтаксичний "
"аналізатор застосовує будь-який аргумент перетворення type_, якщо він "
"надається, перед встановленням атрибута для значення, що повертається "
":class:`Namespace`. В іншому випадку аналізатор використовує значення як є::"

#: ../../library/argparse.rst:932
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--length', default='10', type=int)\n"
">>> parser.add_argument('--width', default=10.5, type=int)\n"
">>> parser.parse_args()\n"
"Namespace(length=10, width=10.5)"
msgstr ""

#: ../../library/argparse.rst:938
msgid ""
"For positional arguments with nargs_ equal to ``?`` or ``*``, the "
"``default`` value is used when no command-line argument was present::"
msgstr ""
"Для позиційних аргументів, у яких nargs_ дорівнює ``?`` або ``*``, значення "
"``default`` використовується, якщо аргумент командного рядка відсутній:"

#: ../../library/argparse.rst:941
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('foo', nargs='?', default=42)\n"
">>> parser.parse_args(['a'])\n"
"Namespace(foo='a')\n"
">>> parser.parse_args([])\n"
"Namespace(foo=42)"
msgstr ""

#: ../../library/argparse.rst:948
msgid ""
"For required_ arguments, the ``default`` value is ignored. For example, this"
" applies to positional arguments with nargs_ values other than ``?`` or "
"``*``, or optional arguments marked as ``required=True``."
msgstr ""

#: ../../library/argparse.rst:952
msgid ""
"Providing ``default=argparse.SUPPRESS`` causes no attribute to be added if "
"the command-line argument was not present::"
msgstr ""
"Якщо вказати ``default=argparse.SUPPRESS``, атрибут не буде додано, якщо "
"аргумент командного рядка відсутній:"

#: ../../library/argparse.rst:955
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--foo', default=argparse.SUPPRESS)\n"
">>> parser.parse_args([])\n"
"Namespace()\n"
">>> parser.parse_args(['--foo', '1'])\n"
"Namespace(foo='1')"
msgstr ""

#: ../../library/argparse.rst:966
msgid "type"
msgstr "типу"

#: ../../library/argparse.rst:968
msgid ""
"By default, the parser reads command-line arguments in as simple strings. "
"However, quite often the command-line string should instead be interpreted "
"as another type, such as a :class:`float` or :class:`int`.  The ``type`` "
"keyword for :meth:`~ArgumentParser.add_argument` allows any necessary type-"
"checking and type conversions to be performed."
msgstr ""
"За замовчуванням аналізатор читає аргументи командного рядка як прості "
"рядки. Однак досить часто рядок командного рядка слід інтерпретувати як "
"інший тип, наприклад :class:`float` або :class:`int`. Ключове слово ``type``"
" для :meth:`~ArgumentParser.add_argument` дозволяє виконувати будь-які "
"необхідні перевірки типів і перетворення типів."

#: ../../library/argparse.rst:974
msgid ""
"If the type_ keyword is used with the default_ keyword, the type converter "
"is only applied if the default is a string."
msgstr ""
"Якщо ключове слово type_ використовується з ключовим словом default_, "
"конвертер типів застосовується, лише якщо значенням за замовчуванням є "
"рядок."

#: ../../library/argparse.rst:977
msgid ""
"The argument to ``type`` can be a callable that accepts a single string or "
"the name of a registered type (see :meth:`~ArgumentParser.register`) If the "
"function raises :exc:`ArgumentTypeError`, :exc:`TypeError`, or "
":exc:`ValueError`, the exception is caught and a nicely formatted error "
"message is displayed. Other exception types are not handled."
msgstr ""

#: ../../library/argparse.rst:983
msgid "Common built-in types and functions can be used as type converters:"
msgstr ""
"Загальні вбудовані типи та функції можна використовувати як перетворювачі "
"типів:"

#: ../../library/argparse.rst:985
msgid ""
"import argparse\n"
"import pathlib\n"
"\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument('count', type=int)\n"
"parser.add_argument('distance', type=float)\n"
"parser.add_argument('street', type=ascii)\n"
"parser.add_argument('code_point', type=ord)\n"
"parser.add_argument('dest_file', type=argparse.FileType('w', encoding='latin-1'))\n"
"parser.add_argument('datapath', type=pathlib.Path)"
msgstr ""

#: ../../library/argparse.rst:998
msgid "User defined functions can be used as well:"
msgstr "Також можна використовувати визначені користувачем функції:"

#: ../../library/argparse.rst:1000
msgid ""
">>> def hyphenated(string):\n"
"...     return '-'.join([word[:4] for word in string.casefold().split()])\n"
"...\n"
">>> parser = argparse.ArgumentParser()\n"
">>> _ = parser.add_argument('short_title', type=hyphenated)\n"
">>> parser.parse_args(['\"The Tale of Two Cities\"'])\n"
"Namespace(short_title='\"the-tale-of-two-citi')"
msgstr ""

#: ../../library/argparse.rst:1010
msgid ""
"The :func:`bool` function is not recommended as a type converter.  All it "
"does is convert empty strings to ``False`` and non-empty strings to "
"``True``. This is usually not what is desired."
msgstr ""
"Функцію :func:`bool` не рекомендується використовувати як перетворювач "
"типів. Усе, що він робить, це перетворює порожні рядки на ``False``, а "
"непорожні рядки — на ``True``. Зазвичай це не те, чого хочеться."

#: ../../library/argparse.rst:1014
msgid ""
"In general, the ``type`` keyword is a convenience that should only be used "
"for simple conversions that can only raise one of the three supported "
"exceptions. Anything with more interesting error-handling or resource "
"management should be done downstream after the arguments are parsed."
msgstr ""
"Загалом, ключове слово ``type`` є зручним, і його слід використовувати лише "
"для простих перетворень, які можуть викликати лише одне з трьох "
"підтримуваних винятків. Усе, що має більш цікаву обробку помилок або "
"керування ресурсами, має бути зроблено нижче за течією після аналізу "
"аргументів."

#: ../../library/argparse.rst:1019
msgid ""
"For example, JSON or YAML conversions have complex error cases that require "
"better reporting than can be given by the ``type`` keyword.  A "
":exc:`~json.JSONDecodeError` would not be well formatted and a "
":exc:`FileNotFoundError` exception would not be handled at all."
msgstr ""

#: ../../library/argparse.rst:1024
msgid ""
"Even :class:`~argparse.FileType` has its limitations for use with the "
"``type`` keyword.  If one argument uses :class:`~argparse.FileType` and then"
" a subsequent argument fails, an error is reported but the file is not "
"automatically closed.  In this case, it would be better to wait until after "
"the parser has run and then use the :keyword:`with`-statement to manage the "
"files."
msgstr ""

#: ../../library/argparse.rst:1031
msgid ""
"For type checkers that simply check against a fixed set of values, consider "
"using the choices_ keyword instead."
msgstr ""
"Для засобів перевірки типів, які просто перевіряють фіксований набір "
"значень, подумайте про використання ключового слова choices_."

#: ../../library/argparse.rst:1038
msgid "choices"
msgstr "вибір"

#: ../../library/argparse.rst:1040
msgid ""
"Some command-line arguments should be selected from a restricted set of "
"values. These can be handled by passing a sequence object as the *choices* "
"keyword argument to :meth:`~ArgumentParser.add_argument`.  When the command "
"line is parsed, argument values will be checked, and an error message will "
"be displayed if the argument was not one of the acceptable values::"
msgstr ""

#: ../../library/argparse.rst:1046
msgid ""
">>> parser = argparse.ArgumentParser(prog='game.py')\n"
">>> parser.add_argument('move', choices=['rock', 'paper', 'scissors'])\n"
">>> parser.parse_args(['rock'])\n"
"Namespace(move='rock')\n"
">>> parser.parse_args(['fire'])\n"
"usage: game.py [-h] {rock,paper,scissors}\n"
"game.py: error: argument move: invalid choice: 'fire' (choose from 'rock',\n"
"'paper', 'scissors')"
msgstr ""

#: ../../library/argparse.rst:1055
msgid ""
"Note that inclusion in the *choices* sequence is checked after any type_ "
"conversions have been performed, so the type of the objects in the *choices*"
" sequence should match the type_ specified."
msgstr ""

#: ../../library/argparse.rst:1059
msgid ""
"Any sequence can be passed as the *choices* value, so :class:`list` objects,"
" :class:`tuple` objects, and custom sequences are all supported."
msgstr ""

#: ../../library/argparse.rst:1062
msgid ""
"Use of :class:`enum.Enum` is not recommended because it is difficult to "
"control its appearance in usage, help, and error messages."
msgstr ""
"Використання :class:`enum.Enum` не рекомендується, оскільки важко "
"контролювати його появу в повідомленнях про використання, довідці та "
"помилках."

#: ../../library/argparse.rst:1065
msgid ""
"Formatted choices override the default *metavar* which is normally derived "
"from *dest*.  This is usually what you want because the user never sees the "
"*dest* parameter.  If this display isn't desirable (perhaps because there "
"are many choices), just specify an explicit metavar_."
msgstr ""

#: ../../library/argparse.rst:1074
msgid "required"
msgstr "вимагається"

#: ../../library/argparse.rst:1076
msgid ""
"In general, the :mod:`!argparse` module assumes that flags like ``-f`` and "
"``--bar`` indicate *optional* arguments, which can always be omitted at the "
"command line. To make an option *required*, ``True`` can be specified for "
"the ``required=`` keyword argument to :meth:`~ArgumentParser.add_argument`::"
msgstr ""

#: ../../library/argparse.rst:1081
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--foo', required=True)\n"
">>> parser.parse_args(['--foo', 'BAR'])\n"
"Namespace(foo='BAR')\n"
">>> parser.parse_args([])\n"
"usage: [-h] --foo FOO\n"
": error: the following arguments are required: --foo"
msgstr ""

#: ../../library/argparse.rst:1089
msgid ""
"As the example shows, if an option is marked as ``required``, "
":meth:`~ArgumentParser.parse_args` will report an error if that option is "
"not present at the command line."
msgstr ""
"Як показує приклад, якщо параметр позначено як ``required``, "
":meth:`~ArgumentParser.parse_args` повідомить про помилку, якщо цей параметр"
" відсутній у командному рядку."

#: ../../library/argparse.rst:1095
msgid ""
"Required options are generally considered bad form because users expect "
"*options* to be *optional*, and thus they should be avoided when possible."
msgstr ""
"Обов’язкові параметри зазвичай вважаються поганим тоном, оскільки "
"користувачі очікують, що *параметри* будуть *необов’язковими*, тому їх слід "
"уникати, коли це можливо."

#: ../../library/argparse.rst:1102
msgid "help"
msgstr "допомогти"

#: ../../library/argparse.rst:1104
msgid ""
"The ``help`` value is a string containing a brief description of the "
"argument. When a user requests help (usually by using ``-h`` or ``--help`` "
"at the command line), these ``help`` descriptions will be displayed with "
"each argument."
msgstr ""

#: ../../library/argparse.rst:1109
msgid ""
"The ``help`` strings can include various format specifiers to avoid "
"repetition of things like the program name or the argument default_.  The "
"available specifiers include the program name, ``%(prog)s`` and most keyword"
" arguments to :meth:`~ArgumentParser.add_argument`, e.g. ``%(default)s``, "
"``%(type)s``, etc.::"
msgstr ""
"Рядки ``help`` можуть містити різні специфікатори формату, щоб уникнути "
"повторення таких речей, як назва програми або аргумент default_. Доступні "
"специфікатори включають назву програми, ``%(prog)s`` та більшість ключових "
"аргументів для :meth:`~ArgumentParser.add_argument`, напр. ``%(default)s``, "
"``%(type)s`` тощо::"

#: ../../library/argparse.rst:1114
msgid ""
">>> parser = argparse.ArgumentParser(prog='frobble')\n"
">>> parser.add_argument('bar', nargs='?', type=int, default=42,\n"
"...                     help='the bar to %(prog)s (default: %(default)s)')\n"
">>> parser.print_help()\n"
"usage: frobble [-h] [bar]\n"
"\n"
"positional arguments:\n"
" bar     the bar to frobble (default: 42)\n"
"\n"
"options:\n"
" -h, --help  show this help message and exit"
msgstr ""

#: ../../library/argparse.rst:1126
msgid ""
"As the help string supports %-formatting, if you want a literal ``%`` to "
"appear in the help string, you must escape it as ``%%``."
msgstr ""
"Оскільки рядок довідки підтримує %-formatting, якщо ви хочете, щоб літерал "
"``%`` з’явився в рядку довідки, ви повинні екранувати його як ``%%``."

#: ../../library/argparse.rst:1129
msgid ""
":mod:`!argparse` supports silencing the help entry for certain options, by "
"setting the ``help`` value to ``argparse.SUPPRESS``::"
msgstr ""

#: ../../library/argparse.rst:1132
msgid ""
">>> parser = argparse.ArgumentParser(prog='frobble')\n"
">>> parser.add_argument('--foo', help=argparse.SUPPRESS)\n"
">>> parser.print_help()\n"
"usage: frobble [-h]\n"
"\n"
"options:\n"
"  -h, --help  show this help message and exit"
msgstr ""

#: ../../library/argparse.rst:1144
msgid "metavar"
msgstr "метавар"

#: ../../library/argparse.rst:1146
msgid ""
"When :class:`ArgumentParser` generates help messages, it needs some way to "
"refer to each expected argument.  By default, :class:`!ArgumentParser` "
"objects use the dest_ value as the \"name\" of each object.  By default, for"
" positional argument actions, the dest_ value is used directly, and for "
"optional argument actions, the dest_ value is uppercased.  So, a single "
"positional argument with ``dest='bar'`` will be referred to as ``bar``. A "
"single optional argument ``--foo`` that should be followed by a single "
"command-line argument will be referred to as ``FOO``.  An example::"
msgstr ""

#: ../../library/argparse.rst:1155
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--foo')\n"
">>> parser.add_argument('bar')\n"
">>> parser.parse_args('X --foo Y'.split())\n"
"Namespace(bar='X', foo='Y')\n"
">>> parser.print_help()\n"
"usage:  [-h] [--foo FOO] bar\n"
"\n"
"positional arguments:\n"
" bar\n"
"\n"
"options:\n"
" -h, --help  show this help message and exit\n"
" --foo FOO"
msgstr ""

#: ../../library/argparse.rst:1170
msgid "An alternative name can be specified with ``metavar``::"
msgstr "Альтернативну назву можна вказати за допомогою ``metavar``::"

#: ../../library/argparse.rst:1172
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--foo', metavar='YYY')\n"
">>> parser.add_argument('bar', metavar='XXX')\n"
">>> parser.parse_args('X --foo Y'.split())\n"
"Namespace(bar='X', foo='Y')\n"
">>> parser.print_help()\n"
"usage:  [-h] [--foo YYY] XXX\n"
"\n"
"positional arguments:\n"
" XXX\n"
"\n"
"options:\n"
" -h, --help  show this help message and exit\n"
" --foo YYY"
msgstr ""

#: ../../library/argparse.rst:1187
msgid ""
"Note that ``metavar`` only changes the *displayed* name - the name of the "
"attribute on the :meth:`~ArgumentParser.parse_args` object is still "
"determined by the dest_ value."
msgstr ""
"Зауважте, що ``metavar`` змінює лише *відображене* ім’я – ім’я атрибута "
"об’єкта :meth:`~ArgumentParser.parse_args` все ще визначається значенням "
"dest_."

#: ../../library/argparse.rst:1191
msgid ""
"Different values of ``nargs`` may cause the metavar to be used multiple "
"times. Providing a tuple to ``metavar`` specifies a different display for "
"each of the arguments::"
msgstr ""
"Різні значення ``nargs`` можуть спричинити багаторазове використання "
"метаперемінної. Надання кортежу для ``metavar`` визначає інше відображення "
"для кожного з аргументів::"

#: ../../library/argparse.rst:1195
msgid ""
">>> parser = argparse.ArgumentParser(prog='PROG')\n"
">>> parser.add_argument('-x', nargs=2)\n"
">>> parser.add_argument('--foo', nargs=2, metavar=('bar', 'baz'))\n"
">>> parser.print_help()\n"
"usage: PROG [-h] [-x X X] [--foo bar baz]\n"
"\n"
"options:\n"
" -h, --help     show this help message and exit\n"
" -x X X\n"
" --foo bar baz"
msgstr ""

#: ../../library/argparse.rst:1210
msgid "dest"
msgstr "дест"

#: ../../library/argparse.rst:1212
msgid ""
"Most :class:`ArgumentParser` actions add some value as an attribute of the "
"object returned by :meth:`~ArgumentParser.parse_args`.  The name of this "
"attribute is determined by the ``dest`` keyword argument of "
":meth:`~ArgumentParser.add_argument`.  For positional argument actions, "
"``dest`` is normally supplied as the first argument to "
":meth:`~ArgumentParser.add_argument`::"
msgstr ""
"Більшість дій :class:`ArgumentParser` додають певне значення як атрибут "
"об’єкта, який повертає :meth:`~ArgumentParser.parse_args`. Ім’я цього "
"атрибута визначається ключовим аргументом ``dest`` "
":meth:`~ArgumentParser.add_argument`. Для дій позиційного аргументу ``dest``"
" зазвичай надається як перший аргумент "
":meth:`~ArgumentParser.add_argument`::"

#: ../../library/argparse.rst:1219
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('bar')\n"
">>> parser.parse_args(['XXX'])\n"
"Namespace(bar='XXX')"
msgstr ""

#: ../../library/argparse.rst:1224
msgid ""
"For optional argument actions, the value of ``dest`` is normally inferred "
"from the option strings.  :class:`ArgumentParser` generates the value of "
"``dest`` by taking the first long option string and stripping away the "
"initial ``--`` string.  If no long option strings were supplied, ``dest`` "
"will be derived from the first short option string by stripping the initial "
"``-`` character.  Any internal ``-`` characters will be converted to ``_`` "
"characters to make sure the string is a valid attribute name.  The examples "
"below illustrate this behavior::"
msgstr ""
"Для необов’язкових дій аргументів значення ``dest`` зазвичай виводиться з "
"рядків параметрів. :class:`ArgumentParser` генерує значення ``dest``, беручи"
" перший довгий рядок параметрів і видаляючи початковий рядок ``--``. Якщо не"
" було надано довгих рядків параметрів, ``dest`` буде отримано з першого "
"короткого рядка параметрів шляхом видалення початкового символу ``-``. Усі "
"внутрішні символи \"-\" буде перетворено на символи \"_\", щоб переконатися,"
" що рядок є дійсною назвою атрибута. Наведені нижче приклади ілюструють цю "
"поведінку:"

#: ../../library/argparse.rst:1233
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('-f', '--foo-bar', '--foo')\n"
">>> parser.add_argument('-x', '-y')\n"
">>> parser.parse_args('-f 1 -x 2'.split())\n"
"Namespace(foo_bar='1', x='2')\n"
">>> parser.parse_args('--foo 1 -y 2'.split())\n"
"Namespace(foo_bar='1', x='2')"
msgstr ""

#: ../../library/argparse.rst:1241
msgid "``dest`` allows a custom attribute name to be provided::"
msgstr "``dest`` дозволяє надати ім'я спеціального атрибута:"

#: ../../library/argparse.rst:1243
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--foo', dest='bar')\n"
">>> parser.parse_args('--foo XXX'.split())\n"
"Namespace(bar='XXX')"
msgstr ""

#: ../../library/argparse.rst:1252
msgid "deprecated"
msgstr ""

#: ../../library/argparse.rst:1254
msgid ""
"During a project's lifetime, some arguments may need to be removed from the "
"command line. Before removing them, you should inform your users that the "
"arguments are deprecated and will be removed. The ``deprecated`` keyword "
"argument of :meth:`~ArgumentParser.add_argument`, which defaults to "
"``False``, specifies if the argument is deprecated and will be removed in "
"the future. For arguments, if ``deprecated`` is ``True``, then a warning "
"will be printed to :data:`sys.stderr` when the argument is used::"
msgstr ""

#: ../../library/argparse.rst:1264
msgid ""
">>> import argparse\n"
">>> parser = argparse.ArgumentParser(prog='snake.py')\n"
">>> parser.add_argument('--legs', default=0, type=int, deprecated=True)\n"
">>> parser.parse_args([])\n"
"Namespace(legs=0)\n"
">>> parser.parse_args(['--legs', '4'])  \n"
"snake.py: warning: option '--legs' is deprecated\n"
"Namespace(legs=4)"
msgstr ""

#: ../../library/argparse.rst:1277
msgid "Action classes"
msgstr "Класи дії"

#: ../../library/argparse.rst:1279
msgid ""
":class:`!Action` classes implement the Action API, a callable which returns "
"a callable which processes arguments from the command-line. Any object which"
" follows this API may be passed as the ``action`` parameter to "
":meth:`~ArgumentParser.add_argument`."
msgstr ""

#: ../../library/argparse.rst:1288
msgid ""
":class:`!Action` objects are used by an :class:`ArgumentParser` to represent"
" the information needed to parse a single argument from one or more strings "
"from the command line. The :class:`!Action` class must accept the two "
"positional arguments plus any keyword arguments passed to "
":meth:`ArgumentParser.add_argument` except for the ``action`` itself."
msgstr ""

#: ../../library/argparse.rst:1294
msgid ""
"Instances of :class:`!Action` (or return value of any callable to the "
"``action`` parameter) should have attributes :attr:`!dest`, "
":attr:`!option_strings`, :attr:`!default`, :attr:`!type`, :attr:`!required`,"
" :attr:`!help`, etc. defined. The easiest way to ensure these attributes are"
" defined is to call :meth:`!Action.__init__`."
msgstr ""

#: ../../library/argparse.rst:1302
msgid ""
":class:`!Action` instances should be callable, so subclasses must override "
"the :meth:`!__call__` method, which should accept four parameters:"
msgstr ""

#: ../../library/argparse.rst:1305
msgid ""
"*parser* - The :class:`ArgumentParser` object which contains this action."
msgstr ""

#: ../../library/argparse.rst:1307
msgid ""
"*namespace* - The :class:`Namespace` object that will be returned by "
":meth:`~ArgumentParser.parse_args`.  Most actions add an attribute to this "
"object using :func:`setattr`."
msgstr ""

#: ../../library/argparse.rst:1311
msgid ""
"*values* - The associated command-line arguments, with any type conversions "
"applied.  Type conversions are specified with the type_ keyword argument to "
":meth:`~ArgumentParser.add_argument`."
msgstr ""

#: ../../library/argparse.rst:1315
msgid ""
"*option_string* - The option string that was used to invoke this action. The"
" ``option_string`` argument is optional, and will be absent if the action is"
" associated with a positional argument."
msgstr ""

#: ../../library/argparse.rst:1319
msgid ""
"The :meth:`!__call__` method may perform arbitrary actions, but will "
"typically set attributes on the ``namespace`` based on ``dest`` and "
"``values``."
msgstr ""

#: ../../library/argparse.rst:1324
msgid ""
":class:`!Action` subclasses can define a :meth:`!format_usage` method that "
"takes no argument and return a string which will be used when printing the "
"usage of the program. If such method is not provided, a sensible default "
"will be used."
msgstr ""

#: ../../library/argparse.rst:1330
msgid "The parse_args() method"
msgstr "Метод parse_args()."

#: ../../library/argparse.rst:1334
msgid ""
"Convert argument strings to objects and assign them as attributes of the "
"namespace.  Return the populated namespace."
msgstr ""
"Перетворіть рядки аргументів на об’єкти та призначте їх як атрибути простору"
" імен. Повернути заповнений простір імен."

#: ../../library/argparse.rst:1337
msgid ""
"Previous calls to :meth:`add_argument` determine exactly what objects are "
"created and how they are assigned. See the documentation for "
":meth:`!add_argument` for details."
msgstr ""

#: ../../library/argparse.rst:1341
msgid ""
"args_ - List of strings to parse.  The default is taken from "
":data:`sys.argv`."
msgstr ""
"args_ - список рядків для аналізу. Типове значення взято з :data:`sys.argv`."

#: ../../library/argparse.rst:1344
msgid ""
"namespace_ - An object to take the attributes.  The default is a new empty "
":class:`Namespace` object."
msgstr ""
"namespace_ – об’єкт для отримання атрибутів. Типовим є новий порожній об’єкт"
" :class:`Namespace`."

#: ../../library/argparse.rst:1349
msgid "Option value syntax"
msgstr "Синтаксис значення опції"

#: ../../library/argparse.rst:1351
msgid ""
"The :meth:`~ArgumentParser.parse_args` method supports several ways of "
"specifying the value of an option (if it takes one).  In the simplest case, "
"the option and its value are passed as two separate arguments::"
msgstr ""
"Метод :meth:`~ArgumentParser.parse_args` підтримує кілька способів "
"визначення значення параметра (якщо воно приймається). У найпростішому "
"випадку параметр і його значення передаються як два окремих аргументи:"

#: ../../library/argparse.rst:1355
msgid ""
">>> parser = argparse.ArgumentParser(prog='PROG')\n"
">>> parser.add_argument('-x')\n"
">>> parser.add_argument('--foo')\n"
">>> parser.parse_args(['-x', 'X'])\n"
"Namespace(foo=None, x='X')\n"
">>> parser.parse_args(['--foo', 'FOO'])\n"
"Namespace(foo='FOO', x=None)"
msgstr ""

#: ../../library/argparse.rst:1363
msgid ""
"For long options (options with names longer than a single character), the "
"option and value can also be passed as a single command-line argument, using"
" ``=`` to separate them::"
msgstr ""
"Для довгих параметрів (параметрів з іменами, довшими за один символ), "
"параметр і значення також можна передати як один аргумент командного рядка, "
"використовуючи ``=``, щоб розділити їх::"

#: ../../library/argparse.rst:1367
msgid ""
">>> parser.parse_args(['--foo=FOO'])\n"
"Namespace(foo='FOO', x=None)"
msgstr ""

#: ../../library/argparse.rst:1370
msgid ""
"For short options (options only one character long), the option and its "
"value can be concatenated::"
msgstr ""
"Для коротких опцій (опції лише з одного символу) опцію та її значення можна "
"об’єднати:"

#: ../../library/argparse.rst:1373
msgid ""
">>> parser.parse_args(['-xX'])\n"
"Namespace(foo=None, x='X')"
msgstr ""

#: ../../library/argparse.rst:1376
msgid ""
"Several short options can be joined together, using only a single ``-`` "
"prefix, as long as only the last option (or none of them) requires a value::"
msgstr ""
"Кілька коротких опцій можна об’єднати разом, використовуючи лише один "
"префікс ``-``, якщо тільки остання опція (або жодна з них) вимагає "
"значення::"

#: ../../library/argparse.rst:1379
msgid ""
">>> parser = argparse.ArgumentParser(prog='PROG')\n"
">>> parser.add_argument('-x', action='store_true')\n"
">>> parser.add_argument('-y', action='store_true')\n"
">>> parser.add_argument('-z')\n"
">>> parser.parse_args(['-xyzZ'])\n"
"Namespace(x=True, y=True, z='Z')"
msgstr ""

#: ../../library/argparse.rst:1388
msgid "Invalid arguments"
msgstr "Недійсні аргументи"

#: ../../library/argparse.rst:1390
msgid ""
"While parsing the command line, :meth:`~ArgumentParser.parse_args` checks "
"for a variety of errors, including ambiguous options, invalid types, invalid"
" options, wrong number of positional arguments, etc.  When it encounters "
"such an error, it exits and prints the error along with a usage message::"
msgstr ""
"Під час аналізу командного рядка :meth:`~ArgumentParser.parse_args` "
"перевіряє наявність різноманітних помилок, включаючи неоднозначні параметри,"
" недійсні типи, недійсні параметри, неправильну кількість позиційних "
"аргументів тощо. Коли він стикається з такою помилкою, він виходить і друкує"
" помилку разом із повідомленням про використання::"

#: ../../library/argparse.rst:1395
msgid ""
">>> parser = argparse.ArgumentParser(prog='PROG')\n"
">>> parser.add_argument('--foo', type=int)\n"
">>> parser.add_argument('bar', nargs='?')\n"
"\n"
">>> # invalid type\n"
">>> parser.parse_args(['--foo', 'spam'])\n"
"usage: PROG [-h] [--foo FOO] [bar]\n"
"PROG: error: argument --foo: invalid int value: 'spam'\n"
"\n"
">>> # invalid option\n"
">>> parser.parse_args(['--bar'])\n"
"usage: PROG [-h] [--foo FOO] [bar]\n"
"PROG: error: no such option: --bar\n"
"\n"
">>> # wrong number of arguments\n"
">>> parser.parse_args(['spam', 'badger'])\n"
"usage: PROG [-h] [--foo FOO] [bar]\n"
"PROG: error: extra arguments found: badger"
msgstr ""

#: ../../library/argparse.rst:1416
msgid "Arguments containing ``-``"
msgstr "Аргументи, що містять ``-``"

#: ../../library/argparse.rst:1418
msgid ""
"The :meth:`~ArgumentParser.parse_args` method attempts to give errors "
"whenever the user has clearly made a mistake, but some situations are "
"inherently ambiguous.  For example, the command-line argument ``-1`` could "
"either be an attempt to specify an option or an attempt to provide a "
"positional argument. The :meth:`~ArgumentParser.parse_args` method is "
"cautious here: positional arguments may only begin with ``-`` if they look "
"like negative numbers and there are no options in the parser that look like "
"negative numbers::"
msgstr ""
"Метод :meth:`~ArgumentParser.parse_args` намагається видавати помилки "
"щоразу, коли користувач явно зробив помилку, але деякі ситуації за своєю "
"суттю неоднозначні. Наприклад, аргумент командного рядка \"-1\" може бути "
"або спробою вказати параметр, або спробою надати позиційний аргумент. Метод "
":meth:`~ArgumentParser.parse_args` тут обережний: позиційні аргументи можуть"
" починатися лише з ``-``, якщо вони виглядають як від’ємні числа, і в "
"аналізаторі немає параметрів, які виглядають як від’ємні числа:"

#: ../../library/argparse.rst:1426
msgid ""
">>> parser = argparse.ArgumentParser(prog='PROG')\n"
">>> parser.add_argument('-x')\n"
">>> parser.add_argument('foo', nargs='?')\n"
"\n"
">>> # no negative number options, so -1 is a positional argument\n"
">>> parser.parse_args(['-x', '-1'])\n"
"Namespace(foo=None, x='-1')\n"
"\n"
">>> # no negative number options, so -1 and -5 are positional arguments\n"
">>> parser.parse_args(['-x', '-1', '-5'])\n"
"Namespace(foo='-5', x='-1')\n"
"\n"
">>> parser = argparse.ArgumentParser(prog='PROG')\n"
">>> parser.add_argument('-1', dest='one')\n"
">>> parser.add_argument('foo', nargs='?')\n"
"\n"
">>> # negative number options present, so -1 is an option\n"
">>> parser.parse_args(['-1', 'X'])\n"
"Namespace(foo=None, one='X')\n"
"\n"
">>> # negative number options present, so -2 is an option\n"
">>> parser.parse_args(['-2'])\n"
"usage: PROG [-h] [-1 ONE] [foo]\n"
"PROG: error: no such option: -2\n"
"\n"
">>> # negative number options present, so both -1s are options\n"
">>> parser.parse_args(['-1', '-1'])\n"
"usage: PROG [-h] [-1 ONE] [foo]\n"
"PROG: error: argument -1: expected one argument"
msgstr ""

#: ../../library/argparse.rst:1456
msgid ""
"If you have positional arguments that must begin with ``-`` and don't look "
"like negative numbers, you can insert the pseudo-argument ``'--'`` which "
"tells :meth:`~ArgumentParser.parse_args` that everything after that is a "
"positional argument::"
msgstr ""
"Якщо у вас є позиційні аргументи, які повинні починатися з ``-`` і не "
"виглядати як від’ємні числа, ви можете вставити псевдоаргумент ``''--'``, "
"який повідомляє :meth:`~ArgumentParser.parse_args`, що все після цього є "
"позиційним аргументом::"

#: ../../library/argparse.rst:1461
msgid ""
">>> parser.parse_args(['--', '-f'])\n"
"Namespace(foo='-f', one=None)"
msgstr ""

#: ../../library/argparse.rst:1464
msgid ""
"See also :ref:`the argparse howto on ambiguous arguments <specifying-"
"ambiguous-arguments>` for more details."
msgstr ""

#: ../../library/argparse.rst:1470
msgid "Argument abbreviations (prefix matching)"
msgstr "Скорочення аргументів (відповідність префіксу)"

#: ../../library/argparse.rst:1472
msgid ""
"The :meth:`~ArgumentParser.parse_args` method :ref:`by default "
"<allow_abbrev>` allows long options to be abbreviated to a prefix, if the "
"abbreviation is unambiguous (the prefix matches a unique option)::"
msgstr ""
"Метод :meth:`~ArgumentParser.parse_args` :ref:`за замовчуванням "
"<allow_abbrev>` дозволяє скорочувати довгі параметри до префікса, якщо "
"скорочення є однозначним (префікс відповідає унікальному параметру)::"

#: ../../library/argparse.rst:1476
msgid ""
">>> parser = argparse.ArgumentParser(prog='PROG')\n"
">>> parser.add_argument('-bacon')\n"
">>> parser.add_argument('-badger')\n"
">>> parser.parse_args('-bac MMM'.split())\n"
"Namespace(bacon='MMM', badger=None)\n"
">>> parser.parse_args('-bad WOOD'.split())\n"
"Namespace(bacon=None, badger='WOOD')\n"
">>> parser.parse_args('-ba BA'.split())\n"
"usage: PROG [-h] [-bacon BACON] [-badger BADGER]\n"
"PROG: error: ambiguous option: -ba could match -badger, -bacon"
msgstr ""

#: ../../library/argparse.rst:1487
msgid ""
"An error is produced for arguments that could produce more than one options."
" This feature can be disabled by setting :ref:`allow_abbrev` to ``False``."
msgstr ""
"Помилка створюється для аргументів, які можуть давати більше одного "
"варіанту. Цю функцію можна вимкнути, встановивши для :ref:`allow_abbrev` "
"значення ``False``."

#: ../../library/argparse.rst:1493
msgid "Beyond ``sys.argv``"
msgstr "За межами ``sys.argv``"

#: ../../library/argparse.rst:1495
msgid ""
"Sometimes it may be useful to have an :class:`ArgumentParser` parse "
"arguments other than those of :data:`sys.argv`.  This can be accomplished by"
" passing a list of strings to :meth:`~ArgumentParser.parse_args`.  This is "
"useful for testing at the interactive prompt::"
msgstr ""

#: ../../library/argparse.rst:1500
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument(\n"
"...     'integers', metavar='int', type=int, choices=range(10),\n"
"...     nargs='+', help='an integer in the range 0..9')\n"
">>> parser.add_argument(\n"
"...     '--sum', dest='accumulate', action='store_const', const=sum,\n"
"...     default=max, help='sum the integers (default: find the max)')\n"
">>> parser.parse_args(['1', '2', '3', '4'])\n"
"Namespace(accumulate=<built-in function max>, integers=[1, 2, 3, 4])\n"
">>> parser.parse_args(['1', '2', '3', '4', '--sum'])\n"
"Namespace(accumulate=<built-in function sum>, integers=[1, 2, 3, 4])"
msgstr ""

#: ../../library/argparse.rst:1515
msgid "The Namespace object"
msgstr "Об'єкт простору імен"

#: ../../library/argparse.rst:1519
msgid ""
"Simple class used by default by :meth:`~ArgumentParser.parse_args` to create"
" an object holding attributes and return it."
msgstr ""
"Простий клас, який за замовчуванням використовується "
":meth:`~ArgumentParser.parse_args` для створення об’єкта з атрибутами та "
"повернення його."

#: ../../library/argparse.rst:1522
msgid ""
"This class is deliberately simple, just an :class:`object` subclass with a "
"readable string representation. If you prefer to have dict-like view of the "
"attributes, you can use the standard Python idiom, :func:`vars`::"
msgstr ""
"Цей клас навмисне простий, просто підклас :class:`object` із читабельним "
"представленням рядка. Якщо ви віддаєте перевагу перегляду атрибутів у "
"форматі dict, ви можете використовувати стандартну ідіому Python "
":func:`vars`::"

#: ../../library/argparse.rst:1526
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--foo')\n"
">>> args = parser.parse_args(['--foo', 'BAR'])\n"
">>> vars(args)\n"
"{'foo': 'BAR'}"
msgstr ""

#: ../../library/argparse.rst:1532
msgid ""
"It may also be useful to have an :class:`ArgumentParser` assign attributes "
"to an already existing object, rather than a new :class:`Namespace` object."
"  This can be achieved by specifying the ``namespace=`` keyword argument::"
msgstr ""
"Також може бути корисним, щоб :class:`ArgumentParser` призначав атрибути вже"
" існуючому об’єкту, а не новому об’єкту :class:`Namespace`. Цього можна "
"досягти, вказавши аргумент ключового слова ``namespace=``::"

#: ../../library/argparse.rst:1536
msgid ""
">>> class C:\n"
"...     pass\n"
"...\n"
">>> c = C()\n"
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--foo')\n"
">>> parser.parse_args(args=['--foo', 'BAR'], namespace=c)\n"
">>> c.foo\n"
"'BAR'"
msgstr ""

#: ../../library/argparse.rst:1548
msgid "Other utilities"
msgstr "Інші комунальні послуги"

#: ../../library/argparse.rst:1551
msgid "Sub-commands"
msgstr "Підкоманди"

#: ../../library/argparse.rst:1558
msgid ""
"Many programs split up their functionality into a number of subcommands, for"
" example, the ``svn`` program can invoke subcommands like ``svn checkout``, "
"``svn update``, and ``svn commit``.  Splitting up functionality this way can"
" be a particularly good idea when a program performs several different "
"functions which require different kinds of command-line arguments. "
":class:`ArgumentParser` supports the creation of such subcommands with the "
":meth:`!add_subparsers` method.  The :meth:`!add_subparsers` method is "
"normally called with no arguments and returns a special action object.  This"
" object has a single method, :meth:`~_SubParsersAction.add_parser`, which "
"takes a command name and any :class:`!ArgumentParser` constructor arguments,"
" and returns an :class:`!ArgumentParser` object that can be modified as "
"usual."
msgstr ""

#: ../../library/argparse.rst:1570
msgid "Description of parameters:"
msgstr "Опис параметрів:"

#: ../../library/argparse.rst:1572
msgid ""
"*title* - title for the sub-parser group in help output; by default "
"\"subcommands\" if description is provided, otherwise uses title for "
"positional arguments"
msgstr ""

#: ../../library/argparse.rst:1576
msgid ""
"*description* - description for the sub-parser group in help output, by "
"default ``None``"
msgstr ""

#: ../../library/argparse.rst:1579
msgid ""
"*prog* - usage information that will be displayed with sub-command help, by "
"default the name of the program and any positional arguments before the "
"subparser argument"
msgstr ""

#: ../../library/argparse.rst:1583
msgid ""
"*parser_class* - class which will be used to create sub-parser instances, by"
" default the class of the current parser (e.g. :class:`ArgumentParser`)"
msgstr ""

#: ../../library/argparse.rst:1586
msgid ""
"action_ - the basic type of action to be taken when this argument is "
"encountered at the command line"
msgstr ""
"action_ - основний тип дії, яка виконується, коли цей аргумент зустрічається"
" в командному рядку"

#: ../../library/argparse.rst:1589
msgid ""
"dest_ - name of the attribute under which sub-command name will be stored; "
"by default ``None`` and no value is stored"
msgstr ""
"dest_ - ім'я атрибута, під яким буде зберігатися ім'я підкоманди; за "
"замовчуванням ``None`` і жодне значення не зберігається"

#: ../../library/argparse.rst:1592
msgid ""
"required_ - Whether or not a subcommand must be provided, by default "
"``False`` (added in 3.7)"
msgstr ""
"required_ - чи потрібно надавати підкоманду, за замовчуванням ``False`` "
"(додано в 3.7)"

#: ../../library/argparse.rst:1595
msgid "help_ - help for sub-parser group in help output, by default ``None``"
msgstr ""
"help_ - довідка для групи суб-парсера у виведенні довідки, за замовчуванням "
"``None``"

#: ../../library/argparse.rst:1597
msgid ""
"metavar_ - string presenting available subcommands in help; by default it is"
" ``None`` and presents subcommands in form {cmd1, cmd2, ..}"
msgstr ""

#: ../../library/argparse.rst:1600
msgid "Some example usage::"
msgstr "Деякі приклади використання::"

#: ../../library/argparse.rst:1602
msgid ""
">>> # create the top-level parser\n"
">>> parser = argparse.ArgumentParser(prog='PROG')\n"
">>> parser.add_argument('--foo', action='store_true', help='foo help')\n"
">>> subparsers = parser.add_subparsers(help='subcommand help')\n"
">>>\n"
">>> # create the parser for the \"a\" command\n"
">>> parser_a = subparsers.add_parser('a', help='a help')\n"
">>> parser_a.add_argument('bar', type=int, help='bar help')\n"
">>>\n"
">>> # create the parser for the \"b\" command\n"
">>> parser_b = subparsers.add_parser('b', help='b help')\n"
">>> parser_b.add_argument('--baz', choices=('X', 'Y', 'Z'), help='baz help')\n"
">>>\n"
">>> # parse some argument lists\n"
">>> parser.parse_args(['a', '12'])\n"
"Namespace(bar=12, foo=False)\n"
">>> parser.parse_args(['--foo', 'b', '--baz', 'Z'])\n"
"Namespace(baz='Z', foo=True)"
msgstr ""

#: ../../library/argparse.rst:1621
msgid ""
"Note that the object returned by :meth:`parse_args` will only contain "
"attributes for the main parser and the subparser that was selected by the "
"command line (and not any other subparsers).  So in the example above, when "
"the ``a`` command is specified, only the ``foo`` and ``bar`` attributes are "
"present, and when the ``b`` command is specified, only the ``foo`` and "
"``baz`` attributes are present."
msgstr ""
"Зауважте, що об’єкт, який повертає :meth:`parse_args`, міститиме лише "
"атрибути для головного синтаксичного аналізатора та підпарсера, вибраного "
"командним рядком (а не будь-яких інших підпарсерів). Отже, у прикладі вище, "
"коли вказано команду ``a``, присутні лише атрибути ``foo`` і ``bar``, а коли"
" вказано команду ``b``, лише наявні атрибути ``foo`` і ``baz``."

#: ../../library/argparse.rst:1628
msgid ""
"Similarly, when a help message is requested from a subparser, only the help "
"for that particular parser will be printed.  The help message will not "
"include parent parser or sibling parser messages.  (A help message for each "
"subparser command, however, can be given by supplying the ``help=`` argument"
" to :meth:`~_SubParsersAction.add_parser` as above.)"
msgstr ""

#: ../../library/argparse.rst:1636
msgid ""
">>> parser.parse_args(['--help'])\n"
"usage: PROG [-h] [--foo] {a,b} ...\n"
"\n"
"positional arguments:\n"
"  {a,b}   subcommand help\n"
"    a     a help\n"
"    b     b help\n"
"\n"
"options:\n"
"  -h, --help  show this help message and exit\n"
"  --foo   foo help\n"
"\n"
">>> parser.parse_args(['a', '--help'])\n"
"usage: PROG a [-h] bar\n"
"\n"
"positional arguments:\n"
"  bar     bar help\n"
"\n"
"options:\n"
"  -h, --help  show this help message and exit\n"
"\n"
">>> parser.parse_args(['b', '--help'])\n"
"usage: PROG b [-h] [--baz {X,Y,Z}]\n"
"\n"
"options:\n"
"  -h, --help     show this help message and exit\n"
"  --baz {X,Y,Z}  baz help"
msgstr ""

#: ../../library/argparse.rst:1664
msgid ""
"The :meth:`add_subparsers` method also supports ``title`` and "
"``description`` keyword arguments.  When either is present, the subparser's "
"commands will appear in their own group in the help output.  For example::"
msgstr ""
"Метод :meth:`add_subparsers` також підтримує ключові аргументи ``title`` і "
"``description``. Якщо будь-який з них присутній, команди субпарсера "
"відображатимуться у власній групі у виведенні довідки. Наприклад::"

#: ../../library/argparse.rst:1668
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> subparsers = parser.add_subparsers(title='subcommands',\n"
"...                                    description='valid subcommands',\n"
"...                                    help='additional help')\n"
">>> subparsers.add_parser('foo')\n"
">>> subparsers.add_parser('bar')\n"
">>> parser.parse_args(['-h'])\n"
"usage:  [-h] {foo,bar} ...\n"
"\n"
"options:\n"
"  -h, --help  show this help message and exit\n"
"\n"
"subcommands:\n"
"  valid subcommands\n"
"\n"
"  {foo,bar}   additional help"
msgstr ""

#: ../../library/argparse.rst:1685
msgid ""
"Furthermore, :meth:`~_SubParsersAction.add_parser` supports an additional "
"*aliases* argument, which allows multiple strings to refer to the same "
"subparser. This example, like ``svn``, aliases ``co`` as a shorthand for "
"``checkout``::"
msgstr ""

#: ../../library/argparse.rst:1690
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> subparsers = parser.add_subparsers()\n"
">>> checkout = subparsers.add_parser('checkout', aliases=['co'])\n"
">>> checkout.add_argument('foo')\n"
">>> parser.parse_args(['co', 'bar'])\n"
"Namespace(foo='bar')"
msgstr ""

#: ../../library/argparse.rst:1697
msgid ""
":meth:`~_SubParsersAction.add_parser` supports also an additional "
"*deprecated* argument, which allows to deprecate the subparser."
msgstr ""

#: ../../library/argparse.rst:1711
msgid ""
"One particularly effective way of handling subcommands is to combine the use"
" of the :meth:`add_subparsers` method with calls to :meth:`set_defaults` so "
"that each subparser knows which Python function it should execute.  For "
"example::"
msgstr ""

#: ../../library/argparse.rst:1716
msgid ""
">>> # subcommand functions\n"
">>> def foo(args):\n"
"...     print(args.x * args.y)\n"
"...\n"
">>> def bar(args):\n"
"...     print('((%s))' % args.z)\n"
"...\n"
">>> # create the top-level parser\n"
">>> parser = argparse.ArgumentParser()\n"
">>> subparsers = parser.add_subparsers(required=True)\n"
">>>\n"
">>> # create the parser for the \"foo\" command\n"
">>> parser_foo = subparsers.add_parser('foo')\n"
">>> parser_foo.add_argument('-x', type=int, default=1)\n"
">>> parser_foo.add_argument('y', type=float)\n"
">>> parser_foo.set_defaults(func=foo)\n"
">>>\n"
">>> # create the parser for the \"bar\" command\n"
">>> parser_bar = subparsers.add_parser('bar')\n"
">>> parser_bar.add_argument('z')\n"
">>> parser_bar.set_defaults(func=bar)\n"
">>>\n"
">>> # parse the args and call whatever function was selected\n"
">>> args = parser.parse_args('foo 1 -x 2'.split())\n"
">>> args.func(args)\n"
"2.0\n"
">>>\n"
">>> # parse the args and call whatever function was selected\n"
">>> args = parser.parse_args('bar XYZYX'.split())\n"
">>> args.func(args)\n"
"((XYZYX))"
msgstr ""

#: ../../library/argparse.rst:1748
msgid ""
"This way, you can let :meth:`parse_args` do the job of calling the "
"appropriate function after argument parsing is complete.  Associating "
"functions with actions like this is typically the easiest way to handle the "
"different actions for each of your subparsers.  However, if it is necessary "
"to check the name of the subparser that was invoked, the ``dest`` keyword "
"argument to the :meth:`add_subparsers` call will work::"
msgstr ""
"Таким чином, ви можете дозволити :meth:`parse_args` виконати роботу з "
"виклику відповідної функції після завершення аналізу аргументу. Пов’язування"
" функцій із подібними діями зазвичай є найпростішим способом обробки різних "
"дій для кожного з ваших підпарсерів. Однак, якщо необхідно перевірити ім’я "
"викликаного субпарсера, аргумент ключового слова ``dest`` для виклику "
":meth:`add_subparsers` буде працювати:"

#: ../../library/argparse.rst:1755
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> subparsers = parser.add_subparsers(dest='subparser_name')\n"
">>> subparser1 = subparsers.add_parser('1')\n"
">>> subparser1.add_argument('-x')\n"
">>> subparser2 = subparsers.add_parser('2')\n"
">>> subparser2.add_argument('y')\n"
">>> parser.parse_args(['2', 'frobble'])\n"
"Namespace(subparser_name='2', y='frobble')"
msgstr ""

#: ../../library/argparse.rst:1764
msgid "New *required* keyword-only parameter."
msgstr ""

#: ../../library/argparse.rst:1769
msgid "FileType objects"
msgstr "Об'єкти FileType"

#: ../../library/argparse.rst:1773
msgid ""
"The :class:`FileType` factory creates objects that can be passed to the type"
" argument of :meth:`ArgumentParser.add_argument`.  Arguments that have "
":class:`FileType` objects as their type will open command-line arguments as "
"files with the requested modes, buffer sizes, encodings and error handling "
"(see the :func:`open` function for more details)::"
msgstr ""
"Фабрика :class:`FileType` створює об’єкти, які можна передати в аргумент "
"типу :meth:`ArgumentParser.add_argument`. Аргументи, які мають тип об’єктів "
":class:`FileType`, відкриватимуть аргументи командного рядка як файли з "
"потрібними режимами, розмірами буфера, кодуванням і обробкою помилок "
"(додаткову інформацію див. у функції :func:`open`)::"

#: ../../library/argparse.rst:1779
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--raw', type=argparse.FileType('wb', 0))\n"
">>> parser.add_argument('out', type=argparse.FileType('w', encoding='UTF-8'))\n"
">>> parser.parse_args(['--raw', 'raw.dat', 'file.txt'])\n"
"Namespace(out=<_io.TextIOWrapper name='file.txt' mode='w' encoding='UTF-8'>, raw=<_io.FileIO name='raw.dat' mode='wb'>)"
msgstr ""

#: ../../library/argparse.rst:1785
msgid ""
"FileType objects understand the pseudo-argument ``'-'`` and automatically "
"convert this into :data:`sys.stdin` for readable :class:`FileType` objects "
"and :data:`sys.stdout` for writable :class:`FileType` objects::"
msgstr ""

#: ../../library/argparse.rst:1789
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('infile', type=argparse.FileType('r'))\n"
">>> parser.parse_args(['-'])\n"
"Namespace(infile=<_io.TextIOWrapper name='<stdin>' encoding='UTF-8'>)"
msgstr ""

#: ../../library/argparse.rst:1794
msgid "Added the *encodings* and *errors* parameters."
msgstr ""

#: ../../library/argparse.rst:1799
msgid "Argument groups"
msgstr "Групи аргументів"

#: ../../library/argparse.rst:1804
msgid ""
"By default, :class:`ArgumentParser` groups command-line arguments into "
"\"positional arguments\" and \"options\" when displaying help messages. When"
" there is a better conceptual grouping of arguments than this default one, "
"appropriate groups can be created using the :meth:`!add_argument_group` "
"method::"
msgstr ""

#: ../../library/argparse.rst:1810
msgid ""
">>> parser = argparse.ArgumentParser(prog='PROG', add_help=False)\n"
">>> group = parser.add_argument_group('group')\n"
">>> group.add_argument('--foo', help='foo help')\n"
">>> group.add_argument('bar', help='bar help')\n"
">>> parser.print_help()\n"
"usage: PROG [--foo FOO] bar\n"
"\n"
"group:\n"
"  bar    bar help\n"
"  --foo FOO  foo help"
msgstr ""

#: ../../library/argparse.rst:1821
msgid ""
"The :meth:`add_argument_group` method returns an argument group object which"
" has an :meth:`~ArgumentParser.add_argument` method just like a regular "
":class:`ArgumentParser`.  When an argument is added to the group, the parser"
" treats it just like a normal argument, but displays the argument in a "
"separate group for help messages.  The :meth:`!add_argument_group` method "
"accepts *title* and *description* arguments which can be used to customize "
"this display::"
msgstr ""

#: ../../library/argparse.rst:1829
msgid ""
">>> parser = argparse.ArgumentParser(prog='PROG', add_help=False)\n"
">>> group1 = parser.add_argument_group('group1', 'group1 description')\n"
">>> group1.add_argument('foo', help='foo help')\n"
">>> group2 = parser.add_argument_group('group2', 'group2 description')\n"
">>> group2.add_argument('--bar', help='bar help')\n"
">>> parser.print_help()\n"
"usage: PROG [--bar BAR] foo\n"
"\n"
"group1:\n"
"  group1 description\n"
"\n"
"  foo    foo help\n"
"\n"
"group2:\n"
"  group2 description\n"
"\n"
"  --bar BAR  bar help"
msgstr ""

#: ../../library/argparse.rst:1847
msgid ""
"The optional, keyword-only parameters argument_default_ and "
"conflict_handler_ allow for finer-grained control of the behavior of the "
"argument group. These parameters have the same meaning as in the "
":class:`ArgumentParser` constructor, but apply specifically to the argument "
"group rather than the entire parser."
msgstr ""

#: ../../library/argparse.rst:1852
msgid ""
"Note that any arguments not in your user-defined groups will end up back in "
"the usual \"positional arguments\" and \"optional arguments\" sections."
msgstr ""
"Зверніть увагу, що будь-які аргументи, які не входять до визначених "
"користувачем груп, повертаються до звичайних розділів \"позиційні "
"аргументи\" та \"необов’язкові аргументи\"."

#: ../../library/argparse.rst:1855
msgid ""
"Calling :meth:`add_argument_group` on an argument group is deprecated. This "
"feature was never supported and does not always work correctly. The function"
" exists on the API by accident through inheritance and will be removed in "
"the future."
msgstr ""

#: ../../library/argparse.rst:1863
msgid "Mutual exclusion"
msgstr "Взаємне виключення"

#: ../../library/argparse.rst:1867
msgid ""
"Create a mutually exclusive group. :mod:`!argparse` will make sure that only"
" one of the arguments in the mutually exclusive group was present on the "
"command line::"
msgstr ""

#: ../../library/argparse.rst:1871
msgid ""
">>> parser = argparse.ArgumentParser(prog='PROG')\n"
">>> group = parser.add_mutually_exclusive_group()\n"
">>> group.add_argument('--foo', action='store_true')\n"
">>> group.add_argument('--bar', action='store_false')\n"
">>> parser.parse_args(['--foo'])\n"
"Namespace(bar=True, foo=True)\n"
">>> parser.parse_args(['--bar'])\n"
"Namespace(bar=False, foo=False)\n"
">>> parser.parse_args(['--foo', '--bar'])\n"
"usage: PROG [-h] [--foo | --bar]\n"
"PROG: error: argument --bar: not allowed with argument --foo"
msgstr ""

#: ../../library/argparse.rst:1883
msgid ""
"The :meth:`add_mutually_exclusive_group` method also accepts a *required* "
"argument, to indicate that at least one of the mutually exclusive arguments "
"is required::"
msgstr ""
"Метод :meth:`add_mutually_exclusive_group` також приймає *обов’язковий* "
"аргумент, щоб вказати, що потрібен принаймні один із взаємовиключних "
"аргументів:"

#: ../../library/argparse.rst:1887
msgid ""
">>> parser = argparse.ArgumentParser(prog='PROG')\n"
">>> group = parser.add_mutually_exclusive_group(required=True)\n"
">>> group.add_argument('--foo', action='store_true')\n"
">>> group.add_argument('--bar', action='store_false')\n"
">>> parser.parse_args([])\n"
"usage: PROG [-h] (--foo | --bar)\n"
"PROG: error: one of the arguments --foo --bar is required"
msgstr ""

#: ../../library/argparse.rst:1895
msgid ""
"Note that currently mutually exclusive argument groups do not support the "
"*title* and *description* arguments of "
":meth:`~ArgumentParser.add_argument_group`. However, a mutually exclusive "
"group can be added to an argument group that has a title and description. "
"For example::"
msgstr ""

#: ../../library/argparse.rst:1901
msgid ""
">>> parser = argparse.ArgumentParser(prog='PROG')\n"
">>> group = parser.add_argument_group('Group title', 'Group description')\n"
">>> exclusive_group = group.add_mutually_exclusive_group(required=True)\n"
">>> exclusive_group.add_argument('--foo', help='foo help')\n"
">>> exclusive_group.add_argument('--bar', help='bar help')\n"
">>> parser.print_help()\n"
"usage: PROG [-h] (--foo FOO | --bar BAR)\n"
"\n"
"options:\n"
"  -h, --help  show this help message and exit\n"
"\n"
"Group title:\n"
"  Group description\n"
"\n"
"  --foo FOO   foo help\n"
"  --bar BAR   bar help"
msgstr ""

#: ../../library/argparse.rst:1918
msgid ""
"Calling :meth:`add_argument_group` or :meth:`add_mutually_exclusive_group` "
"on a mutually exclusive group is deprecated. These features were never "
"supported and do not always work correctly. The functions exist on the API "
"by accident through inheritance and will be removed in the future."
msgstr ""

#: ../../library/argparse.rst:1926
msgid "Parser defaults"
msgstr "Параметри аналізатора за замовчуванням"

#: ../../library/argparse.rst:1930
msgid ""
"Most of the time, the attributes of the object returned by "
":meth:`parse_args` will be fully determined by inspecting the command-line "
"arguments and the argument actions.  :meth:`set_defaults` allows some "
"additional attributes that are determined without any inspection of the "
"command line to be added::"
msgstr ""
"У більшості випадків атрибути об’єкта, які повертає :meth:`parse_args`, "
"будуть повністю визначені шляхом перевірки аргументів командного рядка та "
"дій аргументів. :meth:`set_defaults` дозволяє додавати деякі додаткові "
"атрибути, які визначаються без перевірки командного рядка:"

#: ../../library/argparse.rst:1936
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('foo', type=int)\n"
">>> parser.set_defaults(bar=42, baz='badger')\n"
">>> parser.parse_args(['736'])\n"
"Namespace(bar=42, baz='badger', foo=736)"
msgstr ""

#: ../../library/argparse.rst:1942
msgid ""
"Note that parser-level defaults always override argument-level defaults::"
msgstr ""
"Зверніть увагу, що значення за замовчуванням на рівні аналізатора завжди "
"перекривають значення за замовчуванням на рівні аргументів::"

#: ../../library/argparse.rst:1944
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--foo', default='bar')\n"
">>> parser.set_defaults(foo='spam')\n"
">>> parser.parse_args([])\n"
"Namespace(foo='spam')"
msgstr ""

#: ../../library/argparse.rst:1950
msgid ""
"Parser-level defaults can be particularly useful when working with multiple "
"parsers.  See the :meth:`~ArgumentParser.add_subparsers` method for an "
"example of this type."
msgstr ""
"Значення за замовчуванням на рівні парсера можуть бути особливо корисними "
"під час роботи з декількома парсерами. Перегляньте метод "
":meth:`~ArgumentParser.add_subparsers` для прикладу цього типу."

#: ../../library/argparse.rst:1956
msgid ""
"Get the default value for a namespace attribute, as set by either "
":meth:`~ArgumentParser.add_argument` or by "
":meth:`~ArgumentParser.set_defaults`::"
msgstr ""
"Отримати значення за замовчуванням для атрибута простору імен, встановлене "
"або :meth:`~ArgumentParser.add_argument`, або "
":meth:`~ArgumentParser.set_defaults`::"

#: ../../library/argparse.rst:1960
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--foo', default='badger')\n"
">>> parser.get_default('foo')\n"
"'badger'"
msgstr ""

#: ../../library/argparse.rst:1967
msgid "Printing help"
msgstr "Друк довідки"

#: ../../library/argparse.rst:1969
msgid ""
"In most typical applications, :meth:`~ArgumentParser.parse_args` will take "
"care of formatting and printing any usage or error messages.  However, "
"several formatting methods are available:"
msgstr ""
"У більшості типових програм :meth:`~ArgumentParser.parse_args` подбає про "
"форматування та друк будь-яких повідомлень про використання чи помилки. "
"Однак доступно кілька методів форматування:"

#: ../../library/argparse.rst:1975
msgid ""
"Print a brief description of how the :class:`ArgumentParser` should be "
"invoked on the command line.  If *file* is ``None``, :data:`sys.stdout` is "
"assumed."
msgstr ""
"Надрукуйте короткий опис того, як :class:`ArgumentParser` слід викликати в "
"командному рядку. Якщо *file* має значення ``None``, передбачається "
":data:`sys.stdout`."

#: ../../library/argparse.rst:1981
msgid ""
"Print a help message, including the program usage and information about the "
"arguments registered with the :class:`ArgumentParser`.  If *file* is "
"``None``, :data:`sys.stdout` is assumed."
msgstr ""
"Надрукуйте довідкове повідомлення, включно з використанням програми та "
"інформацією про аргументи, зареєстровані в :class:`ArgumentParser`. Якщо "
"*file* має значення ``None``, передбачається :data:`sys.stdout`."

#: ../../library/argparse.rst:1985
msgid ""
"There are also variants of these methods that simply return a string instead"
" of printing it:"
msgstr ""
"Існують також варіанти цих методів, які просто повертають рядок замість "
"того, щоб друкувати його:"

#: ../../library/argparse.rst:1990
msgid ""
"Return a string containing a brief description of how the "
":class:`ArgumentParser` should be invoked on the command line."
msgstr ""
"Повертає рядок, що містить короткий опис того, як :class:`ArgumentParser` "
"слід викликати в командному рядку."

#: ../../library/argparse.rst:1995
msgid ""
"Return a string containing a help message, including the program usage and "
"information about the arguments registered with the :class:`ArgumentParser`."
msgstr ""
"Повертає рядок, що містить довідкове повідомлення, включаючи використання "
"програми та інформацію про аргументи, зареєстровані в "
":class:`ArgumentParser`."

#: ../../library/argparse.rst:2000
msgid "Partial parsing"
msgstr "Частковий розбір"

#: ../../library/argparse.rst:2004
msgid ""
"Sometimes a script may only parse a few of the command-line arguments, "
"passing the remaining arguments on to another script or program. In these "
"cases, the :meth:`~ArgumentParser.parse_known_args` method can be useful.  "
"It works much like :meth:`~ArgumentParser.parse_args` except that it does "
"not produce an error when extra arguments are present.  Instead, it returns "
"a two item tuple containing the populated namespace and the list of "
"remaining argument strings."
msgstr ""
"Іноді сценарій може аналізувати лише кілька аргументів командного рядка, "
"передаючи решту аргументів іншому сценарію чи програмі. У цих випадках може "
"бути корисним метод :meth:`~ArgumentParser.parse_known_args`. Він працює так"
" само, як :meth:`~ArgumentParser.parse_args`, за винятком того, що не "
"створює помилки, коли присутні додаткові аргументи. Замість цього він "
"повертає кортеж із двома елементами, що містить заповнений простір імен і "
"список решти рядків аргументів."

#: ../../library/argparse.rst:2013
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--foo', action='store_true')\n"
">>> parser.add_argument('bar')\n"
">>> parser.parse_known_args(['--foo', '--badger', 'BAR', 'spam'])\n"
"(Namespace(bar='BAR', foo=True), ['--badger', 'spam'])"
msgstr ""

#: ../../library/argparse.rst:2020
msgid ""
":ref:`Prefix matching <prefix-matching>` rules apply to "
":meth:`~ArgumentParser.parse_known_args`. The parser may consume an option "
"even if it's just a prefix of one of its known options, instead of leaving "
"it in the remaining arguments list."
msgstr ""

#: ../../library/argparse.rst:2027
msgid "Customizing file parsing"
msgstr "Налаштування аналізу файлів"

#: ../../library/argparse.rst:2031
msgid ""
"Arguments that are read from a file (see the *fromfile_prefix_chars* keyword"
" argument to the :class:`ArgumentParser` constructor) are read one argument "
"per line. :meth:`convert_arg_line_to_args` can be overridden for fancier "
"reading."
msgstr ""
"Аргументи, які зчитуються з файлу (див. аргумент ключового слова "
"*fromfile_prefix_chars* конструктора :class:`ArgumentParser`), зчитуються по"
" одному аргументу на рядок. :meth:`convert_arg_line_to_args` можна замінити "
"для кращого читання."

#: ../../library/argparse.rst:2036
msgid ""
"This method takes a single argument *arg_line* which is a string read from "
"the argument file.  It returns a list of arguments parsed from this string. "
"The method is called once per line read from the argument file, in order."
msgstr ""
"Цей метод приймає один аргумент *arg_line*, який є рядком, прочитаним з "
"файлу аргументів. Він повертає список аргументів, розібраних із цього рядка."
" Метод викликається один раз на рядок, який читається з файлу аргументів, по"
" порядку."

#: ../../library/argparse.rst:2040
msgid ""
"A useful override of this method is one that treats each space-separated "
"word as an argument.  The following example demonstrates how to do this::"
msgstr ""
"Корисною заміною цього методу є те, що розглядає кожне розділене пробілом "
"слово як аргумент. Наступний приклад демонструє, як це зробити:"

#: ../../library/argparse.rst:2043
msgid ""
"class MyArgumentParser(argparse.ArgumentParser):\n"
"    def convert_arg_line_to_args(self, arg_line):\n"
"        return arg_line.split()"
msgstr ""

#: ../../library/argparse.rst:2049
msgid "Exiting methods"
msgstr "Методи виходу"

#: ../../library/argparse.rst:2053
msgid ""
"This method terminates the program, exiting with the specified *status* and,"
" if given, it prints a *message* to :data:`sys.stderr` before that. The user"
" can override this method to handle these steps differently::"
msgstr ""

#: ../../library/argparse.rst:2057
msgid ""
"class ErrorCatchingArgumentParser(argparse.ArgumentParser):\n"
"    def exit(self, status=0, message=None):\n"
"        if status:\n"
"            raise Exception(f'Exiting because of an error: {message}')\n"
"        exit(status)"
msgstr ""

#: ../../library/argparse.rst:2065
msgid ""
"This method prints a usage message, including the *message*, to "
":data:`sys.stderr` and terminates the program with a status code of 2."
msgstr ""

#: ../../library/argparse.rst:2070
msgid "Intermixed parsing"
msgstr "Змішаний розбір"

#: ../../library/argparse.rst:2075
msgid ""
"A number of Unix commands allow the user to intermix optional arguments with"
" positional arguments.  The :meth:`~ArgumentParser.parse_intermixed_args` "
"and :meth:`~ArgumentParser.parse_known_intermixed_args` methods support this"
" parsing style."
msgstr ""
"Ряд команд Unix дозволяє користувачеві змішувати додаткові аргументи з "
"позиційними. Методи :meth:`~ArgumentParser.parse_intermixed_args` і "
":meth:`~ArgumentParser.parse_known_intermixed_args` підтримують цей стиль "
"аналізу."

#: ../../library/argparse.rst:2080
msgid ""
"These parsers do not support all the :mod:`!argparse` features, and will "
"raise exceptions if unsupported features are used.  In particular, "
"subparsers, and mutually exclusive groups that include both optionals and "
"positionals are not supported."
msgstr ""

#: ../../library/argparse.rst:2085
msgid ""
"The following example shows the difference between "
":meth:`~ArgumentParser.parse_known_args` and "
":meth:`~ArgumentParser.parse_intermixed_args`: the former returns ``['2', "
"'3']`` as unparsed arguments, while the latter collects all the positionals "
"into ``rest``.  ::"
msgstr ""
"У наступному прикладі показано різницю між "
":meth:`~ArgumentParser.parse_known_args` і "
":meth:`~ArgumentParser.parse_intermixed_args`: перший повертає ``['2', "
"'3']`` як нерозібрані аргументи, а другий збирає всі позиційні елементи в "
"``rest``. ::"

#: ../../library/argparse.rst:2091
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--foo')\n"
">>> parser.add_argument('cmd')\n"
">>> parser.add_argument('rest', nargs='*', type=int)\n"
">>> parser.parse_known_args('doit 1 --foo bar 2 3'.split())\n"
"(Namespace(cmd='doit', foo='bar', rest=[1]), ['2', '3'])\n"
">>> parser.parse_intermixed_args('doit 1 --foo bar 2 3'.split())\n"
"Namespace(cmd='doit', foo='bar', rest=[1, 2, 3])"
msgstr ""

#: ../../library/argparse.rst:2100
msgid ""
":meth:`~ArgumentParser.parse_known_intermixed_args` returns a two item tuple"
" containing the populated namespace and the list of remaining argument "
"strings. :meth:`~ArgumentParser.parse_intermixed_args` raises an error if "
"there are any remaining unparsed argument strings."
msgstr ""
":meth:`~ArgumentParser.parse_known_intermixed_args` повертає кортеж із двома"
" елементами, що містить заповнений простір імен і список решти рядків "
"аргументів. :meth:`~ArgumentParser.parse_intermixed_args` викликає помилку, "
"якщо залишилися нерозібрані рядки аргументів."

#: ../../library/argparse.rst:2109
msgid "Registering custom types or actions"
msgstr ""

#: ../../library/argparse.rst:2113
msgid ""
"Sometimes it's desirable to use a custom string in error messages to provide"
" more user-friendly output. In these cases, :meth:`!register` can be used to"
" register custom actions or types with a parser and allow you to reference "
"the type by their registered name instead of their callable name."
msgstr ""

#: ../../library/argparse.rst:2118
msgid ""
"The :meth:`!register` method accepts three arguments - a *registry_name*, "
"specifying the internal registry where the object will be stored (e.g., "
"``action``, ``type``), *value*, which is the key under which the object will"
" be registered, and object, the callable to be registered."
msgstr ""

#: ../../library/argparse.rst:2123
msgid ""
"The following example shows how to register a custom type with a parser::"
msgstr ""

#: ../../library/argparse.rst:2125
msgid ""
">>> import argparse\n"
">>> parser = argparse.ArgumentParser()\n"
">>> parser.register('type', 'hexadecimal integer', lambda s: int(s, 16))\n"
">>> parser.add_argument('--foo', type='hexadecimal integer')\n"
"_StoreAction(option_strings=['--foo'], dest='foo', nargs=None, const=None, default=None, type='hexadecimal integer', choices=None, required=False, help=None, metavar=None, deprecated=False)\n"
">>> parser.parse_args(['--foo', '0xFA'])\n"
"Namespace(foo=250)\n"
">>> parser.parse_args(['--foo', '1.2'])\n"
"usage: PROG [-h] [--foo FOO]\n"
"PROG: error: argument --foo: invalid 'hexadecimal integer' value: '1.2'"
msgstr ""

#: ../../library/argparse.rst:2137
msgid "Exceptions"
msgstr "Винятки"

#: ../../library/argparse.rst:2141
msgid "An error from creating or using an argument (optional or positional)."
msgstr ""

#: ../../library/argparse.rst:2143
msgid ""
"The string value of this exception is the message, augmented with "
"information about the argument that caused it."
msgstr ""

#: ../../library/argparse.rst:2148
msgid ""
"Raised when something goes wrong converting a command line string to a type."
msgstr ""

#: ../../library/argparse.rst:2152
msgid "Guides and Tutorials"
msgstr "Посібники та підручники"

#: ../../library/argparse.rst:803
msgid "? (question mark)"
msgstr "? (знак питання)"

#: ../../library/argparse.rst:803 ../../library/argparse.rst:837
#: ../../library/argparse.rst:851
msgid "in argparse module"
msgstr ""

#: ../../library/argparse.rst:837
msgid "* (asterisk)"
msgstr "* (зірочка)"

#: ../../library/argparse.rst:851
msgid "+ (plus)"
msgstr ""
