# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Dmytro Kazanzhy, 2024
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-11-19 01:00+0000\n"
"PO-Revision-Date: 2021-06-28 01:11+0000\n"
"Last-Translator: Dmytro Kazanzhy, 2024\n"
"Language-Team: Ukrainian (https://app.transifex.com/python-doc/teams/5390/uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != 11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % 100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || (n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

#: ../../library/pickle.rst:2
msgid ":mod:`!pickle` --- Python object serialization"
msgstr ""

#: ../../library/pickle.rst:10
msgid "**Source code:** :source:`Lib/pickle.py`"
msgstr "**Вихідний код:** :source:`Lib/pickle.py`"

#: ../../library/pickle.rst:22
msgid ""
"The :mod:`pickle` module implements binary protocols for serializing and de-"
"serializing a Python object structure.  *\"Pickling\"* is the process "
"whereby a Python object hierarchy is converted into a byte stream, and "
"*\"unpickling\"* is the inverse operation, whereby a byte stream (from a "
":term:`binary file` or :term:`bytes-like object`) is converted back into an "
"object hierarchy.  Pickling (and unpickling) is alternatively known as "
"\"serialization\", \"marshalling,\" [#]_ or \"flattening\"; however, to "
"avoid confusion, the terms used here are \"pickling\" and \"unpickling\"."
msgstr ""
"Модуль :mod:`pickle` реалізує двійкові протоколи для серіалізації та "
"десеріалізації структури об’єктів Python. *\"Pickling\"* - це процес, за "
"допомогою якого ієрархія об'єктів Python перетворюється на потік байтів, а "
"*\"unpickling\"* - це зворотна операція, за допомогою якої потік байтів (з "
":term:`binary file` або :term:`bytes-like object`) перетворюється назад в "
"ієрархію об’єктів. Травлення (і розбирання) також відоме як "
"\"серіалізація\", \"маршалінг\", [#]_ або \"зведення\"; однак, щоб уникнути "
"плутанини, тут використовуються терміни \"маринування\" та "
"\"розмаринування\"."

#: ../../library/pickle.rst:33
msgid "The ``pickle`` module **is not secure**. Only unpickle data you trust."
msgstr ""
"Модуль ``pickle`` **не захищений**. Вилучайте лише дані, яким довіряєте."

#: ../../library/pickle.rst:35
msgid ""
"It is possible to construct malicious pickle data which will **execute "
"arbitrary code during unpickling**. Never unpickle data that could have come"
" from an untrusted source, or that could have been tampered with."
msgstr ""
"Можна створити шкідливі дані pickle, які **виконуватимуть довільний код під "
"час unpickling**. Ніколи не видаляйте дані, які могли надійти з ненадійного "
"джерела або які могли бути підроблені."

#: ../../library/pickle.rst:39
msgid ""
"Consider signing data with :mod:`hmac` if you need to ensure that it has not"
" been tampered with."
msgstr ""
"Розгляньте можливість підписати дані за допомогою :mod:`hmac`, якщо вам "
"потрібно переконатися, що вони не були змінені."

#: ../../library/pickle.rst:42
msgid ""
"Safer serialization formats such as :mod:`json` may be more appropriate if "
"you are processing untrusted data. See :ref:`comparison-with-json`."
msgstr ""
"Більш безпечні формати серіалізації, такі як :mod:`json`, можуть бути більш "
"доречними, якщо ви обробляєте ненадійні дані. Перегляньте :ref:`comparison-"
"with-json`."

#: ../../library/pickle.rst:47
msgid "Relationship to other Python modules"
msgstr "Зв'язок з іншими модулями Python"

#: ../../library/pickle.rst:50
msgid "Comparison with ``marshal``"
msgstr "Порівняння з ``маршалом``"

#: ../../library/pickle.rst:52
msgid ""
"Python has a more primitive serialization module called :mod:`marshal`, but "
"in general :mod:`pickle` should always be the preferred way to serialize "
"Python objects.  :mod:`marshal` exists primarily to support Python's "
":file:`.pyc` files."
msgstr ""
"Python має примітивніший модуль серіалізації під назвою :mod:`marshal`, але "
"загалом :mod:`pickle` має завжди бути кращим способом серіалізації об’єктів "
"Python. :mod:`marshal` існує в основному для підтримки файлів :file:`.pyc` "
"Python."

#: ../../library/pickle.rst:57
msgid ""
"The :mod:`pickle` module differs from :mod:`marshal` in several significant "
"ways:"
msgstr ""
"Модуль :mod:`pickle` відрізняється від :mod:`marshal` кількома суттєвими "
"ознаками:"

#: ../../library/pickle.rst:59
msgid ""
"The :mod:`pickle` module keeps track of the objects it has already "
"serialized, so that later references to the same object won't be serialized "
"again. :mod:`marshal` doesn't do this."
msgstr ""
"Модуль :mod:`pickle` відстежує об’єкти, які він уже серіалізував, так що "
"пізніші посилання на той самий об’єкт не будуть серіалізовані знову. "
":mod:`marshal` цього не робить."

#: ../../library/pickle.rst:63
msgid ""
"This has implications both for recursive objects and object sharing.  "
"Recursive objects are objects that contain references to themselves.  These "
"are not handled by marshal, and in fact, attempting to marshal recursive "
"objects will crash your Python interpreter.  Object sharing happens when "
"there are multiple references to the same object in different places in the "
"object hierarchy being serialized.  :mod:`pickle` stores such objects only "
"once, and ensures that all other references point to the master copy.  "
"Shared objects remain shared, which can be very important for mutable "
"objects."
msgstr ""
"Це стосується як рекурсивних об’єктів, так і спільного використання "
"об’єктів. Рекурсивні об'єкти - це об'єкти, які містять посилання на себе. "
"Вони не обробляються маршалом, і фактично спроба маршалу рекурсивних "
"об’єктів призведе до збою вашого інтерпретатора Python. Спільне використання"
" об’єктів відбувається, коли існує кілька посилань на той самий об’єкт у "
"різних місцях ієрархії об’єктів, що серіалізується. :mod:`pickle` зберігає "
"такі об’єкти лише один раз і гарантує, що всі інші посилання вказують на "
"головну копію. Спільні об’єкти залишаються спільними, що може бути дуже "
"важливим для змінних об’єктів."

#: ../../library/pickle.rst:72
msgid ""
":mod:`marshal` cannot be used to serialize user-defined classes and their "
"instances.  :mod:`pickle` can save and restore class instances "
"transparently, however the class definition must be importable and live in "
"the same module as when the object was stored."
msgstr ""
":mod:`marshal` не можна використовувати для серіалізації визначених "
"користувачем класів та їх екземплярів. :mod:`pickle` може прозоро зберігати "
"та відновлювати екземпляри класу, однак визначення класу має бути "
"імпортованим і знаходитись у тому самому модулі, що й під час зберігання "
"об’єкта."

#: ../../library/pickle.rst:77
msgid ""
"The :mod:`marshal` serialization format is not guaranteed to be portable "
"across Python versions.  Because its primary job in life is to support "
":file:`.pyc` files, the Python implementers reserve the right to change the "
"serialization format in non-backwards compatible ways should the need arise."
" The :mod:`pickle` serialization format is guaranteed to be backwards "
"compatible across Python releases provided a compatible pickle protocol is "
"chosen and pickling and unpickling code deals with Python 2 to Python 3 type"
" differences if your data is crossing that unique breaking change language "
"boundary."
msgstr ""
"Формат серіалізації :mod:`marshal` не гарантовано переноситься між версіями "
"Python. Оскільки основним завданням у житті є підтримка файлів :file:`.pyc`,"
" розробники Python залишають за собою право змінювати формат серіалізації "
"несумісними способами, якщо виникне така потреба. Формат серіалізації "
":mod:`pickle` гарантовано буде зворотно сумісним з усіма випусками Python за"
" умови, що вибрано сумісний протокол pickle, а код піклування та "
"депіклування враховує відмінності типів Python 2 і Python 3, якщо ваші дані "
"перетинають цю унікальну межу мови зміни порушення. ."

#: ../../library/pickle.rst:90
msgid "Comparison with ``json``"
msgstr "Порівняння з ``json``"

#: ../../library/pickle.rst:92
msgid ""
"There are fundamental differences between the pickle protocols and `JSON "
"(JavaScript Object Notation) <https://json.org>`_:"
msgstr ""

#: ../../library/pickle.rst:95
msgid ""
"JSON is a text serialization format (it outputs unicode text, although most "
"of the time it is then encoded to ``utf-8``), while pickle is a binary "
"serialization format;"
msgstr ""
"JSON — це формат текстової серіалізації (він виводить текст Юнікод, хоча "
"здебільшого він потім кодується у ``utf-8``), тоді як pickle — це двійковий "
"формат серіалізації;"

#: ../../library/pickle.rst:99
msgid "JSON is human-readable, while pickle is not;"
msgstr "JSON читається людиною, а pickle – ні;"

#: ../../library/pickle.rst:101
msgid ""
"JSON is interoperable and widely used outside of the Python ecosystem, while"
" pickle is Python-specific;"
msgstr ""
"JSON є сумісним і широко використовується за межами екосистеми Python, тоді "
"як pickle є специфічним для Python;"

#: ../../library/pickle.rst:104
msgid ""
"JSON, by default, can only represent a subset of the Python built-in types, "
"and no custom classes; pickle can represent an extremely large number of "
"Python types (many of them automatically, by clever usage of Python's "
"introspection facilities; complex cases can be tackled by implementing "
":ref:`specific object APIs <pickle-inst>`);"
msgstr ""
"За замовчуванням JSON може представляти лише підмножину вбудованих типів "
"Python, а не спеціальні класи; pickle може представляти надзвичайно велику "
"кількість типів Python (багато з них автоматично, завдяки розумному "
"використанню можливостей інтроспекції Python; складні випадки можна вирішити"
" шляхом впровадження :ref:`спеціальних API об’єктів <pickle-inst>`);"

#: ../../library/pickle.rst:110
msgid ""
"Unlike pickle, deserializing untrusted JSON does not in itself create an "
"arbitrary code execution vulnerability."
msgstr ""
"На відміну від pickle, десеріалізація ненадійного JSON сама по собі не "
"створює вразливості виконання довільного коду."

#: ../../library/pickle.rst:114
msgid ""
"The :mod:`json` module: a standard library module allowing JSON "
"serialization and deserialization."
msgstr ""
"Модуль :mod:`json`: стандартний бібліотечний модуль, який дозволяє "
"серіалізацію та десеріалізацію JSON."

#: ../../library/pickle.rst:121
msgid "Data stream format"
msgstr "Формат потоку даних"

#: ../../library/pickle.rst:126
msgid ""
"The data format used by :mod:`pickle` is Python-specific.  This has the "
"advantage that there are no restrictions imposed by external standards such "
"as JSON (which can't represent pointer sharing); however it means that non-"
"Python programs may not be able to reconstruct pickled Python objects."
msgstr ""

#: ../../library/pickle.rst:131
msgid ""
"By default, the :mod:`pickle` data format uses a relatively compact binary "
"representation.  If you need optimal size characteristics, you can "
"efficiently :doc:`compress <archiving>` pickled data."
msgstr ""
"За замовчуванням формат даних :mod:`pickle` використовує відносно компактне "
"двійкове представлення. Якщо вам потрібні оптимальні характеристики розміру,"
" ви можете ефективно :doc:`стиснути <archiving>` мариновані дані."

#: ../../library/pickle.rst:135
msgid ""
"The module :mod:`pickletools` contains tools for analyzing data streams "
"generated by :mod:`pickle`.  :mod:`pickletools` source code has extensive "
"comments about opcodes used by pickle protocols."
msgstr ""
"Модуль :mod:`pickletools` містить інструменти для аналізу потоків даних, "
"згенерованих :mod:`pickle`. Вихідний код :mod:`pickletools` містить численні"
" коментарі щодо кодів операцій, які використовуються протоколами pickle."

#: ../../library/pickle.rst:139
msgid ""
"There are currently 6 different protocols which can be used for pickling. "
"The higher the protocol used, the more recent the version of Python needed "
"to read the pickle produced."
msgstr ""
"На даний момент існує 6 різних протоколів, які можна використовувати для "
"маринування. Чим вищий протокол використовується, тим новіша версія Python "
"потрібна для читання створеного пікле."

#: ../../library/pickle.rst:143
msgid ""
"Protocol version 0 is the original \"human-readable\" protocol and is "
"backwards compatible with earlier versions of Python."
msgstr ""
"Протокол версії 0 — це оригінальний \"людиночитаний\" протокол, який "
"зворотно сумісний із попередніми версіями Python."

#: ../../library/pickle.rst:146
msgid ""
"Protocol version 1 is an old binary format which is also compatible with "
"earlier versions of Python."
msgstr ""
"Протокол версії 1 — це старий двійковий формат, який також сумісний із "
"попередніми версіями Python."

#: ../../library/pickle.rst:149
msgid ""
"Protocol version 2 was introduced in Python 2.3.  It provides much more "
"efficient pickling of :term:`new-style classes <new-style class>`.  Refer to"
" :pep:`307` for information about improvements brought by protocol 2."
msgstr ""
"Протокол версії 2 був представлений у Python 2.3. Він забезпечує набагато "
"ефективніше маринування :term:`класів нового стилю <new-style class>`. "
"Зверніться до :pep:`307`, щоб отримати інформацію про покращення, внесені "
"протоколом 2."

#: ../../library/pickle.rst:153
msgid ""
"Protocol version 3 was added in Python 3.0.  It has explicit support for "
":class:`bytes` objects and cannot be unpickled by Python 2.x.  This was the "
"default protocol in Python 3.0--3.7."
msgstr ""
"Протокол версії 3 додано в Python 3.0. Він має явну підтримку об’єктів "
":class:`bytes` і не може бути скасований Python 2.x. Це був протокол за "
"замовчуванням у Python 3.0-3.7."

#: ../../library/pickle.rst:157
msgid ""
"Protocol version 4 was added in Python 3.4.  It adds support for very large "
"objects, pickling more kinds of objects, and some data format optimizations."
"  It is the default protocol starting with Python 3.8. Refer to :pep:`3154` "
"for information about improvements brought by protocol 4."
msgstr ""
"Протокол версії 4 додано в Python 3.4. Він додає підтримку для дуже великих "
"об’єктів, маринування більшої кількості типів об’єктів і деяку оптимізацію "
"формату даних. Це стандартний протокол, починаючи з Python 3.8. Зверніться "
"до :pep:`3154` для отримання інформації про покращення, внесені протоколом "
"4."

#: ../../library/pickle.rst:163
msgid ""
"Protocol version 5 was added in Python 3.8.  It adds support for out-of-band"
" data and speedup for in-band data.  Refer to :pep:`574` for information "
"about improvements brought by protocol 5."
msgstr ""
"Протокол версії 5 додано в Python 3.8. Він додає підтримку позасмугових "
"даних і прискорення для внутрішньосмугових даних. Зверніться до :pep:`574` "
"для отримання інформації про покращення, внесені протоколом 5."

#: ../../library/pickle.rst:168
msgid ""
"Serialization is a more primitive notion than persistence; although "
":mod:`pickle` reads and writes file objects, it does not handle the issue of"
" naming persistent objects, nor the (even more complicated) issue of "
"concurrent access to persistent objects.  The :mod:`pickle` module can "
"transform a complex object into a byte stream and it can transform the byte "
"stream into an object with the same internal structure.  Perhaps the most "
"obvious thing to do with these byte streams is to write them onto a file, "
"but it is also conceivable to send them across a network or store them in a "
"database.  The :mod:`shelve` module provides a simple interface to pickle "
"and unpickle objects on DBM-style database files."
msgstr ""
"Серіалізація є більш примітивним поняттям, ніж стійкість; хоча :mod:`pickle`"
" читає та записує файлові об’єкти, він не вирішує проблему іменування "
"постійних об’єктів, ані (навіть більш складну) проблему одночасного доступу "
"до постійних об’єктів. Модуль :mod:`pickle` може перетворити складний об’єкт"
" у потік байтів, і він може перетворити потік байтів в об’єкт із такою ж "
"внутрішньою структурою. Мабуть, найочевидніша річ, яку можна зробити з цими "
"потоками байтів, — це записати їх у файл, але також можливо надіслати їх "
"через мережу або зберегти в базі даних. Модуль :mod:`shelve` забезпечує "
"простий інтерфейс для вибору та вилучення об’єктів у файлах бази даних у "
"стилі DBM."

#: ../../library/pickle.rst:181
msgid "Module Interface"
msgstr "Інтерфейс модуля"

#: ../../library/pickle.rst:183
msgid ""
"To serialize an object hierarchy, you simply call the :func:`dumps` "
"function. Similarly, to de-serialize a data stream, you call the "
":func:`loads` function. However, if you want more control over serialization"
" and de-serialization, you can create a :class:`Pickler` or an "
":class:`Unpickler` object, respectively."
msgstr ""
"Щоб серіалізувати ієрархію об’єктів, ви просто викликаєте функцію "
":func:`dumps`. Так само, щоб десеріалізувати потік даних, ви викликаєте "
"функцію :func:`loads`. Однак, якщо ви хочете більше контролювати "
"серіалізацію та десеріалізацію, ви можете створити об’єкт :class:`Pickler` "
"або :class:`Unpickler` відповідно."

#: ../../library/pickle.rst:188
msgid "The :mod:`pickle` module provides the following constants:"
msgstr "Модуль :mod:`pickle` надає такі константи:"

#: ../../library/pickle.rst:193
msgid ""
"An integer, the highest :ref:`protocol version <pickle-protocols>` "
"available.  This value can be passed as a *protocol* value to functions "
":func:`dump` and :func:`dumps` as well as the :class:`Pickler` constructor."
msgstr ""
"Ціле число, найвища доступна :ref:`версія протоколу <pickle-protocols>`. Це "
"значення можна передати як значення *protocol* до функцій :func:`dump` і "
":func:`dumps`, а також до конструктора :class:`Pickler`."

#: ../../library/pickle.rst:200
msgid ""
"An integer, the default :ref:`protocol version <pickle-protocols>` used for "
"pickling.  May be less than :data:`HIGHEST_PROTOCOL`.  Currently the default"
" protocol is 4, first introduced in Python 3.4 and incompatible with "
"previous versions."
msgstr ""
"Ціле число, стандартна :ref:`версія протоколу <pickle-protocols>`, що "
"використовується для травлення. Може бути менше ніж "
":data:`HIGHEST_PROTOCOL`. Наразі стандартним протоколом є 4, вперше "
"представлений у Python 3.4 і несумісний із попередніми версіями."

#: ../../library/pickle.rst:207
msgid "The default protocol is 3."
msgstr "Стандартний протокол – 3."

#: ../../library/pickle.rst:211
msgid "The default protocol is 4."
msgstr "Стандартний протокол – 4."

#: ../../library/pickle.rst:213
msgid ""
"The :mod:`pickle` module provides the following functions to make the "
"pickling process more convenient:"
msgstr ""
"Модуль :mod:`pickle` надає такі функції, щоб зробити процес маринування "
"зручнішим:"

#: ../../library/pickle.rst:218
msgid ""
"Write the pickled representation of the object *obj* to the open :term:`file"
" object` *file*.  This is equivalent to ``Pickler(file, "
"protocol).dump(obj)``."
msgstr ""
"Запишіть виділене представлення об’єкта *obj* у відкритий :term:`file "
"object` *file*. Це еквівалентно ``Pickler(file, protocol).dump(obj)``."

#: ../../library/pickle.rst:222
msgid ""
"Arguments *file*, *protocol*, *fix_imports* and *buffer_callback* have the "
"same meaning as in the :class:`Pickler` constructor."
msgstr ""
"Аргументи *file*, *protocol*, *fix_imports* і *buffer_callback* мають те "
"саме значення, що й у конструкторі :class:`Pickler`."

#: ../../library/pickle.rst:225 ../../library/pickle.rst:236
#: ../../library/pickle.rst:328
msgid "The *buffer_callback* argument was added."
msgstr "Додано аргумент *buffer_callback*."

#: ../../library/pickle.rst:230
msgid ""
"Return the pickled representation of the object *obj* as a :class:`bytes` "
"object, instead of writing it to a file."
msgstr ""
"Повернути відібране представлення об’єкта *obj* як об’єкт :class:`bytes` "
"замість запису його у файл."

#: ../../library/pickle.rst:233
msgid ""
"Arguments *protocol*, *fix_imports* and *buffer_callback* have the same "
"meaning as in the :class:`Pickler` constructor."
msgstr ""
"Аргументи *protocol*, *fix_imports* і *buffer_callback* мають те саме "
"значення, що й у конструкторі :class:`Pickler`."

#: ../../library/pickle.rst:241
msgid ""
"Read the pickled representation of an object from the open :term:`file "
"object` *file* and return the reconstituted object hierarchy specified "
"therein. This is equivalent to ``Unpickler(file).load()``."
msgstr ""
"Зчитувати виділене представлення об’єкта з відкритого :term:`file object` "
"*file* і повертати відновлену ієрархію об’єктів, указану в ньому. Це "
"еквівалентно ``Unpickler(file).load()``."

#: ../../library/pickle.rst:245 ../../library/pickle.rst:260
msgid ""
"The protocol version of the pickle is detected automatically, so no protocol"
" argument is needed.  Bytes past the pickled representation of the object "
"are ignored."
msgstr ""
"Версія протоколу pickle визначається автоматично, тому аргумент протоколу не"
" потрібен. Байти, що перебувають після виділеного представлення об’єкта, "
"ігноруються."

#: ../../library/pickle.rst:249
msgid ""
"Arguments *file*, *fix_imports*, *encoding*, *errors*, *strict* and "
"*buffers* have the same meaning as in the :class:`Unpickler` constructor."
msgstr ""
"Аргументи *file*, *fix_imports*, *encoding*, *errors*, *strict* і *buffers* "
"мають те саме значення, що й у конструкторі :class:`Unpickler`."

#: ../../library/pickle.rst:252 ../../library/pickle.rst:267
#: ../../library/pickle.rst:433
msgid "The *buffers* argument was added."
msgstr "Додано аргумент *buffers*."

#: ../../library/pickle.rst:257
msgid ""
"Return the reconstituted object hierarchy of the pickled representation "
"*data* of an object. *data* must be a :term:`bytes-like object`."
msgstr ""
"Повертає відновлену ієрархію об’єктів маринованого представлення *даних* "
"об’єкта. *data* має бути :term:`bytes-like object`."

#: ../../library/pickle.rst:264
msgid ""
"Arguments *fix_imports*, *encoding*, *errors*, *strict* and *buffers* have "
"the same meaning as in the :class:`Unpickler` constructor."
msgstr ""
"Аргументи *fix_imports*, *encoding*, *errors*, *strict* і *buffers* мають те"
" саме значення, що й у конструкторі :class:`Unpickler`."

#: ../../library/pickle.rst:271
msgid "The :mod:`pickle` module defines three exceptions:"
msgstr "Модуль :mod:`pickle` визначає три винятки:"

#: ../../library/pickle.rst:275
msgid ""
"Common base class for the other pickling exceptions.  It inherits from "
":exc:`Exception`."
msgstr ""

#: ../../library/pickle.rst:280
msgid ""
"Error raised when an unpicklable object is encountered by :class:`Pickler`. "
"It inherits from :exc:`PickleError`."
msgstr ""

#: ../../library/pickle.rst:283
msgid ""
"Refer to :ref:`pickle-picklable` to learn what kinds of objects can be "
"pickled."
msgstr ""
"Зверніться до :ref:`pickle-picklable`, щоб дізнатися, які види об’єктів "
"можна маринувати."

#: ../../library/pickle.rst:288
msgid ""
"Error raised when there is a problem unpickling an object, such as a data "
"corruption or a security violation.  It inherits from :exc:`PickleError`."
msgstr ""

#: ../../library/pickle.rst:291
msgid ""
"Note that other exceptions may also be raised during unpickling, including "
"(but not necessarily limited to) AttributeError, EOFError, ImportError, and "
"IndexError."
msgstr ""
"Зауважте, що інші винятки також можуть виникати під час видалення, включаючи"
" (але не обов’язково обмежуючись ними) AttributeError, EOFError, ImportError"
" та IndexError."

#: ../../library/pickle.rst:296
msgid ""
"The :mod:`pickle` module exports three classes, :class:`Pickler`, "
":class:`Unpickler` and :class:`PickleBuffer`:"
msgstr ""
"Модуль :mod:`pickle` експортує три класи, :class:`Pickler`, "
":class:`Unpickler` і :class:`PickleBuffer`:"

#: ../../library/pickle.rst:301
msgid "This takes a binary file for writing a pickle data stream."
msgstr "Це бере двійковий файл для запису потоку даних pickle."

#: ../../library/pickle.rst:303
msgid ""
"The optional *protocol* argument, an integer, tells the pickler to use the "
"given protocol; supported protocols are 0 to :data:`HIGHEST_PROTOCOL`. If "
"not specified, the default is :data:`DEFAULT_PROTOCOL`.  If a negative "
"number is specified, :data:`HIGHEST_PROTOCOL` is selected."
msgstr ""
"Необов’язковий аргумент *protocol*, ціле число, повідомляє піклеру "
"використовувати заданий протокол; підтримувані протоколи від 0 до "
":data:`HIGHEST_PROTOCOL`. Якщо не вказано, типовим є "
":data:`DEFAULT_PROTOCOL`. Якщо вказано від’ємне число, вибирається "
":data:`HIGHEST_PROTOCOL`."

#: ../../library/pickle.rst:308
msgid ""
"The *file* argument must have a write() method that accepts a single bytes "
"argument.  It can thus be an on-disk file opened for binary writing, an "
":class:`io.BytesIO` instance, or any other custom object that meets this "
"interface."
msgstr ""
"Аргумент *file* повинен мати метод write(), який приймає однобайтовий "
"аргумент. Таким чином, це може бути файл на диску, відкритий для двійкового "
"запису, екземпляр :class:`io.BytesIO` або будь-який інший спеціальний "
"об’єкт, який відповідає цьому інтерфейсу."

#: ../../library/pickle.rst:313
msgid ""
"If *fix_imports* is true and *protocol* is less than 3, pickle will try to "
"map the new Python 3 names to the old module names used in Python 2, so that"
" the pickle data stream is readable with Python 2."
msgstr ""
"Якщо *fix_imports* має значення true, а *protocol* — менше 3, pickle спробує"
" зіставити нові імена Python 3 зі старими назвами модулів, які "
"використовуються в Python 2, щоб потік даних pickle можна було читати за "
"допомогою Python 2."

#: ../../library/pickle.rst:317
msgid ""
"If *buffer_callback* is ``None`` (the default), buffer views are serialized "
"into *file* as part of the pickle stream."
msgstr ""

#: ../../library/pickle.rst:320
msgid ""
"If *buffer_callback* is not ``None``, then it can be called any number of "
"times with a buffer view.  If the callback returns a false value (such as "
"``None``), the given buffer is :ref:`out-of-band <pickle-oob>`; otherwise "
"the buffer is serialized in-band, i.e. inside the pickle stream."
msgstr ""

#: ../../library/pickle.rst:325
msgid ""
"It is an error if *buffer_callback* is not ``None`` and *protocol* is "
"``None`` or smaller than 5."
msgstr ""

#: ../../library/pickle.rst:333
msgid ""
"Write the pickled representation of *obj* to the open file object given in "
"the constructor."
msgstr ""
"Запишіть виділене представлення *obj* до відкритого файлового об’єкта, "
"наданого в конструкторі."

#: ../../library/pickle.rst:338
msgid "Do nothing by default.  This exists so a subclass can override it."
msgstr ""
"За замовчуванням нічого не робити. Це існує, тому підклас може замінити "
"його."

#: ../../library/pickle.rst:340
msgid ""
"If :meth:`persistent_id` returns ``None``, *obj* is pickled as usual.  Any "
"other value causes :class:`Pickler` to emit the returned value as a "
"persistent ID for *obj*.  The meaning of this persistent ID should be "
"defined by :meth:`Unpickler.persistent_load`.  Note that the value returned "
"by :meth:`persistent_id` cannot itself have a persistent ID."
msgstr ""
"Якщо :meth:`persistent_id` повертає ``None``, *obj* маринується як зазвичай."
" Будь-яке інше значення змушує :class:`Pickler` видати повернуте значення як"
" постійний ідентифікатор для *obj*. Значення цього постійного ідентифікатора"
" має бути визначено :meth:`Unpickler.persistent_load`. Зауважте, що "
"значення, яке повертає :meth:`persistent_id`, не може мати постійний "
"ідентифікатор."

#: ../../library/pickle.rst:346 ../../library/pickle.rst:451
msgid "See :ref:`pickle-persistent` for details and examples of uses."
msgstr ""
"Перегляньте :ref:`pickle-persistent` для деталей та прикладів використання."

#: ../../library/pickle.rst:348
msgid ""
"Add the default implementation of this method in the C implementation of "
":class:`!Pickler`."
msgstr ""

#: ../../library/pickle.rst:354
msgid ""
"A pickler object's dispatch table is a registry of *reduction functions* of "
"the kind which can be declared using :func:`copyreg.pickle`.  It is a "
"mapping whose keys are classes and whose values are reduction functions.  A "
"reduction function takes a single argument of the associated class and "
"should conform to the same interface as a :meth:`~object.__reduce__` method."
msgstr ""

#: ../../library/pickle.rst:362
msgid ""
"By default, a pickler object will not have a :attr:`dispatch_table` "
"attribute, and it will instead use the global dispatch table managed by the "
":mod:`copyreg` module. However, to customize the pickling for a specific "
"pickler object one can set the :attr:`dispatch_table` attribute to a dict-"
"like object.  Alternatively, if a subclass of :class:`Pickler` has a "
":attr:`dispatch_table` attribute then this will be used as the default "
"dispatch table for instances of that class."
msgstr ""
"За замовчуванням об’єкт pickler не матиме атрибута :attr:`dispatch_table`, "
"натомість він використовуватиме глобальну таблицю відправлення, якою керує "
"модуль :mod:`copyreg`. Однак, щоб налаштувати травлення для певного об’єкта "
"піклеру, можна встановити атрибут :attr:`dispatch_table` на об’єкт, подібний"
" до dict. Крім того, якщо підклас :class:`Pickler` має атрибут "
":attr:`dispatch_table`, тоді він використовуватиметься як типова таблиця "
"відправлення для екземплярів цього класу."

#: ../../library/pickle.rst:371
msgid "See :ref:`pickle-dispatch` for usage examples."
msgstr "Перегляньте :ref:`pickle-dispatch` приклади використання."

#: ../../library/pickle.rst:377
msgid ""
"Special reducer that can be defined in :class:`Pickler` subclasses. This "
"method has priority over any reducer in the :attr:`dispatch_table`.  It "
"should conform to the same interface as a :meth:`~object.__reduce__` method,"
" and can optionally return :data:`NotImplemented` to fallback on "
":attr:`dispatch_table`-registered reducers to pickle ``obj``."
msgstr ""

#: ../../library/pickle.rst:383
msgid "For a detailed example, see :ref:`reducer_override`."
msgstr "Детальний приклад див. :ref:`reducer_override`."

#: ../../library/pickle.rst:389
msgid ""
"Deprecated. Enable fast mode if set to a true value.  The fast mode disables"
" the usage of memo, therefore speeding the pickling process by not "
"generating superfluous PUT opcodes.  It should not be used with self-"
"referential objects, doing otherwise will cause :class:`Pickler` to recurse "
"infinitely."
msgstr ""
"Застаріле. Увімкнути швидкий режим, якщо встановлено справжнє значення. "
"Швидкий режим вимикає використання memo, таким чином прискорюючи процес "
"маринування, не генеруючи зайвих кодів операцій PUT. Його не слід "
"використовувати з об’єктами, що посилаються на себе, інакше призведе до "
"безкінечної рекурсії :class:`Pickler`."

#: ../../library/pickle.rst:395
msgid "Use :func:`pickletools.optimize` if you need more compact pickles."
msgstr ""
"Використовуйте :func:`pickletools.optimize`, якщо вам потрібні більш "
"компактні соління."

#: ../../library/pickle.rst:400
msgid "This takes a binary file for reading a pickle data stream."
msgstr "Це бере двійковий файл для читання потоку даних pickle."

#: ../../library/pickle.rst:402
msgid ""
"The protocol version of the pickle is detected automatically, so no protocol"
" argument is needed."
msgstr ""
"Версія протоколу pickle визначається автоматично, тому аргумент протоколу не"
" потрібен."

#: ../../library/pickle.rst:405
msgid ""
"The argument *file* must have three methods, a read() method that takes an "
"integer argument, a readinto() method that takes a buffer argument and a "
"readline() method that requires no arguments, as in the "
":class:`io.BufferedIOBase` interface.  Thus *file* can be an on-disk file "
"opened for binary reading, an :class:`io.BytesIO` object, or any other "
"custom object that meets this interface."
msgstr ""
"Аргумент *file* повинен мати три методи: метод read(), який приймає "
"цілочисельний аргумент, метод readinto(), який приймає аргумент буфера, і "
"метод readline(), який не потребує аргументів, як у Інтерфейс "
":class:`io.BufferedIOBase`. Таким чином, *file* може бути файлом на диску, "
"відкритим для двійкового читання, об’єктом :class:`io.BytesIO` або будь-яким"
" іншим спеціальним об’єктом, який відповідає цьому інтерфейсу."

#: ../../library/pickle.rst:412
msgid ""
"The optional arguments *fix_imports*, *encoding* and *errors* are used to "
"control compatibility support for pickle stream generated by Python 2. If "
"*fix_imports* is true, pickle will try to map the old Python 2 names to the "
"new names used in Python 3.  The *encoding* and *errors* tell pickle how to "
"decode 8-bit string instances pickled by Python 2; these default to 'ASCII' "
"and 'strict', respectively.  The *encoding* can be 'bytes' to read these "
"8-bit string instances as bytes objects. Using ``encoding='latin1'`` is "
"required for unpickling NumPy arrays and instances of "
":class:`~datetime.datetime`, :class:`~datetime.date` and "
":class:`~datetime.time` pickled by Python 2."
msgstr ""
"Необов’язкові аргументи *fix_imports*, *encoding* і *errors* "
"використовуються для керування підтримкою сумісності для потоку pickle, "
"створеного Python 2. Якщо *fix_imports* має значення true, pickle спробує "
"зіставити старі імена Python 2 з новими іменами, які використовуються у "
"Python 3. *кодування* та *помилки* повідомляють pickle, як декодувати "
"8-бітні екземпляри рядків, вибрані Python 2; за замовчуванням вони мають "
"значення \"ASCII\" і \"strict\" відповідно. *Кодуванням* може бути \"байт\" "
"для читання цих 8-бітних екземплярів рядка як об’єктів bytes. Використання "
"``encoding='latin1'`` потрібне для видалення масивів NumPy і екземплярів "
":class:`~datetime.datetime`, :class:`~datetime.date` і "
":class:`~datetime.time`, вибраних Python 2."

#: ../../library/pickle.rst:423
msgid ""
"If *buffers* is ``None`` (the default), then all data necessary for "
"deserialization must be contained in the pickle stream.  This means that the"
" *buffer_callback* argument was ``None`` when a :class:`Pickler` was "
"instantiated (or when :func:`dump` or :func:`dumps` was called)."
msgstr ""

#: ../../library/pickle.rst:428
msgid ""
"If *buffers* is not ``None``, it should be an iterable of buffer-enabled "
"objects that is consumed each time the pickle stream references an "
":ref:`out-of-band <pickle-oob>` buffer view.  Such buffers have been given "
"in order to the *buffer_callback* of a Pickler object."
msgstr ""

#: ../../library/pickle.rst:438
msgid ""
"Read the pickled representation of an object from the open file object given"
" in the constructor, and return the reconstituted object hierarchy specified"
" therein.  Bytes past the pickled representation of the object are ignored."
msgstr ""
"Зчитувати виділене представлення об’єкта з відкритого файлового об’єкта, "
"наданого в конструкторі, і повертати відновлену ієрархію об’єктів, указану в"
" ньому. Байти, які перебувають після виділеного представлення об’єкта, "
"ігноруються."

#: ../../library/pickle.rst:445
msgid "Raise an :exc:`UnpicklingError` by default."
msgstr "Викликати :exc:`UnpicklingError` за замовчуванням."

#: ../../library/pickle.rst:447
msgid ""
"If defined, :meth:`persistent_load` should return the object specified by "
"the persistent ID *pid*.  If an invalid persistent ID is encountered, an "
":exc:`UnpicklingError` should be raised."
msgstr ""
"Якщо визначено, :meth:`persistent_load` має повертати об’єкт, указаний "
"постійним ідентифікатором *pid*. Якщо виявлено недійсний постійний "
"ідентифікатор, має бути викликано :exc:`UnpicklingError`."

#: ../../library/pickle.rst:453
msgid ""
"Add the default implementation of this method in the C implementation of "
":class:`!Unpickler`."
msgstr ""

#: ../../library/pickle.rst:459
msgid ""
"Import *module* if necessary and return the object called *name* from it, "
"where the *module* and *name* arguments are :class:`str` objects.  Note, "
"unlike its name suggests, :meth:`find_class` is also used for finding "
"functions."
msgstr ""
"Імпортуйте *module*, якщо необхідно, і поверніть з нього об’єкт із назвою "
"*name*, де аргументи *module* і *name* є об’єктами :class:`str`. Зверніть "
"увагу, на відміну від назви, :meth:`find_class` також використовується для "
"пошуку функцій."

#: ../../library/pickle.rst:464
msgid ""
"Subclasses may override this to gain control over what type of objects and "
"how they can be loaded, potentially reducing security risks. Refer to "
":ref:`pickle-restrict` for details."
msgstr ""
"Підкласи можуть замінити це, щоб отримати контроль над тим, який тип "
"об’єктів і як їх можна завантажувати, потенційно зменшуючи ризики безпеки. "
"Зверніться до :ref:`pickle-restrict` для деталей."

#: ../../library/pickle.rst:468
msgid ""
"Raises an :ref:`auditing event <auditing>` ``pickle.find_class`` with "
"arguments ``module``, ``name``."
msgstr ""
"Викликає :ref:`подію аудиту <auditing>` ``pickle.find_class`` з аргументами "
"``module``, ``name``."

#: ../../library/pickle.rst:472
msgid ""
"A wrapper for a buffer representing picklable data.  *buffer* must be a "
":ref:`buffer-providing <bufferobjects>` object, such as a :term:`bytes-like "
"object` or a N-dimensional array."
msgstr ""
"Обгортка для буфера, що представляє дані, які можна вибрати. *buffer* має "
"бути об’єктом, :ref:`що надає буфер <bufferobjects>`, наприклад "
":term:`bytes-like object` або N-вимірним масивом."

#: ../../library/pickle.rst:476
msgid ""
":class:`PickleBuffer` is itself a buffer provider, therefore it is possible "
"to pass it to other APIs expecting a buffer-providing object, such as "
":class:`memoryview`."
msgstr ""
":class:`PickleBuffer` сам є постачальником буфера, тому його можна передати "
"іншим API, які очікують об’єкта, що надає буфер, наприклад "
":class:`memoryview`."

#: ../../library/pickle.rst:480
msgid ""
":class:`PickleBuffer` objects can only be serialized using pickle protocol 5"
" or higher.  They are eligible for :ref:`out-of-band serialization <pickle-"
"oob>`."
msgstr ""
"Об’єкти :class:`PickleBuffer` можна серіалізувати лише за допомогою "
"протоколу pickle версії 5 або вище. Вони підходять для :ref:`позасмугової "
"серіалізації <pickle-oob>`."

#: ../../library/pickle.rst:488
msgid ""
"Return a :class:`memoryview` of the memory area underlying this buffer. The "
"returned object is a one-dimensional, C-contiguous memoryview with format "
"``B`` (unsigned bytes).  :exc:`BufferError` is raised if the buffer is "
"neither C- nor Fortran-contiguous."
msgstr ""
"Повертає :class:`memoryview` області пам’яті, що лежить в основі цього "
"буфера. Повернений об’єкт є одновимірним C-суміжним представленням пам’яті у"
" форматі ``B`` (байти без знаку). :exc:`BufferError` виникає, якщо буфер не "
"суміжний ні на C, ні на Fortran."

#: ../../library/pickle.rst:495
msgid "Release the underlying buffer exposed by the PickleBuffer object."
msgstr "Вивільніть базовий буфер, відкритий об’єктом PickleBuffer."

#: ../../library/pickle.rst:501
msgid "What can be pickled and unpickled?"
msgstr "Що можна маринувати і не квашети?"

#: ../../library/pickle.rst:503
msgid "The following types can be pickled:"
msgstr "Маринувати можна такі види:"

#: ../../library/pickle.rst:505
msgid ""
"built-in constants (``None``, ``True``, ``False``, ``Ellipsis``, and "
":data:`NotImplemented`);"
msgstr ""

#: ../../library/pickle.rst:508
msgid "integers, floating-point numbers, complex numbers;"
msgstr "цілі числа, числа з плаваючою комою, комплексні числа;"

#: ../../library/pickle.rst:510
msgid "strings, bytes, bytearrays;"
msgstr "рядки, байти, байтові масиви;"

#: ../../library/pickle.rst:512
msgid ""
"tuples, lists, sets, and dictionaries containing only picklable objects;"
msgstr ""
"кортежі, списки, набори та словники, що містять лише об’єкти, які можна "
"вибирати;"

#: ../../library/pickle.rst:514
msgid ""
"functions (built-in and user-defined) accessible from the top level of a "
"module (using :keyword:`def`, not :keyword:`lambda`);"
msgstr ""
"функції (вбудовані та визначені користувачем), доступні з верхнього рівня "
"модуля (за допомогою :keyword:`def`, а не :keyword:`lambda`);"

#: ../../library/pickle.rst:517
msgid "classes accessible from the top level of a module;"
msgstr "класи, доступні з верхнього рівня модуля;"

#: ../../library/pickle.rst:519
msgid ""
"instances of such classes whose the result of calling "
":meth:`~object.__getstate__` is picklable  (see section :ref:`pickle-inst` "
"for details)."
msgstr ""

#: ../../library/pickle.rst:522
msgid ""
"Attempts to pickle unpicklable objects will raise the :exc:`PicklingError` "
"exception; when this happens, an unspecified number of bytes may have "
"already been written to the underlying file.  Trying to pickle a highly "
"recursive data structure may exceed the maximum recursion depth, a "
":exc:`RecursionError` will be raised in this case.  You can carefully raise "
"this limit with :func:`sys.setrecursionlimit`."
msgstr ""
"Спроби маринувати об’єкти, які неможливо вибрати, викличуть виняток "
":exc:`PicklingError`; коли це трапляється, невизначену кількість байтів, "
"можливо, уже було записано до основного файлу. Спроба відібрати "
"високорекурсивну структуру даних може перевищити максимальну глибину "
"рекурсії, у цьому випадку виникне :exc:`RecursionError`. Ви можете обережно "
"збільшити це обмеження за допомогою :func:`sys.setrecursionlimit`."

#: ../../library/pickle.rst:529
msgid ""
"Note that functions (built-in and user-defined) are pickled by fully "
":term:`qualified name`, not by value. [#]_  This means that only the "
"function name is pickled, along with the name of the containing module and "
"classes.  Neither the function's code, nor any of its function attributes "
"are pickled.  Thus the defining module must be importable in the unpickling "
"environment, and the module must contain the named object, otherwise an "
"exception will be raised. [#]_"
msgstr ""
"Зауважте, що функції (вбудовані та визначені користувачем) вибираються за "
"повним :term:`qualified name`, а не за значенням. [#]_ Це означає, що "
"виділяється лише назва функції, а також назва модуля та класів, що містять. "
"Ні код функції, ні будь-які її атрибути функції не мариновані. Таким чином, "
"визначальний модуль має бути імпортованим у середовищі unpickling, і модуль "
"має містити названий об’єкт, інакше буде створено виняток. [#]_"

#: ../../library/pickle.rst:536
msgid ""
"Similarly, classes are pickled by fully qualified name, so the same "
"restrictions in the unpickling environment apply.  Note that none of the "
"class's code or data is pickled, so in the following example the class "
"attribute ``attr`` is not restored in the unpickling environment::"
msgstr ""
"Подібним чином, класи вибираються за повним іменем, тому застосовуються ті "
"самі обмеження в середовищі розбирання. Зауважте, що жоден із коду чи даних "
"класу не вибирається, тому в наступному прикладі атрибут класу ``attr`` не "
"відновлюється в середовищі розбирання::"

#: ../../library/pickle.rst:541
msgid ""
"class Foo:\n"
"    attr = 'A class attribute'\n"
"\n"
"picklestring = pickle.dumps(Foo)"
msgstr ""

#: ../../library/pickle.rst:546
msgid ""
"These restrictions are why picklable functions and classes must be defined "
"at the top level of a module."
msgstr ""
"Через ці обмеження функції та класи, які можна вибрати, повинні бути "
"визначені на верхньому рівні модуля."

#: ../../library/pickle.rst:549
msgid ""
"Similarly, when class instances are pickled, their class's code and data are"
" not pickled along with them.  Only the instance data are pickled.  This is "
"done on purpose, so you can fix bugs in a class or add methods to the class "
"and still load objects that were created with an earlier version of the "
"class.  If you plan to have long-lived objects that will see many versions "
"of a class, it may be worthwhile to put a version number in the objects so "
"that suitable conversions can be made by the class's "
":meth:`~object.__setstate__` method."
msgstr ""

#: ../../library/pickle.rst:561
msgid "Pickling Class Instances"
msgstr "Примірники класу маринування"

#: ../../library/pickle.rst:565
msgid ""
"In this section, we describe the general mechanisms available to you to "
"define, customize, and control how class instances are pickled and "
"unpickled."
msgstr ""
"У цьому розділі ми описуємо загальні механізми, доступні вам для визначення,"
" налаштування та контролю того, як екземпляри класу вибираються та не "
"вибираються."

#: ../../library/pickle.rst:568
msgid ""
"In most cases, no additional code is needed to make instances picklable.  By"
" default, pickle will retrieve the class and the attributes of an instance "
"via introspection. When a class instance is unpickled, its "
":meth:`~object.__init__` method is usually *not* invoked.  The default "
"behaviour first creates an uninitialized instance and then restores the "
"saved attributes.  The following code shows an implementation of this "
"behaviour::"
msgstr ""

#: ../../library/pickle.rst:575
msgid ""
"def save(obj):\n"
"    return (obj.__class__, obj.__dict__)\n"
"\n"
"def restore(cls, attributes):\n"
"    obj = cls.__new__(cls)\n"
"    obj.__dict__.update(attributes)\n"
"    return obj"
msgstr ""

#: ../../library/pickle.rst:583
msgid ""
"Classes can alter the default behaviour by providing one or several special "
"methods:"
msgstr ""
"Класи можуть змінювати типову поведінку, надаючи один або декілька "
"спеціальних методів:"

#: ../../library/pickle.rst:588
msgid ""
"In protocols 2 and newer, classes that implements the "
":meth:`__getnewargs_ex__` method can dictate the values passed to the "
":meth:`__new__` method upon unpickling.  The method must return a pair "
"``(args, kwargs)`` where *args* is a tuple of positional arguments and "
"*kwargs* a dictionary of named arguments for constructing the object.  Those"
" will be passed to the :meth:`__new__` method upon unpickling."
msgstr ""
"У протоколах 2 і новіших класи, які реалізують метод "
":meth:`__getnewargs_ex__`, можуть диктувати значення, що передаються в метод"
" :meth:`__new__` після видалення. Метод має повертати пару \"(args, "
"kwargs)\", де *args* — це кортеж позиційних аргументів, а *kwargs* — словник"
" іменованих аргументів для побудови об’єкта. Вони будуть передані в метод "
":meth:`__new__` після видалення."

#: ../../library/pickle.rst:596
msgid ""
"You should implement this method if the :meth:`__new__` method of your class"
" requires keyword-only arguments.  Otherwise, it is recommended for "
"compatibility to implement :meth:`__getnewargs__`."
msgstr ""
"Ви повинні застосувати цей метод, якщо метод :meth:`__new__` вашого класу "
"вимагає аргументів лише з ключовими словами. В іншому випадку для сумісності"
" рекомендується реалізувати :meth:`__getnewargs__`."

#: ../../library/pickle.rst:600
msgid ":meth:`__getnewargs_ex__` is now used in protocols 2 and 3."
msgstr ":meth:`__getnewargs_ex__` тепер використовується в протоколах 2 і 3."

#: ../../library/pickle.rst:606
msgid ""
"This method serves a similar purpose as :meth:`__getnewargs_ex__`, but "
"supports only positional arguments.  It must return a tuple of arguments "
"``args`` which will be passed to the :meth:`__new__` method upon unpickling."
msgstr ""
"Цей метод виконує таку саму мету, як :meth:`__getnewargs_ex__`, але "
"підтримує лише позиційні аргументи. Він має повертати кортеж аргументів "
"``args``, який буде передано методу :meth:`__new__` після видалення."

#: ../../library/pickle.rst:610
msgid ""
":meth:`__getnewargs__` will not be called if :meth:`__getnewargs_ex__` is "
"defined."
msgstr ""
":meth:`__getnewargs__` не буде викликано, якщо :meth:`__getnewargs_ex__` "
"визначено."

#: ../../library/pickle.rst:613
msgid ""
"Before Python 3.6, :meth:`__getnewargs__` was called instead of "
":meth:`__getnewargs_ex__` in protocols 2 and 3."
msgstr ""
"До Python 3.6 :meth:`__getnewargs__` викликався замість "
":meth:`__getnewargs_ex__` у протоколах 2 і 3."

#: ../../library/pickle.rst:620
msgid ""
"Classes can further influence how their instances are pickled by overriding "
"the method :meth:`__getstate__`.  It is called and the returned object is "
"pickled as the contents for the instance, instead of a default state. There "
"are several cases:"
msgstr ""

#: ../../library/pickle.rst:625
msgid ""
"For a class that has no instance :attr:`~object.__dict__` and no "
":attr:`~object.__slots__`, the default state is ``None``."
msgstr ""

#: ../../library/pickle.rst:628
msgid ""
"For a class that has an instance :attr:`~object.__dict__` and no "
":attr:`~object.__slots__`, the default state is ``self.__dict__``."
msgstr ""

#: ../../library/pickle.rst:631
msgid ""
"For a class that has an instance :attr:`~object.__dict__` and "
":attr:`~object.__slots__`, the default state is a tuple consisting of two "
"dictionaries:  ``self.__dict__``, and a dictionary mapping slot names to "
"slot values.  Only slots that have a value are included in the latter."
msgstr ""

#: ../../library/pickle.rst:637
msgid ""
"For a class that has :attr:`~object.__slots__` and no instance "
":attr:`~object.__dict__`, the default state is a tuple whose first item is "
"``None`` and whose second item is a dictionary mapping slot names to slot "
"values described in the previous bullet."
msgstr ""

#: ../../library/pickle.rst:642
msgid ""
"Added the default implementation of the ``__getstate__()`` method in the "
":class:`object` class."
msgstr ""

#: ../../library/pickle.rst:649
msgid ""
"Upon unpickling, if the class defines :meth:`__setstate__`, it is called "
"with the unpickled state.  In that case, there is no requirement for the "
"state object to be a dictionary.  Otherwise, the pickled state must be a "
"dictionary and its items are assigned to the new instance's dictionary."
msgstr ""
"Якщо під час розбирання клас визначає :meth:`__setstate__`, він викликається"
" зі станом unpickled. У цьому випадку немає вимоги, щоб об’єкт стану був "
"словником. В іншому випадку маринований стан має бути словником, а його "
"елементи призначаються словнику нового екземпляра."

#: ../../library/pickle.rst:656
msgid ""
"If :meth:`__reduce__` returns a state with value ``None`` at pickling, the "
":meth:`__setstate__` method will not be called upon unpickling."
msgstr ""

#: ../../library/pickle.rst:660
msgid ""
"Refer to the section :ref:`pickle-state` for more information about how to "
"use the methods :meth:`~object.__getstate__` and "
":meth:`~object.__setstate__`."
msgstr ""

#: ../../library/pickle.rst:665
msgid ""
"At unpickling time, some methods like :meth:`~object.__getattr__`, "
":meth:`~object.__getattribute__`, or :meth:`~object.__setattr__` may be "
"called upon the instance.  In case those methods rely on some internal "
"invariant being true, the type should implement :meth:`~object.__new__` to "
"establish such an invariant, as :meth:`~object.__init__` is not called when "
"unpickling an instance."
msgstr ""

#: ../../library/pickle.rst:674
msgid ""
"As we shall see, pickle does not use directly the methods described above.  "
"In fact, these methods are part of the copy protocol which implements the "
":meth:`~object.__reduce__` special method.  The copy protocol provides a "
"unified interface for retrieving the data necessary for pickling and copying"
" objects. [#]_"
msgstr ""

#: ../../library/pickle.rst:680
msgid ""
"Although powerful, implementing :meth:`~object.__reduce__` directly in your "
"classes is error prone.  For this reason, class designers should use the "
"high-level interface (i.e., :meth:`~object.__getnewargs_ex__`, "
":meth:`~object.__getstate__` and :meth:`~object.__setstate__`) whenever "
"possible.  We will show, however, cases where using :meth:`!__reduce__` is "
"the only option or leads to more efficient pickling or both."
msgstr ""

#: ../../library/pickle.rst:689
msgid ""
"The interface is currently defined as follows.  The :meth:`__reduce__` "
"method takes no argument and shall return either a string or preferably a "
"tuple (the returned object is often referred to as the \"reduce value\")."
msgstr ""
"На даний момент інтерфейс визначається наступним чином. Метод "
":meth:`__reduce__` не приймає аргументів і повертає або рядок, або, бажано, "
"кортеж (повернений об’єкт часто називають \"зменшеним значенням\")."

#: ../../library/pickle.rst:693
msgid ""
"If a string is returned, the string should be interpreted as the name of a "
"global variable.  It should be the object's local name relative to its "
"module; the pickle module searches the module namespace to determine the "
"object's module.  This behaviour is typically useful for singletons."
msgstr ""
"Якщо повертається рядок, цей рядок слід інтерпретувати як назву глобальної "
"змінної. Це має бути локальне ім’я об’єкта відносно його модуля; модуль "
"pickle шукає простір імен модуля, щоб визначити модуль об’єкта. Така "
"поведінка, як правило, корисна для одиночних користувачів."

#: ../../library/pickle.rst:698
msgid ""
"When a tuple is returned, it must be between two and six items long. "
"Optional items can either be omitted, or ``None`` can be provided as their "
"value.  The semantics of each item are in order:"
msgstr ""
"Коли повертається кортеж, він має містити від двох до шести елементів. "
"Необов’язкові елементи можна або пропустити, або в якості їхнього значення "
"можна вказати ``None``. Семантика кожного елемента в порядку:"

#: ../../library/pickle.rst:704
msgid ""
"A callable object that will be called to create the initial version of the "
"object."
msgstr ""
"Викликаний об’єкт, який буде викликано для створення початкової версії "
"об’єкта."

#: ../../library/pickle.rst:707
msgid ""
"A tuple of arguments for the callable object.  An empty tuple must be given "
"if the callable does not accept any argument."
msgstr ""
"Кортеж аргументів для викликаного об’єкта. Порожній кортеж повинен бути "
"наданий, якщо викликаний не приймає жодних аргументів."

#: ../../library/pickle.rst:710
msgid ""
"Optionally, the object's state, which will be passed to the object's "
":meth:`__setstate__` method as previously described.  If the object has no "
"such method then, the value must be a dictionary and it will be added to the"
" object's :attr:`~object.__dict__` attribute."
msgstr ""
"Необов’язково, стан об’єкта, який буде передано методу :meth:`__setstate__` "
"об’єкта, як описано раніше. Якщо об’єкт не має такого методу, значення має "
"бути словником, і воно буде додано до атрибута об’єкта "
":attr:`~object.__dict__`."

#: ../../library/pickle.rst:715
msgid ""
"Optionally, an iterator (and not a sequence) yielding successive items. "
"These items will be appended to the object either using ``obj.append(item)``"
" or, in batch, using ``obj.extend(list_of_items)``. This is primarily used "
"for list subclasses, but may be used by other classes as long as they have "
":ref:`append and extend methods <typesseq-common>` with the appropriate "
"signature.  (Whether :meth:`!append` or :meth:`!extend` is used depends on "
"which pickle protocol version is used as well as the number of items to "
"append, so both must be supported.)"
msgstr ""

#: ../../library/pickle.rst:725
msgid ""
"Optionally, an iterator (not a sequence) yielding successive key-value "
"pairs.  These items will be stored to the object using ``obj[key] = value``."
"  This is primarily used for dictionary subclasses, but may be used by other"
" classes as long as they implement :meth:`__setitem__`."
msgstr ""
"Необов’язково, ітератор (не послідовність), що дає послідовні пари ключ-"
"значення. Ці елементи будуть збережені в об’єкті за допомогою ``obj[key] = "
"value``. Це в основному використовується для підкласів словників, але може "
"використовуватися іншими класами, якщо вони реалізують :meth:`__setitem__`."

#: ../../library/pickle.rst:730
msgid ""
"Optionally, a callable with a ``(obj, state)`` signature. This callable "
"allows the user to programmatically control the state-updating behavior of a"
" specific object, instead of using ``obj``'s static :meth:`__setstate__` "
"method. If not ``None``, this callable will have priority over ``obj``'s "
":meth:`__setstate__`."
msgstr ""
"Необов’язково, викликається з підписом ``(obj, state)``. Цей виклик дозволяє"
" користувачеві програмно керувати поведінкою оновлення стану конкретного "
"об’єкта замість використання статичного методу ``obj`` :meth:`__setstate__`."
" Якщо не ``None``, цей виклик матиме пріоритет над ``obj`` "
":meth:`__setstate__`."

#: ../../library/pickle.rst:736
msgid "The optional sixth tuple item, ``(obj, state)``, was added."
msgstr "Додано необов’язковий шостий елемент кортежу, ``(obj, state)``."

#: ../../library/pickle.rst:742
msgid ""
"Alternatively, a :meth:`__reduce_ex__` method may be defined.  The only "
"difference is this method should take a single integer argument, the "
"protocol version.  When defined, pickle will prefer it over the "
":meth:`__reduce__` method.  In addition, :meth:`__reduce__` automatically "
"becomes a synonym for the extended version.  The main use for this method is"
" to provide backwards-compatible reduce values for older Python releases."
msgstr ""
"В якості альтернативи можна визначити метод :meth:`__reduce_ex__`. Єдина "
"відмінність полягає в тому, що цей метод має приймати один цілий аргумент, "
"версію протоколу. Якщо визначено, pickle віддасть перевагу цьому методу "
":meth:`__reduce__`. Крім того, :meth:`__reduce__` автоматично стає синонімом"
" розширеної версії. Основним використанням цього методу є надання зворотно "
"сумісних значень зменшення для старіших випусків Python."

#: ../../library/pickle.rst:754
msgid "Persistence of External Objects"
msgstr "Постійність зовнішніх об'єктів"

#: ../../library/pickle.rst:760
msgid ""
"For the benefit of object persistence, the :mod:`pickle` module supports the"
" notion of a reference to an object outside the pickled data stream.  Such "
"objects are referenced by a persistent ID, which should be either a string "
"of alphanumeric characters (for protocol 0) [#]_ or just an arbitrary object"
" (for any newer protocol)."
msgstr ""
"На користь збереження об’єкта модуль :mod:`pickle` підтримує поняття "
"посилання на об’єкт за межами марінованого потоку даних. На такі об’єкти "
"посилається постійний ідентифікатор, який має бути або рядком буквено-"
"цифрових символів (для протоколу 0) [#]_, або просто довільним об’єктом (для"
" будь-якого новішого протоколу)."

#: ../../library/pickle.rst:766
msgid ""
"The resolution of such persistent IDs is not defined by the :mod:`pickle` "
"module; it will delegate this resolution to the user-defined methods on the "
"pickler and unpickler, :meth:`~Pickler.persistent_id` and "
":meth:`~Unpickler.persistent_load` respectively."
msgstr ""
"Роздільна здатність таких постійних ідентифікаторів не визначається модулем "
":mod:`pickle`; він делегує це вирішення визначеним користувачем методам "
"pickler і unpickler, :meth:`~Pickler.persistent_id` і "
":meth:`~Unpickler.persistent_load` відповідно."

#: ../../library/pickle.rst:771
msgid ""
"To pickle objects that have an external persistent ID, the pickler must have"
" a custom :meth:`~Pickler.persistent_id` method that takes an object as an "
"argument and returns either ``None`` or the persistent ID for that object. "
"When ``None`` is returned, the pickler simply pickles the object as normal. "
"When a persistent ID string is returned, the pickler will pickle that "
"object, along with a marker so that the unpickler will recognize it as a "
"persistent ID."
msgstr ""
"Щоб вибирати об’єкти, які мають зовнішній постійний ідентифікатор, засіб "
"вибору повинен мати спеціальний метод :meth:`~Pickler.persistent_id`, який "
"приймає об’єкт як аргумент і повертає \"Немає\" або постійний ідентифікатор "
"для цього об’єкта. Коли повертається ``None``, піклер просто маринує об’єкт "
"як зазвичай. Коли повертається рядок постійного ідентифікатора, засіб вибору"
" виділяє цей об’єкт разом із маркером, щоб засіб вилучення розпізнавало його"
" як постійний ідентифікатор."

#: ../../library/pickle.rst:778
msgid ""
"To unpickle external objects, the unpickler must have a custom "
":meth:`~Unpickler.persistent_load` method that takes a persistent ID object "
"and returns the referenced object."
msgstr ""
"Щоб розібрати зовнішні об’єкти, розбірник повинен мати спеціальний метод "
":meth:`~Unpickler.persistent_load`, який приймає об’єкт постійного "
"ідентифікатора та повертає об’єкт, на який посилається."

#: ../../library/pickle.rst:782
msgid ""
"Here is a comprehensive example presenting how persistent ID can be used to "
"pickle external objects by reference."
msgstr ""
"Ось вичерпний приклад, який демонструє, як постійний ідентифікатор можна "
"використовувати для маринування зовнішніх об’єктів за посиланням."

#: ../../library/pickle.rst:785
msgid ""
"# Simple example presenting how persistent ID can be used to pickle\n"
"# external objects by reference.\n"
"\n"
"import pickle\n"
"import sqlite3\n"
"from collections import namedtuple\n"
"\n"
"# Simple class representing a record in our database.\n"
"MemoRecord = namedtuple(\"MemoRecord\", \"key, task\")\n"
"\n"
"class DBPickler(pickle.Pickler):\n"
"\n"
"    def persistent_id(self, obj):\n"
"        # Instead of pickling MemoRecord as a regular class instance, we emit a\n"
"        # persistent ID.\n"
"        if isinstance(obj, MemoRecord):\n"
"            # Here, our persistent ID is simply a tuple, containing a tag and a\n"
"            # key, which refers to a specific record in the database.\n"
"            return (\"MemoRecord\", obj.key)\n"
"        else:\n"
"            # If obj does not have a persistent ID, return None. This means obj\n"
"            # needs to be pickled as usual.\n"
"            return None\n"
"\n"
"\n"
"class DBUnpickler(pickle.Unpickler):\n"
"\n"
"    def __init__(self, file, connection):\n"
"        super().__init__(file)\n"
"        self.connection = connection\n"
"\n"
"    def persistent_load(self, pid):\n"
"        # This method is invoked whenever a persistent ID is encountered.\n"
"        # Here, pid is the tuple returned by DBPickler.\n"
"        cursor = self.connection.cursor()\n"
"        type_tag, key_id = pid\n"
"        if type_tag == \"MemoRecord\":\n"
"            # Fetch the referenced record from the database and return it.\n"
"            cursor.execute(\"SELECT * FROM memos WHERE key=?\", (str(key_id),))\n"
"            key, task = cursor.fetchone()\n"
"            return MemoRecord(key, task)\n"
"        else:\n"
"            # Always raises an error if you cannot return the correct object.\n"
"            # Otherwise, the unpickler will think None is the object referenced\n"
"            # by the persistent ID.\n"
"            raise pickle.UnpicklingError(\"unsupported persistent object\")\n"
"\n"
"\n"
"def main():\n"
"    import io\n"
"    import pprint\n"
"\n"
"    # Initialize and populate our database.\n"
"    conn = sqlite3.connect(\":memory:\")\n"
"    cursor = conn.cursor()\n"
"    cursor.execute(\"CREATE TABLE memos(key INTEGER PRIMARY KEY, task TEXT)\")\n"
"    tasks = (\n"
"        'give food to fish',\n"
"        'prepare group meeting',\n"
"        'fight with a zebra',\n"
"        )\n"
"    for task in tasks:\n"
"        cursor.execute(\"INSERT INTO memos VALUES(NULL, ?)\", (task,))\n"
"\n"
"    # Fetch the records to be pickled.\n"
"    cursor.execute(\"SELECT * FROM memos\")\n"
"    memos = [MemoRecord(key, task) for key, task in cursor]\n"
"    # Save the records using our custom DBPickler.\n"
"    file = io.BytesIO()\n"
"    DBPickler(file).dump(memos)\n"
"\n"
"    print(\"Pickled records:\")\n"
"    pprint.pprint(memos)\n"
"\n"
"    # Update a record, just for good measure.\n"
"    cursor.execute(\"UPDATE memos SET task='learn italian' WHERE key=1\")\n"
"\n"
"    # Load the records from the pickle data stream.\n"
"    file.seek(0)\n"
"    memos = DBUnpickler(file, conn).load()\n"
"\n"
"    print(\"Unpickled records:\")\n"
"    pprint.pprint(memos)\n"
"\n"
"\n"
"if __name__ == '__main__':\n"
"    main()\n"
msgstr ""

#: ../../library/pickle.rst:790
msgid "Dispatch Tables"
msgstr "Таблиці відправлення"

#: ../../library/pickle.rst:792
msgid ""
"If one wants to customize pickling of some classes without disturbing any "
"other code which depends on pickling, then one can create a pickler with a "
"private dispatch table."
msgstr ""
"Якщо ви хочете налаштувати маринування деяких класів, не порушуючи будь-який"
" інший код, який залежить від маринування, тоді можна створити піклер із "
"приватною таблицею відправлення."

#: ../../library/pickle.rst:796
msgid ""
"The global dispatch table managed by the :mod:`copyreg` module is available "
"as :data:`!copyreg.dispatch_table`.  Therefore, one may choose to use a "
"modified copy of :data:`!copyreg.dispatch_table` as a private dispatch "
"table."
msgstr ""

#: ../../library/pickle.rst:801
msgid "For example ::"
msgstr "Наприклад ::"

#: ../../library/pickle.rst:803
msgid ""
"f = io.BytesIO()\n"
"p = pickle.Pickler(f)\n"
"p.dispatch_table = copyreg.dispatch_table.copy()\n"
"p.dispatch_table[SomeClass] = reduce_SomeClass"
msgstr ""

#: ../../library/pickle.rst:808
msgid ""
"creates an instance of :class:`pickle.Pickler` with a private dispatch table"
" which handles the ``SomeClass`` class specially.  Alternatively, the code "
"::"
msgstr ""
"створює екземпляр :class:`pickle.Pickler` із приватною таблицею "
"відправлення, яка спеціально обробляє клас ``SomeClass``. Як альтернатива, "
"код::"

#: ../../library/pickle.rst:812
msgid ""
"class MyPickler(pickle.Pickler):\n"
"    dispatch_table = copyreg.dispatch_table.copy()\n"
"    dispatch_table[SomeClass] = reduce_SomeClass\n"
"f = io.BytesIO()\n"
"p = MyPickler(f)"
msgstr ""

#: ../../library/pickle.rst:818
msgid ""
"does the same but all instances of ``MyPickler`` will by default share the "
"private dispatch table.  On the other hand, the code ::"
msgstr ""
"робить те саме, але всі екземпляри ``MyPickler`` за замовчуванням спільно "
"використовуватимуть приватну таблицю відправлення. З іншого боку, код ::"

#: ../../library/pickle.rst:821
msgid ""
"copyreg.pickle(SomeClass, reduce_SomeClass)\n"
"f = io.BytesIO()\n"
"p = pickle.Pickler(f)"
msgstr ""

#: ../../library/pickle.rst:825
msgid ""
"modifies the global dispatch table shared by all users of the :mod:`copyreg`"
" module."
msgstr ""
"змінює глобальну таблицю відправлення, яку використовують усі користувачі "
"модуля :mod:`copyreg`."

#: ../../library/pickle.rst:830
msgid "Handling Stateful Objects"
msgstr "Обробка об'єктів із збереженням стану"

#: ../../library/pickle.rst:836
msgid ""
"Here's an example that shows how to modify pickling behavior for a class. "
"The :class:`!TextReader` class below opens a text file, and returns the line"
" number and line contents each time its :meth:`!readline` method is called. "
"If a :class:`!TextReader` instance is pickled, all attributes *except* the "
"file object member are saved. When the instance is unpickled, the file is "
"reopened, and reading resumes from the last location. The "
":meth:`!__setstate__` and :meth:`!__getstate__` methods are used to "
"implement this behavior. ::"
msgstr ""

#: ../../library/pickle.rst:844
msgid ""
"class TextReader:\n"
"    \"\"\"Print and number lines in a text file.\"\"\"\n"
"\n"
"    def __init__(self, filename):\n"
"        self.filename = filename\n"
"        self.file = open(filename)\n"
"        self.lineno = 0\n"
"\n"
"    def readline(self):\n"
"        self.lineno += 1\n"
"        line = self.file.readline()\n"
"        if not line:\n"
"            return None\n"
"        if line.endswith('\\n'):\n"
"            line = line[:-1]\n"
"        return \"%i: %s\" % (self.lineno, line)\n"
"\n"
"    def __getstate__(self):\n"
"        # Copy the object's state from self.__dict__ which contains\n"
"        # all our instance attributes. Always use the dict.copy()\n"
"        # method to avoid modifying the original state.\n"
"        state = self.__dict__.copy()\n"
"        # Remove the unpicklable entries.\n"
"        del state['file']\n"
"        return state\n"
"\n"
"    def __setstate__(self, state):\n"
"        # Restore instance attributes (i.e., filename and lineno).\n"
"        self.__dict__.update(state)\n"
"        # Restore the previously opened file's state. To do so, we need to\n"
"        # reopen it and read from it until the line count is restored.\n"
"        file = open(self.filename)\n"
"        for _ in range(self.lineno):\n"
"            file.readline()\n"
"        # Finally, save the file.\n"
"        self.file = file"
msgstr ""

#: ../../library/pickle.rst:882
msgid "A sample usage might be something like this::"
msgstr "Зразок використання може бути приблизно таким:"

#: ../../library/pickle.rst:884
msgid ""
">>> reader = TextReader(\"hello.txt\")\n"
">>> reader.readline()\n"
"'1: Hello world!'\n"
">>> reader.readline()\n"
"'2: I am line number two.'\n"
">>> new_reader = pickle.loads(pickle.dumps(reader))\n"
">>> new_reader.readline()\n"
"'3: Goodbye!'"
msgstr ""

#: ../../library/pickle.rst:896
msgid "Custom Reduction for Types, Functions, and Other Objects"
msgstr "Спеціальне скорочення для типів, функцій та інших об’єктів"

#: ../../library/pickle.rst:900
msgid ""
"Sometimes, :attr:`~Pickler.dispatch_table` may not be flexible enough. In "
"particular we may want to customize pickling based on another criterion than"
" the object's type, or we may want to customize the pickling of functions "
"and classes."
msgstr ""
"Іноді :attr:`~Pickler.dispatch_table` може бути недостатньо гнучким. "
"Зокрема, ми можемо захотіти налаштувати маринування на основі іншого "
"критерію, ніж тип об’єкта, або ми можемо захотіти налаштувати маринування "
"функцій і класів."

#: ../../library/pickle.rst:905
msgid ""
"For those cases, it is possible to subclass from the :class:`Pickler` class "
"and implement a :meth:`~Pickler.reducer_override` method. This method can "
"return an arbitrary reduction tuple (see :meth:`~object.__reduce__`). It can"
" alternatively return :data:`NotImplemented` to fallback to the traditional "
"behavior."
msgstr ""

#: ../../library/pickle.rst:910
msgid ""
"If both the :attr:`~Pickler.dispatch_table` and "
":meth:`~Pickler.reducer_override` are defined, then "
":meth:`~Pickler.reducer_override` method takes priority."
msgstr ""
"Якщо визначено і :attr:`~Pickler.dispatch_table`, і "
":meth:`~Pickler.reducer_override`, то метод "
":meth:`~Pickler.reducer_override` має пріоритет."

#: ../../library/pickle.rst:915
msgid ""
"For performance reasons, :meth:`~Pickler.reducer_override` may not be called"
" for the following objects: ``None``, ``True``, ``False``, and exact "
"instances of :class:`int`, :class:`float`, :class:`bytes`, :class:`str`, "
":class:`dict`, :class:`set`, :class:`frozenset`, :class:`list` and "
":class:`tuple`."
msgstr ""
"З міркувань продуктивності :meth:`~Pickler.reducer_override` не можна "
"викликати для таких об’єктів: ``None``, ``True``, ``False`` і точних "
"екземплярів :class:`int` , :class:`float`, :class:`bytes`, :class:`str`, "
":class:`dict`, :class:`set`, :class:`frozenset`, :class:`list` і "
":class:`tuple`."

#: ../../library/pickle.rst:921
msgid ""
"Here is a simple example where we allow pickling and reconstructing a given "
"class::"
msgstr ""
"Ось простий приклад, де ми дозволяємо маринувати та реконструювати заданий "
"клас:"

#: ../../library/pickle.rst:924
msgid ""
"import io\n"
"import pickle\n"
"\n"
"class MyClass:\n"
"    my_attribute = 1\n"
"\n"
"class MyPickler(pickle.Pickler):\n"
"    def reducer_override(self, obj):\n"
"        \"\"\"Custom reducer for MyClass.\"\"\"\n"
"        if getattr(obj, \"__name__\", None) == \"MyClass\":\n"
"            return type, (obj.__name__, obj.__bases__,\n"
"                          {'my_attribute': obj.my_attribute})\n"
"        else:\n"
"            # For any other object, fallback to usual reduction\n"
"            return NotImplemented\n"
"\n"
"f = io.BytesIO()\n"
"p = MyPickler(f)\n"
"p.dump(MyClass)\n"
"\n"
"del MyClass\n"
"\n"
"unpickled_class = pickle.loads(f.getvalue())\n"
"\n"
"assert isinstance(unpickled_class, type)\n"
"assert unpickled_class.__name__ == \"MyClass\"\n"
"assert unpickled_class.my_attribute == 1"
msgstr ""

#: ../../library/pickle.rst:956
msgid "Out-of-band Buffers"
msgstr "Позасмугові буфери"

#: ../../library/pickle.rst:960
msgid ""
"In some contexts, the :mod:`pickle` module is used to transfer massive "
"amounts of data.  Therefore, it can be important to minimize the number of "
"memory copies, to preserve performance and resource consumption.  However, "
"normal operation of the :mod:`pickle` module, as it transforms a graph-like "
"structure of objects into a sequential stream of bytes, intrinsically "
"involves copying data to and from the pickle stream."
msgstr ""
"У деяких контекстах модуль :mod:`pickle` використовується для передачі "
"величезних обсягів даних. Тому може бути важливо мінімізувати кількість "
"копій пам’яті, щоб зберегти продуктивність і споживання ресурсів. Однак "
"нормальна робота модуля :mod:`pickle`, оскільки він перетворює графоподібну "
"структуру об’єктів у послідовний потік байтів, за своєю суттю передбачає "
"копіювання даних до потоку pickle і з нього."

#: ../../library/pickle.rst:967
msgid ""
"This constraint can be eschewed if both the *provider* (the implementation "
"of the object types to be transferred) and the *consumer* (the "
"implementation of the communications system) support the out-of-band "
"transfer facilities provided by pickle protocol 5 and higher."
msgstr ""
"Це обмеження можна уникнути, якщо і *провайдер* (реалізація типів об’єктів, "
"що передаються), і *споживач* (реалізація системи зв’язку) підтримують "
"засоби позасмугової передачі, надані протоколом pickle 5 і вище."

#: ../../library/pickle.rst:973
msgid "Provider API"
msgstr "API провайдера"

#: ../../library/pickle.rst:975
msgid ""
"The large data objects to be pickled must implement a "
":meth:`~object.__reduce_ex__` method specialized for protocol 5 and higher, "
"which returns a :class:`PickleBuffer` instance (instead of e.g. a "
":class:`bytes` object) for any large data."
msgstr ""

#: ../../library/pickle.rst:980
msgid ""
"A :class:`PickleBuffer` object *signals* that the underlying buffer is "
"eligible for out-of-band data transfer.  Those objects remain compatible "
"with normal usage of the :mod:`pickle` module.  However, consumers can also "
"opt-in to tell :mod:`pickle` that they will handle those buffers by "
"themselves."
msgstr ""
"Об’єкт :class:`PickleBuffer` *сигналізує*, що базовий буфер придатний для "
"позасмугової передачі даних. Ці об’єкти залишаються сумісними зі звичайним "
"використанням модуля :mod:`pickle`. Однак споживачі також можуть повідомити "
":mod:`pickle`, що вони самостійно оброблятимуть ці буфери."

#: ../../library/pickle.rst:987
msgid "Consumer API"
msgstr "Споживацький API"

#: ../../library/pickle.rst:989
msgid ""
"A communications system can enable custom handling of the "
":class:`PickleBuffer` objects generated when serializing an object graph."
msgstr ""
"Система зв’язку може ввімкнути спеціальну обробку об’єктів "
":class:`PickleBuffer`, створених під час серіалізації графа об’єктів."

#: ../../library/pickle.rst:992
msgid ""
"On the sending side, it needs to pass a *buffer_callback* argument to "
":class:`Pickler` (or to the :func:`dump` or :func:`dumps` function), which "
"will be called with each :class:`PickleBuffer` generated while pickling the "
"object graph.  Buffers accumulated by the *buffer_callback* will not see "
"their data copied into the pickle stream, only a cheap marker will be "
"inserted."
msgstr ""
"На стороні надсилання йому потрібно передати аргумент *buffer_callback* до "
":class:`Pickler` (або до функції :func:`dump` або :func:`dumps`), який буде "
"викликано з кожним :class:`PickleBuffer`, створений під час маринування "
"графа об’єкта. Буфери, накопичені *buffer_callback*, не бачитимуть своїх "
"даних, скопійованих у потік pickle, буде вставлено лише дешевий маркер."

#: ../../library/pickle.rst:999
msgid ""
"On the receiving side, it needs to pass a *buffers* argument to "
":class:`Unpickler` (or to the :func:`load` or :func:`loads` function), which"
" is an iterable of the buffers which were passed to *buffer_callback*. That "
"iterable should produce buffers in the same order as they were passed to "
"*buffer_callback*.  Those buffers will provide the data expected by the "
"reconstructors of the objects whose pickling produced the original "
":class:`PickleBuffer` objects."
msgstr ""
"На стороні приймача йому потрібно передати аргумент *buffers* до "
":class:`Unpickler` (або до функції :func:`load` або :func:`loads`), який є "
"ітерацією буферів, які були передається до *buffer_callback*. Ця ітерація "
"повинна створювати буфери в тому ж порядку, в якому вони були передані "
"*buffer_callback*. Ці буфери нададуть дані, очікувані реконструкторами "
"об’єктів, маринування яких створило оригінальні об’єкти "
":class:`PickleBuffer`."

#: ../../library/pickle.rst:1007
msgid ""
"Between the sending side and the receiving side, the communications system "
"is free to implement its own transfer mechanism for out-of-band buffers. "
"Potential optimizations include the use of shared memory or datatype-"
"dependent compression."
msgstr ""
"Між відправною та приймальною сторонами система зв’язку може вільно "
"реалізувати власний механізм передачі для позасмугових буферів. Потенційна "
"оптимізація включає використання спільної пам’яті або залежне від типу даних"
" стиснення."

#: ../../library/pickle.rst:1013
msgid "Example"
msgstr "приклад"

#: ../../library/pickle.rst:1015
msgid ""
"Here is a trivial example where we implement a :class:`bytearray` subclass "
"able to participate in out-of-band buffer pickling::"
msgstr ""
"Ось тривіальний приклад, у якому ми реалізуємо підклас :class:`bytearray`, "
"здатний брати участь у позаполосному відбиранні буфера:"

#: ../../library/pickle.rst:1018
msgid ""
"class ZeroCopyByteArray(bytearray):\n"
"\n"
"    def __reduce_ex__(self, protocol):\n"
"        if protocol >= 5:\n"
"            return type(self)._reconstruct, (PickleBuffer(self),), None\n"
"        else:\n"
"            # PickleBuffer is forbidden with pickle protocols <= 4.\n"
"            return type(self)._reconstruct, (bytearray(self),)\n"
"\n"
"    @classmethod\n"
"    def _reconstruct(cls, obj):\n"
"        with memoryview(obj) as m:\n"
"            # Get a handle over the original buffer object\n"
"            obj = m.obj\n"
"            if type(obj) is cls:\n"
"                # Original buffer object is a ZeroCopyByteArray, return it\n"
"                # as-is.\n"
"                return obj\n"
"            else:\n"
"                return cls(obj)"
msgstr ""

#: ../../library/pickle.rst:1039
msgid ""
"The reconstructor (the ``_reconstruct`` class method) returns the buffer's "
"providing object if it has the right type.  This is an easy way to simulate "
"zero-copy behaviour on this toy example."
msgstr ""
"Реконструктор (метод класу ``_reconstruct``) повертає наданий об’єкт буфера,"
" якщо він має правильний тип. Це простий спосіб імітувати поведінку без "
"копіювання на цьому прикладі іграшки."

#: ../../library/pickle.rst:1043
msgid ""
"On the consumer side, we can pickle those objects the usual way, which when "
"unserialized will give us a copy of the original object::"
msgstr ""
"Зі сторони споживача ми можемо відібрати ці об’єкти звичайним способом, який"
" після десеріалізації дасть нам копію оригінального об’єкта:"

#: ../../library/pickle.rst:1046
msgid ""
"b = ZeroCopyByteArray(b\"abc\")\n"
"data = pickle.dumps(b, protocol=5)\n"
"new_b = pickle.loads(data)\n"
"print(b == new_b)  # True\n"
"print(b is new_b)  # False: a copy was made"
msgstr ""

#: ../../library/pickle.rst:1052
msgid ""
"But if we pass a *buffer_callback* and then give back the accumulated "
"buffers when unserializing, we are able to get back the original object::"
msgstr ""
"Але якщо ми передаємо *buffer_callback*, а потім повертаємо накопичені "
"буфери під час десеріалізації, ми можемо повернути вихідний об’єкт::"

#: ../../library/pickle.rst:1055
msgid ""
"b = ZeroCopyByteArray(b\"abc\")\n"
"buffers = []\n"
"data = pickle.dumps(b, protocol=5, buffer_callback=buffers.append)\n"
"new_b = pickle.loads(data, buffers=buffers)\n"
"print(b == new_b)  # True\n"
"print(b is new_b)  # True: no copy was made"
msgstr ""

#: ../../library/pickle.rst:1062
msgid ""
"This example is limited by the fact that :class:`bytearray` allocates its "
"own memory: you cannot create a :class:`bytearray` instance that is backed "
"by another object's memory.  However, third-party datatypes such as NumPy "
"arrays do not have this limitation, and allow use of zero-copy pickling (or "
"making as few copies as possible) when transferring between distinct "
"processes or systems."
msgstr ""
"Цей приклад обмежений тим фактом, що :class:`bytearray` виділяє власну "
"пам’ять: ви не можете створити екземпляр :class:`bytearray`, який "
"підтримується пам’яттю іншого об’єкта. Однак сторонні типи даних, такі як "
"масиви NumPy, не мають цього обмеження та дозволяють використовувати нульове"
" копіювання (або створення якомога меншої кількості копій) під час передачі "
"між окремими процесами чи системами."

#: ../../library/pickle.rst:1069
msgid ":pep:`574` -- Pickle protocol 5 with out-of-band data"
msgstr ":pep:`574` -- Протокол Pickle 5 із позаполосними даними"

#: ../../library/pickle.rst:1075
msgid "Restricting Globals"
msgstr "Обмеження Globals"

#: ../../library/pickle.rst:1080
msgid ""
"By default, unpickling will import any class or function that it finds in "
"the pickle data.  For many applications, this behaviour is unacceptable as "
"it permits the unpickler to import and invoke arbitrary code.  Just consider"
" what this hand-crafted pickle data stream does when loaded::"
msgstr ""
"За замовчуванням unpickling імпортує будь-який клас або функцію, знайдені в "
"даних pickle. Для багатьох програм така поведінка є неприйнятною, оскільки "
"вона дозволяє unpickler імпортувати та викликати довільний код. Просто "
"подумайте, що робить цей створений вручну потік даних маринованих огірків "
"під час завантаження:"

#: ../../library/pickle.rst:1085
msgid ""
">>> import pickle\n"
">>> pickle.loads(b\"cos\\nsystem\\n(S'echo hello world'\\ntR.\")\n"
"hello world\n"
"0"
msgstr ""

#: ../../library/pickle.rst:1090
msgid ""
"In this example, the unpickler imports the :func:`os.system` function and "
"then apply the string argument \"echo hello world\".  Although this example "
"is inoffensive, it is not difficult to imagine one that could damage your "
"system."
msgstr ""
"У цьому прикладі unpickler імпортує функцію :func:`os.system`, а потім "
"застосовує рядковий аргумент \"echo hello world\". Хоча цей приклад не "
"образливий, неважко уявити такий, який може пошкодити вашу систему."

#: ../../library/pickle.rst:1094
msgid ""
"For this reason, you may want to control what gets unpickled by customizing "
":meth:`Unpickler.find_class`.  Unlike its name suggests, "
":meth:`Unpickler.find_class` is called whenever a global (i.e., a class or a"
" function) is requested.  Thus it is possible to either completely forbid "
"globals or restrict them to a safe subset."
msgstr ""
"З цієї причини ви можете контролювати те, що буде видалено, налаштувавши "
":meth:`Unpickler.find_class`. На відміну від назви, "
":meth:`Unpickler.find_class` викликається щоразу, коли запитується глобал "
"(тобто клас або функція). Таким чином, можна або повністю заборонити "
"глобальні елементи, або обмежити їх безпечною підмножиною."

#: ../../library/pickle.rst:1100
msgid ""
"Here is an example of an unpickler allowing only few safe classes from the "
":mod:`builtins` module to be loaded::"
msgstr ""
"Ось приклад unpickler, який дозволяє завантажити лише декілька безпечних "
"класів із модуля :mod:`builtins`:"

#: ../../library/pickle.rst:1103
msgid ""
"import builtins\n"
"import io\n"
"import pickle\n"
"\n"
"safe_builtins = {\n"
"    'range',\n"
"    'complex',\n"
"    'set',\n"
"    'frozenset',\n"
"    'slice',\n"
"}\n"
"\n"
"class RestrictedUnpickler(pickle.Unpickler):\n"
"\n"
"    def find_class(self, module, name):\n"
"        # Only allow safe classes from builtins.\n"
"        if module == \"builtins\" and name in safe_builtins:\n"
"            return getattr(builtins, name)\n"
"        # Forbid everything else.\n"
"        raise pickle.UnpicklingError(\"global '%s.%s' is forbidden\" %\n"
"                                     (module, name))\n"
"\n"
"def restricted_loads(s):\n"
"    \"\"\"Helper function analogous to pickle.loads().\"\"\"\n"
"    return RestrictedUnpickler(io.BytesIO(s)).load()"
msgstr ""

#: ../../library/pickle.rst:1129
msgid "A sample usage of our unpickler working as intended::"
msgstr "Зразок використання нашого unpickler, що працює за призначенням::"

#: ../../library/pickle.rst:1131
msgid ""
">>> restricted_loads(pickle.dumps([1, 2, range(15)]))\n"
"[1, 2, range(0, 15)]\n"
">>> restricted_loads(b\"cos\\nsystem\\n(S'echo hello world'\\ntR.\")\n"
"Traceback (most recent call last):\n"
"  ...\n"
"pickle.UnpicklingError: global 'os.system' is forbidden\n"
">>> restricted_loads(b'cbuiltins\\neval\\n'\n"
"...                  b'(S\\'getattr(__import__(\"os\"), \"system\")'\n"
"...                  b'(\"echo hello world\")\\'\\ntR.')\n"
"Traceback (most recent call last):\n"
"  ...\n"
"pickle.UnpicklingError: global 'builtins.eval' is forbidden"
msgstr ""

#: ../../library/pickle.rst:1148
msgid ""
"As our examples shows, you have to be careful with what you allow to be "
"unpickled.  Therefore if security is a concern, you may want to consider "
"alternatives such as the marshalling API in :mod:`xmlrpc.client` or third-"
"party solutions."
msgstr ""
"Як показують наші приклади, ви повинні бути обережними з тим, що ви "
"дозволяєте не маринувати. Тому, якщо питання безпеки викликає занепокоєння, "
"ви можете розглянути такі альтернативи, як маршалінговий API у "
":mod:`xmlrpc.client` або рішення сторонніх розробників."

#: ../../library/pickle.rst:1155
msgid "Performance"
msgstr "Продуктивність"

#: ../../library/pickle.rst:1157
msgid ""
"Recent versions of the pickle protocol (from protocol 2 and upwards) feature"
" efficient binary encodings for several common features and built-in types. "
"Also, the :mod:`pickle` module has a transparent optimizer written in C."
msgstr ""
"Останні версії протоколу pickle (від протоколу 2 і вище) містять ефективне "
"двійкове кодування для кількох загальних функцій і вбудованих типів. Крім "
"того, модуль :mod:`pickle` має прозорий оптимізатор, написаний мовою C."

#: ../../library/pickle.rst:1165
msgid "Examples"
msgstr "Приклади"

#: ../../library/pickle.rst:1167
msgid ""
"For the simplest code, use the :func:`dump` and :func:`load` functions. ::"
msgstr ""
"Для найпростішого коду використовуйте функції :func:`dump` і :func:`load`. "
"::"

#: ../../library/pickle.rst:1169
msgid ""
"import pickle\n"
"\n"
"# An arbitrary collection of objects supported by pickle.\n"
"data = {\n"
"    'a': [1, 2.0, 3+4j],\n"
"    'b': (\"character string\", b\"byte string\"),\n"
"    'c': {None, True, False}\n"
"}\n"
"\n"
"with open('data.pickle', 'wb') as f:\n"
"    # Pickle the 'data' dictionary using the highest protocol available.\n"
"    pickle.dump(data, f, pickle.HIGHEST_PROTOCOL)"
msgstr ""

#: ../../library/pickle.rst:1183
msgid "The following example reads the resulting pickled data. ::"
msgstr "У наступному прикладі зчитуються результуючі мариновані дані. ::"

#: ../../library/pickle.rst:1185
msgid ""
"import pickle\n"
"\n"
"with open('data.pickle', 'rb') as f:\n"
"    # The protocol version used is detected automatically, so we do not\n"
"    # have to specify it.\n"
"    data = pickle.load(f)"
msgstr ""

#: ../../library/pickle.rst:1199
msgid "Module :mod:`copyreg`"
msgstr "Модуль :mod:`copyreg`"

#: ../../library/pickle.rst:1200
msgid "Pickle interface constructor registration for extension types."
msgstr "Реєстрація конструктора інтерфейсу Pickle для типів розширень."

#: ../../library/pickle.rst:1202
msgid "Module :mod:`pickletools`"
msgstr "Модуль :mod:`pickletools`"

#: ../../library/pickle.rst:1203
msgid "Tools for working with and analyzing pickled data."
msgstr "Інструменти для роботи з маринованими даними та їх аналізу."

#: ../../library/pickle.rst:1205
msgid "Module :mod:`shelve`"
msgstr "Модуль :mod:`shelve`"

#: ../../library/pickle.rst:1206
msgid "Indexed databases of objects; uses :mod:`pickle`."
msgstr "Індексовані бази даних об'єктів; використовує :mod:`pickle`."

#: ../../library/pickle.rst:1208
msgid "Module :mod:`copy`"
msgstr "Модуль :mod:`copy`"

#: ../../library/pickle.rst:1209
msgid "Shallow and deep object copying."
msgstr "Неглибоке і глибоке копіювання об'єктів."

#: ../../library/pickle.rst:1211
msgid "Module :mod:`marshal`"
msgstr "Модуль :mod:`marshal`"

#: ../../library/pickle.rst:1212
msgid "High-performance serialization of built-in types."
msgstr "Високопродуктивна серіалізація вбудованих типів."

#: ../../library/pickle.rst:1216
msgid "Footnotes"
msgstr "Виноски"

#: ../../library/pickle.rst:1217
msgid "Don't confuse this with the :mod:`marshal` module"
msgstr "Не плутайте це з модулем :mod:`marshal`"

#: ../../library/pickle.rst:1219
msgid ""
"This is why :keyword:`lambda` functions cannot be pickled:  all "
":keyword:`!lambda` functions share the same name:  ``<lambda>``."
msgstr ""
"Ось чому функції :keyword:`lambda` не можна маринувати: усі функції "
":keyword:`!lambda` мають однакову назву: ``<lambda>``."

#: ../../library/pickle.rst:1222
msgid ""
"The exception raised will likely be an :exc:`ImportError` or an "
":exc:`AttributeError` but it could be something else."
msgstr ""
"Виняток, імовірно, буде :exc:`ImportError` або :exc:`AttributeError`, але це"
" може бути щось інше."

#: ../../library/pickle.rst:1225
msgid ""
"The :mod:`copy` module uses this protocol for shallow and deep copying "
"operations."
msgstr ""
"Модуль :mod:`copy` використовує цей протокол для дрібних і глибоких операцій"
" копіювання."

#: ../../library/pickle.rst:1228
msgid ""
"The limitation on alphanumeric characters is due to the fact that persistent"
" IDs in protocol 0 are delimited by the newline character.  Therefore if any"
" kind of newline characters occurs in persistent IDs, the resulting pickled "
"data will become unreadable."
msgstr ""
"Обмеження щодо буквено-цифрових символів пов’язане з тим, що постійні "
"ідентифікатори в протоколі 0 відокремлюються символом нового рядка. Тому, "
"якщо в постійних ідентифікаторах зустрічаються будь-які символи нового "
"рядка, результуючі мариновані дані стануть нечитабельними."

#: ../../library/pickle.rst:12
msgid "persistence"
msgstr ""

#: ../../library/pickle.rst:12
msgid "persistent"
msgstr ""

#: ../../library/pickle.rst:12
msgid "objects"
msgstr ""

#: ../../library/pickle.rst:12
msgid "serializing"
msgstr ""

#: ../../library/pickle.rst:12
msgid "marshalling"
msgstr ""

#: ../../library/pickle.rst:12
msgid "flattening"
msgstr ""

#: ../../library/pickle.rst:12
msgid "pickling"
msgstr ""

#: ../../library/pickle.rst:123
msgid "External Data Representation"
msgstr ""

#: ../../library/pickle.rst:672
msgid "copy"
msgstr ""

#: ../../library/pickle.rst:672
msgid "protocol"
msgstr ""

#: ../../library/pickle.rst:756
msgid "persistent_id (pickle protocol)"
msgstr ""

#: ../../library/pickle.rst:756
msgid "persistent_load (pickle protocol)"
msgstr ""

#: ../../library/pickle.rst:832
msgid "__getstate__() (copy protocol)"
msgstr ""

#: ../../library/pickle.rst:832
msgid "__setstate__() (copy protocol)"
msgstr ""

#: ../../library/pickle.rst:1077
msgid "find_class() (pickle protocol)"
msgstr ""
