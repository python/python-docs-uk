# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Dmytro Kazanzhy, 2022
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-11-19 01:00+0000\n"
"PO-Revision-Date: 2021-06-28 00:55+0000\n"
"Last-Translator: Dmytro Kazanzhy, 2022\n"
"Language-Team: Ukrainian (https://app.transifex.com/python-doc/teams/5390/uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != 11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % 100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || (n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

#: ../../library/atexit.rst:2
msgid ":mod:`!atexit` --- Exit handlers"
msgstr ""

#: ../../library/atexit.rst:12
msgid ""
"The :mod:`atexit` module defines functions to register and unregister "
"cleanup functions.  Functions thus registered are automatically executed "
"upon normal interpreter termination.  :mod:`atexit` runs these functions in "
"the *reverse* order in which they were registered; if you register ``A``, "
"``B``, and ``C``, at interpreter termination time they will be run in the "
"order ``C``, ``B``, ``A``."
msgstr ""
"Модуль :mod:`atexit` визначає функції для реєстрації та скасування "
"реєстрації функцій очищення. Зареєстровані таким чином функції автоматично "
"виконуються після звичайного завершення роботи інтерпретатора. :mod:`atexit`"
" запускає ці функції у *зворотному* порядку, у якому вони були "
"зареєстровані; якщо ви зареєструєте ``A``, ``B`` і ``C``, під час завершення"
" роботи інтерпретатора вони виконуватимуться в порядку ``C``, ``B``, ``A`` ."

#: ../../library/atexit.rst:19
msgid ""
"**Note:** The functions registered via this module are not called when the "
"program is killed by a signal not handled by Python, when a Python fatal "
"internal error is detected, or when :func:`os._exit` is called."
msgstr ""
"**Примітка:** Функції, зареєстровані за допомогою цього модуля, не "
"викликаються, коли програма припиняється через сигнал, який не оброблюється "
"Python, коли виявлено критичну внутрішню помилку Python або коли "
"викликається :func:`os._exit`."

#: ../../library/atexit.rst:23
msgid ""
"**Note:** The effect of registering or unregistering functions from within a"
" cleanup function is undefined."
msgstr ""

#: ../../library/atexit.rst:26
msgid ""
"When used with C-API subinterpreters, registered functions are local to the "
"interpreter they were registered in."
msgstr ""
"При використанні з субінтерпретаторами C-API зареєстровані функції є "
"локальними для інтерпретатора, у якому вони були зареєстровані."

#: ../../library/atexit.rst:32
msgid ""
"Register *func* as a function to be executed at termination.  Any optional "
"arguments that are to be passed to *func* must be passed as arguments to "
":func:`register`.  It is possible to register the same function and "
"arguments more than once."
msgstr ""
"Зареєструйте *func* як функцію, яка буде виконуватися після завершення. "
"Будь-які необов’язкові аргументи, які мають бути передані в *func*, повинні "
"бути передані як аргументи в :func:`register`. Є можливість зареєструвати ту"
" саму функцію та аргументи кілька разів."

#: ../../library/atexit.rst:37
msgid ""
"At normal program termination (for instance, if :func:`sys.exit` is called "
"or the main module's execution completes), all functions registered are "
"called in last in, first out order.  The assumption is that lower level "
"modules will normally be imported before higher level modules and thus must "
"be cleaned up later."
msgstr ""
"Під час звичайного завершення програми (наприклад, якщо викликається "
":func:`sys.exit` або завершується виконання основного модуля), усі "
"зареєстровані функції викликаються в порядку останнього входу, першого "
"виходу. Припускається, що модулі нижчого рівня зазвичай імпортуються перед "
"модулями вищого рівня, тому їх потрібно очистити пізніше."

#: ../../library/atexit.rst:43
msgid ""
"If an exception is raised during execution of the exit handlers, a traceback"
" is printed (unless :exc:`SystemExit` is raised) and the exception "
"information is saved.  After all exit handlers have had a chance to run, the"
" last exception to be raised is re-raised."
msgstr ""
"Якщо під час виконання обробників виходу виникає виняток, друкується "
"зворотне трасування (якщо не викликається :exc:`SystemExit`), а інформація "
"про виключення зберігається. Після того, як усі обробники виходу мали "
"можливість запуститися, останній виняток, який було викликано, викликається "
"повторно."

#: ../../library/atexit.rst:48
msgid ""
"This function returns *func*, which makes it possible to use it as a "
"decorator."
msgstr ""
"Ця функція повертає *func*, що дає змогу використовувати її як декоратор."

#: ../../library/atexit.rst:52
msgid ""
"Starting new threads or calling :func:`os.fork` from a registered function "
"can lead to race condition between the main Python runtime thread freeing "
"thread states while internal :mod:`threading` routines or the new process "
"try to use that state. This can lead to crashes rather than clean shutdown."
msgstr ""

#: ../../library/atexit.rst:58
msgid ""
"Attempts to start a new thread or :func:`os.fork` a new process in a "
"registered function now leads to :exc:`RuntimeError`."
msgstr ""

#: ../../library/atexit.rst:64
msgid ""
"Remove *func* from the list of functions to be run at interpreter shutdown. "
":func:`unregister` silently does nothing if *func* was not previously "
"registered.  If *func* has been registered more than once, every occurrence "
"of that function in the :mod:`atexit` call stack will be removed.  Equality "
"comparisons (``==``) are used internally during unregistration, so function "
"references do not need to have matching identities."
msgstr ""
"Видаліть *func* зі списку функцій, які будуть запускатися після завершення "
"роботи інтерпретатора. :func:`unregister` мовчки нічого не робить, якщо "
"*func* не було раніше зареєстровано. Якщо *func* було зареєстровано кілька "
"разів, кожне входження цієї функції в стек викликів :mod:`atexit` буде "
"видалено. Порівняння рівності (``==``) використовуються внутрішньо під час "
"скасування реєстрації, тому посилання на функції не повинні мати відповідні "
"ідентифікатори."

#: ../../library/atexit.rst:74
msgid "Module :mod:`readline`"
msgstr "Модуль :mod:`readline`"

#: ../../library/atexit.rst:75
msgid ""
"Useful example of :mod:`atexit` to read and write :mod:`readline` history "
"files."
msgstr ""
"Корисний приклад :mod:`atexit` для читання та запису файлів історії "
":mod:`readline`."

#: ../../library/atexit.rst:82
msgid ":mod:`atexit` Example"
msgstr ":mod:`atexit` Приклад"

#: ../../library/atexit.rst:84
msgid ""
"The following simple example demonstrates how a module can initialize a "
"counter from a file when it is imported and save the counter's updated value"
" automatically when the program terminates without relying on the "
"application making an explicit call into this module at termination. ::"
msgstr ""
"Наступний простий приклад демонструє, як модуль може ініціалізувати "
"лічильник із файлу під час його імпорту та автоматично зберігати оновлене "
"значення лічильника, коли програма завершує роботу, не покладаючись на те, "
"що програма здійснює явний виклик цього модуля під час завершення. ::"

#: ../../library/atexit.rst:89
msgid ""
"try:\n"
"    with open('counterfile') as infile:\n"
"        _count = int(infile.read())\n"
"except FileNotFoundError:\n"
"    _count = 0\n"
"\n"
"def incrcounter(n):\n"
"    global _count\n"
"    _count = _count + n\n"
"\n"
"def savecounter():\n"
"    with open('counterfile', 'w') as outfile:\n"
"        outfile.write('%d' % _count)\n"
"\n"
"import atexit\n"
"\n"
"atexit.register(savecounter)"
msgstr ""

#: ../../library/atexit.rst:107
msgid ""
"Positional and keyword arguments may also be passed to :func:`register` to "
"be passed along to the registered function when it is called::"
msgstr ""
"Позиційні та ключові аргументи також можуть бути передані :func:`register` "
"для передачі зареєстрованій функції під час її виклику::"

#: ../../library/atexit.rst:110
msgid ""
"def goodbye(name, adjective):\n"
"    print('Goodbye %s, it was %s to meet you.' % (name, adjective))\n"
"\n"
"import atexit\n"
"\n"
"atexit.register(goodbye, 'Donny', 'nice')\n"
"# or:\n"
"atexit.register(goodbye, adjective='nice', name='Donny')"
msgstr ""

#: ../../library/atexit.rst:119
msgid "Usage as a :term:`decorator`::"
msgstr "Використання як :term:`decorator`::"

#: ../../library/atexit.rst:121
msgid ""
"import atexit\n"
"\n"
"@atexit.register\n"
"def goodbye():\n"
"    print('You are now leaving the Python sector.')"
msgstr ""

#: ../../library/atexit.rst:127
msgid "This only works with functions that can be called without arguments."
msgstr "Це працює лише з функціями, які можна викликати без аргументів."
