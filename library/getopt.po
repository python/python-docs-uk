# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Dmytro Kazanzhy, 2022
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-11-22 14:17+0000\n"
"PO-Revision-Date: 2021-06-28 01:06+0000\n"
"Last-Translator: Dmytro Kazanzhy, 2022\n"
"Language-Team: Ukrainian (https://app.transifex.com/python-doc/teams/5390/uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != 11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % 100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || (n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

#: ../../library/getopt.rst:2
msgid ":mod:`!getopt` --- C-style parser for command line options"
msgstr ""

#: ../../library/getopt.rst:8
msgid "**Source code:** :source:`Lib/getopt.py`"
msgstr "**Вихідний код:** :source:`Lib/getopt.py`"

#: ../../library/getopt.rst:10
msgid ""
"The :mod:`getopt` module is :term:`soft deprecated` and will not be "
"developed further; development will continue with the :mod:`argparse` "
"module."
msgstr ""

#: ../../library/getopt.rst:17
msgid ""
"The :mod:`getopt` module is a parser for command line options whose API is "
"designed to be familiar to users of the C :c:func:`!getopt` function. Users "
"who are unfamiliar with the C :c:func:`!getopt` function or who would like "
"to write less code and get better help and error messages should consider "
"using the :mod:`argparse` module instead."
msgstr ""

#: ../../library/getopt.rst:25
msgid ""
"This module helps scripts to parse the command line arguments in "
"``sys.argv``. It supports the same conventions as the Unix :c:func:`!getopt`"
" function (including the special meanings of arguments of the form '``-``' "
"and '``--``').  Long options similar to those supported by GNU software may "
"be used as well via an optional third argument."
msgstr ""

#: ../../library/getopt.rst:31
msgid "This module provides two functions and an exception:"
msgstr "Цей модуль забезпечує дві функції та виняток:"

#: ../../library/getopt.rst:37
msgid ""
"Parses command line options and parameter list.  *args* is the argument list"
" to be parsed, without the leading reference to the running program. "
"Typically, this means ``sys.argv[1:]``. *shortopts* is the string of option "
"letters that the script wants to recognize, with options that require an "
"argument followed by a colon (``':'``; i.e., the same format that Unix "
":c:func:`!getopt` uses)."
msgstr ""

#: ../../library/getopt.rst:45
msgid ""
"Unlike GNU :c:func:`!getopt`, after a non-option argument, all further "
"arguments are considered also non-options. This is similar to the way non-"
"GNU Unix systems work."
msgstr ""

#: ../../library/getopt.rst:49
msgid ""
"*longopts*, if specified, must be a list of strings with the names of the "
"long options which should be supported.  The leading ``'--'`` characters "
"should not be included in the option name.  Long options which require an "
"argument should be followed by an equal sign (``'='``).  Optional arguments "
"are not supported.  To accept only long options, *shortopts* should be an "
"empty string.  Long options on the command line can be recognized so long as"
" they provide a prefix of the option name that matches exactly one of the "
"accepted options.  For example, if *longopts* is ``['foo', 'frob']``, the "
"option ``--fo`` will match as ``--foo``, but ``--f`` will not match "
"uniquely, so :exc:`GetoptError` will be raised."
msgstr ""
"*longopts*, якщо вказано, має бути списком рядків із іменами довгих "
"параметрів, які мають підтримуватися. Початкові символи ``''--'`` не повинні"
" включатися в назву опції. Довгі параметри, які потребують аргументу, "
"повинні супроводжуватися знаком рівності (``'='``). Необов'язкові аргументи "
"не підтримуються. Щоб приймати лише довгі варіанти, *shortopts* має бути "
"порожнім рядком. Довгі параметри в командному рядку можна розпізнати, якщо "
"вони містять префікс назви параметра, який точно відповідає одному з "
"прийнятих параметрів. Наприклад, якщо *longopts* є ``['foo', 'frob']``, "
"опція ``--fo`` відповідатиме ``--foo``, але ``--f`` не збігатиметься "
"однозначно, тому буде викликано :exc:`GetoptError`."

#: ../../library/getopt.rst:60
msgid ""
"The return value consists of two elements: the first is a list of ``(option,"
" value)`` pairs; the second is the list of program arguments left after the "
"option list was stripped (this is a trailing slice of *args*).  Each option-"
"and-value pair returned has the option as its first element, prefixed with a"
" hyphen for short options (e.g., ``'-x'``) or two hyphens for long options "
"(e.g., ``'--long-option'``), and the option argument as its second element, "
"or an empty string if the option has no argument.  The options occur in the "
"list in the same order in which they were found, thus allowing multiple "
"occurrences.  Long and short options may be mixed."
msgstr ""
"Повернене значення складається з двох елементів: перший – це список пар "
"``(параметр, значення)``; другий — список аргументів програми, що залишився "
"після видалення списку параметрів (це кінцевий фрагмент *args*). Кожна "
"повернута пара параметрів і значень має параметр як перший елемент із "
"префіксом дефіса для коротких варіантів (наприклад, ``'-x''``) або двох "
"дефісів для довгих варіантів (наприклад, ``'--long-option'``), і аргумент "
"параметра як його другий елемент або порожній рядок, якщо параметр не має "
"аргументу. Параметри з’являються в списку в тому самому порядку, в якому "
"вони були знайдені, таким чином допускаючи багатократне повторення. Довгі та"
" короткі варіанти можуть змішуватися."

#: ../../library/getopt.rst:73
msgid ""
"This function works like :func:`getopt`, except that GNU style scanning mode"
" is used by default. This means that option and non-option arguments may be "
"intermixed. The :func:`getopt` function stops processing options as soon as "
"a non-option argument is encountered."
msgstr ""
"Ця функція працює як :func:`getopt`, за винятком того, що за замовчуванням "
"використовується режим сканування у стилі GNU. Це означає, що аргументи "
"варіантів і неваріантів можуть змішуватися. Функція :func:`getopt` припиняє "
"обробку опцій, щойно зустрічається аргумент, що не є опцією."

#: ../../library/getopt.rst:78
msgid ""
"If the first character of the option string is ``'+'``, or if the "
"environment variable :envvar:`!POSIXLY_CORRECT` is set, then option "
"processing stops as soon as a non-option argument is encountered."
msgstr ""

#: ../../library/getopt.rst:85
msgid ""
"This is raised when an unrecognized option is found in the argument list or "
"when an option requiring an argument is given none. The argument to the "
"exception is a string indicating the cause of the error.  For long options, "
"an argument given to an option which does not require one will also cause "
"this exception to be raised.  The attributes :attr:`!msg` and :attr:`!opt` "
"give the error message and related option; if there is no specific option to"
" which the exception relates, :attr:`!opt` is an empty string."
msgstr ""

#: ../../library/getopt.rst:96
msgid "Alias for :exc:`GetoptError`; for backward compatibility."
msgstr "Псевдонім для :exc:`GetoptError`; для зворотної сумісності."

#: ../../library/getopt.rst:98
msgid "An example using only Unix style options:"
msgstr "Приклад використання лише параметрів стилю Unix:"

#: ../../library/getopt.rst:100
msgid ""
">>> import getopt\n"
">>> args = '-a -b -cfoo -d bar a1 a2'.split()\n"
">>> args\n"
"['-a', '-b', '-cfoo', '-d', 'bar', 'a1', 'a2']\n"
">>> optlist, args = getopt.getopt(args, 'abc:d:')\n"
">>> optlist\n"
"[('-a', ''), ('-b', ''), ('-c', 'foo'), ('-d', 'bar')]\n"
">>> args\n"
"['a1', 'a2']"
msgstr ""

#: ../../library/getopt.rst:112
msgid "Using long option names is equally easy:"
msgstr "Використовувати довгі назви параметрів так само легко:"

#: ../../library/getopt.rst:114
msgid ""
">>> s = '--condition=foo --testing --output-file abc.def -x a1 a2'\n"
">>> args = s.split()\n"
">>> args\n"
"['--condition=foo', '--testing', '--output-file', 'abc.def', '-x', 'a1', 'a2']\n"
">>> optlist, args = getopt.getopt(args, 'x', [\n"
"...     'condition=', 'output-file=', 'testing'])\n"
">>> optlist\n"
"[('--condition', 'foo'), ('--testing', ''), ('--output-file', 'abc.def'), ('-x', '')]\n"
">>> args\n"
"['a1', 'a2']"
msgstr ""

#: ../../library/getopt.rst:127
msgid "In a script, typical usage is something like this:"
msgstr ""

#: ../../library/getopt.rst:129
msgid ""
"import getopt, sys\n"
"\n"
"def main():\n"
"    try:\n"
"        opts, args = getopt.getopt(sys.argv[1:], \"ho:v\", [\"help\", \"output=\"])\n"
"    except getopt.GetoptError as err:\n"
"        # print help information and exit:\n"
"        print(err)  # will print something like \"option -a not recognized\"\n"
"        usage()\n"
"        sys.exit(2)\n"
"    output = None\n"
"    verbose = False\n"
"    for o, a in opts:\n"
"        if o == \"-v\":\n"
"            verbose = True\n"
"        elif o in (\"-h\", \"--help\"):\n"
"            usage()\n"
"            sys.exit()\n"
"        elif o in (\"-o\", \"--output\"):\n"
"            output = a\n"
"        else:\n"
"            assert False, \"unhandled option\"\n"
"    # ...\n"
"\n"
"if __name__ == \"__main__\":\n"
"    main()"
msgstr ""

#: ../../library/getopt.rst:158
msgid ""
"Note that an equivalent command line interface could be produced with less "
"code and more informative help and error messages by using the "
":mod:`argparse` module:"
msgstr ""

#: ../../library/getopt.rst:161
msgid ""
"import argparse\n"
"\n"
"if __name__ == '__main__':\n"
"    parser = argparse.ArgumentParser()\n"
"    parser.add_argument('-o', '--output')\n"
"    parser.add_argument('-v', dest='verbose', action='store_true')\n"
"    args = parser.parse_args()\n"
"    # ... do something with args.output ...\n"
"    # ... do something with args.verbose .."
msgstr ""

#: ../../library/getopt.rst:175
msgid "Module :mod:`argparse`"
msgstr "Модуль :mod:`argparse`"

#: ../../library/getopt.rst:176
msgid "Alternative command line option and argument parsing library."
msgstr ""
"Альтернативний параметр командного рядка та бібліотека аналізу аргументів."
