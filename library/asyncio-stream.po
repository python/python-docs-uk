# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Dmytro Kazanzhy, 2024
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-11-19 01:00+0000\n"
"PO-Revision-Date: 2021-06-28 00:55+0000\n"
"Last-Translator: Dmytro Kazanzhy, 2024\n"
"Language-Team: Ukrainian (https://app.transifex.com/python-doc/teams/5390/uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != 11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % 100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || (n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

#: ../../library/asyncio-stream.rst:7
msgid "Streams"
msgstr "Потоки"

#: ../../library/asyncio-stream.rst:9
msgid "**Source code:** :source:`Lib/asyncio/streams.py`"
msgstr "**Вихідний код:** :source:`Lib/asyncio/streams.py`"

#: ../../library/asyncio-stream.rst:13
msgid ""
"Streams are high-level async/await-ready primitives to work with network "
"connections.  Streams allow sending and receiving data without using "
"callbacks or low-level protocols and transports."
msgstr ""
"Потоки — це високорівневі асинхронні/готові до очікування примітиви для "
"роботи з мережевими підключеннями. Потоки дозволяють надсилати й отримувати "
"дані без використання зворотних викликів або низькорівневих протоколів і "
"транспортів."

#: ../../library/asyncio-stream.rst:19
msgid ""
"Here is an example of a TCP echo client written using asyncio streams::"
msgstr ""
"Ось приклад клієнта відлуння TCP, написаного з використанням асинхронних "
"потоків::"

#: ../../library/asyncio-stream.rst:22 ../../library/asyncio-stream.rst:415
msgid ""
"import asyncio\n"
"\n"
"async def tcp_echo_client(message):\n"
"    reader, writer = await asyncio.open_connection(\n"
"        '127.0.0.1', 8888)\n"
"\n"
"    print(f'Send: {message!r}')\n"
"    writer.write(message.encode())\n"
"    await writer.drain()\n"
"\n"
"    data = await reader.read(100)\n"
"    print(f'Received: {data.decode()!r}')\n"
"\n"
"    print('Close the connection')\n"
"    writer.close()\n"
"    await writer.wait_closed()\n"
"\n"
"asyncio.run(tcp_echo_client('Hello World!'))"
msgstr ""

#: ../../library/asyncio-stream.rst:42
msgid "See also the `Examples`_ section below."
msgstr "Дивіться також розділ `Examples`_ нижче."

#: ../../library/asyncio-stream.rst:46
msgid "Stream Functions"
msgstr "Потокові функції"

#: ../../library/asyncio-stream.rst:47
msgid ""
"The following top-level asyncio functions can be used to create and work "
"with streams:"
msgstr ""
"Наступні асинхронні функції верхнього рівня можна використовувати для "
"створення та роботи з потоками:"

#: ../../library/asyncio-stream.rst:58
msgid ""
"Establish a network connection and return a pair of ``(reader, writer)`` "
"objects."
msgstr ""
"Встановіть мережеве з’єднання та поверніть пару об’єктів ``(reader, "
"writer)``."

#: ../../library/asyncio-stream.rst:61
msgid ""
"The returned *reader* and *writer* objects are instances of "
":class:`StreamReader` and :class:`StreamWriter` classes."
msgstr ""
"Повернені об’єкти *reader* і *writer* є екземплярами класів "
":class:`StreamReader` і :class:`StreamWriter`."

#: ../../library/asyncio-stream.rst:64 ../../library/asyncio-stream.rst:109
msgid ""
"*limit* determines the buffer size limit used by the returned "
":class:`StreamReader` instance.  By default the *limit* is set to 64 KiB."
msgstr ""
"*limit* визначає обмеження розміру буфера, який використовується повернутим "
"екземпляром :class:`StreamReader`. За замовчуванням *обмеження* встановлено "
"на 64 КБ."

#: ../../library/asyncio-stream.rst:68
msgid ""
"The rest of the arguments are passed directly to "
":meth:`loop.create_connection`."
msgstr ""
"Решта аргументів передаються безпосередньо до "
":meth:`loop.create_connection`."

#: ../../library/asyncio-stream.rst:73 ../../library/asyncio-stream.rst:147
msgid ""
"The *sock* argument transfers ownership of the socket to the "
":class:`StreamWriter` created. To close the socket, call its "
":meth:`~asyncio.StreamWriter.close` method."
msgstr ""

#: ../../library/asyncio-stream.rst:77
msgid "Added the *ssl_handshake_timeout* parameter."
msgstr "Додано параметр *ssl_handshake_timeout*."

#: ../../library/asyncio-stream.rst:80
msgid "Added the *happy_eyeballs_delay* and *interleave* parameters."
msgstr "Додано параметри *happy_eyeballs_delay* і *interleave*."

#: ../../library/asyncio-stream.rst:83 ../../library/asyncio-stream.rst:125
#: ../../library/asyncio-stream.rst:157 ../../library/asyncio-stream.rst:187
msgid "Removed the *loop* parameter."
msgstr "Видалено параметр *loop*."

#: ../../library/asyncio-stream.rst:86 ../../library/asyncio-stream.rst:128
#: ../../library/asyncio-stream.rst:160 ../../library/asyncio-stream.rst:190
#: ../../library/asyncio-stream.rst:383
msgid "Added the *ssl_shutdown_timeout* parameter."
msgstr ""

#: ../../library/asyncio-stream.rst:98
msgid "Start a socket server."
msgstr "Запустіть сервер сокетів."

#: ../../library/asyncio-stream.rst:100
msgid ""
"The *client_connected_cb* callback is called whenever a new client "
"connection is established.  It receives a ``(reader, writer)`` pair as two "
"arguments, instances of the :class:`StreamReader` and :class:`StreamWriter` "
"classes."
msgstr ""
"Зворотний виклик *client_connected_cb* викликається щоразу, коли "
"встановлюється нове підключення клієнта. Він отримує пару ``(reader, "
"writer)`` як два аргументи, екземпляри класів :class:`StreamReader` і "
":class:`StreamWriter`."

#: ../../library/asyncio-stream.rst:105
msgid ""
"*client_connected_cb* can be a plain callable or a :ref:`coroutine function "
"<coroutine>`; if it is a coroutine function, it will be automatically "
"scheduled as a :class:`Task`."
msgstr ""
"*client_connected_cb* може бути простим викликом або :ref:`функцією "
"співпрограми <coroutine>`; якщо це функція співпрограми, вона буде "
"автоматично запланована як :class:`Task`."

#: ../../library/asyncio-stream.rst:113
msgid ""
"The rest of the arguments are passed directly to :meth:`loop.create_server`."
msgstr ""
"Решта аргументів передаються безпосередньо до :meth:`loop.create_server`."

#: ../../library/asyncio-stream.rst:118 ../../library/asyncio-stream.rst:177
msgid ""
"The *sock* argument transfers ownership of the socket to the server created."
" To close the socket, call the server's :meth:`~asyncio.Server.close` "
"method."
msgstr ""

#: ../../library/asyncio-stream.rst:122
msgid "Added the *ssl_handshake_timeout* and *start_serving* parameters."
msgstr "Додано параметри *ssl_handshake_timeout* і *start_serving*."

#: ../../library/asyncio-stream.rst:133
msgid "Unix Sockets"
msgstr "Unix-сокети"

#: ../../library/asyncio-stream.rst:138
msgid ""
"Establish a Unix socket connection and return a pair of ``(reader, "
"writer)``."
msgstr ""
"Встановіть з’єднання через сокет Unix і поверніть пару ``(reader, writer)``."

#: ../../library/asyncio-stream.rst:141
msgid "Similar to :func:`open_connection` but operates on Unix sockets."
msgstr "Подібно до :func:`open_connection`, але працює на сокетах Unix."

#: ../../library/asyncio-stream.rst:143
msgid "See also the documentation of :meth:`loop.create_unix_connection`."
msgstr "Дивіться також документацію :meth:`loop.create_unix_connection`."

#: ../../library/asyncio-stream.rst:151 ../../library/asyncio-stream.rst:181
msgid "Availability"
msgstr ""

#: ../../library/asyncio-stream.rst:153
msgid ""
"Added the *ssl_handshake_timeout* parameter. The *path* parameter can now be"
" a :term:`path-like object`"
msgstr ""
"Додано параметр *ssl_handshake_timeout*. Параметр *path* тепер може бути "
":term:`path-like object`"

#: ../../library/asyncio-stream.rst:169
msgid "Start a Unix socket server."
msgstr "Запустіть сокет-сервер Unix."

#: ../../library/asyncio-stream.rst:171
msgid "Similar to :func:`start_server` but works with Unix sockets."
msgstr "Подібно до :func:`start_server`, але працює з сокетами Unix."

#: ../../library/asyncio-stream.rst:173
msgid "See also the documentation of :meth:`loop.create_unix_server`."
msgstr "Дивіться також документацію :meth:`loop.create_unix_server`."

#: ../../library/asyncio-stream.rst:183
msgid ""
"Added the *ssl_handshake_timeout* and *start_serving* parameters. The *path*"
" parameter can now be a :term:`path-like object`."
msgstr ""
"Додано параметри *ssl_handshake_timeout* і *start_serving*. Параметр *path* "
"тепер може бути :term:`path-like object`."

#: ../../library/asyncio-stream.rst:195
msgid "StreamReader"
msgstr "StreamReader"

#: ../../library/asyncio-stream.rst:199
msgid ""
"Represents a reader object that provides APIs to read data from the IO "
"stream. As an :term:`asynchronous iterable`, the object supports the "
":keyword:`async for` statement."
msgstr ""

#: ../../library/asyncio-stream.rst:203
msgid ""
"It is not recommended to instantiate *StreamReader* objects directly; use "
":func:`open_connection` and :func:`start_server` instead."
msgstr ""
"Не рекомендується безпосередньо створювати екземпляри об’єктів "
"*StreamReader*; замість цього використовуйте :func:`open_connection` і "
":func:`start_server`."

#: ../../library/asyncio-stream.rst:209
msgid "Acknowledge the EOF."
msgstr ""

#: ../../library/asyncio-stream.rst:213
msgid "Read up to *n* bytes from the stream."
msgstr ""

#: ../../library/asyncio-stream.rst:215
msgid ""
"If *n* is not provided or set to ``-1``, read until EOF, then return all "
"read :class:`bytes`. If EOF was received and the internal buffer is empty, "
"return an empty ``bytes`` object."
msgstr ""

#: ../../library/asyncio-stream.rst:220
msgid "If *n* is ``0``, return an empty ``bytes`` object immediately."
msgstr ""

#: ../../library/asyncio-stream.rst:222
msgid ""
"If *n* is positive, return at most *n* available ``bytes`` as soon as at "
"least 1 byte is available in the internal buffer. If EOF is received before "
"any byte is read, return an empty ``bytes`` object."
msgstr ""

#: ../../library/asyncio-stream.rst:229
msgid "Read one line, where \"line\" is a sequence of bytes ending with ``\\n``."
msgstr ""
"Прочитати один рядок, де \"рядок\" — це послідовність байтів, що "
"закінчуються на ``\\n``."

#: ../../library/asyncio-stream.rst:232
msgid ""
"If EOF is received and ``\\n`` was not found, the method returns partially "
"read data."
msgstr ""
"Якщо EOF отримано, а ``\\n`` не знайдено, метод повертає частково прочитані "
"дані."

#: ../../library/asyncio-stream.rst:235
msgid ""
"If EOF is received and the internal buffer is empty, return an empty "
"``bytes`` object."
msgstr ""
"Якщо EOF отримано, а внутрішній буфер порожній, поверніть порожній об’єкт "
"``bytes``."

#: ../../library/asyncio-stream.rst:240
msgid "Read exactly *n* bytes."
msgstr "Прочитайте рівно *n* байт."

#: ../../library/asyncio-stream.rst:242
msgid ""
"Raise an :exc:`IncompleteReadError` if EOF is reached before *n* can be "
"read.  Use the :attr:`IncompleteReadError.partial` attribute to get the "
"partially read data."
msgstr ""
"Викликати :exc:`IncompleteReadError`, якщо EOF досягнуто до того, як *n* "
"можна буде прочитати. Використовуйте атрибут "
":attr:`IncompleteReadError.partial`, щоб отримати частково прочитані дані."

#: ../../library/asyncio-stream.rst:248
msgid "Read data from the stream until *separator* is found."
msgstr "Читати дані з потоку, доки не буде знайдено *роздільник*."

#: ../../library/asyncio-stream.rst:250
msgid ""
"On success, the data and separator will be removed from the internal buffer "
"(consumed). Returned data will include the separator at the end."
msgstr ""
"У разі успіху дані та роздільник буде видалено з внутрішнього буфера "
"(використано). Повернуті дані включатимуть роздільник у кінці."

#: ../../library/asyncio-stream.rst:254
msgid ""
"If the amount of data read exceeds the configured stream limit, a "
":exc:`LimitOverrunError` exception is raised, and the data is left in the "
"internal buffer and can be read again."
msgstr ""
"Якщо обсяг зчитаних даних перевищує налаштований ліміт потоку, виникає "
"виняток :exc:`LimitOverrunError`, і дані залишаються у внутрішньому буфері "
"та можуть бути прочитані знову."

#: ../../library/asyncio-stream.rst:258
msgid ""
"If EOF is reached before the complete separator is found, an "
":exc:`IncompleteReadError` exception is raised, and the internal buffer is "
"reset.  The :attr:`IncompleteReadError.partial` attribute may contain a "
"portion of the separator."
msgstr ""
"Якщо EOF досягнуто до того, як знайдено повний роздільник, виникає виняток "
":exc:`IncompleteReadError`, і внутрішній буфер скидається. Атрибут "
":attr:`IncompleteReadError.partial` може містити частину роздільника."

#: ../../library/asyncio-stream.rst:263
msgid ""
"The *separator* may also be a tuple of separators. In this case the return "
"value will be the shortest possible that has any separator as the suffix. "
"For the purposes of :exc:`LimitOverrunError`, the shortest possible "
"separator is considered to be the one that matched."
msgstr ""

#: ../../library/asyncio-stream.rst:273
msgid "The *separator* parameter may now be a :class:`tuple` of separators."
msgstr ""

#: ../../library/asyncio-stream.rst:278
msgid ""
"Return ``True`` if the buffer is empty and :meth:`feed_eof` was called."
msgstr ""
"Повертає ``True``, якщо буфер порожній і було викликано :meth:`feed_eof`."

#: ../../library/asyncio-stream.rst:283
msgid "StreamWriter"
msgstr "StreamWriter"

#: ../../library/asyncio-stream.rst:287
msgid ""
"Represents a writer object that provides APIs to write data to the IO "
"stream."
msgstr ""
"Представляє об’єкт запису, який надає API для запису даних у потік вводу-"
"виводу."

#: ../../library/asyncio-stream.rst:290
msgid ""
"It is not recommended to instantiate *StreamWriter* objects directly; use "
":func:`open_connection` and :func:`start_server` instead."
msgstr ""
"Не рекомендується безпосередньо створювати екземпляри об’єктів "
"*StreamWriter*; замість цього використовуйте :func:`open_connection` і "
":func:`start_server`."

#: ../../library/asyncio-stream.rst:296
msgid ""
"The method attempts to write the *data* to the underlying socket "
"immediately. If that fails, the data is queued in an internal write buffer "
"until it can be sent."
msgstr ""
"Метод намагається негайно записати *дані* в основний сокет. Якщо це не "
"вдається, дані ставляться в чергу у внутрішній буфер запису, доки їх не буде"
" надіслано."

#: ../../library/asyncio-stream.rst:300 ../../library/asyncio-stream.rst:312
msgid "The method should be used along with the ``drain()`` method::"
msgstr "Цей метод слід використовувати разом із методом ``drain()``:"

#: ../../library/asyncio-stream.rst:302
msgid ""
"stream.write(data)\n"
"await stream.drain()"
msgstr ""

#: ../../library/asyncio-stream.rst:307
msgid ""
"The method writes a list (or any iterable) of bytes to the underlying socket"
" immediately. If that fails, the data is queued in an internal write buffer "
"until it can be sent."
msgstr ""
"Метод негайно записує список (або будь-яку ітерацію) байтів у базовий сокет."
" Якщо це не вдається, дані ставляться в чергу у внутрішній буфер запису, "
"доки їх не буде надіслано."

#: ../../library/asyncio-stream.rst:314
msgid ""
"stream.writelines(lines)\n"
"await stream.drain()"
msgstr ""

#: ../../library/asyncio-stream.rst:319
msgid "The method closes the stream and the underlying socket."
msgstr "Метод закриває потік і базовий сокет."

#: ../../library/asyncio-stream.rst:321
msgid ""
"The method should be used, though not mandatory, along with the "
"``wait_closed()`` method::"
msgstr ""

#: ../../library/asyncio-stream.rst:324
msgid ""
"stream.close()\n"
"await stream.wait_closed()"
msgstr ""

#: ../../library/asyncio-stream.rst:329
msgid ""
"Return ``True`` if the underlying transport supports the :meth:`write_eof` "
"method, ``False`` otherwise."
msgstr ""
"Повертає ``True``, якщо основний транспорт підтримує метод "
":meth:`write_eof`, ``False`` інакше."

#: ../../library/asyncio-stream.rst:334
msgid ""
"Close the write end of the stream after the buffered write data is flushed."
msgstr ""
"Закрийте кінець запису потоку після очищення буферизованих даних запису."

#: ../../library/asyncio-stream.rst:339
msgid "Return the underlying asyncio transport."
msgstr "Повернути базовий асинхронний транспорт."

#: ../../library/asyncio-stream.rst:343
msgid ""
"Access optional transport information; see "
":meth:`BaseTransport.get_extra_info` for details."
msgstr ""
"Доступ до додаткової транспортної інформації; подробиці див. "
":meth:`BaseTransport.get_extra_info`."

#: ../../library/asyncio-stream.rst:348
msgid ""
"Wait until it is appropriate to resume writing to the stream. Example::"
msgstr "Зачекайте, доки буде прийнятно продовжити запис у потік. Приклад::"

#: ../../library/asyncio-stream.rst:351
msgid ""
"writer.write(data)\n"
"await writer.drain()"
msgstr ""

#: ../../library/asyncio-stream.rst:354
msgid ""
"This is a flow control method that interacts with the underlying IO write "
"buffer.  When the size of the buffer reaches the high watermark, *drain()* "
"blocks until the size of the buffer is drained down to the low watermark and"
" writing can be resumed.  When there is nothing to wait for, the "
":meth:`drain` returns immediately."
msgstr ""
"Це метод керування потоком, який взаємодіє з базовим буфером запису вводу-"
"виводу. Коли розмір буфера досягає верхнього водяного знака, *drain()* "
"блокує, доки розмір буфера не зменшиться до низького водяного знака, і запис"
" можна буде відновити. Коли нема чого чекати, :meth:`drain` повертається "
"негайно."

#: ../../library/asyncio-stream.rst:364
msgid "Upgrade an existing stream-based connection to TLS."
msgstr ""

#: ../../library/asyncio-stream.rst:366
msgid "Parameters:"
msgstr "Параметри:"

#: ../../library/asyncio-stream.rst:368
msgid "*sslcontext*: a configured instance of :class:`~ssl.SSLContext`."
msgstr "*sslcontext*: налаштований екземпляр :class:`~ssl.SSLContext`."

#: ../../library/asyncio-stream.rst:370
msgid ""
"*server_hostname*: sets or overrides the host name that the target server's "
"certificate will be matched against."
msgstr ""
"*server_hostname*: встановлює або замінює ім’я хоста, з яким буде "
"зіставлятися сертифікат цільового сервера."

#: ../../library/asyncio-stream.rst:373
msgid ""
"*ssl_handshake_timeout* is the time in seconds to wait for the TLS handshake"
" to complete before aborting the connection.  ``60.0`` seconds if ``None`` "
"(default)."
msgstr ""

#: ../../library/asyncio-stream.rst:377
msgid ""
"*ssl_shutdown_timeout* is the time in seconds to wait for the SSL shutdown "
"to complete before aborting the connection. ``30.0`` seconds if ``None`` "
"(default)."
msgstr ""

#: ../../library/asyncio-stream.rst:389
msgid ""
"Return ``True`` if the stream is closed or in the process of being closed."
msgstr ""
"Повертає ``True``, якщо потік закрито або знаходиться в процесі закриття."

#: ../../library/asyncio-stream.rst:396
msgid "Wait until the stream is closed."
msgstr "Зачекайте, поки потік закриється."

#: ../../library/asyncio-stream.rst:398
msgid ""
"Should be called after :meth:`close` to wait until the underlying connection"
" is closed, ensuring that all data has been flushed before e.g. exiting the "
"program."
msgstr ""

#: ../../library/asyncio-stream.rst:406
msgid "Examples"
msgstr "Приклади"

#: ../../library/asyncio-stream.rst:411
msgid "TCP echo client using streams"
msgstr "TCP echo client використовує потоки"

#: ../../library/asyncio-stream.rst:413
msgid "TCP echo client using the :func:`asyncio.open_connection` function::"
msgstr ""
"TCP-клієнт відлуння за допомогою функції :func:`asyncio.open_connection`::"

#: ../../library/asyncio-stream.rst:437
msgid ""
"The :ref:`TCP echo client protocol "
"<asyncio_example_tcp_echo_client_protocol>` example uses the low-level "
":meth:`loop.create_connection` method."
msgstr ""
"У прикладі :ref:`TCP echo client protocol "
"<asyncio_example_tcp_echo_client_protocol>` використовується метод низького "
"рівня :meth:`loop.create_connection`."

#: ../../library/asyncio-stream.rst:444
msgid "TCP echo server using streams"
msgstr "Сервер відлуння TCP з використанням потоків"

#: ../../library/asyncio-stream.rst:446
msgid "TCP echo server using the :func:`asyncio.start_server` function::"
msgstr ""
"Сервер відлуння TCP за допомогою функції :func:`asyncio.start_server`::"

#: ../../library/asyncio-stream.rst:448
msgid ""
"import asyncio\n"
"\n"
"async def handle_echo(reader, writer):\n"
"    data = await reader.read(100)\n"
"    message = data.decode()\n"
"    addr = writer.get_extra_info('peername')\n"
"\n"
"    print(f\"Received {message!r} from {addr!r}\")\n"
"\n"
"    print(f\"Send: {message!r}\")\n"
"    writer.write(data)\n"
"    await writer.drain()\n"
"\n"
"    print(\"Close the connection\")\n"
"    writer.close()\n"
"    await writer.wait_closed()\n"
"\n"
"async def main():\n"
"    server = await asyncio.start_server(\n"
"        handle_echo, '127.0.0.1', 8888)\n"
"\n"
"    addrs = ', '.join(str(sock.getsockname()) for sock in server.sockets)\n"
"    print(f'Serving on {addrs}')\n"
"\n"
"    async with server:\n"
"        await server.serve_forever()\n"
"\n"
"asyncio.run(main())"
msgstr ""

#: ../../library/asyncio-stream.rst:480
msgid ""
"The :ref:`TCP echo server protocol "
"<asyncio_example_tcp_echo_server_protocol>` example uses the "
":meth:`loop.create_server` method."
msgstr ""
"У прикладі :ref:`TCP echo server protocol "
"<asyncio_example_tcp_echo_server_protocol>` використовується метод "
":meth:`loop.create_server`."

#: ../../library/asyncio-stream.rst:485
msgid "Get HTTP headers"
msgstr "Отримайте заголовки HTTP"

#: ../../library/asyncio-stream.rst:487
msgid ""
"Simple example querying HTTP headers of the URL passed on the command line::"
msgstr ""
"Простий приклад запиту HTTP-заголовків URL-адреси, переданої в командному "
"рядку::"

#: ../../library/asyncio-stream.rst:489
msgid ""
"import asyncio\n"
"import urllib.parse\n"
"import sys\n"
"\n"
"async def print_http_headers(url):\n"
"    url = urllib.parse.urlsplit(url)\n"
"    if url.scheme == 'https':\n"
"        reader, writer = await asyncio.open_connection(\n"
"            url.hostname, 443, ssl=True)\n"
"    else:\n"
"        reader, writer = await asyncio.open_connection(\n"
"            url.hostname, 80)\n"
"\n"
"    query = (\n"
"        f\"HEAD {url.path or '/'} HTTP/1.0\\r\\n\"\n"
"        f\"Host: {url.hostname}\\r\\n\"\n"
"        f\"\\r\\n\"\n"
"    )\n"
"\n"
"    writer.write(query.encode('latin-1'))\n"
"    while True:\n"
"        line = await reader.readline()\n"
"        if not line:\n"
"            break\n"
"\n"
"        line = line.decode('latin1').rstrip()\n"
"        if line:\n"
"            print(f'HTTP header> {line}')\n"
"\n"
"    # Ignore the body, close the socket\n"
"    writer.close()\n"
"    await writer.wait_closed()\n"
"\n"
"url = sys.argv[1]\n"
"asyncio.run(print_http_headers(url))"
msgstr ""

#: ../../library/asyncio-stream.rst:526
msgid "Usage::"
msgstr "Використання::"

#: ../../library/asyncio-stream.rst:528
msgid "python example.py http://example.com/path/page.html"
msgstr ""

#: ../../library/asyncio-stream.rst:530
msgid "or with HTTPS::"
msgstr "або з HTTPS::"

#: ../../library/asyncio-stream.rst:532
msgid "python example.py https://example.com/path/page.html"
msgstr ""

#: ../../library/asyncio-stream.rst:538
msgid "Register an open socket to wait for data using streams"
msgstr ""
"Зареєструйте відкритий сокет для очікування даних за допомогою потоків"

#: ../../library/asyncio-stream.rst:540
msgid ""
"Coroutine waiting until a socket receives data using the "
":func:`open_connection` function::"
msgstr ""
"Співпрограма очікує, доки сокет не отримає дані за допомогою функції "
":func:`open_connection`::"

#: ../../library/asyncio-stream.rst:543
msgid ""
"import asyncio\n"
"import socket\n"
"\n"
"async def wait_for_data():\n"
"    # Get a reference to the current event loop because\n"
"    # we want to access low-level APIs.\n"
"    loop = asyncio.get_running_loop()\n"
"\n"
"    # Create a pair of connected sockets.\n"
"    rsock, wsock = socket.socketpair()\n"
"\n"
"    # Register the open socket to wait for data.\n"
"    reader, writer = await asyncio.open_connection(sock=rsock)\n"
"\n"
"    # Simulate the reception of data from the network\n"
"    loop.call_soon(wsock.send, 'abc'.encode())\n"
"\n"
"    # Wait for data\n"
"    data = await reader.read(100)\n"
"\n"
"    # Got data, we are done: close the socket\n"
"    print(\"Received:\", data.decode())\n"
"    writer.close()\n"
"    await writer.wait_closed()\n"
"\n"
"    # Close the second socket\n"
"    wsock.close()\n"
"\n"
"asyncio.run(wait_for_data())"
msgstr ""

#: ../../library/asyncio-stream.rst:575
msgid ""
"The :ref:`register an open socket to wait for data using a protocol "
"<asyncio_example_create_connection>` example uses a low-level protocol and "
"the :meth:`loop.create_connection` method."
msgstr ""
"У прикладі :ref:`реєструвати відкритий сокет для очікування даних за "
"допомогою протоколу <asyncio_example_create_connection>` використовується "
"протокол низького рівня та метод :meth:`loop.create_connection`."

#: ../../library/asyncio-stream.rst:579
msgid ""
"The :ref:`watch a file descriptor for read events "
"<asyncio_example_watch_fd>` example uses the low-level "
":meth:`loop.add_reader` method to watch a file descriptor."
msgstr ""
"У прикладі :ref:`спостерігати за подіями читання файлового дескриптора "
"<asyncio_example_watch_fd>` використовується низькорівневий метод "
":meth:`loop.add_reader` для спостереження за файловим дескриптором."
