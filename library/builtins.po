# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Dmytro Kazanzhy, 2022
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-11-12 08:36+0000\n"
"PO-Revision-Date: 2021-06-28 00:56+0000\n"
"Last-Translator: Dmytro Kazanzhy, 2022\n"
"Language-Team: Ukrainian (https://app.transifex.com/python-doc/teams/5390/uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != 11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % 100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || (n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

#: ../../library/builtins.rst:2
msgid ":mod:`!builtins` --- Built-in objects"
msgstr ""

#: ../../library/builtins.rst:9
msgid ""
"This module provides direct access to all 'built-in' identifiers of Python; "
"for example, ``builtins.open`` is the full name for the built-in function "
":func:`open`."
msgstr ""

#: ../../library/builtins.rst:12
msgid ""
"This module is not normally accessed explicitly by most applications, but "
"can be useful in modules that provide objects with the same name as a built-"
"in value, but in which the built-in of that name is also needed.  For "
"example, in a module that wants to implement an :func:`open` function that "
"wraps the built-in :func:`open`, this module can be used directly::"
msgstr ""
"Більшість програм зазвичай не мають явного доступу до цього модуля, але він "
"може бути корисним у модулях, які надають об’єкти з тим же іменем, що й "
"вбудоване значення, але в яких також необхідне вбудоване ім’я. Наприклад, у "
"модулі, який хоче реалізувати функцію :func:`open`, яка обгортає вбудовану "
":func:`open`, цей модуль можна використовувати безпосередньо:"

#: ../../library/builtins.rst:18
msgid ""
"import builtins\n"
"\n"
"def open(path):\n"
"    f = builtins.open(path, 'r')\n"
"    return UpperCaser(f)\n"
"\n"
"class UpperCaser:\n"
"    '''Wrapper around a file that converts output to uppercase.'''\n"
"\n"
"    def __init__(self, f):\n"
"        self._f = f\n"
"\n"
"    def read(self, count=-1):\n"
"        return self._f.read(count).upper()\n"
"\n"
"    # ..."
msgstr ""

#: ../../library/builtins.rst:35
msgid ""
"As an implementation detail, most modules have the name ``__builtins__`` "
"made available as part of their globals.  The value of ``__builtins__`` is "
"normally either this module or the value of this module's "
":attr:`~object.__dict__` attribute. Since this is an implementation detail, "
"it may not be used by alternate implementations of Python."
msgstr ""
"Як деталь реалізації, більшість модулів мають назву ``__builtins__``, "
"доступну як частину їхніх глобальних елементів. Значення ``__builtins__`` "
"зазвичай є або цим модулем, або значенням атрибута :attr:`~object.__dict__` "
"цього модуля. Оскільки це деталь реалізації, вона не може використовуватися "
"альтернативними реалізаціями Python."

#: ../../library/builtins.rst:43
msgid ":ref:`built-in-consts`"
msgstr ""

#: ../../library/builtins.rst:44
msgid ":ref:`bltin-exceptions`"
msgstr ""

#: ../../library/builtins.rst:45
msgid ":ref:`built-in-funcs`"
msgstr ""

#: ../../library/builtins.rst:46
msgid ":ref:`bltin-types`"
msgstr ""
